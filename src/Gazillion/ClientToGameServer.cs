// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Gazillion {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ClientToGameServer {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageReadyForGameJoin__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReadyForGameJoin, global::Gazillion.NetMessageReadyForGameJoin.Builder> internal__static_Gazillion_NetMessageReadyForGameJoin__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePlayerSystemMetrics__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayerSystemMetrics, global::Gazillion.NetMessagePlayerSystemMetrics.Builder> internal__static_Gazillion_NetMessagePlayerSystemMetrics__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSyncTimeRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSyncTimeRequest, global::Gazillion.NetMessageSyncTimeRequest.Builder> internal__static_Gazillion_NetMessageSyncTimeRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetTimeDialation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetTimeDialation, global::Gazillion.NetMessageSetTimeDialation.Builder> internal__static_Gazillion_NetMessageSetTimeDialation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageIsRegionAvailable__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageIsRegionAvailable, global::Gazillion.NetMessageIsRegionAvailable.Builder> internal__static_Gazillion_NetMessageIsRegionAvailable__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUpdateAvatarState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUpdateAvatarState, global::Gazillion.NetMessageUpdateAvatarState.Builder> internal__static_Gazillion_NetMessageUpdateAvatarState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCellLoaded__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCellLoaded, global::Gazillion.NetMessageCellLoaded.Builder> internal__static_Gazillion_NetMessageCellLoaded__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTeleportAckResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTeleportAckResponse, global::Gazillion.NetMessageTeleportAckResponse.Builder> internal__static_Gazillion_NetMessageTeleportAckResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAdminCommand__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAdminCommand, global::Gazillion.NetMessageAdminCommand.Builder> internal__static_Gazillion_NetMessageAdminCommand__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTryActivatePower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryActivatePower, global::Gazillion.NetMessageTryActivatePower.Builder> internal__static_Gazillion_NetMessageTryActivatePower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePowerRelease__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerRelease, global::Gazillion.NetMessagePowerRelease.Builder> internal__static_Gazillion_NetMessagePowerRelease__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTryCancelPower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryCancelPower, global::Gazillion.NetMessageTryCancelPower.Builder> internal__static_Gazillion_NetMessageTryCancelPower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTryCancelActivePower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryCancelActivePower, global::Gazillion.NetMessageTryCancelActivePower.Builder> internal__static_Gazillion_NetMessageTryCancelActivePower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageContinuousPowerUpdateToServer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageContinuousPowerUpdateToServer, global::Gazillion.NetMessageContinuousPowerUpdateToServer.Builder> internal__static_Gazillion_NetMessageContinuousPowerUpdateToServer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCancelPendingAction__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCancelPendingAction, global::Gazillion.NetMessageCancelPendingAction.Builder> internal__static_Gazillion_NetMessageCancelPendingAction__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageConfirmWeaponMissingStatus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageConfirmWeaponMissingStatus, global::Gazillion.NetMessageConfirmWeaponMissingStatus.Builder> internal__static_Gazillion_NetMessageConfirmWeaponMissingStatus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStartAIDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartAIDebugUI, global::Gazillion.NetMessageStartAIDebugUI.Builder> internal__static_Gazillion_NetMessageStartAIDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStopAIDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopAIDebugUI, global::Gazillion.NetMessageStopAIDebugUI.Builder> internal__static_Gazillion_NetMessageStopAIDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStartMissionDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartMissionDebugUI, global::Gazillion.NetMessageStartMissionDebugUI.Builder> internal__static_Gazillion_NetMessageStartMissionDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStopMissionDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopMissionDebugUI, global::Gazillion.NetMessageStopMissionDebugUI.Builder> internal__static_Gazillion_NetMessageStopMissionDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStartPropertiesDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartPropertiesDebugUI, global::Gazillion.NetMessageStartPropertiesDebugUI.Builder> internal__static_Gazillion_NetMessageStartPropertiesDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStopPropertiesDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopPropertiesDebugUI, global::Gazillion.NetMessageStopPropertiesDebugUI.Builder> internal__static_Gazillion_NetMessageStopPropertiesDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStartConditionsDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartConditionsDebugUI, global::Gazillion.NetMessageStartConditionsDebugUI.Builder> internal__static_Gazillion_NetMessageStartConditionsDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStopConditionsDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopConditionsDebugUI, global::Gazillion.NetMessageStopConditionsDebugUI.Builder> internal__static_Gazillion_NetMessageStopConditionsDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStartPowersDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartPowersDebugUI, global::Gazillion.NetMessageStartPowersDebugUI.Builder> internal__static_Gazillion_NetMessageStartPowersDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStopPowersDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopPowersDebugUI, global::Gazillion.NetMessageStopPowersDebugUI.Builder> internal__static_Gazillion_NetMessageStopPowersDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePing__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePing, global::Gazillion.NetMessagePing.Builder> internal__static_Gazillion_NetMessagePing__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePickupInteraction__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePickupInteraction, global::Gazillion.NetMessagePickupInteraction.Builder> internal__static_Gazillion_NetMessagePickupInteraction__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTryInventoryMove__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryInventoryMove, global::Gazillion.NetMessageTryInventoryMove.Builder> internal__static_Gazillion_NetMessageTryInventoryMove__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTryMoveCraftingResultsToGeneral__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryMoveCraftingResultsToGeneral, global::Gazillion.NetMessageTryMoveCraftingResultsToGeneral.Builder> internal__static_Gazillion_NetMessageTryMoveCraftingResultsToGeneral__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageInventoryTrashItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryTrashItem, global::Gazillion.NetMessageInventoryTrashItem.Builder> internal__static_Gazillion_NetMessageInventoryTrashItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageThrowInteraction__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageThrowInteraction, global::Gazillion.NetMessageThrowInteraction.Builder> internal__static_Gazillion_NetMessageThrowInteraction__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePerformPreInteractPower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePerformPreInteractPower, global::Gazillion.NetMessagePerformPreInteractPower.Builder> internal__static_Gazillion_NetMessagePerformPreInteractPower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUseInteractableObject__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUseInteractableObject, global::Gazillion.NetMessageUseInteractableObject.Builder> internal__static_Gazillion_NetMessageUseInteractableObject__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTryCraft__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryCraft, global::Gazillion.NetMessageTryCraft.Builder> internal__static_Gazillion_NetMessageTryCraft__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUseWaypoint__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUseWaypoint, global::Gazillion.NetMessageUseWaypoint.Builder> internal__static_Gazillion_NetMessageUseWaypoint__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDebugAcquireAndSwitchToAvatar__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDebugAcquireAndSwitchToAvatar, global::Gazillion.NetMessageDebugAcquireAndSwitchToAvatar.Builder> internal__static_Gazillion_NetMessageDebugAcquireAndSwitchToAvatar__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSwitchAvatar__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSwitchAvatar, global::Gazillion.NetMessageSwitchAvatar.Builder> internal__static_Gazillion_NetMessageSwitchAvatar__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAssignHotkey__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAssignHotkey, global::Gazillion.NetMessageAssignHotkey.Builder> internal__static_Gazillion_NetMessageAssignHotkey__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUnassignHotkey__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnassignHotkey, global::Gazillion.NetMessageUnassignHotkey.Builder> internal__static_Gazillion_NetMessageUnassignHotkey__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAssignAbility__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAssignAbility, global::Gazillion.NetMessageAssignAbility.Builder> internal__static_Gazillion_NetMessageAssignAbility__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUnassignAbility__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnassignAbility, global::Gazillion.NetMessageUnassignAbility.Builder> internal__static_Gazillion_NetMessageUnassignAbility__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSwapAbilities__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSwapAbilities, global::Gazillion.NetMessageSwapAbilities.Builder> internal__static_Gazillion_NetMessageSwapAbilities__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageModCommitTemporary__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageModCommitTemporary, global::Gazillion.NetMessageModCommitTemporary.Builder> internal__static_Gazillion_NetMessageModCommitTemporary__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageModReset__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageModReset, global::Gazillion.NetMessageModReset.Builder> internal__static_Gazillion_NetMessageModReset__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePowerPointAllocationCommit__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerPointAllocationCommit, global::Gazillion.NetMessagePowerPointAllocationCommit.Builder> internal__static_Gazillion_NetMessagePowerPointAllocationCommit__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestDeathRelease__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestDeathRelease, global::Gazillion.NetMessageRequestDeathRelease.Builder> internal__static_Gazillion_NetMessageRequestDeathRelease__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestResurrectDecline__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestResurrectDecline, global::Gazillion.NetMessageRequestResurrectDecline.Builder> internal__static_Gazillion_NetMessageRequestResurrectDecline__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestResurrectAvatar__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestResurrectAvatar, global::Gazillion.NetMessageRequestResurrectAvatar.Builder> internal__static_Gazillion_NetMessageRequestResurrectAvatar__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageReturnToHub__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReturnToHub, global::Gazillion.NetMessageReturnToHub.Builder> internal__static_Gazillion_NetMessageReturnToHub__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestStoryWarp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestStoryWarp, global::Gazillion.NetMessageRequestStoryWarp.Builder> internal__static_Gazillion_NetMessageRequestStoryWarp__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageInvitePlayer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInvitePlayer, global::Gazillion.NetMessageInvitePlayer.Builder> internal__static_Gazillion_NetMessageInvitePlayer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestPartyJoinPortal__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestPartyJoinPortal, global::Gazillion.NetMessageRequestPartyJoinPortal.Builder> internal__static_Gazillion_NetMessageRequestPartyJoinPortal__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDeclineGroupInvite__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDeclineGroupInvite, global::Gazillion.NetMessageDeclineGroupInvite.Builder> internal__static_Gazillion_NetMessageDeclineGroupInvite__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLeaveGroup__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaveGroup, global::Gazillion.NetMessageLeaveGroup.Builder> internal__static_Gazillion_NetMessageLeaveGroup__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageChangeGroupLeader__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChangeGroupLeader, global::Gazillion.NetMessageChangeGroupLeader.Builder> internal__static_Gazillion_NetMessageChangeGroupLeader__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBootPlayer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBootPlayer, global::Gazillion.NetMessageBootPlayer.Builder> internal__static_Gazillion_NetMessageBootPlayer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDisbandGroup__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDisbandGroup, global::Gazillion.NetMessageDisbandGroup.Builder> internal__static_Gazillion_NetMessageDisbandGroup__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMatchQueueListRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchQueueListRequest, global::Gazillion.NetMessageMatchQueueListRequest.Builder> internal__static_Gazillion_NetMessageMatchQueueListRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMatchQueueRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchQueueRequest, global::Gazillion.NetMessageMatchQueueRequest.Builder> internal__static_Gazillion_NetMessageMatchQueueRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMatchStatisticsRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchStatisticsRequest, global::Gazillion.NetMessageMatchStatisticsRequest.Builder> internal__static_Gazillion_NetMessageMatchStatisticsRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMatchInviteResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchInviteResponse, global::Gazillion.NetMessageMatchInviteResponse.Builder> internal__static_Gazillion_NetMessageMatchInviteResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDuelInvite__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDuelInvite, global::Gazillion.NetMessageDuelInvite.Builder> internal__static_Gazillion_NetMessageDuelInvite__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDuelAccept__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDuelAccept, global::Gazillion.NetMessageDuelAccept.Builder> internal__static_Gazillion_NetMessageDuelAccept__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDuelCancel__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDuelCancel, global::Gazillion.NetMessageDuelCancel.Builder> internal__static_Gazillion_NetMessageDuelCancel__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMetaGameUpdateNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMetaGameUpdateNotification, global::Gazillion.NetMessageMetaGameUpdateNotification.Builder> internal__static_Gazillion_NetMessageMetaGameUpdateNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageChat__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChat, global::Gazillion.NetMessageChat.Builder> internal__static_Gazillion_NetMessageChat__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTell__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTell, global::Gazillion.NetMessageTell.Builder> internal__static_Gazillion_NetMessageTell__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageReportPlayer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReportPlayer, global::Gazillion.NetMessageReportPlayer.Builder> internal__static_Gazillion_NetMessageReportPlayer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGetCatalog__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGetCatalog, global::Gazillion.NetMessageGetCatalog.Builder> internal__static_Gazillion_NetMessageGetCatalog__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGetCurrencyBalance__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGetCurrencyBalance, global::Gazillion.NetMessageGetCurrencyBalance.Builder> internal__static_Gazillion_NetMessageGetCurrencyBalance__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBuyItemFromCatalog__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBuyItemFromCatalog, global::Gazillion.NetMessageBuyItemFromCatalog.Builder> internal__static_Gazillion_NetMessageBuyItemFromCatalog__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_EntityPreviewerEnum__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.EntityPreviewerEnum, global::Gazillion.EntityPreviewerEnum.Builder> internal__static_Gazillion_EntityPreviewerEnum__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityPreviewerNewTargets__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerNewTargets, global::Gazillion.NetMessageEntityPreviewerNewTargets.Builder> internal__static_Gazillion_NetMessageEntityPreviewerNewTargets__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityPreviewerClearTargets__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerClearTargets, global::Gazillion.NetMessageEntityPreviewerClearTargets.Builder> internal__static_Gazillion_NetMessageEntityPreviewerClearTargets__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityPreviewerSetTargetRef__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerSetTargetRef, global::Gazillion.NetMessageEntityPreviewerSetTargetRef.Builder> internal__static_Gazillion_NetMessageEntityPreviewerSetTargetRef__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityPreviewerActivatePower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerActivatePower, global::Gazillion.NetMessageEntityPreviewerActivatePower.Builder> internal__static_Gazillion_NetMessageEntityPreviewerActivatePower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityPreviewerAddTarget__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerAddTarget, global::Gazillion.NetMessageEntityPreviewerAddTarget.Builder> internal__static_Gazillion_NetMessageEntityPreviewerAddTarget__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityPreviewerSetEntityState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerSetEntityState, global::Gazillion.NetMessageEntityPreviewerSetEntityState.Builder> internal__static_Gazillion_NetMessageEntityPreviewerSetEntityState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityPreviewerApplyConditions__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerApplyConditions, global::Gazillion.NetMessageEntityPreviewerApplyConditions.Builder> internal__static_Gazillion_NetMessageEntityPreviewerApplyConditions__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCreateNewPlayerWithSelectedStartingAvatar__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCreateNewPlayerWithSelectedStartingAvatar, global::Gazillion.NetMessageCreateNewPlayerWithSelectedStartingAvatar.Builder> internal__static_Gazillion_NetMessageCreateNewPlayerWithSelectedStartingAvatar__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageOnKioskStartButtonPressed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnKioskStartButtonPressed, global::Gazillion.NetMessageOnKioskStartButtonPressed.Builder> internal__static_Gazillion_NetMessageOnKioskStartButtonPressed__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageNotifyFullscreenMovieFinished__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageNotifyFullscreenMovieFinished, global::Gazillion.NetMessageNotifyFullscreenMovieFinished.Builder> internal__static_Gazillion_NetMessageNotifyFullscreenMovieFinished__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBotSetLevel__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotSetLevel, global::Gazillion.NetMessageBotSetLevel.Builder> internal__static_Gazillion_NetMessageBotSetLevel__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBotGodMode__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotGodMode, global::Gazillion.NetMessageBotGodMode.Builder> internal__static_Gazillion_NetMessageBotGodMode__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBotPickAvatar__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotPickAvatar, global::Gazillion.NetMessageBotPickAvatar.Builder> internal__static_Gazillion_NetMessageBotPickAvatar__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBotRegionChange__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotRegionChange, global::Gazillion.NetMessageBotRegionChange.Builder> internal__static_Gazillion_NetMessageBotRegionChange__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBotWarpAreaNext__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotWarpAreaNext, global::Gazillion.NetMessageBotWarpAreaNext.Builder> internal__static_Gazillion_NetMessageBotWarpAreaNext__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBotLootGive__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotLootGive, global::Gazillion.NetMessageBotLootGive.Builder> internal__static_Gazillion_NetMessageBotLootGive__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBotSetPvPFaction__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotSetPvPFaction, global::Gazillion.NetMessageBotSetPvPFaction.Builder> internal__static_Gazillion_NetMessageBotSetPvPFaction__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBotPvPQueue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotPvPQueue, global::Gazillion.NetMessageBotPvPQueue.Builder> internal__static_Gazillion_NetMessageBotPvPQueue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGetTrackerReport__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGetTrackerReport, global::Gazillion.NetMessageGetTrackerReport.Builder> internal__static_Gazillion_NetMessageGetTrackerReport__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePlayKismetSeqDone__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayKismetSeqDone, global::Gazillion.NetMessagePlayKismetSeqDone.Builder> internal__static_Gazillion_NetMessagePlayKismetSeqDone__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageVerifyFailedForRepId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVerifyFailedForRepId, global::Gazillion.NetMessageVerifyFailedForRepId.Builder> internal__static_Gazillion_NetMessageVerifyFailedForRepId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGracefulDisconnect__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGracefulDisconnect, global::Gazillion.NetMessageGracefulDisconnect.Builder> internal__static_Gazillion_NetMessageGracefulDisconnect__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestStartNewGame__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestStartNewGame, global::Gazillion.NetMessageRequestStartNewGame.Builder> internal__static_Gazillion_NetMessageRequestStartNewGame__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetDialogTarget__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetDialogTarget, global::Gazillion.NetMessageSetDialogTarget.Builder> internal__static_Gazillion_NetMessageSetDialogTarget__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageVendorRequestBuyItemFrom__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRequestBuyItemFrom, global::Gazillion.NetMessageVendorRequestBuyItemFrom.Builder> internal__static_Gazillion_NetMessageVendorRequestBuyItemFrom__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageVendorRequestSellItemTo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRequestSellItemTo, global::Gazillion.NetMessageVendorRequestSellItemTo.Builder> internal__static_Gazillion_NetMessageVendorRequestSellItemTo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageVendorRequestDonateItemTo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRequestDonateItemTo, global::Gazillion.NetMessageVendorRequestDonateItemTo.Builder> internal__static_Gazillion_NetMessageVendorRequestDonateItemTo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageVendorRequestRefresh__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRequestRefresh, global::Gazillion.NetMessageVendorRequestRefresh.Builder> internal__static_Gazillion_NetMessageVendorRequestRefresh__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTryModifyCommunityMemberCircle__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryModifyCommunityMemberCircle, global::Gazillion.NetMessageTryModifyCommunityMemberCircle.Builder> internal__static_Gazillion_NetMessageTryModifyCommunityMemberCircle__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGuildMessageToPlayerManager__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGuildMessageToPlayerManager, global::Gazillion.NetMessageGuildMessageToPlayerManager.Builder> internal__static_Gazillion_NetMessageGuildMessageToPlayerManager__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetShowTips__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetShowTips, global::Gazillion.NetMessageSetShowTips.Builder> internal__static_Gazillion_NetMessageSetShowTips__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetTipSeen__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetTipSeen, global::Gazillion.NetMessageSetTipSeen.Builder> internal__static_Gazillion_NetMessageSetTipSeen__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageResetSeenTips__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageResetSeenTips, global::Gazillion.NetMessageResetSeenTips.Builder> internal__static_Gazillion_NetMessageResetSeenTips__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTryMoveInventoryContentsToGeneral__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryMoveInventoryContentsToGeneral, global::Gazillion.NetMessageTryMoveInventoryContentsToGeneral.Builder> internal__static_Gazillion_NetMessageTryMoveInventoryContentsToGeneral__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetPlayerGameplayOptions__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetPlayerGameplayOptions, global::Gazillion.NetMessageSetPlayerGameplayOptions.Builder> internal__static_Gazillion_NetMessageSetPlayerGameplayOptions__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTeleportToPartyMember__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTeleportToPartyMember, global::Gazillion.NetMessageTeleportToPartyMember.Builder> internal__static_Gazillion_NetMessageTeleportToPartyMember__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ClientToGameServer() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhDbGllbnRUb0dhbWVTZXJ2ZXIucHJvdG8SCUdhemlsbGlvbhoVR2F6aWxs", 
            "aW9uQ29tbW9uLnByb3RvGhRDb21tb25NZXNzYWdlcy5wcm90bxoQQ2hhdENv", 
            "bW1vbi5wcm90bxoLR3VpbGQucHJvdG8ilgIKGk5ldE1lc3NhZ2VSZWFkeUZv", 
            "ckdhbWVKb2luEh4KCnBsYXllck5hbWUYASACKAlSCnBsYXllck5hbWUSPwoZ", 
            "d2lwZXNEYXRhSWZNaXNtYXRjaGVkSW5EYhgDIAIoBToBMFIZd2lwZXNEYXRh", 
            "SWZNaXNtYXRjaGVkSW5EYhJBChh3aXBlUGxheWVyUmVjb3Jkc09uTG9naW4Y", 
            "AiABKAg6BWZhbHNlUhh3aXBlUGxheWVyUmVjb3Jkc09uTG9naW4SKAoPZG9t", 
            "YWluTG9naW5OYW1lGAQgASgJUg9kb21haW5Mb2dpbk5hbWUSKgoQcGxheWVy", 
            "SW1wb3J0RGF0YRgFIAEoDFIQcGxheWVySW1wb3J0RGF0YSKXAwodTmV0TWVz", 
            "c2FnZVBsYXllclN5c3RlbU1ldHJpY3MSKgoOY29tcGF0TGV2ZWxDcHUYASAC", 
            "KAU6Ai0xUg5jb21wYXRMZXZlbENwdRIqCg5jb21wYXRMZXZlbEdwdRgCIAIo", 
            "BToCLTFSDmNvbXBhdExldmVsR3B1EjYKFGNvbXBhdExldmVsQ29tcG9zaXRl", 
            "GAMgAigFOgItMVIUY29tcGF0TGV2ZWxDb21wb3NpdGUSFgoGb3NOYW1lGAQg", 
            "ASgJUgZvc05hbWUSGAoHY3B1TmFtZRgFIAEoCVIHY3B1TmFtZRIYCgdyYW1O", 
            "YW1lGAYgASgJUgdyYW1OYW1lEiwKEWRpc3BsYXlEZXZpY2VOYW1lGAcgASgJ", 
            "UhFkaXNwbGF5RGV2aWNlTmFtZRIyChRkaXNwbGF5RGV2aWNlRHVhbEdQVRgI", 
            "IAEoCFIUZGlzcGxheURldmljZUR1YWxHUFUSOAoXZGlzcGxheURldmljZURy", 
            "aXZlckRhdGUYCSABKAlSF2Rpc3BsYXlEZXZpY2VEcml2ZXJEYXRlInsKGU5l", 
            "dE1lc3NhZ2VTeW5jVGltZVJlcXVlc3QSLgoSZ2FtZVRpbWVDbGllbnRTZW50", 
            "GAEgAigDUhJnYW1lVGltZUNsaWVudFNlbnQSLgoSZGF0ZVRpbWVDbGllbnRT", 
            "ZW50GAIgAigDUhJkYXRlVGltZUNsaWVudFNlbnQisgEKGk5ldE1lc3NhZ2VT", 
            "ZXRUaW1lRGlhbGF0aW9uEjoKGGdhbWVUaW1lRGlhbGF0aW9uU3RhcnRlZBgB", 
            "IAIoA1IYZ2FtZVRpbWVEaWFsYXRpb25TdGFydGVkEjoKGGRhdGVUaW1lRGlh", 
            "bGF0aW9uU3RhcnRlZBgCIAIoA1IYZGF0ZVRpbWVEaWFsYXRpb25TdGFydGVk", 
            "EhwKCWRpYWxhdGlvbhgDIAIoAlIJZGlhbGF0aW9uImkKG05ldE1lc3NhZ2VJ", 
            "c1JlZ2lvbkF2YWlsYWJsZRIoCg9yZWdpb25Qcm90b3R5cGUYASACKARSD3Jl", 
            "Z2lvblByb3RvdHlwZRIgCgtpc0F2YWlsYWJsZRgCIAIoCFILaXNBdmFpbGFi", 
            "bGUingIKG05ldE1lc3NhZ2VVcGRhdGVBdmF0YXJTdGF0ZRIaCghpZEF2YXRh", 
            "chgBIAIoBFIIaWRBdmF0YXISNgoIcG9zaXRpb24YAiACKAsyGi5HYXppbGxp", 
            "b24uTmV0U3RydWN0UG9pbnQzUghwb3NpdGlvbhI8CgtvcmllbnRhdGlvbhgD", 
            "IAIoCzIaLkdhemlsbGlvbi5OZXRTdHJ1Y3RQb2ludDNSC29yaWVudGF0aW9u", 
            "Ek0KD2xvY29tb3Rpb25zdGF0ZRgEIAEoCzIjLkdhemlsbGlvbi5OZXRTdHJ1", 
            "Y3RMb2NvbW90aW9uU3RhdGVSD2xvY29tb3Rpb25zdGF0ZRIeCgppc1RlbGVw", 
            "b3J0GAUgASgIUgppc1RlbGVwb3J0IkoKFE5ldE1lc3NhZ2VDZWxsTG9hZGVk", 
            "EhYKBmNlbGxJZBgBIAIoDVIGY2VsbElkEhoKCHJlZ2lvbklkGAIgAigEUghy", 
            "ZWdpb25JZCI3Ch1OZXRNZXNzYWdlVGVsZXBvcnRBY2tSZXNwb25zZRIWCgZh", 
            "Y2tzZXEYASACKA1SBmFja3NlcSIyChZOZXRNZXNzYWdlQWRtaW5Db21tYW5k", 
            "EhgKB2NvbW1hbmQYASACKAlSB2NvbW1hbmQi+AIKGk5ldE1lc3NhZ2VUcnlB", 
            "Y3RpdmF0ZVBvd2VyEiIKDGlkVXNlckVudGl0eRgBIAIoBFIMaWRVc2VyRW50", 
            "aXR5EioKEHBvd2VyUHJvdG90eXBlSWQYAiACKARSEHBvd2VyUHJvdG90eXBl", 
            "SWQSJgoOaWRUYXJnZXRFbnRpdHkYAyABKARSDmlkVGFyZ2V0RW50aXR5EkIK", 
            "DnRhcmdldFBvc2l0aW9uGAQgASgLMhouR2F6aWxsaW9uLk5ldFN0cnVjdFBv", 
            "aW50M1IOdGFyZ2V0UG9zaXRpb24SJAoNbW92ZW1lbnRTcGVlZBgFIAEoAlIN", 
            "bW92ZW1lbnRTcGVlZBImCg5tb3ZlbWVudFRpbWVNUxgGIAEoBFIObW92ZW1l", 
            "bnRUaW1lTVMSLAoRbWlzc2lsZVJhbmRvbVNlZWQYByABKA1SEW1pc3NpbGVS", 
            "YW5kb21TZWVkEiIKDGl0ZW1Tb3VyY2VJZBgIIAEoBFIMaXRlbVNvdXJjZUlk", 
            "ItQBChZOZXRNZXNzYWdlUG93ZXJSZWxlYXNlEiIKDGlkVXNlckVudGl0eRgB", 
            "IAIoBFIMaWRVc2VyRW50aXR5EioKEHBvd2VyUHJvdG90eXBlSWQYAiACKARS", 
            "EHBvd2VyUHJvdG90eXBlSWQSJgoOaWRUYXJnZXRFbnRpdHkYAyABKARSDmlk", 
            "VGFyZ2V0RW50aXR5EkIKDnRhcmdldFBvc2l0aW9uGAQgASgLMhouR2F6aWxs", 
            "aW9uLk5ldFN0cnVjdFBvaW50M1IOdGFyZ2V0UG9zaXRpb24ikAEKGE5ldE1l", 
            "c3NhZ2VUcnlDYW5jZWxQb3dlchIiCgxpZFVzZXJFbnRpdHkYASACKARSDGlk", 
            "VXNlckVudGl0eRIqChBwb3dlclByb3RvdHlwZUlkGAIgAigEUhBwb3dlclBy", 
            "b3RvdHlwZUlkEiQKDWVuZFBvd2VyRmxhZ3MYAyACKA1SDWVuZFBvd2VyRmxh", 
            "Z3MiRAoeTmV0TWVzc2FnZVRyeUNhbmNlbEFjdGl2ZVBvd2VyEiIKDGlkVXNl", 
            "ckVudGl0eRgBIAIoBFIMaWRVc2VyRW50aXR5IsEBCidOZXRNZXNzYWdlQ29u", 
            "dGludW91c1Bvd2VyVXBkYXRlVG9TZXJ2ZXISKgoQcG93ZXJQcm90b3R5cGVJ", 
            "ZBgBIAIoBFIQcG93ZXJQcm90b3R5cGVJZBImCg5pZFRhcmdldEVudGl0eRgC", 
            "IAEoBFIOaWRUYXJnZXRFbnRpdHkSQgoOdGFyZ2V0UG9zaXRpb24YAyABKAsy", 
            "Gi5HYXppbGxpb24uTmV0U3RydWN0UG9pbnQzUg50YXJnZXRQb3NpdGlvbiIf", 
            "Ch1OZXRNZXNzYWdlQ2FuY2VsUGVuZGluZ0FjdGlvbiJACiROZXRNZXNzYWdl", 
            "Q29uZmlybVdlYXBvbk1pc3NpbmdTdGF0dXMSGAoHaWRPd25lchgBIAIoBFIH", 
            "aWRPd25lciI8ChhOZXRNZXNzYWdlU3RhcnRBSURlYnVnVUkSIAoLaWRUYXJn", 
            "ZXROUEMYASACKARSC2lkVGFyZ2V0TlBDIjsKF05ldE1lc3NhZ2VTdG9wQUlE", 
            "ZWJ1Z1VJEiAKC2lkVGFyZ2V0TlBDGAEgAigEUgtpZFRhcmdldE5QQyK1AQod", 
            "TmV0TWVzc2FnZVN0YXJ0TWlzc2lvbkRlYnVnVUkSJAoNaWRUYXJnZXRBZ2Vu", 
            "dBgBIAIoBFINaWRUYXJnZXRBZ2VudBI0ChVtaXNzaW9uUHJvdG90eXBlUmVm", 
            "SWQYAiACKARSFW1pc3Npb25Qcm90b3R5cGVSZWZJZBI4ChdtaXNzaW9uTGlz", 
            "dE1hdGNoUGF0dGVybhgDIAIoCVIXbWlzc2lvbkxpc3RNYXRjaFBhdHRlcm4i", 
            "RAocTmV0TWVzc2FnZVN0b3BNaXNzaW9uRGVidWdVSRIkCg1pZFRhcmdldEFn", 
            "ZW50GAEgAigEUg1pZFRhcmdldEFnZW50IkoKIE5ldE1lc3NhZ2VTdGFydFBy", 
            "b3BlcnRpZXNEZWJ1Z1VJEiYKDmlkVGFyZ2V0RW50aXR5GAEgAigEUg5pZFRh", 
            "cmdldEVudGl0eSJJCh9OZXRNZXNzYWdlU3RvcFByb3BlcnRpZXNEZWJ1Z1VJ", 
            "EiYKDmlkVGFyZ2V0RW50aXR5GAEgAigEUg5pZFRhcmdldEVudGl0eSJKCiBO", 
            "ZXRNZXNzYWdlU3RhcnRDb25kaXRpb25zRGVidWdVSRImCg5pZFRhcmdldEVu", 
            "dGl0eRgBIAIoBFIOaWRUYXJnZXRFbnRpdHkiSQofTmV0TWVzc2FnZVN0b3BD", 
            "b25kaXRpb25zRGVidWdVSRImCg5pZFRhcmdldEVudGl0eRgBIAIoBFIOaWRU", 
            "YXJnZXRFbnRpdHkiRgocTmV0TWVzc2FnZVN0YXJ0UG93ZXJzRGVidWdVSRIm", 
            "Cg5pZFRhcmdldEVudGl0eRgBIAIoBFIOaWRUYXJnZXRFbnRpdHkiRQobTmV0", 
            "TWVzc2FnZVN0b3BQb3dlcnNEZWJ1Z1VJEiYKDmlkVGFyZ2V0RW50aXR5GAEg", 
            "AigEUg5pZFRhcmdldEVudGl0eSLmAwoOTmV0TWVzc2FnZVBpbmcSJAoNZGlz", 
            "cGxheU91dHB1dBgBIAIoCFINZGlzcGxheU91dHB1dBImCg5zZW5kQ2xpZW50", 
            "VGltZRgCIAIoBFIOc2VuZENsaWVudFRpbWUSIgoMc2VuZEdhbWVUaW1lGAMg", 
            "ASgEUgxzZW5kR2FtZVRpbWUSPgoacmVxdWVzdE5ldFJlY2VpdmVkR2FtZVRp", 
            "bWUYBCABKARSGnJlcXVlc3ROZXRSZWNlaXZlZEdhbWVUaW1lEiwKEWxhc3RD", 
            "bGllbnRMYXRlbmN5GAUgASgEUhFsYXN0Q2xpZW50TGF0ZW5jeRIYCgdsYXN0", 
            "RnBzGAYgASgCUgdsYXN0RnBzEigKD3JlZ2lvblByb3RvdHlwZRgHIAEoBFIP", 
            "cmVnaW9uUHJvdG90eXBlEhoKCGNwdWxldmVsGAggASgNUghjcHVsZXZlbBIa", 
            "CghncHVsZXZlbBgJIAEoDVIIZ3B1bGV2ZWwSJgoOY29tcG9zaXRlbGV2ZWwY", 
            "CiABKA1SDmNvbXBvc2l0ZWxldmVsEhYKBm1pbkZwcxgLIAEoAlIGbWluRnBz", 
            "EjgKCW1pbkZwc1BvcxgMIAEoCzIaLkdhemlsbGlvbi5OZXRTdHJ1Y3RQb2lu", 
            "dDNSCW1pbkZwc1BvcyJ1ChtOZXRNZXNzYWdlUGlja3VwSW50ZXJhY3Rpb24S", 
            "GgoIaWRUYXJnZXQYASACKARSCGlkVGFyZ2V0EjoKGHVzZUludGVyYWN0RmFs", 
            "bGJhY2tSYW5nZRgCIAEoCFIYdXNlSW50ZXJhY3RGYWxsYmFja1JhbmdlIrAB", 
            "ChpOZXRNZXNzYWdlVHJ5SW52ZW50b3J5TW92ZRIWCgZpdGVtSWQYASACKARS", 
            "Bml0ZW1JZBIuChJ0b0ludmVudG9yeU93bmVySWQYAiACKARSEnRvSW52ZW50", 
            "b3J5T3duZXJJZBIyChR0b0ludmVudG9yeVByb3RvdHlwZRgDIAIoBFIUdG9J", 
            "bnZlbnRvcnlQcm90b3R5cGUSFgoGdG9TbG90GAQgAigNUgZ0b1Nsb3QiKwop", 
            "TmV0TWVzc2FnZVRyeU1vdmVDcmFmdGluZ1Jlc3VsdHNUb0dlbmVyYWwiNgoc", 
            "TmV0TWVzc2FnZUludmVudG9yeVRyYXNoSXRlbRIWCgZpdGVtSWQYASACKARS", 
            "Bml0ZW1JZCI4ChpOZXRNZXNzYWdlVGhyb3dJbnRlcmFjdGlvbhIaCghpZFRh", 
            "cmdldBgBIAIoBFIIaWRUYXJnZXQiXQohTmV0TWVzc2FnZVBlcmZvcm1QcmVJ", 
            "bnRlcmFjdFBvd2VyEhoKCGlkVGFyZ2V0GAEgAigEUghpZFRhcmdldBIcCglo", 
            "YXNEaWFsb2cYAiACKAhSCWhhc0RpYWxvZyJvCh9OZXRNZXNzYWdlVXNlSW50", 
            "ZXJhY3RhYmxlT2JqZWN0EhoKCGlkVGFyZ2V0GAEgAigEUghpZFRhcmdldBIw", 
            "ChNtaXNzaW9uUHJvdG90eXBlUmVmGAIgASgEUhNtaXNzaW9uUHJvdG90eXBl", 
            "UmVmInIKEk5ldE1lc3NhZ2VUcnlDcmFmdBIaCghpZFJlY2lwZRgBIAIoBFII", 
            "aWRSZWNpcGUSGgoIaWRWZW5kb3IYAiACKARSCGlkVmVuZG9yEiQKDWlkSW5n", 
            "cmVkaWVudHMYAyADKARSDWlkSW5ncmVkaWVudHMicQoVTmV0TWVzc2FnZVVz", 
            "ZVdheXBvaW50Ei4KEmlkVHJhbnNpdGlvbkVudGl0eRgBIAIoBFISaWRUcmFu", 
            "c2l0aW9uRW50aXR5EigKD3dheXBvaW50RGF0YVJlZhgCIAIoBFIPd2F5cG9p", 
            "bnREYXRhUmVmIlcKJ05ldE1lc3NhZ2VEZWJ1Z0FjcXVpcmVBbmRTd2l0Y2hU", 
            "b0F2YXRhchIsChFhdmF0YXJQcm90b3R5cGVJZBgBIAIoBFIRYXZhdGFyUHJv", 
            "dG90eXBlSWQiNAoWTmV0TWVzc2FnZVN3aXRjaEF2YXRhchIaCghhdmF0YXJJ", 
            "ZBgBIAIoBFIIYXZhdGFySWQisgEKFk5ldE1lc3NhZ2VBc3NpZ25Ib3RrZXkS", 
            "GgoIYXZhdGFySWQYASACKARSCGF2YXRhcklkEiYKDnByb3RvdHlwZVJlZklk", 
            "GAIgAigEUg5wcm90b3R5cGVSZWZJZBIeCgpzbG90TnVtYmVyGAMgAigNUgpz", 
            "bG90TnVtYmVyEjQKFWRlc3RpbmF0aW9uU2xvdE51bWJlchgEIAIoDVIVZGVz", 
            "dGluYXRpb25TbG90TnVtYmVyIlYKGE5ldE1lc3NhZ2VVbmFzc2lnbkhvdGtl", 
            "eRIaCghhdmF0YXJJZBgBIAIoBFIIYXZhdGFySWQSHgoKc2xvdE51bWJlchgC", 
            "IAIoDVIKc2xvdE51bWJlciJ9ChdOZXRNZXNzYWdlQXNzaWduQWJpbGl0eRIa", 
            "CghhdmF0YXJJZBgBIAIoBFIIYXZhdGFySWQSJgoOcHJvdG90eXBlUmVmSWQY", 
            "AiACKARSDnByb3RvdHlwZVJlZklkEh4KCnNsb3ROdW1iZXIYAyACKA1SCnNs", 
            "b3ROdW1iZXIiVwoZTmV0TWVzc2FnZVVuYXNzaWduQWJpbGl0eRIaCghhdmF0", 
            "YXJJZBgBIAIoBFIIYXZhdGFySWQSHgoKc2xvdE51bWJlchgCIAIoDVIKc2xv", 
            "dE51bWJlciJ5ChdOZXRNZXNzYWdlU3dhcEFiaWxpdGllcxIaCghhdmF0YXJJ", 
            "ZBgBIAIoBFIIYXZhdGFySWQSIAoLc2xvdE51bWJlckEYAiACKA1SC3Nsb3RO", 
            "dW1iZXJBEiAKC3Nsb3ROdW1iZXJCGAMgAigNUgtzbG90TnVtYmVyQiKbAQoc", 
            "TmV0TWVzc2FnZU1vZENvbW1pdFRlbXBvcmFyeRIcCglhdmF0YXJSZWYYASAC", 
            "KARSCWF2YXRhclJlZhIeCgptb2RUeXBlUmVmGAIgAigEUgptb2RUeXBlUmVm", 
            "Ej0KB2NoYW5nZXMYAyADKAsyIy5HYXppbGxpb24uTmV0U3RydWN0TW9kQ2hh", 
            "bmdlT2JqZWN0UgdjaGFuZ2VzIlAKEk5ldE1lc3NhZ2VNb2RSZXNldBIaCghh", 
            "dmF0YXJJZBgBIAIoBFIIYXZhdGFySWQSHgoKbW9kVHlwZVJlZhgCIAIoBFIK", 
            "bW9kVHlwZVJlZiKQAQokTmV0TWVzc2FnZVBvd2VyUG9pbnRBbGxvY2F0aW9u", 
            "Q29tbWl0EhwKCWF2YXRhclJlZhgBIAIoBFIJYXZhdGFyUmVmEkoKC2FsbG9j", 
            "YXRpb25zGAIgAygLMiguR2F6aWxsaW9uLk5ldFN0cnVjdFBvd2VyUG9pbnRB", 
            "bGxvY2F0aW9uUgthbGxvY2F0aW9ucyJ1Ch1OZXRNZXNzYWdlUmVxdWVzdERl", 
            "YXRoUmVsZWFzZRIUCgVoaXRPaxgBIAIoCFIFaGl0T2sSPgoacmVzdXJyZWN0", 
            "ZWRGcm9tT3RoZXJFbnRpdHkYAiACKAhSGnJlc3VycmVjdGVkRnJvbU90aGVy", 
            "RW50aXR5IiMKIU5ldE1lc3NhZ2VSZXF1ZXN0UmVzdXJyZWN0RGVjbGluZSI+", 
            "CiBOZXRNZXNzYWdlUmVxdWVzdFJlc3VycmVjdEF2YXRhchIaCgh0YXJnZXRJ", 
            "ZBgBIAEoBFIIdGFyZ2V0SWQiFwoVTmV0TWVzc2FnZVJldHVyblRvSHViInQK", 
            "Gk5ldE1lc3NhZ2VSZXF1ZXN0U3RvcnlXYXJwEjIKFHN0b3J5V2FycFByb3Rv", 
            "dHlwZUlkGAEgAigEUhRzdG9yeVdhcnBQcm90b3R5cGVJZBIiCgxzdG9yeVdh", 
            "cnBOUEMYAiACKARSDHN0b3J5V2FycE5QQyJkChZOZXRNZXNzYWdlSW52aXRl", 
            "UGxheWVyEigKD2ludml0ZWVFbnRpdHlJZBgBIAEoBFIPaW52aXRlZUVudGl0", 
            "eUlkEiAKC2ludml0ZWVOYW1lGAIgASgJUgtpbnZpdGVlTmFtZSKqAQogTmV0", 
            "TWVzc2FnZVJlcXVlc3RQYXJ0eUpvaW5Qb3J0YWwSHAoJdXNlUG9ydGFsGAEg", 
            "AigIUgl1c2VQb3J0YWwSPAoKd2FycFRvRGVzdBgCIAEoCzIcLkdhemlsbGlv", 
            "bi5OZXRTdHJ1Y3RXYXJwRGVzdFIKd2FycFRvRGVzdBIqChBieXBhc3NWYWxp", 
            "ZGF0aW9uGAMgASgIUhBieXBhc3NWYWxpZGF0aW9uIh4KHE5ldE1lc3NhZ2VE", 
            "ZWNsaW5lR3JvdXBJbnZpdGUiFgoUTmV0TWVzc2FnZUxlYXZlR3JvdXAiRQob", 
            "TmV0TWVzc2FnZUNoYW5nZUdyb3VwTGVhZGVyEiYKDnRhcmdldE1lbWJlcklk", 
            "GAEgAigEUg50YXJnZXRNZW1iZXJJZCI+ChROZXRNZXNzYWdlQm9vdFBsYXll", 
            "chImCg50YXJnZXRNZW1iZXJJZBgBIAIoBFIOdGFyZ2V0TWVtYmVySWQiGAoW", 
            "TmV0TWVzc2FnZURpc2JhbmRHcm91cCIhCh9OZXRNZXNzYWdlTWF0Y2hRdWV1", 
            "ZUxpc3RSZXF1ZXN0ImkKG05ldE1lc3NhZ2VNYXRjaFF1ZXVlUmVxdWVzdBIe", 
            "CgpxdWV1ZUluZGV4GAEgAigNUgpxdWV1ZUluZGV4EioKEHF1ZXVlRW50aXJl", 
            "R3JvdXAYAiACKAhSEHF1ZXVlRW50aXJlR3JvdXAicAogTmV0TWVzc2FnZU1h", 
            "dGNoU3RhdGlzdGljc1JlcXVlc3QSLAoRc3RhdFJlcXVlc3ROdW1iZXIYASAC", 
            "KA1SEXN0YXRSZXF1ZXN0TnVtYmVyEh4KCnBsYXllck5hbWUYAiACKAlSCnBs", 
            "YXllck5hbWUiaQodTmV0TWVzc2FnZU1hdGNoSW52aXRlUmVzcG9uc2USIAoL", 
            "bWF0Y2hOdW1iZXIYASACKARSC21hdGNoTnVtYmVyEiYKDmludml0ZUFjY2Vw", 
            "dGVkGAIgAigIUg5pbnZpdGVBY2NlcHRlZCK+AQoUTmV0TWVzc2FnZUR1ZWxJ", 
            "bnZpdGUSLgoSY2hhbGxlbmdlckVudGl0eUlkGAEgAigEUhJjaGFsbGVuZ2Vy", 
            "RW50aXR5SWQSJgoOY2hhbGxlbmdlck5hbWUYAiABKAlSDmNoYWxsZW5nZXJO", 
            "YW1lEioKEG9wcG9uZW50RW50aXR5SWQYAyABKARSEG9wcG9uZW50RW50aXR5", 
            "SWQSIgoMb3Bwb25lbnROYW1lGAQgAigJUgxvcHBvbmVudE5hbWUibgoUTmV0", 
            "TWVzc2FnZUR1ZWxBY2NlcHQSLgoSY2hhbGxlbmdlZEVudGl0eUlkGAEgAigE", 
            "UhJjaGFsbGVuZ2VkRW50aXR5SWQSJgoOY2hhbGxlbmdlZE5hbWUYAiABKAlS", 
            "DmNoYWxsZW5nZWROYW1lIm4KFE5ldE1lc3NhZ2VEdWVsQ2FuY2VsEi4KEmNh", 
            "bmNlbGxpbmdFbnRpdHlJZBgBIAIoBFISY2FuY2VsbGluZ0VudGl0eUlkEiYK", 
            "DmNhbmNlbGxpbmdOYW1lGAIgASgJUg5jYW5jZWxsaW5nTmFtZSJSCiROZXRN", 
            "ZXNzYWdlTWV0YUdhbWVVcGRhdGVOb3RpZmljYXRpb24SKgoQbWV0YUdhbWVF", 
            "bnRpdHlJZBgBIAIoBFIQbWV0YUdhbWVFbnRpdHlJZCJ+Cg5OZXRNZXNzYWdl", 
            "Q2hhdBI0Cghyb29tVHlwZRgBIAIoDjIYLkdhemlsbGlvbi5DaGF0Um9vbVR5", 
            "cGVzUghyb29tVHlwZRI2Cgp0aGVNZXNzYWdlGAIgAigLMhYuR2F6aWxsaW9u", 
            "LkNoYXRNZXNzYWdlUgp0aGVNZXNzYWdlInQKDk5ldE1lc3NhZ2VUZWxsEioK", 
            "EHRhcmdldFBsYXllck5hbWUYASACKAlSEHRhcmdldFBsYXllck5hbWUSNgoK", 
            "dGhlTWVzc2FnZRgCIAIoCzIWLkdhemlsbGlvbi5DaGF0TWVzc2FnZVIKdGhl", 
            "TWVzc2FnZSJcChZOZXRNZXNzYWdlUmVwb3J0UGxheWVyEioKEHRhcmdldFBs", 
            "YXllck5hbWUYASACKAlSEHRhcmdldFBsYXllck5hbWUSFgoGcmVhc29uGAIg", 
            "AigJUgZyZWFzb24ilQEKFE5ldE1lc3NhZ2VHZXRDYXRhbG9nEh8KCXRpbWVz", 
            "dGFtcBgDIAEoAzoBMFIJdGltZXN0YW1wEjkKFml0ZW1Qcm90b3R5cGVSdW50", 
            "aW1lSWQYASABKAQ6ATBSFml0ZW1Qcm90b3R5cGVSdW50aW1lSWQSIQoIbG9j", 
            "YWxlaWQYBCABKAk6BWVuX3VzUghsb2NhbGVpZCIeChxOZXRNZXNzYWdlR2V0", 
            "Q3VycmVuY3lCYWxhbmNlInkKHE5ldE1lc3NhZ2VCdXlJdGVtRnJvbUNhdGFs", 
            "b2cSFAoFc2t1SWQYASACKANSBXNrdUlkEiQKDWl0ZW1Vbml0UHJpY2UYAiAC", 
            "KANSDWl0ZW1Vbml0UHJpY2USHQoIbnVtVW5pdHMYAyABKAU6ATFSCG51bVVu", 
            "aXRzIkEKE0VudGl0eVByZXZpZXdlckVudW0iKgoIQWxsaWFuY2USCAoEQWxs", 
            "eRAAEgkKBUVuZW15EAESCQoFVG90YWwQAiKQAQojTmV0TWVzc2FnZUVudGl0", 
            "eVByZXZpZXdlck5ld1RhcmdldHMSQwoIYWxsaWFuY2UYASACKA4yJy5HYXpp", 
            "bGxpb24uRW50aXR5UHJldmlld2VyRW51bS5BbGxpYW5jZVIIYWxsaWFuY2US", 
            "JAoNbnVtTmV3VGFyZ2V0cxgCIAEoDVINbnVtTmV3VGFyZ2V0cyInCiVOZXRN", 
            "ZXNzYWdlRW50aXR5UHJldmlld2VyQ2xlYXJUYXJnZXRzIkkKJU5ldE1lc3Nh", 
            "Z2VFbnRpdHlQcmV2aWV3ZXJTZXRUYXJnZXRSZWYSIAoLdGFyZ2V0UmVmSWQY", 
            "ASACKARSC3RhcmdldFJlZklkIrIBCiZOZXRNZXNzYWdlRW50aXR5UHJldmll", 
            "d2VyQWN0aXZhdGVQb3dlchIaCghjYXN0ZXJJZBgBIAIoBFIIY2FzdGVySWQS", 
            "HgoKcG93ZXJSZWZJZBgCIAIoBFIKcG93ZXJSZWZJZBIiCgxjcmVhdGVUYXJn", 
            "ZXQYAyACKAhSDGNyZWF0ZVRhcmdldBIoCg9yYW5kb21UYXJnZXRQb3MYBCAC", 
            "KAhSD3JhbmRvbVRhcmdldFBvcyJACiJOZXRNZXNzYWdlRW50aXR5UHJldmll", 
            "d2VyQWRkVGFyZ2V0EhoKCHRhcmdldElkGAEgAigEUgh0YXJnZXRJZCJlCidO", 
            "ZXRNZXNzYWdlRW50aXR5UHJldmlld2VyU2V0RW50aXR5U3RhdGUSGgoIdGFy", 
            "Z2V0SWQYASACKARSCHRhcmdldElkEh4KCnN0YXRlUmVmSWQYAiACKARSCnN0", 
            "YXRlUmVmSWQiZgooTmV0TWVzc2FnZUVudGl0eVByZXZpZXdlckFwcGx5Q29u", 
            "ZGl0aW9ucxIaCgh0YXJnZXRJZBgBIAIoBFIIdGFyZ2V0SWQSHgoKcG93ZXJS", 
            "ZWZJZBgCIAIoBFIKcG93ZXJSZWZJZCJzCjNOZXRNZXNzYWdlQ3JlYXRlTmV3", 
            "UGxheWVyV2l0aFNlbGVjdGVkU3RhcnRpbmdBdmF0YXISPAoZc3RhcnRpbmdB", 
            "dmF0YXJQcm90b3R5cGVJZBgBIAIoBFIZc3RhcnRpbmdBdmF0YXJQcm90b3R5", 
            "cGVJZCIlCiNOZXRNZXNzYWdlT25LaW9za1N0YXJ0QnV0dG9uUHJlc3NlZCKt", 
            "AQonTmV0TWVzc2FnZU5vdGlmeUZ1bGxzY3JlZW5Nb3ZpZUZpbmlzaGVkEioK", 
            "EG1vdmllUHJvdG90eXBlSWQYASACKARSEG1vdmllUHJvdG90eXBlSWQSJAoN", 
            "dXNlckNhbmNlbGxlZBgCIAIoCFINdXNlckNhbmNlbGxlZBIwChNjaW5lbWF0", 
            "aWNzUmVtYWluaW5nGAMgAigNUhNjaW5lbWF0aWNzUmVtYWluaW5nIi0KFU5l", 
            "dE1lc3NhZ2VCb3RTZXRMZXZlbBIUCgVsZXZlbBgBIAIoBVIFbGV2ZWwiFgoU", 
            "TmV0TWVzc2FnZUJvdEdvZE1vZGUipQEKF05ldE1lc3NhZ2VCb3RQaWNrQXZh", 
            "dGFyEigKD2F2YXRhckJvdERhdGFJZBgBIAIoBFIPYXZhdGFyQm90RGF0YUlk", 
            "EhQKBWxldmVsGAIgASgFUgVsZXZlbBIkCg1sb290UHJvdG90eXBlGAMgASgE", 
            "Ug1sb290UHJvdG90eXBlEiQKDWxvb3RUYWJsZVJvbGwYBCABKA1SDWxvb3RU", 
            "YWJsZVJvbGwiPwoZTmV0TWVzc2FnZUJvdFJlZ2lvbkNoYW5nZRIiCgxyZWdp", 
            "b25EYXRhSWQYASACKARSDHJlZ2lvbkRhdGFJZCIbChlOZXRNZXNzYWdlQm90", 
            "V2FycEFyZWFOZXh0ImMKFU5ldE1lc3NhZ2VCb3RMb290R2l2ZRIkCg1sb290", 
            "UHJvdG90eXBlGAEgAigEUg1sb290UHJvdG90eXBlEiQKDWxvb3RUYWJsZVJv", 
            "bGwYAiACKA1SDWxvb3RUYWJsZVJvbGwiTgoaTmV0TWVzc2FnZUJvdFNldFB2", 
            "UEZhY3Rpb24SMAoTZmFjdGlvblNldFByb3RvdHlwZRgBIAIoBFITZmFjdGlv", 
            "blNldFByb3RvdHlwZSI3ChVOZXRNZXNzYWdlQm90UHZQUXVldWUSHgoKcHZw", 
            "UXVldWVJZBgBIAIoBFIKcHZwUXVldWVJZCJuChpOZXRNZXNzYWdlR2V0VHJh", 
            "Y2tlclJlcG9ydBIkCg1tZXNzYWdlU291cmNlGAEgAigNUg1tZXNzYWdlU291", 
            "cmNlEioKEG1lc3NhZ2VEaXJlY3Rpb24YAiACKA1SEG1lc3NhZ2VEaXJlY3Rp", 
            "b24iUQobTmV0TWVzc2FnZVBsYXlLaXNtZXRTZXFEb25lEjIKFGtpc21ldFNl", 
            "cVByb3RvdHlwZUlkGAEgAigEUhRraXNtZXRTZXFQcm90b3R5cGVJZCKUAQoe", 
            "TmV0TWVzc2FnZVZlcmlmeUZhaWxlZEZvclJlcElkEhYKBnJlcGlkMRgBIAIo", 
            "BFIGcmVwaWQxEhIKBGZpbGUYAiACKAlSBGZpbGUSEgoEbGluZRgDIAIoDVIE", 
            "bGluZRIaCghkZWJ1Z21zZxgEIAIoCVIIZGVidWdtc2cSFgoGcmVwaWQyGAUg", 
            "ASgEUgZyZXBpZDIiHgocTmV0TWVzc2FnZUdyYWNlZnVsRGlzY29ubmVjdCIf", 
            "Ch1OZXRNZXNzYWdlUmVxdWVzdFN0YXJ0TmV3R2FtZSI3ChlOZXRNZXNzYWdl", 
            "U2V0RGlhbG9nVGFyZ2V0EhoKCHRhcmdldElkGAEgAigEUgh0YXJnZXRJZCJ+", 
            "CiJOZXRNZXNzYWdlVmVuZG9yUmVxdWVzdEJ1eUl0ZW1Gcm9tEhYKBml0ZW1J", 
            "ZBgBIAIoBFIGaXRlbUlkEhoKCHZlbmRvcklkGAIgAigEUgh2ZW5kb3JJZBIk", 
            "Cg1pbnZlbnRvcnlTbG90GAMgAigNUg1pbnZlbnRvcnlTbG90IlcKIU5ldE1l", 
            "c3NhZ2VWZW5kb3JSZXF1ZXN0U2VsbEl0ZW1UbxIWCgZpdGVtSWQYASACKARS", 
            "Bml0ZW1JZBIaCgh2ZW5kb3JJZBgCIAIoBFIIdmVuZG9ySWQiWQojTmV0TWVz", 
            "c2FnZVZlbmRvclJlcXVlc3REb25hdGVJdGVtVG8SFgoGaXRlbUlkGAEgAigE", 
            "UgZpdGVtSWQSGgoIdmVuZG9ySWQYAiACKARSCHZlbmRvcklkIjwKHk5ldE1l", 
            "c3NhZ2VWZW5kb3JSZXF1ZXN0UmVmcmVzaBIaCgh2ZW5kb3JJZBgBIAIoBFII", 
            "dmVuZG9ySWQipgEKKE5ldE1lc3NhZ2VUcnlNb2RpZnlDb21tdW5pdHlNZW1i", 
            "ZXJDaXJjbGUSGgoIY2lyY2xlSWQYASACKARSCGNpcmNsZUlkEj4KCW9wZXJh", 
            "dGlvbhgCIAIoDjIgLkdhemlsbGlvbi5Nb2RpZnlDaXJjbGVPcGVyYXRpb25S", 
            "CW9wZXJhdGlvbhIeCgpwbGF5ZXJOYW1lGAMgAigJUgpwbGF5ZXJOYW1lIm4K", 
            "JU5ldE1lc3NhZ2VHdWlsZE1lc3NhZ2VUb1BsYXllck1hbmFnZXISRQoIbWVz", 
            "c2FnZXMYASACKAsyKS5HYXppbGxpb24uR3VpbGRNZXNzYWdlU2V0VG9QbGF5", 
            "ZXJNYW5hZ2VyUghtZXNzYWdlcyIzChVOZXRNZXNzYWdlU2V0U2hvd1RpcHMS", 
            "GgoIc2hvd1RpcHMYASACKAhSCHNob3dUaXBzIjoKFE5ldE1lc3NhZ2VTZXRU", 
            "aXBTZWVuEiIKDHRpcERhdGFSZWZJZBgBIAIoBFIMdGlwRGF0YVJlZklkIhkK", 
            "F05ldE1lc3NhZ2VSZXNldFNlZW5UaXBzImkKK05ldE1lc3NhZ2VUcnlNb3Zl", 
            "SW52ZW50b3J5Q29udGVudHNUb0dlbmVyYWwSOgoYc291cmNlSW52ZW50b3J5", 
            "UHJvdG90eXBlGAEgAigEUhhzb3VyY2VJbnZlbnRvcnlQcm90b3R5cGUiawoi", 
            "TmV0TWVzc2FnZVNldFBsYXllckdhbWVwbGF5T3B0aW9ucxJFCgtvcHRpb25z", 
            "RGF0YRgBIAIoCzIjLkdhemlsbGlvbi5OZXRTdHJ1Y3RHYW1lcGxheU9wdGlv", 
            "bnNSC29wdGlvbnNEYXRhIkEKH05ldE1lc3NhZ2VUZWxlcG9ydFRvUGFydHlN", 
          "ZW1iZXISHgoKcGxheWVyTmFtZRgBIAIoCVIKcGxheWVyTmFtZQ=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Gazillion_NetMessageReadyForGameJoin__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Gazillion_NetMessageReadyForGameJoin__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReadyForGameJoin, global::Gazillion.NetMessageReadyForGameJoin.Builder>(internal__static_Gazillion_NetMessageReadyForGameJoin__Descriptor,
                new string[] { "PlayerName", "WipesDataIfMismatchedInDb", "WipePlayerRecordsOnLogin", "DomainLoginName", "PlayerImportData", });
        internal__static_Gazillion_NetMessagePlayerSystemMetrics__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Gazillion_NetMessagePlayerSystemMetrics__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayerSystemMetrics, global::Gazillion.NetMessagePlayerSystemMetrics.Builder>(internal__static_Gazillion_NetMessagePlayerSystemMetrics__Descriptor,
                new string[] { "CompatLevelCpu", "CompatLevelGpu", "CompatLevelComposite", "OsName", "CpuName", "RamName", "DisplayDeviceName", "DisplayDeviceDualGPU", "DisplayDeviceDriverDate", });
        internal__static_Gazillion_NetMessageSyncTimeRequest__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Gazillion_NetMessageSyncTimeRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSyncTimeRequest, global::Gazillion.NetMessageSyncTimeRequest.Builder>(internal__static_Gazillion_NetMessageSyncTimeRequest__Descriptor,
                new string[] { "GameTimeClientSent", "DateTimeClientSent", });
        internal__static_Gazillion_NetMessageSetTimeDialation__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Gazillion_NetMessageSetTimeDialation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetTimeDialation, global::Gazillion.NetMessageSetTimeDialation.Builder>(internal__static_Gazillion_NetMessageSetTimeDialation__Descriptor,
                new string[] { "GameTimeDialationStarted", "DateTimeDialationStarted", "Dialation", });
        internal__static_Gazillion_NetMessageIsRegionAvailable__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Gazillion_NetMessageIsRegionAvailable__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageIsRegionAvailable, global::Gazillion.NetMessageIsRegionAvailable.Builder>(internal__static_Gazillion_NetMessageIsRegionAvailable__Descriptor,
                new string[] { "RegionPrototype", "IsAvailable", });
        internal__static_Gazillion_NetMessageUpdateAvatarState__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Gazillion_NetMessageUpdateAvatarState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUpdateAvatarState, global::Gazillion.NetMessageUpdateAvatarState.Builder>(internal__static_Gazillion_NetMessageUpdateAvatarState__Descriptor,
                new string[] { "IdAvatar", "Position", "Orientation", "Locomotionstate", "IsTeleport", });
        internal__static_Gazillion_NetMessageCellLoaded__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Gazillion_NetMessageCellLoaded__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCellLoaded, global::Gazillion.NetMessageCellLoaded.Builder>(internal__static_Gazillion_NetMessageCellLoaded__Descriptor,
                new string[] { "CellId", "RegionId", });
        internal__static_Gazillion_NetMessageTeleportAckResponse__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Gazillion_NetMessageTeleportAckResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTeleportAckResponse, global::Gazillion.NetMessageTeleportAckResponse.Builder>(internal__static_Gazillion_NetMessageTeleportAckResponse__Descriptor,
                new string[] { "Ackseq", });
        internal__static_Gazillion_NetMessageAdminCommand__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Gazillion_NetMessageAdminCommand__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAdminCommand, global::Gazillion.NetMessageAdminCommand.Builder>(internal__static_Gazillion_NetMessageAdminCommand__Descriptor,
                new string[] { "Command", });
        internal__static_Gazillion_NetMessageTryActivatePower__Descriptor = Descriptor.MessageTypes[9];
        internal__static_Gazillion_NetMessageTryActivatePower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryActivatePower, global::Gazillion.NetMessageTryActivatePower.Builder>(internal__static_Gazillion_NetMessageTryActivatePower__Descriptor,
                new string[] { "IdUserEntity", "PowerPrototypeId", "IdTargetEntity", "TargetPosition", "MovementSpeed", "MovementTimeMS", "MissileRandomSeed", "ItemSourceId", });
        internal__static_Gazillion_NetMessagePowerRelease__Descriptor = Descriptor.MessageTypes[10];
        internal__static_Gazillion_NetMessagePowerRelease__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerRelease, global::Gazillion.NetMessagePowerRelease.Builder>(internal__static_Gazillion_NetMessagePowerRelease__Descriptor,
                new string[] { "IdUserEntity", "PowerPrototypeId", "IdTargetEntity", "TargetPosition", });
        internal__static_Gazillion_NetMessageTryCancelPower__Descriptor = Descriptor.MessageTypes[11];
        internal__static_Gazillion_NetMessageTryCancelPower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryCancelPower, global::Gazillion.NetMessageTryCancelPower.Builder>(internal__static_Gazillion_NetMessageTryCancelPower__Descriptor,
                new string[] { "IdUserEntity", "PowerPrototypeId", "EndPowerFlags", });
        internal__static_Gazillion_NetMessageTryCancelActivePower__Descriptor = Descriptor.MessageTypes[12];
        internal__static_Gazillion_NetMessageTryCancelActivePower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryCancelActivePower, global::Gazillion.NetMessageTryCancelActivePower.Builder>(internal__static_Gazillion_NetMessageTryCancelActivePower__Descriptor,
                new string[] { "IdUserEntity", });
        internal__static_Gazillion_NetMessageContinuousPowerUpdateToServer__Descriptor = Descriptor.MessageTypes[13];
        internal__static_Gazillion_NetMessageContinuousPowerUpdateToServer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageContinuousPowerUpdateToServer, global::Gazillion.NetMessageContinuousPowerUpdateToServer.Builder>(internal__static_Gazillion_NetMessageContinuousPowerUpdateToServer__Descriptor,
                new string[] { "PowerPrototypeId", "IdTargetEntity", "TargetPosition", });
        internal__static_Gazillion_NetMessageCancelPendingAction__Descriptor = Descriptor.MessageTypes[14];
        internal__static_Gazillion_NetMessageCancelPendingAction__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCancelPendingAction, global::Gazillion.NetMessageCancelPendingAction.Builder>(internal__static_Gazillion_NetMessageCancelPendingAction__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageConfirmWeaponMissingStatus__Descriptor = Descriptor.MessageTypes[15];
        internal__static_Gazillion_NetMessageConfirmWeaponMissingStatus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageConfirmWeaponMissingStatus, global::Gazillion.NetMessageConfirmWeaponMissingStatus.Builder>(internal__static_Gazillion_NetMessageConfirmWeaponMissingStatus__Descriptor,
                new string[] { "IdOwner", });
        internal__static_Gazillion_NetMessageStartAIDebugUI__Descriptor = Descriptor.MessageTypes[16];
        internal__static_Gazillion_NetMessageStartAIDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartAIDebugUI, global::Gazillion.NetMessageStartAIDebugUI.Builder>(internal__static_Gazillion_NetMessageStartAIDebugUI__Descriptor,
                new string[] { "IdTargetNPC", });
        internal__static_Gazillion_NetMessageStopAIDebugUI__Descriptor = Descriptor.MessageTypes[17];
        internal__static_Gazillion_NetMessageStopAIDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopAIDebugUI, global::Gazillion.NetMessageStopAIDebugUI.Builder>(internal__static_Gazillion_NetMessageStopAIDebugUI__Descriptor,
                new string[] { "IdTargetNPC", });
        internal__static_Gazillion_NetMessageStartMissionDebugUI__Descriptor = Descriptor.MessageTypes[18];
        internal__static_Gazillion_NetMessageStartMissionDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartMissionDebugUI, global::Gazillion.NetMessageStartMissionDebugUI.Builder>(internal__static_Gazillion_NetMessageStartMissionDebugUI__Descriptor,
                new string[] { "IdTargetAgent", "MissionPrototypeRefId", "MissionListMatchPattern", });
        internal__static_Gazillion_NetMessageStopMissionDebugUI__Descriptor = Descriptor.MessageTypes[19];
        internal__static_Gazillion_NetMessageStopMissionDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopMissionDebugUI, global::Gazillion.NetMessageStopMissionDebugUI.Builder>(internal__static_Gazillion_NetMessageStopMissionDebugUI__Descriptor,
                new string[] { "IdTargetAgent", });
        internal__static_Gazillion_NetMessageStartPropertiesDebugUI__Descriptor = Descriptor.MessageTypes[20];
        internal__static_Gazillion_NetMessageStartPropertiesDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartPropertiesDebugUI, global::Gazillion.NetMessageStartPropertiesDebugUI.Builder>(internal__static_Gazillion_NetMessageStartPropertiesDebugUI__Descriptor,
                new string[] { "IdTargetEntity", });
        internal__static_Gazillion_NetMessageStopPropertiesDebugUI__Descriptor = Descriptor.MessageTypes[21];
        internal__static_Gazillion_NetMessageStopPropertiesDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopPropertiesDebugUI, global::Gazillion.NetMessageStopPropertiesDebugUI.Builder>(internal__static_Gazillion_NetMessageStopPropertiesDebugUI__Descriptor,
                new string[] { "IdTargetEntity", });
        internal__static_Gazillion_NetMessageStartConditionsDebugUI__Descriptor = Descriptor.MessageTypes[22];
        internal__static_Gazillion_NetMessageStartConditionsDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartConditionsDebugUI, global::Gazillion.NetMessageStartConditionsDebugUI.Builder>(internal__static_Gazillion_NetMessageStartConditionsDebugUI__Descriptor,
                new string[] { "IdTargetEntity", });
        internal__static_Gazillion_NetMessageStopConditionsDebugUI__Descriptor = Descriptor.MessageTypes[23];
        internal__static_Gazillion_NetMessageStopConditionsDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopConditionsDebugUI, global::Gazillion.NetMessageStopConditionsDebugUI.Builder>(internal__static_Gazillion_NetMessageStopConditionsDebugUI__Descriptor,
                new string[] { "IdTargetEntity", });
        internal__static_Gazillion_NetMessageStartPowersDebugUI__Descriptor = Descriptor.MessageTypes[24];
        internal__static_Gazillion_NetMessageStartPowersDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartPowersDebugUI, global::Gazillion.NetMessageStartPowersDebugUI.Builder>(internal__static_Gazillion_NetMessageStartPowersDebugUI__Descriptor,
                new string[] { "IdTargetEntity", });
        internal__static_Gazillion_NetMessageStopPowersDebugUI__Descriptor = Descriptor.MessageTypes[25];
        internal__static_Gazillion_NetMessageStopPowersDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopPowersDebugUI, global::Gazillion.NetMessageStopPowersDebugUI.Builder>(internal__static_Gazillion_NetMessageStopPowersDebugUI__Descriptor,
                new string[] { "IdTargetEntity", });
        internal__static_Gazillion_NetMessagePing__Descriptor = Descriptor.MessageTypes[26];
        internal__static_Gazillion_NetMessagePing__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePing, global::Gazillion.NetMessagePing.Builder>(internal__static_Gazillion_NetMessagePing__Descriptor,
                new string[] { "DisplayOutput", "SendClientTime", "SendGameTime", "RequestNetReceivedGameTime", "LastClientLatency", "LastFps", "RegionPrototype", "Cpulevel", "Gpulevel", "Compositelevel", "MinFps", "MinFpsPos", });
        internal__static_Gazillion_NetMessagePickupInteraction__Descriptor = Descriptor.MessageTypes[27];
        internal__static_Gazillion_NetMessagePickupInteraction__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePickupInteraction, global::Gazillion.NetMessagePickupInteraction.Builder>(internal__static_Gazillion_NetMessagePickupInteraction__Descriptor,
                new string[] { "IdTarget", "UseInteractFallbackRange", });
        internal__static_Gazillion_NetMessageTryInventoryMove__Descriptor = Descriptor.MessageTypes[28];
        internal__static_Gazillion_NetMessageTryInventoryMove__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryInventoryMove, global::Gazillion.NetMessageTryInventoryMove.Builder>(internal__static_Gazillion_NetMessageTryInventoryMove__Descriptor,
                new string[] { "ItemId", "ToInventoryOwnerId", "ToInventoryPrototype", "ToSlot", });
        internal__static_Gazillion_NetMessageTryMoveCraftingResultsToGeneral__Descriptor = Descriptor.MessageTypes[29];
        internal__static_Gazillion_NetMessageTryMoveCraftingResultsToGeneral__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryMoveCraftingResultsToGeneral, global::Gazillion.NetMessageTryMoveCraftingResultsToGeneral.Builder>(internal__static_Gazillion_NetMessageTryMoveCraftingResultsToGeneral__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageInventoryTrashItem__Descriptor = Descriptor.MessageTypes[30];
        internal__static_Gazillion_NetMessageInventoryTrashItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryTrashItem, global::Gazillion.NetMessageInventoryTrashItem.Builder>(internal__static_Gazillion_NetMessageInventoryTrashItem__Descriptor,
                new string[] { "ItemId", });
        internal__static_Gazillion_NetMessageThrowInteraction__Descriptor = Descriptor.MessageTypes[31];
        internal__static_Gazillion_NetMessageThrowInteraction__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageThrowInteraction, global::Gazillion.NetMessageThrowInteraction.Builder>(internal__static_Gazillion_NetMessageThrowInteraction__Descriptor,
                new string[] { "IdTarget", });
        internal__static_Gazillion_NetMessagePerformPreInteractPower__Descriptor = Descriptor.MessageTypes[32];
        internal__static_Gazillion_NetMessagePerformPreInteractPower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePerformPreInteractPower, global::Gazillion.NetMessagePerformPreInteractPower.Builder>(internal__static_Gazillion_NetMessagePerformPreInteractPower__Descriptor,
                new string[] { "IdTarget", "HasDialog", });
        internal__static_Gazillion_NetMessageUseInteractableObject__Descriptor = Descriptor.MessageTypes[33];
        internal__static_Gazillion_NetMessageUseInteractableObject__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUseInteractableObject, global::Gazillion.NetMessageUseInteractableObject.Builder>(internal__static_Gazillion_NetMessageUseInteractableObject__Descriptor,
                new string[] { "IdTarget", "MissionPrototypeRef", });
        internal__static_Gazillion_NetMessageTryCraft__Descriptor = Descriptor.MessageTypes[34];
        internal__static_Gazillion_NetMessageTryCraft__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryCraft, global::Gazillion.NetMessageTryCraft.Builder>(internal__static_Gazillion_NetMessageTryCraft__Descriptor,
                new string[] { "IdRecipe", "IdVendor", "IdIngredients", });
        internal__static_Gazillion_NetMessageUseWaypoint__Descriptor = Descriptor.MessageTypes[35];
        internal__static_Gazillion_NetMessageUseWaypoint__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUseWaypoint, global::Gazillion.NetMessageUseWaypoint.Builder>(internal__static_Gazillion_NetMessageUseWaypoint__Descriptor,
                new string[] { "IdTransitionEntity", "WaypointDataRef", });
        internal__static_Gazillion_NetMessageDebugAcquireAndSwitchToAvatar__Descriptor = Descriptor.MessageTypes[36];
        internal__static_Gazillion_NetMessageDebugAcquireAndSwitchToAvatar__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDebugAcquireAndSwitchToAvatar, global::Gazillion.NetMessageDebugAcquireAndSwitchToAvatar.Builder>(internal__static_Gazillion_NetMessageDebugAcquireAndSwitchToAvatar__Descriptor,
                new string[] { "AvatarPrototypeId", });
        internal__static_Gazillion_NetMessageSwitchAvatar__Descriptor = Descriptor.MessageTypes[37];
        internal__static_Gazillion_NetMessageSwitchAvatar__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSwitchAvatar, global::Gazillion.NetMessageSwitchAvatar.Builder>(internal__static_Gazillion_NetMessageSwitchAvatar__Descriptor,
                new string[] { "AvatarId", });
        internal__static_Gazillion_NetMessageAssignHotkey__Descriptor = Descriptor.MessageTypes[38];
        internal__static_Gazillion_NetMessageAssignHotkey__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAssignHotkey, global::Gazillion.NetMessageAssignHotkey.Builder>(internal__static_Gazillion_NetMessageAssignHotkey__Descriptor,
                new string[] { "AvatarId", "PrototypeRefId", "SlotNumber", "DestinationSlotNumber", });
        internal__static_Gazillion_NetMessageUnassignHotkey__Descriptor = Descriptor.MessageTypes[39];
        internal__static_Gazillion_NetMessageUnassignHotkey__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnassignHotkey, global::Gazillion.NetMessageUnassignHotkey.Builder>(internal__static_Gazillion_NetMessageUnassignHotkey__Descriptor,
                new string[] { "AvatarId", "SlotNumber", });
        internal__static_Gazillion_NetMessageAssignAbility__Descriptor = Descriptor.MessageTypes[40];
        internal__static_Gazillion_NetMessageAssignAbility__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAssignAbility, global::Gazillion.NetMessageAssignAbility.Builder>(internal__static_Gazillion_NetMessageAssignAbility__Descriptor,
                new string[] { "AvatarId", "PrototypeRefId", "SlotNumber", });
        internal__static_Gazillion_NetMessageUnassignAbility__Descriptor = Descriptor.MessageTypes[41];
        internal__static_Gazillion_NetMessageUnassignAbility__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnassignAbility, global::Gazillion.NetMessageUnassignAbility.Builder>(internal__static_Gazillion_NetMessageUnassignAbility__Descriptor,
                new string[] { "AvatarId", "SlotNumber", });
        internal__static_Gazillion_NetMessageSwapAbilities__Descriptor = Descriptor.MessageTypes[42];
        internal__static_Gazillion_NetMessageSwapAbilities__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSwapAbilities, global::Gazillion.NetMessageSwapAbilities.Builder>(internal__static_Gazillion_NetMessageSwapAbilities__Descriptor,
                new string[] { "AvatarId", "SlotNumberA", "SlotNumberB", });
        internal__static_Gazillion_NetMessageModCommitTemporary__Descriptor = Descriptor.MessageTypes[43];
        internal__static_Gazillion_NetMessageModCommitTemporary__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageModCommitTemporary, global::Gazillion.NetMessageModCommitTemporary.Builder>(internal__static_Gazillion_NetMessageModCommitTemporary__Descriptor,
                new string[] { "AvatarRef", "ModTypeRef", "Changes", });
        internal__static_Gazillion_NetMessageModReset__Descriptor = Descriptor.MessageTypes[44];
        internal__static_Gazillion_NetMessageModReset__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageModReset, global::Gazillion.NetMessageModReset.Builder>(internal__static_Gazillion_NetMessageModReset__Descriptor,
                new string[] { "AvatarId", "ModTypeRef", });
        internal__static_Gazillion_NetMessagePowerPointAllocationCommit__Descriptor = Descriptor.MessageTypes[45];
        internal__static_Gazillion_NetMessagePowerPointAllocationCommit__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerPointAllocationCommit, global::Gazillion.NetMessagePowerPointAllocationCommit.Builder>(internal__static_Gazillion_NetMessagePowerPointAllocationCommit__Descriptor,
                new string[] { "AvatarRef", "Allocations", });
        internal__static_Gazillion_NetMessageRequestDeathRelease__Descriptor = Descriptor.MessageTypes[46];
        internal__static_Gazillion_NetMessageRequestDeathRelease__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestDeathRelease, global::Gazillion.NetMessageRequestDeathRelease.Builder>(internal__static_Gazillion_NetMessageRequestDeathRelease__Descriptor,
                new string[] { "HitOk", "ResurrectedFromOtherEntity", });
        internal__static_Gazillion_NetMessageRequestResurrectDecline__Descriptor = Descriptor.MessageTypes[47];
        internal__static_Gazillion_NetMessageRequestResurrectDecline__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestResurrectDecline, global::Gazillion.NetMessageRequestResurrectDecline.Builder>(internal__static_Gazillion_NetMessageRequestResurrectDecline__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageRequestResurrectAvatar__Descriptor = Descriptor.MessageTypes[48];
        internal__static_Gazillion_NetMessageRequestResurrectAvatar__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestResurrectAvatar, global::Gazillion.NetMessageRequestResurrectAvatar.Builder>(internal__static_Gazillion_NetMessageRequestResurrectAvatar__Descriptor,
                new string[] { "TargetId", });
        internal__static_Gazillion_NetMessageReturnToHub__Descriptor = Descriptor.MessageTypes[49];
        internal__static_Gazillion_NetMessageReturnToHub__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReturnToHub, global::Gazillion.NetMessageReturnToHub.Builder>(internal__static_Gazillion_NetMessageReturnToHub__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageRequestStoryWarp__Descriptor = Descriptor.MessageTypes[50];
        internal__static_Gazillion_NetMessageRequestStoryWarp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestStoryWarp, global::Gazillion.NetMessageRequestStoryWarp.Builder>(internal__static_Gazillion_NetMessageRequestStoryWarp__Descriptor,
                new string[] { "StoryWarpPrototypeId", "StoryWarpNPC", });
        internal__static_Gazillion_NetMessageInvitePlayer__Descriptor = Descriptor.MessageTypes[51];
        internal__static_Gazillion_NetMessageInvitePlayer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInvitePlayer, global::Gazillion.NetMessageInvitePlayer.Builder>(internal__static_Gazillion_NetMessageInvitePlayer__Descriptor,
                new string[] { "InviteeEntityId", "InviteeName", });
        internal__static_Gazillion_NetMessageRequestPartyJoinPortal__Descriptor = Descriptor.MessageTypes[52];
        internal__static_Gazillion_NetMessageRequestPartyJoinPortal__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestPartyJoinPortal, global::Gazillion.NetMessageRequestPartyJoinPortal.Builder>(internal__static_Gazillion_NetMessageRequestPartyJoinPortal__Descriptor,
                new string[] { "UsePortal", "WarpToDest", "BypassValidation", });
        internal__static_Gazillion_NetMessageDeclineGroupInvite__Descriptor = Descriptor.MessageTypes[53];
        internal__static_Gazillion_NetMessageDeclineGroupInvite__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDeclineGroupInvite, global::Gazillion.NetMessageDeclineGroupInvite.Builder>(internal__static_Gazillion_NetMessageDeclineGroupInvite__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageLeaveGroup__Descriptor = Descriptor.MessageTypes[54];
        internal__static_Gazillion_NetMessageLeaveGroup__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaveGroup, global::Gazillion.NetMessageLeaveGroup.Builder>(internal__static_Gazillion_NetMessageLeaveGroup__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageChangeGroupLeader__Descriptor = Descriptor.MessageTypes[55];
        internal__static_Gazillion_NetMessageChangeGroupLeader__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChangeGroupLeader, global::Gazillion.NetMessageChangeGroupLeader.Builder>(internal__static_Gazillion_NetMessageChangeGroupLeader__Descriptor,
                new string[] { "TargetMemberId", });
        internal__static_Gazillion_NetMessageBootPlayer__Descriptor = Descriptor.MessageTypes[56];
        internal__static_Gazillion_NetMessageBootPlayer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBootPlayer, global::Gazillion.NetMessageBootPlayer.Builder>(internal__static_Gazillion_NetMessageBootPlayer__Descriptor,
                new string[] { "TargetMemberId", });
        internal__static_Gazillion_NetMessageDisbandGroup__Descriptor = Descriptor.MessageTypes[57];
        internal__static_Gazillion_NetMessageDisbandGroup__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDisbandGroup, global::Gazillion.NetMessageDisbandGroup.Builder>(internal__static_Gazillion_NetMessageDisbandGroup__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageMatchQueueListRequest__Descriptor = Descriptor.MessageTypes[58];
        internal__static_Gazillion_NetMessageMatchQueueListRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchQueueListRequest, global::Gazillion.NetMessageMatchQueueListRequest.Builder>(internal__static_Gazillion_NetMessageMatchQueueListRequest__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageMatchQueueRequest__Descriptor = Descriptor.MessageTypes[59];
        internal__static_Gazillion_NetMessageMatchQueueRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchQueueRequest, global::Gazillion.NetMessageMatchQueueRequest.Builder>(internal__static_Gazillion_NetMessageMatchQueueRequest__Descriptor,
                new string[] { "QueueIndex", "QueueEntireGroup", });
        internal__static_Gazillion_NetMessageMatchStatisticsRequest__Descriptor = Descriptor.MessageTypes[60];
        internal__static_Gazillion_NetMessageMatchStatisticsRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchStatisticsRequest, global::Gazillion.NetMessageMatchStatisticsRequest.Builder>(internal__static_Gazillion_NetMessageMatchStatisticsRequest__Descriptor,
                new string[] { "StatRequestNumber", "PlayerName", });
        internal__static_Gazillion_NetMessageMatchInviteResponse__Descriptor = Descriptor.MessageTypes[61];
        internal__static_Gazillion_NetMessageMatchInviteResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchInviteResponse, global::Gazillion.NetMessageMatchInviteResponse.Builder>(internal__static_Gazillion_NetMessageMatchInviteResponse__Descriptor,
                new string[] { "MatchNumber", "InviteAccepted", });
        internal__static_Gazillion_NetMessageDuelInvite__Descriptor = Descriptor.MessageTypes[62];
        internal__static_Gazillion_NetMessageDuelInvite__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDuelInvite, global::Gazillion.NetMessageDuelInvite.Builder>(internal__static_Gazillion_NetMessageDuelInvite__Descriptor,
                new string[] { "ChallengerEntityId", "ChallengerName", "OpponentEntityId", "OpponentName", });
        internal__static_Gazillion_NetMessageDuelAccept__Descriptor = Descriptor.MessageTypes[63];
        internal__static_Gazillion_NetMessageDuelAccept__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDuelAccept, global::Gazillion.NetMessageDuelAccept.Builder>(internal__static_Gazillion_NetMessageDuelAccept__Descriptor,
                new string[] { "ChallengedEntityId", "ChallengedName", });
        internal__static_Gazillion_NetMessageDuelCancel__Descriptor = Descriptor.MessageTypes[64];
        internal__static_Gazillion_NetMessageDuelCancel__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDuelCancel, global::Gazillion.NetMessageDuelCancel.Builder>(internal__static_Gazillion_NetMessageDuelCancel__Descriptor,
                new string[] { "CancellingEntityId", "CancellingName", });
        internal__static_Gazillion_NetMessageMetaGameUpdateNotification__Descriptor = Descriptor.MessageTypes[65];
        internal__static_Gazillion_NetMessageMetaGameUpdateNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMetaGameUpdateNotification, global::Gazillion.NetMessageMetaGameUpdateNotification.Builder>(internal__static_Gazillion_NetMessageMetaGameUpdateNotification__Descriptor,
                new string[] { "MetaGameEntityId", });
        internal__static_Gazillion_NetMessageChat__Descriptor = Descriptor.MessageTypes[66];
        internal__static_Gazillion_NetMessageChat__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChat, global::Gazillion.NetMessageChat.Builder>(internal__static_Gazillion_NetMessageChat__Descriptor,
                new string[] { "RoomType", "TheMessage", });
        internal__static_Gazillion_NetMessageTell__Descriptor = Descriptor.MessageTypes[67];
        internal__static_Gazillion_NetMessageTell__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTell, global::Gazillion.NetMessageTell.Builder>(internal__static_Gazillion_NetMessageTell__Descriptor,
                new string[] { "TargetPlayerName", "TheMessage", });
        internal__static_Gazillion_NetMessageReportPlayer__Descriptor = Descriptor.MessageTypes[68];
        internal__static_Gazillion_NetMessageReportPlayer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReportPlayer, global::Gazillion.NetMessageReportPlayer.Builder>(internal__static_Gazillion_NetMessageReportPlayer__Descriptor,
                new string[] { "TargetPlayerName", "Reason", });
        internal__static_Gazillion_NetMessageGetCatalog__Descriptor = Descriptor.MessageTypes[69];
        internal__static_Gazillion_NetMessageGetCatalog__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGetCatalog, global::Gazillion.NetMessageGetCatalog.Builder>(internal__static_Gazillion_NetMessageGetCatalog__Descriptor,
                new string[] { "Timestamp", "ItemPrototypeRuntimeId", "Localeid", });
        internal__static_Gazillion_NetMessageGetCurrencyBalance__Descriptor = Descriptor.MessageTypes[70];
        internal__static_Gazillion_NetMessageGetCurrencyBalance__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGetCurrencyBalance, global::Gazillion.NetMessageGetCurrencyBalance.Builder>(internal__static_Gazillion_NetMessageGetCurrencyBalance__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageBuyItemFromCatalog__Descriptor = Descriptor.MessageTypes[71];
        internal__static_Gazillion_NetMessageBuyItemFromCatalog__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBuyItemFromCatalog, global::Gazillion.NetMessageBuyItemFromCatalog.Builder>(internal__static_Gazillion_NetMessageBuyItemFromCatalog__Descriptor,
                new string[] { "SkuId", "ItemUnitPrice", "NumUnits", });
        internal__static_Gazillion_EntityPreviewerEnum__Descriptor = Descriptor.MessageTypes[72];
        internal__static_Gazillion_EntityPreviewerEnum__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.EntityPreviewerEnum, global::Gazillion.EntityPreviewerEnum.Builder>(internal__static_Gazillion_EntityPreviewerEnum__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageEntityPreviewerNewTargets__Descriptor = Descriptor.MessageTypes[73];
        internal__static_Gazillion_NetMessageEntityPreviewerNewTargets__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerNewTargets, global::Gazillion.NetMessageEntityPreviewerNewTargets.Builder>(internal__static_Gazillion_NetMessageEntityPreviewerNewTargets__Descriptor,
                new string[] { "Alliance", "NumNewTargets", });
        internal__static_Gazillion_NetMessageEntityPreviewerClearTargets__Descriptor = Descriptor.MessageTypes[74];
        internal__static_Gazillion_NetMessageEntityPreviewerClearTargets__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerClearTargets, global::Gazillion.NetMessageEntityPreviewerClearTargets.Builder>(internal__static_Gazillion_NetMessageEntityPreviewerClearTargets__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageEntityPreviewerSetTargetRef__Descriptor = Descriptor.MessageTypes[75];
        internal__static_Gazillion_NetMessageEntityPreviewerSetTargetRef__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerSetTargetRef, global::Gazillion.NetMessageEntityPreviewerSetTargetRef.Builder>(internal__static_Gazillion_NetMessageEntityPreviewerSetTargetRef__Descriptor,
                new string[] { "TargetRefId", });
        internal__static_Gazillion_NetMessageEntityPreviewerActivatePower__Descriptor = Descriptor.MessageTypes[76];
        internal__static_Gazillion_NetMessageEntityPreviewerActivatePower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerActivatePower, global::Gazillion.NetMessageEntityPreviewerActivatePower.Builder>(internal__static_Gazillion_NetMessageEntityPreviewerActivatePower__Descriptor,
                new string[] { "CasterId", "PowerRefId", "CreateTarget", "RandomTargetPos", });
        internal__static_Gazillion_NetMessageEntityPreviewerAddTarget__Descriptor = Descriptor.MessageTypes[77];
        internal__static_Gazillion_NetMessageEntityPreviewerAddTarget__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerAddTarget, global::Gazillion.NetMessageEntityPreviewerAddTarget.Builder>(internal__static_Gazillion_NetMessageEntityPreviewerAddTarget__Descriptor,
                new string[] { "TargetId", });
        internal__static_Gazillion_NetMessageEntityPreviewerSetEntityState__Descriptor = Descriptor.MessageTypes[78];
        internal__static_Gazillion_NetMessageEntityPreviewerSetEntityState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerSetEntityState, global::Gazillion.NetMessageEntityPreviewerSetEntityState.Builder>(internal__static_Gazillion_NetMessageEntityPreviewerSetEntityState__Descriptor,
                new string[] { "TargetId", "StateRefId", });
        internal__static_Gazillion_NetMessageEntityPreviewerApplyConditions__Descriptor = Descriptor.MessageTypes[79];
        internal__static_Gazillion_NetMessageEntityPreviewerApplyConditions__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerApplyConditions, global::Gazillion.NetMessageEntityPreviewerApplyConditions.Builder>(internal__static_Gazillion_NetMessageEntityPreviewerApplyConditions__Descriptor,
                new string[] { "TargetId", "PowerRefId", });
        internal__static_Gazillion_NetMessageCreateNewPlayerWithSelectedStartingAvatar__Descriptor = Descriptor.MessageTypes[80];
        internal__static_Gazillion_NetMessageCreateNewPlayerWithSelectedStartingAvatar__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCreateNewPlayerWithSelectedStartingAvatar, global::Gazillion.NetMessageCreateNewPlayerWithSelectedStartingAvatar.Builder>(internal__static_Gazillion_NetMessageCreateNewPlayerWithSelectedStartingAvatar__Descriptor,
                new string[] { "StartingAvatarPrototypeId", });
        internal__static_Gazillion_NetMessageOnKioskStartButtonPressed__Descriptor = Descriptor.MessageTypes[81];
        internal__static_Gazillion_NetMessageOnKioskStartButtonPressed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnKioskStartButtonPressed, global::Gazillion.NetMessageOnKioskStartButtonPressed.Builder>(internal__static_Gazillion_NetMessageOnKioskStartButtonPressed__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageNotifyFullscreenMovieFinished__Descriptor = Descriptor.MessageTypes[82];
        internal__static_Gazillion_NetMessageNotifyFullscreenMovieFinished__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageNotifyFullscreenMovieFinished, global::Gazillion.NetMessageNotifyFullscreenMovieFinished.Builder>(internal__static_Gazillion_NetMessageNotifyFullscreenMovieFinished__Descriptor,
                new string[] { "MoviePrototypeId", "UserCancelled", "CinematicsRemaining", });
        internal__static_Gazillion_NetMessageBotSetLevel__Descriptor = Descriptor.MessageTypes[83];
        internal__static_Gazillion_NetMessageBotSetLevel__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotSetLevel, global::Gazillion.NetMessageBotSetLevel.Builder>(internal__static_Gazillion_NetMessageBotSetLevel__Descriptor,
                new string[] { "Level", });
        internal__static_Gazillion_NetMessageBotGodMode__Descriptor = Descriptor.MessageTypes[84];
        internal__static_Gazillion_NetMessageBotGodMode__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotGodMode, global::Gazillion.NetMessageBotGodMode.Builder>(internal__static_Gazillion_NetMessageBotGodMode__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageBotPickAvatar__Descriptor = Descriptor.MessageTypes[85];
        internal__static_Gazillion_NetMessageBotPickAvatar__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotPickAvatar, global::Gazillion.NetMessageBotPickAvatar.Builder>(internal__static_Gazillion_NetMessageBotPickAvatar__Descriptor,
                new string[] { "AvatarBotDataId", "Level", "LootPrototype", "LootTableRoll", });
        internal__static_Gazillion_NetMessageBotRegionChange__Descriptor = Descriptor.MessageTypes[86];
        internal__static_Gazillion_NetMessageBotRegionChange__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotRegionChange, global::Gazillion.NetMessageBotRegionChange.Builder>(internal__static_Gazillion_NetMessageBotRegionChange__Descriptor,
                new string[] { "RegionDataId", });
        internal__static_Gazillion_NetMessageBotWarpAreaNext__Descriptor = Descriptor.MessageTypes[87];
        internal__static_Gazillion_NetMessageBotWarpAreaNext__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotWarpAreaNext, global::Gazillion.NetMessageBotWarpAreaNext.Builder>(internal__static_Gazillion_NetMessageBotWarpAreaNext__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageBotLootGive__Descriptor = Descriptor.MessageTypes[88];
        internal__static_Gazillion_NetMessageBotLootGive__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotLootGive, global::Gazillion.NetMessageBotLootGive.Builder>(internal__static_Gazillion_NetMessageBotLootGive__Descriptor,
                new string[] { "LootPrototype", "LootTableRoll", });
        internal__static_Gazillion_NetMessageBotSetPvPFaction__Descriptor = Descriptor.MessageTypes[89];
        internal__static_Gazillion_NetMessageBotSetPvPFaction__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotSetPvPFaction, global::Gazillion.NetMessageBotSetPvPFaction.Builder>(internal__static_Gazillion_NetMessageBotSetPvPFaction__Descriptor,
                new string[] { "FactionSetPrototype", });
        internal__static_Gazillion_NetMessageBotPvPQueue__Descriptor = Descriptor.MessageTypes[90];
        internal__static_Gazillion_NetMessageBotPvPQueue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotPvPQueue, global::Gazillion.NetMessageBotPvPQueue.Builder>(internal__static_Gazillion_NetMessageBotPvPQueue__Descriptor,
                new string[] { "PvpQueueId", });
        internal__static_Gazillion_NetMessageGetTrackerReport__Descriptor = Descriptor.MessageTypes[91];
        internal__static_Gazillion_NetMessageGetTrackerReport__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGetTrackerReport, global::Gazillion.NetMessageGetTrackerReport.Builder>(internal__static_Gazillion_NetMessageGetTrackerReport__Descriptor,
                new string[] { "MessageSource", "MessageDirection", });
        internal__static_Gazillion_NetMessagePlayKismetSeqDone__Descriptor = Descriptor.MessageTypes[92];
        internal__static_Gazillion_NetMessagePlayKismetSeqDone__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayKismetSeqDone, global::Gazillion.NetMessagePlayKismetSeqDone.Builder>(internal__static_Gazillion_NetMessagePlayKismetSeqDone__Descriptor,
                new string[] { "KismetSeqPrototypeId", });
        internal__static_Gazillion_NetMessageVerifyFailedForRepId__Descriptor = Descriptor.MessageTypes[93];
        internal__static_Gazillion_NetMessageVerifyFailedForRepId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVerifyFailedForRepId, global::Gazillion.NetMessageVerifyFailedForRepId.Builder>(internal__static_Gazillion_NetMessageVerifyFailedForRepId__Descriptor,
                new string[] { "Repid1", "File", "Line", "Debugmsg", "Repid2", });
        internal__static_Gazillion_NetMessageGracefulDisconnect__Descriptor = Descriptor.MessageTypes[94];
        internal__static_Gazillion_NetMessageGracefulDisconnect__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGracefulDisconnect, global::Gazillion.NetMessageGracefulDisconnect.Builder>(internal__static_Gazillion_NetMessageGracefulDisconnect__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageRequestStartNewGame__Descriptor = Descriptor.MessageTypes[95];
        internal__static_Gazillion_NetMessageRequestStartNewGame__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestStartNewGame, global::Gazillion.NetMessageRequestStartNewGame.Builder>(internal__static_Gazillion_NetMessageRequestStartNewGame__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageSetDialogTarget__Descriptor = Descriptor.MessageTypes[96];
        internal__static_Gazillion_NetMessageSetDialogTarget__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetDialogTarget, global::Gazillion.NetMessageSetDialogTarget.Builder>(internal__static_Gazillion_NetMessageSetDialogTarget__Descriptor,
                new string[] { "TargetId", });
        internal__static_Gazillion_NetMessageVendorRequestBuyItemFrom__Descriptor = Descriptor.MessageTypes[97];
        internal__static_Gazillion_NetMessageVendorRequestBuyItemFrom__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRequestBuyItemFrom, global::Gazillion.NetMessageVendorRequestBuyItemFrom.Builder>(internal__static_Gazillion_NetMessageVendorRequestBuyItemFrom__Descriptor,
                new string[] { "ItemId", "VendorId", "InventorySlot", });
        internal__static_Gazillion_NetMessageVendorRequestSellItemTo__Descriptor = Descriptor.MessageTypes[98];
        internal__static_Gazillion_NetMessageVendorRequestSellItemTo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRequestSellItemTo, global::Gazillion.NetMessageVendorRequestSellItemTo.Builder>(internal__static_Gazillion_NetMessageVendorRequestSellItemTo__Descriptor,
                new string[] { "ItemId", "VendorId", });
        internal__static_Gazillion_NetMessageVendorRequestDonateItemTo__Descriptor = Descriptor.MessageTypes[99];
        internal__static_Gazillion_NetMessageVendorRequestDonateItemTo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRequestDonateItemTo, global::Gazillion.NetMessageVendorRequestDonateItemTo.Builder>(internal__static_Gazillion_NetMessageVendorRequestDonateItemTo__Descriptor,
                new string[] { "ItemId", "VendorId", });
        internal__static_Gazillion_NetMessageVendorRequestRefresh__Descriptor = Descriptor.MessageTypes[100];
        internal__static_Gazillion_NetMessageVendorRequestRefresh__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRequestRefresh, global::Gazillion.NetMessageVendorRequestRefresh.Builder>(internal__static_Gazillion_NetMessageVendorRequestRefresh__Descriptor,
                new string[] { "VendorId", });
        internal__static_Gazillion_NetMessageTryModifyCommunityMemberCircle__Descriptor = Descriptor.MessageTypes[101];
        internal__static_Gazillion_NetMessageTryModifyCommunityMemberCircle__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryModifyCommunityMemberCircle, global::Gazillion.NetMessageTryModifyCommunityMemberCircle.Builder>(internal__static_Gazillion_NetMessageTryModifyCommunityMemberCircle__Descriptor,
                new string[] { "CircleId", "Operation", "PlayerName", });
        internal__static_Gazillion_NetMessageGuildMessageToPlayerManager__Descriptor = Descriptor.MessageTypes[102];
        internal__static_Gazillion_NetMessageGuildMessageToPlayerManager__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGuildMessageToPlayerManager, global::Gazillion.NetMessageGuildMessageToPlayerManager.Builder>(internal__static_Gazillion_NetMessageGuildMessageToPlayerManager__Descriptor,
                new string[] { "Messages", });
        internal__static_Gazillion_NetMessageSetShowTips__Descriptor = Descriptor.MessageTypes[103];
        internal__static_Gazillion_NetMessageSetShowTips__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetShowTips, global::Gazillion.NetMessageSetShowTips.Builder>(internal__static_Gazillion_NetMessageSetShowTips__Descriptor,
                new string[] { "ShowTips", });
        internal__static_Gazillion_NetMessageSetTipSeen__Descriptor = Descriptor.MessageTypes[104];
        internal__static_Gazillion_NetMessageSetTipSeen__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetTipSeen, global::Gazillion.NetMessageSetTipSeen.Builder>(internal__static_Gazillion_NetMessageSetTipSeen__Descriptor,
                new string[] { "TipDataRefId", });
        internal__static_Gazillion_NetMessageResetSeenTips__Descriptor = Descriptor.MessageTypes[105];
        internal__static_Gazillion_NetMessageResetSeenTips__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageResetSeenTips, global::Gazillion.NetMessageResetSeenTips.Builder>(internal__static_Gazillion_NetMessageResetSeenTips__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageTryMoveInventoryContentsToGeneral__Descriptor = Descriptor.MessageTypes[106];
        internal__static_Gazillion_NetMessageTryMoveInventoryContentsToGeneral__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryMoveInventoryContentsToGeneral, global::Gazillion.NetMessageTryMoveInventoryContentsToGeneral.Builder>(internal__static_Gazillion_NetMessageTryMoveInventoryContentsToGeneral__Descriptor,
                new string[] { "SourceInventoryPrototype", });
        internal__static_Gazillion_NetMessageSetPlayerGameplayOptions__Descriptor = Descriptor.MessageTypes[107];
        internal__static_Gazillion_NetMessageSetPlayerGameplayOptions__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetPlayerGameplayOptions, global::Gazillion.NetMessageSetPlayerGameplayOptions.Builder>(internal__static_Gazillion_NetMessageSetPlayerGameplayOptions__Descriptor,
                new string[] { "OptionsData", });
        internal__static_Gazillion_NetMessageTeleportToPartyMember__Descriptor = Descriptor.MessageTypes[108];
        internal__static_Gazillion_NetMessageTeleportToPartyMember__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTeleportToPartyMember, global::Gazillion.NetMessageTeleportToPartyMember.Builder>(internal__static_Gazillion_NetMessageTeleportToPartyMember__Descriptor,
                new string[] { "PlayerName", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Gazillion.GazillionCommon.RegisterAllExtensions(registry);
        global::Gazillion.CommonMessages.RegisterAllExtensions(registry);
        global::Gazillion.ChatCommon.RegisterAllExtensions(registry);
        global::Gazillion.Guild.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Gazillion.GazillionCommon.Descriptor, 
          global::Gazillion.CommonMessages.Descriptor, 
          global::Gazillion.ChatCommon.Descriptor, 
          global::Gazillion.Guild.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageReadyForGameJoin : pb::GeneratedMessage<NetMessageReadyForGameJoin, NetMessageReadyForGameJoin.Builder> {
    private NetMessageReadyForGameJoin() { }
    private static readonly NetMessageReadyForGameJoin defaultInstance = new NetMessageReadyForGameJoin().MakeReadOnly();
    private static readonly string[] _netMessageReadyForGameJoinFieldNames = new string[] { "domainLoginName", "playerImportData", "playerName", "wipePlayerRecordsOnLogin", "wipesDataIfMismatchedInDb" };
    private static readonly uint[] _netMessageReadyForGameJoinFieldTags = new uint[] { 34, 42, 10, 16, 24 };
    public static NetMessageReadyForGameJoin DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageReadyForGameJoin DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageReadyForGameJoin ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageReadyForGameJoin__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageReadyForGameJoin, NetMessageReadyForGameJoin.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageReadyForGameJoin__FieldAccessorTable; }
    }
    
    public const int PlayerNameFieldNumber = 1;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
    }
    
    public const int WipesDataIfMismatchedInDbFieldNumber = 3;
    private bool hasWipesDataIfMismatchedInDb;
    private int wipesDataIfMismatchedInDb_;
    public bool HasWipesDataIfMismatchedInDb {
      get { return hasWipesDataIfMismatchedInDb; }
    }
    public int WipesDataIfMismatchedInDb {
      get { return wipesDataIfMismatchedInDb_; }
    }
    
    public const int WipePlayerRecordsOnLoginFieldNumber = 2;
    private bool hasWipePlayerRecordsOnLogin;
    private bool wipePlayerRecordsOnLogin_;
    public bool HasWipePlayerRecordsOnLogin {
      get { return hasWipePlayerRecordsOnLogin; }
    }
    public bool WipePlayerRecordsOnLogin {
      get { return wipePlayerRecordsOnLogin_; }
    }
    
    public const int DomainLoginNameFieldNumber = 4;
    private bool hasDomainLoginName;
    private string domainLoginName_ = "";
    public bool HasDomainLoginName {
      get { return hasDomainLoginName; }
    }
    public string DomainLoginName {
      get { return domainLoginName_; }
    }
    
    public const int PlayerImportDataFieldNumber = 5;
    private bool hasPlayerImportData;
    private pb::ByteString playerImportData_ = pb::ByteString.Empty;
    public bool HasPlayerImportData {
      get { return hasPlayerImportData; }
    }
    public pb::ByteString PlayerImportData {
      get { return playerImportData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerName) return false;
        if (!hasWipesDataIfMismatchedInDb) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageReadyForGameJoinFieldNames;
      if (hasPlayerName) {
        output.WriteString(1, field_names[2], PlayerName);
      }
      if (hasWipePlayerRecordsOnLogin) {
        output.WriteBool(2, field_names[3], WipePlayerRecordsOnLogin);
      }
      if (hasWipesDataIfMismatchedInDb) {
        output.WriteInt32(3, field_names[4], WipesDataIfMismatchedInDb);
      }
      if (hasDomainLoginName) {
        output.WriteString(4, field_names[0], DomainLoginName);
      }
      if (hasPlayerImportData) {
        output.WriteBytes(5, field_names[1], PlayerImportData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, PlayerName);
      }
      if (hasWipesDataIfMismatchedInDb) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, WipesDataIfMismatchedInDb);
      }
      if (hasWipePlayerRecordsOnLogin) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, WipePlayerRecordsOnLogin);
      }
      if (hasDomainLoginName) {
        size += pb::CodedOutputStream.ComputeStringSize(4, DomainLoginName);
      }
      if (hasPlayerImportData) {
        size += pb::CodedOutputStream.ComputeBytesSize(5, PlayerImportData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageReadyForGameJoin ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReadyForGameJoin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyForGameJoin ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReadyForGameJoin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyForGameJoin ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReadyForGameJoin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyForGameJoin ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageReadyForGameJoin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageReadyForGameJoin ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReadyForGameJoin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageReadyForGameJoin MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageReadyForGameJoin prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageReadyForGameJoin, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageReadyForGameJoin cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageReadyForGameJoin result;
      
      private NetMessageReadyForGameJoin PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageReadyForGameJoin original = result;
          result = new NetMessageReadyForGameJoin();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageReadyForGameJoin MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageReadyForGameJoin.Descriptor; }
      }
      
      public override NetMessageReadyForGameJoin DefaultInstanceForType {
        get { return global::Gazillion.NetMessageReadyForGameJoin.DefaultInstance; }
      }
      
      public override NetMessageReadyForGameJoin BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageReadyForGameJoin) {
          return MergeFrom((NetMessageReadyForGameJoin) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageReadyForGameJoin other) {
        if (other == global::Gazillion.NetMessageReadyForGameJoin.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        if (other.HasWipesDataIfMismatchedInDb) {
          WipesDataIfMismatchedInDb = other.WipesDataIfMismatchedInDb;
        }
        if (other.HasWipePlayerRecordsOnLogin) {
          WipePlayerRecordsOnLogin = other.WipePlayerRecordsOnLogin;
        }
        if (other.HasDomainLoginName) {
          DomainLoginName = other.DomainLoginName;
        }
        if (other.HasPlayerImportData) {
          PlayerImportData = other.PlayerImportData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageReadyForGameJoinFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageReadyForGameJoinFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
            case 16: {
              result.hasWipePlayerRecordsOnLogin = input.ReadBool(ref result.wipePlayerRecordsOnLogin_);
              break;
            }
            case 24: {
              result.hasWipesDataIfMismatchedInDb = input.ReadInt32(ref result.wipesDataIfMismatchedInDb_);
              break;
            }
            case 34: {
              result.hasDomainLoginName = input.ReadString(ref result.domainLoginName_);
              break;
            }
            case 42: {
              result.hasPlayerImportData = input.ReadBytes(ref result.playerImportData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
      
      public bool HasWipesDataIfMismatchedInDb {
        get { return result.hasWipesDataIfMismatchedInDb; }
      }
      public int WipesDataIfMismatchedInDb {
        get { return result.WipesDataIfMismatchedInDb; }
        set { SetWipesDataIfMismatchedInDb(value); }
      }
      public Builder SetWipesDataIfMismatchedInDb(int value) {
        PrepareBuilder();
        result.hasWipesDataIfMismatchedInDb = true;
        result.wipesDataIfMismatchedInDb_ = value;
        return this;
      }
      public Builder ClearWipesDataIfMismatchedInDb() {
        PrepareBuilder();
        result.hasWipesDataIfMismatchedInDb = false;
        result.wipesDataIfMismatchedInDb_ = 0;
        return this;
      }
      
      public bool HasWipePlayerRecordsOnLogin {
        get { return result.hasWipePlayerRecordsOnLogin; }
      }
      public bool WipePlayerRecordsOnLogin {
        get { return result.WipePlayerRecordsOnLogin; }
        set { SetWipePlayerRecordsOnLogin(value); }
      }
      public Builder SetWipePlayerRecordsOnLogin(bool value) {
        PrepareBuilder();
        result.hasWipePlayerRecordsOnLogin = true;
        result.wipePlayerRecordsOnLogin_ = value;
        return this;
      }
      public Builder ClearWipePlayerRecordsOnLogin() {
        PrepareBuilder();
        result.hasWipePlayerRecordsOnLogin = false;
        result.wipePlayerRecordsOnLogin_ = false;
        return this;
      }
      
      public bool HasDomainLoginName {
        get { return result.hasDomainLoginName; }
      }
      public string DomainLoginName {
        get { return result.DomainLoginName; }
        set { SetDomainLoginName(value); }
      }
      public Builder SetDomainLoginName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDomainLoginName = true;
        result.domainLoginName_ = value;
        return this;
      }
      public Builder ClearDomainLoginName() {
        PrepareBuilder();
        result.hasDomainLoginName = false;
        result.domainLoginName_ = "";
        return this;
      }
      
      public bool HasPlayerImportData {
        get { return result.hasPlayerImportData; }
      }
      public pb::ByteString PlayerImportData {
        get { return result.PlayerImportData; }
        set { SetPlayerImportData(value); }
      }
      public Builder SetPlayerImportData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerImportData = true;
        result.playerImportData_ = value;
        return this;
      }
      public Builder ClearPlayerImportData() {
        PrepareBuilder();
        result.hasPlayerImportData = false;
        result.playerImportData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static NetMessageReadyForGameJoin() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePlayerSystemMetrics : pb::GeneratedMessage<NetMessagePlayerSystemMetrics, NetMessagePlayerSystemMetrics.Builder> {
    private NetMessagePlayerSystemMetrics() { }
    private static readonly NetMessagePlayerSystemMetrics defaultInstance = new NetMessagePlayerSystemMetrics().MakeReadOnly();
    private static readonly string[] _netMessagePlayerSystemMetricsFieldNames = new string[] { "compatLevelComposite", "compatLevelCpu", "compatLevelGpu", "cpuName", "displayDeviceDriverDate", "displayDeviceDualGPU", "displayDeviceName", "osName", "ramName" };
    private static readonly uint[] _netMessagePlayerSystemMetricsFieldTags = new uint[] { 24, 8, 16, 42, 74, 64, 58, 34, 50 };
    public static NetMessagePlayerSystemMetrics DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePlayerSystemMetrics DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePlayerSystemMetrics ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePlayerSystemMetrics__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePlayerSystemMetrics, NetMessagePlayerSystemMetrics.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePlayerSystemMetrics__FieldAccessorTable; }
    }
    
    public const int CompatLevelCpuFieldNumber = 1;
    private bool hasCompatLevelCpu;
    private int compatLevelCpu_ = -1;
    public bool HasCompatLevelCpu {
      get { return hasCompatLevelCpu; }
    }
    public int CompatLevelCpu {
      get { return compatLevelCpu_; }
    }
    
    public const int CompatLevelGpuFieldNumber = 2;
    private bool hasCompatLevelGpu;
    private int compatLevelGpu_ = -1;
    public bool HasCompatLevelGpu {
      get { return hasCompatLevelGpu; }
    }
    public int CompatLevelGpu {
      get { return compatLevelGpu_; }
    }
    
    public const int CompatLevelCompositeFieldNumber = 3;
    private bool hasCompatLevelComposite;
    private int compatLevelComposite_ = -1;
    public bool HasCompatLevelComposite {
      get { return hasCompatLevelComposite; }
    }
    public int CompatLevelComposite {
      get { return compatLevelComposite_; }
    }
    
    public const int OsNameFieldNumber = 4;
    private bool hasOsName;
    private string osName_ = "";
    public bool HasOsName {
      get { return hasOsName; }
    }
    public string OsName {
      get { return osName_; }
    }
    
    public const int CpuNameFieldNumber = 5;
    private bool hasCpuName;
    private string cpuName_ = "";
    public bool HasCpuName {
      get { return hasCpuName; }
    }
    public string CpuName {
      get { return cpuName_; }
    }
    
    public const int RamNameFieldNumber = 6;
    private bool hasRamName;
    private string ramName_ = "";
    public bool HasRamName {
      get { return hasRamName; }
    }
    public string RamName {
      get { return ramName_; }
    }
    
    public const int DisplayDeviceNameFieldNumber = 7;
    private bool hasDisplayDeviceName;
    private string displayDeviceName_ = "";
    public bool HasDisplayDeviceName {
      get { return hasDisplayDeviceName; }
    }
    public string DisplayDeviceName {
      get { return displayDeviceName_; }
    }
    
    public const int DisplayDeviceDualGPUFieldNumber = 8;
    private bool hasDisplayDeviceDualGPU;
    private bool displayDeviceDualGPU_;
    public bool HasDisplayDeviceDualGPU {
      get { return hasDisplayDeviceDualGPU; }
    }
    public bool DisplayDeviceDualGPU {
      get { return displayDeviceDualGPU_; }
    }
    
    public const int DisplayDeviceDriverDateFieldNumber = 9;
    private bool hasDisplayDeviceDriverDate;
    private string displayDeviceDriverDate_ = "";
    public bool HasDisplayDeviceDriverDate {
      get { return hasDisplayDeviceDriverDate; }
    }
    public string DisplayDeviceDriverDate {
      get { return displayDeviceDriverDate_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCompatLevelCpu) return false;
        if (!hasCompatLevelGpu) return false;
        if (!hasCompatLevelComposite) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePlayerSystemMetricsFieldNames;
      if (hasCompatLevelCpu) {
        output.WriteInt32(1, field_names[1], CompatLevelCpu);
      }
      if (hasCompatLevelGpu) {
        output.WriteInt32(2, field_names[2], CompatLevelGpu);
      }
      if (hasCompatLevelComposite) {
        output.WriteInt32(3, field_names[0], CompatLevelComposite);
      }
      if (hasOsName) {
        output.WriteString(4, field_names[7], OsName);
      }
      if (hasCpuName) {
        output.WriteString(5, field_names[3], CpuName);
      }
      if (hasRamName) {
        output.WriteString(6, field_names[8], RamName);
      }
      if (hasDisplayDeviceName) {
        output.WriteString(7, field_names[6], DisplayDeviceName);
      }
      if (hasDisplayDeviceDualGPU) {
        output.WriteBool(8, field_names[5], DisplayDeviceDualGPU);
      }
      if (hasDisplayDeviceDriverDate) {
        output.WriteString(9, field_names[4], DisplayDeviceDriverDate);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCompatLevelCpu) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, CompatLevelCpu);
      }
      if (hasCompatLevelGpu) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, CompatLevelGpu);
      }
      if (hasCompatLevelComposite) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, CompatLevelComposite);
      }
      if (hasOsName) {
        size += pb::CodedOutputStream.ComputeStringSize(4, OsName);
      }
      if (hasCpuName) {
        size += pb::CodedOutputStream.ComputeStringSize(5, CpuName);
      }
      if (hasRamName) {
        size += pb::CodedOutputStream.ComputeStringSize(6, RamName);
      }
      if (hasDisplayDeviceName) {
        size += pb::CodedOutputStream.ComputeStringSize(7, DisplayDeviceName);
      }
      if (hasDisplayDeviceDualGPU) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, DisplayDeviceDualGPU);
      }
      if (hasDisplayDeviceDriverDate) {
        size += pb::CodedOutputStream.ComputeStringSize(9, DisplayDeviceDriverDate);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePlayerSystemMetrics ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayerSystemMetrics ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerSystemMetrics ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayerSystemMetrics ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerSystemMetrics ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayerSystemMetrics ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerSystemMetrics ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePlayerSystemMetrics ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePlayerSystemMetrics ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayerSystemMetrics ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePlayerSystemMetrics MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePlayerSystemMetrics prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePlayerSystemMetrics, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePlayerSystemMetrics cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePlayerSystemMetrics result;
      
      private NetMessagePlayerSystemMetrics PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePlayerSystemMetrics original = result;
          result = new NetMessagePlayerSystemMetrics();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePlayerSystemMetrics MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePlayerSystemMetrics.Descriptor; }
      }
      
      public override NetMessagePlayerSystemMetrics DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePlayerSystemMetrics.DefaultInstance; }
      }
      
      public override NetMessagePlayerSystemMetrics BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePlayerSystemMetrics) {
          return MergeFrom((NetMessagePlayerSystemMetrics) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePlayerSystemMetrics other) {
        if (other == global::Gazillion.NetMessagePlayerSystemMetrics.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCompatLevelCpu) {
          CompatLevelCpu = other.CompatLevelCpu;
        }
        if (other.HasCompatLevelGpu) {
          CompatLevelGpu = other.CompatLevelGpu;
        }
        if (other.HasCompatLevelComposite) {
          CompatLevelComposite = other.CompatLevelComposite;
        }
        if (other.HasOsName) {
          OsName = other.OsName;
        }
        if (other.HasCpuName) {
          CpuName = other.CpuName;
        }
        if (other.HasRamName) {
          RamName = other.RamName;
        }
        if (other.HasDisplayDeviceName) {
          DisplayDeviceName = other.DisplayDeviceName;
        }
        if (other.HasDisplayDeviceDualGPU) {
          DisplayDeviceDualGPU = other.DisplayDeviceDualGPU;
        }
        if (other.HasDisplayDeviceDriverDate) {
          DisplayDeviceDriverDate = other.DisplayDeviceDriverDate;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePlayerSystemMetricsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePlayerSystemMetricsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCompatLevelCpu = input.ReadInt32(ref result.compatLevelCpu_);
              break;
            }
            case 16: {
              result.hasCompatLevelGpu = input.ReadInt32(ref result.compatLevelGpu_);
              break;
            }
            case 24: {
              result.hasCompatLevelComposite = input.ReadInt32(ref result.compatLevelComposite_);
              break;
            }
            case 34: {
              result.hasOsName = input.ReadString(ref result.osName_);
              break;
            }
            case 42: {
              result.hasCpuName = input.ReadString(ref result.cpuName_);
              break;
            }
            case 50: {
              result.hasRamName = input.ReadString(ref result.ramName_);
              break;
            }
            case 58: {
              result.hasDisplayDeviceName = input.ReadString(ref result.displayDeviceName_);
              break;
            }
            case 64: {
              result.hasDisplayDeviceDualGPU = input.ReadBool(ref result.displayDeviceDualGPU_);
              break;
            }
            case 74: {
              result.hasDisplayDeviceDriverDate = input.ReadString(ref result.displayDeviceDriverDate_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCompatLevelCpu {
        get { return result.hasCompatLevelCpu; }
      }
      public int CompatLevelCpu {
        get { return result.CompatLevelCpu; }
        set { SetCompatLevelCpu(value); }
      }
      public Builder SetCompatLevelCpu(int value) {
        PrepareBuilder();
        result.hasCompatLevelCpu = true;
        result.compatLevelCpu_ = value;
        return this;
      }
      public Builder ClearCompatLevelCpu() {
        PrepareBuilder();
        result.hasCompatLevelCpu = false;
        result.compatLevelCpu_ = -1;
        return this;
      }
      
      public bool HasCompatLevelGpu {
        get { return result.hasCompatLevelGpu; }
      }
      public int CompatLevelGpu {
        get { return result.CompatLevelGpu; }
        set { SetCompatLevelGpu(value); }
      }
      public Builder SetCompatLevelGpu(int value) {
        PrepareBuilder();
        result.hasCompatLevelGpu = true;
        result.compatLevelGpu_ = value;
        return this;
      }
      public Builder ClearCompatLevelGpu() {
        PrepareBuilder();
        result.hasCompatLevelGpu = false;
        result.compatLevelGpu_ = -1;
        return this;
      }
      
      public bool HasCompatLevelComposite {
        get { return result.hasCompatLevelComposite; }
      }
      public int CompatLevelComposite {
        get { return result.CompatLevelComposite; }
        set { SetCompatLevelComposite(value); }
      }
      public Builder SetCompatLevelComposite(int value) {
        PrepareBuilder();
        result.hasCompatLevelComposite = true;
        result.compatLevelComposite_ = value;
        return this;
      }
      public Builder ClearCompatLevelComposite() {
        PrepareBuilder();
        result.hasCompatLevelComposite = false;
        result.compatLevelComposite_ = -1;
        return this;
      }
      
      public bool HasOsName {
        get { return result.hasOsName; }
      }
      public string OsName {
        get { return result.OsName; }
        set { SetOsName(value); }
      }
      public Builder SetOsName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOsName = true;
        result.osName_ = value;
        return this;
      }
      public Builder ClearOsName() {
        PrepareBuilder();
        result.hasOsName = false;
        result.osName_ = "";
        return this;
      }
      
      public bool HasCpuName {
        get { return result.hasCpuName; }
      }
      public string CpuName {
        get { return result.CpuName; }
        set { SetCpuName(value); }
      }
      public Builder SetCpuName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCpuName = true;
        result.cpuName_ = value;
        return this;
      }
      public Builder ClearCpuName() {
        PrepareBuilder();
        result.hasCpuName = false;
        result.cpuName_ = "";
        return this;
      }
      
      public bool HasRamName {
        get { return result.hasRamName; }
      }
      public string RamName {
        get { return result.RamName; }
        set { SetRamName(value); }
      }
      public Builder SetRamName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRamName = true;
        result.ramName_ = value;
        return this;
      }
      public Builder ClearRamName() {
        PrepareBuilder();
        result.hasRamName = false;
        result.ramName_ = "";
        return this;
      }
      
      public bool HasDisplayDeviceName {
        get { return result.hasDisplayDeviceName; }
      }
      public string DisplayDeviceName {
        get { return result.DisplayDeviceName; }
        set { SetDisplayDeviceName(value); }
      }
      public Builder SetDisplayDeviceName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDisplayDeviceName = true;
        result.displayDeviceName_ = value;
        return this;
      }
      public Builder ClearDisplayDeviceName() {
        PrepareBuilder();
        result.hasDisplayDeviceName = false;
        result.displayDeviceName_ = "";
        return this;
      }
      
      public bool HasDisplayDeviceDualGPU {
        get { return result.hasDisplayDeviceDualGPU; }
      }
      public bool DisplayDeviceDualGPU {
        get { return result.DisplayDeviceDualGPU; }
        set { SetDisplayDeviceDualGPU(value); }
      }
      public Builder SetDisplayDeviceDualGPU(bool value) {
        PrepareBuilder();
        result.hasDisplayDeviceDualGPU = true;
        result.displayDeviceDualGPU_ = value;
        return this;
      }
      public Builder ClearDisplayDeviceDualGPU() {
        PrepareBuilder();
        result.hasDisplayDeviceDualGPU = false;
        result.displayDeviceDualGPU_ = false;
        return this;
      }
      
      public bool HasDisplayDeviceDriverDate {
        get { return result.hasDisplayDeviceDriverDate; }
      }
      public string DisplayDeviceDriverDate {
        get { return result.DisplayDeviceDriverDate; }
        set { SetDisplayDeviceDriverDate(value); }
      }
      public Builder SetDisplayDeviceDriverDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDisplayDeviceDriverDate = true;
        result.displayDeviceDriverDate_ = value;
        return this;
      }
      public Builder ClearDisplayDeviceDriverDate() {
        PrepareBuilder();
        result.hasDisplayDeviceDriverDate = false;
        result.displayDeviceDriverDate_ = "";
        return this;
      }
    }
    static NetMessagePlayerSystemMetrics() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSyncTimeRequest : pb::GeneratedMessage<NetMessageSyncTimeRequest, NetMessageSyncTimeRequest.Builder> {
    private NetMessageSyncTimeRequest() { }
    private static readonly NetMessageSyncTimeRequest defaultInstance = new NetMessageSyncTimeRequest().MakeReadOnly();
    private static readonly string[] _netMessageSyncTimeRequestFieldNames = new string[] { "dateTimeClientSent", "gameTimeClientSent" };
    private static readonly uint[] _netMessageSyncTimeRequestFieldTags = new uint[] { 16, 8 };
    public static NetMessageSyncTimeRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSyncTimeRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSyncTimeRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSyncTimeRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSyncTimeRequest, NetMessageSyncTimeRequest.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSyncTimeRequest__FieldAccessorTable; }
    }
    
    public const int GameTimeClientSentFieldNumber = 1;
    private bool hasGameTimeClientSent;
    private long gameTimeClientSent_;
    public bool HasGameTimeClientSent {
      get { return hasGameTimeClientSent; }
    }
    public long GameTimeClientSent {
      get { return gameTimeClientSent_; }
    }
    
    public const int DateTimeClientSentFieldNumber = 2;
    private bool hasDateTimeClientSent;
    private long dateTimeClientSent_;
    public bool HasDateTimeClientSent {
      get { return hasDateTimeClientSent; }
    }
    public long DateTimeClientSent {
      get { return dateTimeClientSent_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameTimeClientSent) return false;
        if (!hasDateTimeClientSent) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSyncTimeRequestFieldNames;
      if (hasGameTimeClientSent) {
        output.WriteInt64(1, field_names[1], GameTimeClientSent);
      }
      if (hasDateTimeClientSent) {
        output.WriteInt64(2, field_names[0], DateTimeClientSent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGameTimeClientSent) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, GameTimeClientSent);
      }
      if (hasDateTimeClientSent) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, DateTimeClientSent);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSyncTimeRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSyncTimeRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSyncTimeRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSyncTimeRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSyncTimeRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSyncTimeRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSyncTimeRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSyncTimeRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSyncTimeRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSyncTimeRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSyncTimeRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSyncTimeRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSyncTimeRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSyncTimeRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSyncTimeRequest result;
      
      private NetMessageSyncTimeRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSyncTimeRequest original = result;
          result = new NetMessageSyncTimeRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSyncTimeRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSyncTimeRequest.Descriptor; }
      }
      
      public override NetMessageSyncTimeRequest DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSyncTimeRequest.DefaultInstance; }
      }
      
      public override NetMessageSyncTimeRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSyncTimeRequest) {
          return MergeFrom((NetMessageSyncTimeRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSyncTimeRequest other) {
        if (other == global::Gazillion.NetMessageSyncTimeRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameTimeClientSent) {
          GameTimeClientSent = other.GameTimeClientSent;
        }
        if (other.HasDateTimeClientSent) {
          DateTimeClientSent = other.DateTimeClientSent;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSyncTimeRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSyncTimeRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGameTimeClientSent = input.ReadInt64(ref result.gameTimeClientSent_);
              break;
            }
            case 16: {
              result.hasDateTimeClientSent = input.ReadInt64(ref result.dateTimeClientSent_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameTimeClientSent {
        get { return result.hasGameTimeClientSent; }
      }
      public long GameTimeClientSent {
        get { return result.GameTimeClientSent; }
        set { SetGameTimeClientSent(value); }
      }
      public Builder SetGameTimeClientSent(long value) {
        PrepareBuilder();
        result.hasGameTimeClientSent = true;
        result.gameTimeClientSent_ = value;
        return this;
      }
      public Builder ClearGameTimeClientSent() {
        PrepareBuilder();
        result.hasGameTimeClientSent = false;
        result.gameTimeClientSent_ = 0L;
        return this;
      }
      
      public bool HasDateTimeClientSent {
        get { return result.hasDateTimeClientSent; }
      }
      public long DateTimeClientSent {
        get { return result.DateTimeClientSent; }
        set { SetDateTimeClientSent(value); }
      }
      public Builder SetDateTimeClientSent(long value) {
        PrepareBuilder();
        result.hasDateTimeClientSent = true;
        result.dateTimeClientSent_ = value;
        return this;
      }
      public Builder ClearDateTimeClientSent() {
        PrepareBuilder();
        result.hasDateTimeClientSent = false;
        result.dateTimeClientSent_ = 0L;
        return this;
      }
    }
    static NetMessageSyncTimeRequest() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetTimeDialation : pb::GeneratedMessage<NetMessageSetTimeDialation, NetMessageSetTimeDialation.Builder> {
    private NetMessageSetTimeDialation() { }
    private static readonly NetMessageSetTimeDialation defaultInstance = new NetMessageSetTimeDialation().MakeReadOnly();
    private static readonly string[] _netMessageSetTimeDialationFieldNames = new string[] { "dateTimeDialationStarted", "dialation", "gameTimeDialationStarted" };
    private static readonly uint[] _netMessageSetTimeDialationFieldTags = new uint[] { 16, 29, 8 };
    public static NetMessageSetTimeDialation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetTimeDialation DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetTimeDialation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetTimeDialation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetTimeDialation, NetMessageSetTimeDialation.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetTimeDialation__FieldAccessorTable; }
    }
    
    public const int GameTimeDialationStartedFieldNumber = 1;
    private bool hasGameTimeDialationStarted;
    private long gameTimeDialationStarted_;
    public bool HasGameTimeDialationStarted {
      get { return hasGameTimeDialationStarted; }
    }
    public long GameTimeDialationStarted {
      get { return gameTimeDialationStarted_; }
    }
    
    public const int DateTimeDialationStartedFieldNumber = 2;
    private bool hasDateTimeDialationStarted;
    private long dateTimeDialationStarted_;
    public bool HasDateTimeDialationStarted {
      get { return hasDateTimeDialationStarted; }
    }
    public long DateTimeDialationStarted {
      get { return dateTimeDialationStarted_; }
    }
    
    public const int DialationFieldNumber = 3;
    private bool hasDialation;
    private float dialation_;
    public bool HasDialation {
      get { return hasDialation; }
    }
    public float Dialation {
      get { return dialation_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameTimeDialationStarted) return false;
        if (!hasDateTimeDialationStarted) return false;
        if (!hasDialation) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetTimeDialationFieldNames;
      if (hasGameTimeDialationStarted) {
        output.WriteInt64(1, field_names[2], GameTimeDialationStarted);
      }
      if (hasDateTimeDialationStarted) {
        output.WriteInt64(2, field_names[0], DateTimeDialationStarted);
      }
      if (hasDialation) {
        output.WriteFloat(3, field_names[1], Dialation);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGameTimeDialationStarted) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, GameTimeDialationStarted);
      }
      if (hasDateTimeDialationStarted) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, DateTimeDialationStarted);
      }
      if (hasDialation) {
        size += pb::CodedOutputStream.ComputeFloatSize(3, Dialation);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetTimeDialation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetTimeDialation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetTimeDialation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetTimeDialation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetTimeDialation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetTimeDialation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetTimeDialation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetTimeDialation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetTimeDialation ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetTimeDialation ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetTimeDialation MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetTimeDialation prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetTimeDialation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetTimeDialation cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetTimeDialation result;
      
      private NetMessageSetTimeDialation PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetTimeDialation original = result;
          result = new NetMessageSetTimeDialation();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetTimeDialation MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetTimeDialation.Descriptor; }
      }
      
      public override NetMessageSetTimeDialation DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetTimeDialation.DefaultInstance; }
      }
      
      public override NetMessageSetTimeDialation BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetTimeDialation) {
          return MergeFrom((NetMessageSetTimeDialation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetTimeDialation other) {
        if (other == global::Gazillion.NetMessageSetTimeDialation.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameTimeDialationStarted) {
          GameTimeDialationStarted = other.GameTimeDialationStarted;
        }
        if (other.HasDateTimeDialationStarted) {
          DateTimeDialationStarted = other.DateTimeDialationStarted;
        }
        if (other.HasDialation) {
          Dialation = other.Dialation;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetTimeDialationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetTimeDialationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGameTimeDialationStarted = input.ReadInt64(ref result.gameTimeDialationStarted_);
              break;
            }
            case 16: {
              result.hasDateTimeDialationStarted = input.ReadInt64(ref result.dateTimeDialationStarted_);
              break;
            }
            case 29: {
              result.hasDialation = input.ReadFloat(ref result.dialation_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameTimeDialationStarted {
        get { return result.hasGameTimeDialationStarted; }
      }
      public long GameTimeDialationStarted {
        get { return result.GameTimeDialationStarted; }
        set { SetGameTimeDialationStarted(value); }
      }
      public Builder SetGameTimeDialationStarted(long value) {
        PrepareBuilder();
        result.hasGameTimeDialationStarted = true;
        result.gameTimeDialationStarted_ = value;
        return this;
      }
      public Builder ClearGameTimeDialationStarted() {
        PrepareBuilder();
        result.hasGameTimeDialationStarted = false;
        result.gameTimeDialationStarted_ = 0L;
        return this;
      }
      
      public bool HasDateTimeDialationStarted {
        get { return result.hasDateTimeDialationStarted; }
      }
      public long DateTimeDialationStarted {
        get { return result.DateTimeDialationStarted; }
        set { SetDateTimeDialationStarted(value); }
      }
      public Builder SetDateTimeDialationStarted(long value) {
        PrepareBuilder();
        result.hasDateTimeDialationStarted = true;
        result.dateTimeDialationStarted_ = value;
        return this;
      }
      public Builder ClearDateTimeDialationStarted() {
        PrepareBuilder();
        result.hasDateTimeDialationStarted = false;
        result.dateTimeDialationStarted_ = 0L;
        return this;
      }
      
      public bool HasDialation {
        get { return result.hasDialation; }
      }
      public float Dialation {
        get { return result.Dialation; }
        set { SetDialation(value); }
      }
      public Builder SetDialation(float value) {
        PrepareBuilder();
        result.hasDialation = true;
        result.dialation_ = value;
        return this;
      }
      public Builder ClearDialation() {
        PrepareBuilder();
        result.hasDialation = false;
        result.dialation_ = 0F;
        return this;
      }
    }
    static NetMessageSetTimeDialation() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageIsRegionAvailable : pb::GeneratedMessage<NetMessageIsRegionAvailable, NetMessageIsRegionAvailable.Builder> {
    private NetMessageIsRegionAvailable() { }
    private static readonly NetMessageIsRegionAvailable defaultInstance = new NetMessageIsRegionAvailable().MakeReadOnly();
    private static readonly string[] _netMessageIsRegionAvailableFieldNames = new string[] { "isAvailable", "regionPrototype" };
    private static readonly uint[] _netMessageIsRegionAvailableFieldTags = new uint[] { 16, 8 };
    public static NetMessageIsRegionAvailable DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageIsRegionAvailable DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageIsRegionAvailable ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageIsRegionAvailable__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageIsRegionAvailable, NetMessageIsRegionAvailable.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageIsRegionAvailable__FieldAccessorTable; }
    }
    
    public const int RegionPrototypeFieldNumber = 1;
    private bool hasRegionPrototype;
    private ulong regionPrototype_;
    public bool HasRegionPrototype {
      get { return hasRegionPrototype; }
    }
    public ulong RegionPrototype {
      get { return regionPrototype_; }
    }
    
    public const int IsAvailableFieldNumber = 2;
    private bool hasIsAvailable;
    private bool isAvailable_;
    public bool HasIsAvailable {
      get { return hasIsAvailable; }
    }
    public bool IsAvailable {
      get { return isAvailable_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRegionPrototype) return false;
        if (!hasIsAvailable) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageIsRegionAvailableFieldNames;
      if (hasRegionPrototype) {
        output.WriteUInt64(1, field_names[1], RegionPrototype);
      }
      if (hasIsAvailable) {
        output.WriteBool(2, field_names[0], IsAvailable);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRegionPrototype) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, RegionPrototype);
      }
      if (hasIsAvailable) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, IsAvailable);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageIsRegionAvailable ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageIsRegionAvailable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageIsRegionAvailable ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageIsRegionAvailable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageIsRegionAvailable ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageIsRegionAvailable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageIsRegionAvailable ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageIsRegionAvailable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageIsRegionAvailable ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageIsRegionAvailable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageIsRegionAvailable MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageIsRegionAvailable prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageIsRegionAvailable, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageIsRegionAvailable cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageIsRegionAvailable result;
      
      private NetMessageIsRegionAvailable PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageIsRegionAvailable original = result;
          result = new NetMessageIsRegionAvailable();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageIsRegionAvailable MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageIsRegionAvailable.Descriptor; }
      }
      
      public override NetMessageIsRegionAvailable DefaultInstanceForType {
        get { return global::Gazillion.NetMessageIsRegionAvailable.DefaultInstance; }
      }
      
      public override NetMessageIsRegionAvailable BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageIsRegionAvailable) {
          return MergeFrom((NetMessageIsRegionAvailable) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageIsRegionAvailable other) {
        if (other == global::Gazillion.NetMessageIsRegionAvailable.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRegionPrototype) {
          RegionPrototype = other.RegionPrototype;
        }
        if (other.HasIsAvailable) {
          IsAvailable = other.IsAvailable;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageIsRegionAvailableFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageIsRegionAvailableFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRegionPrototype = input.ReadUInt64(ref result.regionPrototype_);
              break;
            }
            case 16: {
              result.hasIsAvailable = input.ReadBool(ref result.isAvailable_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRegionPrototype {
        get { return result.hasRegionPrototype; }
      }
      public ulong RegionPrototype {
        get { return result.RegionPrototype; }
        set { SetRegionPrototype(value); }
      }
      public Builder SetRegionPrototype(ulong value) {
        PrepareBuilder();
        result.hasRegionPrototype = true;
        result.regionPrototype_ = value;
        return this;
      }
      public Builder ClearRegionPrototype() {
        PrepareBuilder();
        result.hasRegionPrototype = false;
        result.regionPrototype_ = 0UL;
        return this;
      }
      
      public bool HasIsAvailable {
        get { return result.hasIsAvailable; }
      }
      public bool IsAvailable {
        get { return result.IsAvailable; }
        set { SetIsAvailable(value); }
      }
      public Builder SetIsAvailable(bool value) {
        PrepareBuilder();
        result.hasIsAvailable = true;
        result.isAvailable_ = value;
        return this;
      }
      public Builder ClearIsAvailable() {
        PrepareBuilder();
        result.hasIsAvailable = false;
        result.isAvailable_ = false;
        return this;
      }
    }
    static NetMessageIsRegionAvailable() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUpdateAvatarState : pb::GeneratedMessage<NetMessageUpdateAvatarState, NetMessageUpdateAvatarState.Builder> {
    private NetMessageUpdateAvatarState() { }
    private static readonly NetMessageUpdateAvatarState defaultInstance = new NetMessageUpdateAvatarState().MakeReadOnly();
    private static readonly string[] _netMessageUpdateAvatarStateFieldNames = new string[] { "idAvatar", "isTeleport", "locomotionstate", "orientation", "position" };
    private static readonly uint[] _netMessageUpdateAvatarStateFieldTags = new uint[] { 8, 40, 34, 26, 18 };
    public static NetMessageUpdateAvatarState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUpdateAvatarState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUpdateAvatarState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUpdateAvatarState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUpdateAvatarState, NetMessageUpdateAvatarState.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUpdateAvatarState__FieldAccessorTable; }
    }
    
    public const int IdAvatarFieldNumber = 1;
    private bool hasIdAvatar;
    private ulong idAvatar_;
    public bool HasIdAvatar {
      get { return hasIdAvatar; }
    }
    public ulong IdAvatar {
      get { return idAvatar_; }
    }
    
    public const int PositionFieldNumber = 2;
    private bool hasPosition;
    private global::Gazillion.NetStructPoint3 position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::Gazillion.NetStructPoint3 Position {
      get { return position_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int OrientationFieldNumber = 3;
    private bool hasOrientation;
    private global::Gazillion.NetStructPoint3 orientation_;
    public bool HasOrientation {
      get { return hasOrientation; }
    }
    public global::Gazillion.NetStructPoint3 Orientation {
      get { return orientation_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int LocomotionstateFieldNumber = 4;
    private bool hasLocomotionstate;
    private global::Gazillion.NetStructLocomotionState locomotionstate_;
    public bool HasLocomotionstate {
      get { return hasLocomotionstate; }
    }
    public global::Gazillion.NetStructLocomotionState Locomotionstate {
      get { return locomotionstate_ ?? global::Gazillion.NetStructLocomotionState.DefaultInstance; }
    }
    
    public const int IsTeleportFieldNumber = 5;
    private bool hasIsTeleport;
    private bool isTeleport_;
    public bool HasIsTeleport {
      get { return hasIsTeleport; }
    }
    public bool IsTeleport {
      get { return isTeleport_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdAvatar) return false;
        if (!hasPosition) return false;
        if (!hasOrientation) return false;
        if (HasLocomotionstate) {
          if (!Locomotionstate.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUpdateAvatarStateFieldNames;
      if (hasIdAvatar) {
        output.WriteUInt64(1, field_names[0], IdAvatar);
      }
      if (hasPosition) {
        output.WriteMessage(2, field_names[4], Position);
      }
      if (hasOrientation) {
        output.WriteMessage(3, field_names[3], Orientation);
      }
      if (hasLocomotionstate) {
        output.WriteMessage(4, field_names[2], Locomotionstate);
      }
      if (hasIsTeleport) {
        output.WriteBool(5, field_names[1], IsTeleport);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdAvatar) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdAvatar);
      }
      if (hasPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Position);
      }
      if (hasOrientation) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Orientation);
      }
      if (hasLocomotionstate) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Locomotionstate);
      }
      if (hasIsTeleport) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, IsTeleport);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUpdateAvatarState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUpdateAvatarState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdateAvatarState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUpdateAvatarState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdateAvatarState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUpdateAvatarState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdateAvatarState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUpdateAvatarState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUpdateAvatarState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUpdateAvatarState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUpdateAvatarState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUpdateAvatarState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUpdateAvatarState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUpdateAvatarState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUpdateAvatarState result;
      
      private NetMessageUpdateAvatarState PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUpdateAvatarState original = result;
          result = new NetMessageUpdateAvatarState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUpdateAvatarState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUpdateAvatarState.Descriptor; }
      }
      
      public override NetMessageUpdateAvatarState DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUpdateAvatarState.DefaultInstance; }
      }
      
      public override NetMessageUpdateAvatarState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUpdateAvatarState) {
          return MergeFrom((NetMessageUpdateAvatarState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUpdateAvatarState other) {
        if (other == global::Gazillion.NetMessageUpdateAvatarState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdAvatar) {
          IdAvatar = other.IdAvatar;
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasOrientation) {
          MergeOrientation(other.Orientation);
        }
        if (other.HasLocomotionstate) {
          MergeLocomotionstate(other.Locomotionstate);
        }
        if (other.HasIsTeleport) {
          IsTeleport = other.IsTeleport;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUpdateAvatarStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUpdateAvatarStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdAvatar = input.ReadUInt64(ref result.idAvatar_);
              break;
            }
            case 18: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasOrientation) {
                subBuilder.MergeFrom(Orientation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Orientation = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Gazillion.NetStructLocomotionState.Builder subBuilder = global::Gazillion.NetStructLocomotionState.CreateBuilder();
              if (result.hasLocomotionstate) {
                subBuilder.MergeFrom(Locomotionstate);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Locomotionstate = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasIsTeleport = input.ReadBool(ref result.isTeleport_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdAvatar {
        get { return result.hasIdAvatar; }
      }
      public ulong IdAvatar {
        get { return result.IdAvatar; }
        set { SetIdAvatar(value); }
      }
      public Builder SetIdAvatar(ulong value) {
        PrepareBuilder();
        result.hasIdAvatar = true;
        result.idAvatar_ = value;
        return this;
      }
      public Builder ClearIdAvatar() {
        PrepareBuilder();
        result.hasIdAvatar = false;
        result.idAvatar_ = 0UL;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::Gazillion.NetStructPoint3 Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.position_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasOrientation {
       get { return result.hasOrientation; }
      }
      public global::Gazillion.NetStructPoint3 Orientation {
        get { return result.Orientation; }
        set { SetOrientation(value); }
      }
      public Builder SetOrientation(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrientation = true;
        result.orientation_ = value;
        return this;
      }
      public Builder SetOrientation(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOrientation = true;
        result.orientation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOrientation(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOrientation &&
            result.orientation_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.orientation_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.orientation_).MergeFrom(value).BuildPartial();
        } else {
          result.orientation_ = value;
        }
        result.hasOrientation = true;
        return this;
      }
      public Builder ClearOrientation() {
        PrepareBuilder();
        result.hasOrientation = false;
        result.orientation_ = null;
        return this;
      }
      
      public bool HasLocomotionstate {
       get { return result.hasLocomotionstate; }
      }
      public global::Gazillion.NetStructLocomotionState Locomotionstate {
        get { return result.Locomotionstate; }
        set { SetLocomotionstate(value); }
      }
      public Builder SetLocomotionstate(global::Gazillion.NetStructLocomotionState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocomotionstate = true;
        result.locomotionstate_ = value;
        return this;
      }
      public Builder SetLocomotionstate(global::Gazillion.NetStructLocomotionState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLocomotionstate = true;
        result.locomotionstate_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLocomotionstate(global::Gazillion.NetStructLocomotionState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLocomotionstate &&
            result.locomotionstate_ != global::Gazillion.NetStructLocomotionState.DefaultInstance) {
            result.locomotionstate_ = global::Gazillion.NetStructLocomotionState.CreateBuilder(result.locomotionstate_).MergeFrom(value).BuildPartial();
        } else {
          result.locomotionstate_ = value;
        }
        result.hasLocomotionstate = true;
        return this;
      }
      public Builder ClearLocomotionstate() {
        PrepareBuilder();
        result.hasLocomotionstate = false;
        result.locomotionstate_ = null;
        return this;
      }
      
      public bool HasIsTeleport {
        get { return result.hasIsTeleport; }
      }
      public bool IsTeleport {
        get { return result.IsTeleport; }
        set { SetIsTeleport(value); }
      }
      public Builder SetIsTeleport(bool value) {
        PrepareBuilder();
        result.hasIsTeleport = true;
        result.isTeleport_ = value;
        return this;
      }
      public Builder ClearIsTeleport() {
        PrepareBuilder();
        result.hasIsTeleport = false;
        result.isTeleport_ = false;
        return this;
      }
    }
    static NetMessageUpdateAvatarState() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCellLoaded : pb::GeneratedMessage<NetMessageCellLoaded, NetMessageCellLoaded.Builder> {
    private NetMessageCellLoaded() { }
    private static readonly NetMessageCellLoaded defaultInstance = new NetMessageCellLoaded().MakeReadOnly();
    private static readonly string[] _netMessageCellLoadedFieldNames = new string[] { "cellId", "regionId" };
    private static readonly uint[] _netMessageCellLoadedFieldTags = new uint[] { 8, 16 };
    public static NetMessageCellLoaded DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCellLoaded DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCellLoaded ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageCellLoaded__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCellLoaded, NetMessageCellLoaded.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageCellLoaded__FieldAccessorTable; }
    }
    
    public const int CellIdFieldNumber = 1;
    private bool hasCellId;
    private uint cellId_;
    public bool HasCellId {
      get { return hasCellId; }
    }
    public uint CellId {
      get { return cellId_; }
    }
    
    public const int RegionIdFieldNumber = 2;
    private bool hasRegionId;
    private ulong regionId_;
    public bool HasRegionId {
      get { return hasRegionId; }
    }
    public ulong RegionId {
      get { return regionId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCellId) return false;
        if (!hasRegionId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCellLoadedFieldNames;
      if (hasCellId) {
        output.WriteUInt32(1, field_names[0], CellId);
      }
      if (hasRegionId) {
        output.WriteUInt64(2, field_names[1], RegionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCellId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, CellId);
      }
      if (hasRegionId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, RegionId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCellLoaded ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCellLoaded ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCellLoaded ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCellLoaded ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCellLoaded ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCellLoaded ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCellLoaded ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCellLoaded ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCellLoaded ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCellLoaded ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCellLoaded MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCellLoaded prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCellLoaded, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCellLoaded cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCellLoaded result;
      
      private NetMessageCellLoaded PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCellLoaded original = result;
          result = new NetMessageCellLoaded();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCellLoaded MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCellLoaded.Descriptor; }
      }
      
      public override NetMessageCellLoaded DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCellLoaded.DefaultInstance; }
      }
      
      public override NetMessageCellLoaded BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCellLoaded) {
          return MergeFrom((NetMessageCellLoaded) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCellLoaded other) {
        if (other == global::Gazillion.NetMessageCellLoaded.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCellId) {
          CellId = other.CellId;
        }
        if (other.HasRegionId) {
          RegionId = other.RegionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCellLoadedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCellLoadedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCellId = input.ReadUInt32(ref result.cellId_);
              break;
            }
            case 16: {
              result.hasRegionId = input.ReadUInt64(ref result.regionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCellId {
        get { return result.hasCellId; }
      }
      public uint CellId {
        get { return result.CellId; }
        set { SetCellId(value); }
      }
      public Builder SetCellId(uint value) {
        PrepareBuilder();
        result.hasCellId = true;
        result.cellId_ = value;
        return this;
      }
      public Builder ClearCellId() {
        PrepareBuilder();
        result.hasCellId = false;
        result.cellId_ = 0;
        return this;
      }
      
      public bool HasRegionId {
        get { return result.hasRegionId; }
      }
      public ulong RegionId {
        get { return result.RegionId; }
        set { SetRegionId(value); }
      }
      public Builder SetRegionId(ulong value) {
        PrepareBuilder();
        result.hasRegionId = true;
        result.regionId_ = value;
        return this;
      }
      public Builder ClearRegionId() {
        PrepareBuilder();
        result.hasRegionId = false;
        result.regionId_ = 0UL;
        return this;
      }
    }
    static NetMessageCellLoaded() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTeleportAckResponse : pb::GeneratedMessage<NetMessageTeleportAckResponse, NetMessageTeleportAckResponse.Builder> {
    private NetMessageTeleportAckResponse() { }
    private static readonly NetMessageTeleportAckResponse defaultInstance = new NetMessageTeleportAckResponse().MakeReadOnly();
    private static readonly string[] _netMessageTeleportAckResponseFieldNames = new string[] { "ackseq" };
    private static readonly uint[] _netMessageTeleportAckResponseFieldTags = new uint[] { 8 };
    public static NetMessageTeleportAckResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTeleportAckResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTeleportAckResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTeleportAckResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTeleportAckResponse, NetMessageTeleportAckResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTeleportAckResponse__FieldAccessorTable; }
    }
    
    public const int AckseqFieldNumber = 1;
    private bool hasAckseq;
    private uint ackseq_;
    public bool HasAckseq {
      get { return hasAckseq; }
    }
    public uint Ackseq {
      get { return ackseq_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAckseq) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTeleportAckResponseFieldNames;
      if (hasAckseq) {
        output.WriteUInt32(1, field_names[0], Ackseq);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAckseq) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Ackseq);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTeleportAckResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTeleportAckResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeleportAckResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTeleportAckResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeleportAckResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTeleportAckResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeleportAckResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTeleportAckResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTeleportAckResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTeleportAckResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTeleportAckResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTeleportAckResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTeleportAckResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTeleportAckResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTeleportAckResponse result;
      
      private NetMessageTeleportAckResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTeleportAckResponse original = result;
          result = new NetMessageTeleportAckResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTeleportAckResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTeleportAckResponse.Descriptor; }
      }
      
      public override NetMessageTeleportAckResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTeleportAckResponse.DefaultInstance; }
      }
      
      public override NetMessageTeleportAckResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTeleportAckResponse) {
          return MergeFrom((NetMessageTeleportAckResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTeleportAckResponse other) {
        if (other == global::Gazillion.NetMessageTeleportAckResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAckseq) {
          Ackseq = other.Ackseq;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTeleportAckResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTeleportAckResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAckseq = input.ReadUInt32(ref result.ackseq_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAckseq {
        get { return result.hasAckseq; }
      }
      public uint Ackseq {
        get { return result.Ackseq; }
        set { SetAckseq(value); }
      }
      public Builder SetAckseq(uint value) {
        PrepareBuilder();
        result.hasAckseq = true;
        result.ackseq_ = value;
        return this;
      }
      public Builder ClearAckseq() {
        PrepareBuilder();
        result.hasAckseq = false;
        result.ackseq_ = 0;
        return this;
      }
    }
    static NetMessageTeleportAckResponse() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAdminCommand : pb::GeneratedMessage<NetMessageAdminCommand, NetMessageAdminCommand.Builder> {
    private NetMessageAdminCommand() { }
    private static readonly NetMessageAdminCommand defaultInstance = new NetMessageAdminCommand().MakeReadOnly();
    private static readonly string[] _netMessageAdminCommandFieldNames = new string[] { "command" };
    private static readonly uint[] _netMessageAdminCommandFieldTags = new uint[] { 10 };
    public static NetMessageAdminCommand DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAdminCommand DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAdminCommand ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAdminCommand__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAdminCommand, NetMessageAdminCommand.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAdminCommand__FieldAccessorTable; }
    }
    
    public const int CommandFieldNumber = 1;
    private bool hasCommand;
    private string command_ = "";
    public bool HasCommand {
      get { return hasCommand; }
    }
    public string Command {
      get { return command_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCommand) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAdminCommandFieldNames;
      if (hasCommand) {
        output.WriteString(1, field_names[0], Command);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCommand) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Command);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAdminCommand ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAdminCommand ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAdminCommand ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAdminCommand ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAdminCommand ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAdminCommand ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAdminCommand ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAdminCommand ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAdminCommand ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAdminCommand ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAdminCommand MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAdminCommand prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAdminCommand, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAdminCommand cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAdminCommand result;
      
      private NetMessageAdminCommand PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAdminCommand original = result;
          result = new NetMessageAdminCommand();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAdminCommand MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAdminCommand.Descriptor; }
      }
      
      public override NetMessageAdminCommand DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAdminCommand.DefaultInstance; }
      }
      
      public override NetMessageAdminCommand BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAdminCommand) {
          return MergeFrom((NetMessageAdminCommand) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAdminCommand other) {
        if (other == global::Gazillion.NetMessageAdminCommand.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCommand) {
          Command = other.Command;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAdminCommandFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAdminCommandFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCommand = input.ReadString(ref result.command_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCommand {
        get { return result.hasCommand; }
      }
      public string Command {
        get { return result.Command; }
        set { SetCommand(value); }
      }
      public Builder SetCommand(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCommand = true;
        result.command_ = value;
        return this;
      }
      public Builder ClearCommand() {
        PrepareBuilder();
        result.hasCommand = false;
        result.command_ = "";
        return this;
      }
    }
    static NetMessageAdminCommand() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTryActivatePower : pb::GeneratedMessage<NetMessageTryActivatePower, NetMessageTryActivatePower.Builder> {
    private NetMessageTryActivatePower() { }
    private static readonly NetMessageTryActivatePower defaultInstance = new NetMessageTryActivatePower().MakeReadOnly();
    private static readonly string[] _netMessageTryActivatePowerFieldNames = new string[] { "idTargetEntity", "idUserEntity", "itemSourceId", "missileRandomSeed", "movementSpeed", "movementTimeMS", "powerPrototypeId", "targetPosition" };
    private static readonly uint[] _netMessageTryActivatePowerFieldTags = new uint[] { 24, 8, 64, 56, 45, 48, 16, 34 };
    public static NetMessageTryActivatePower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTryActivatePower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTryActivatePower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryActivatePower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTryActivatePower, NetMessageTryActivatePower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryActivatePower__FieldAccessorTable; }
    }
    
    public const int IdUserEntityFieldNumber = 1;
    private bool hasIdUserEntity;
    private ulong idUserEntity_;
    public bool HasIdUserEntity {
      get { return hasIdUserEntity; }
    }
    public ulong IdUserEntity {
      get { return idUserEntity_; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 2;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public const int IdTargetEntityFieldNumber = 3;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public const int TargetPositionFieldNumber = 4;
    private bool hasTargetPosition;
    private global::Gazillion.NetStructPoint3 targetPosition_;
    public bool HasTargetPosition {
      get { return hasTargetPosition; }
    }
    public global::Gazillion.NetStructPoint3 TargetPosition {
      get { return targetPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int MovementSpeedFieldNumber = 5;
    private bool hasMovementSpeed;
    private float movementSpeed_;
    public bool HasMovementSpeed {
      get { return hasMovementSpeed; }
    }
    public float MovementSpeed {
      get { return movementSpeed_; }
    }
    
    public const int MovementTimeMSFieldNumber = 6;
    private bool hasMovementTimeMS;
    private ulong movementTimeMS_;
    public bool HasMovementTimeMS {
      get { return hasMovementTimeMS; }
    }
    public ulong MovementTimeMS {
      get { return movementTimeMS_; }
    }
    
    public const int MissileRandomSeedFieldNumber = 7;
    private bool hasMissileRandomSeed;
    private uint missileRandomSeed_;
    public bool HasMissileRandomSeed {
      get { return hasMissileRandomSeed; }
    }
    public uint MissileRandomSeed {
      get { return missileRandomSeed_; }
    }
    
    public const int ItemSourceIdFieldNumber = 8;
    private bool hasItemSourceId;
    private ulong itemSourceId_;
    public bool HasItemSourceId {
      get { return hasItemSourceId; }
    }
    public ulong ItemSourceId {
      get { return itemSourceId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdUserEntity) return false;
        if (!hasPowerPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTryActivatePowerFieldNames;
      if (hasIdUserEntity) {
        output.WriteUInt64(1, field_names[1], IdUserEntity);
      }
      if (hasPowerPrototypeId) {
        output.WriteUInt64(2, field_names[6], PowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        output.WriteUInt64(3, field_names[0], IdTargetEntity);
      }
      if (hasTargetPosition) {
        output.WriteMessage(4, field_names[7], TargetPosition);
      }
      if (hasMovementSpeed) {
        output.WriteFloat(5, field_names[4], MovementSpeed);
      }
      if (hasMovementTimeMS) {
        output.WriteUInt64(6, field_names[5], MovementTimeMS);
      }
      if (hasMissileRandomSeed) {
        output.WriteUInt32(7, field_names[3], MissileRandomSeed);
      }
      if (hasItemSourceId) {
        output.WriteUInt64(8, field_names[2], ItemSourceId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdUserEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdUserEntity);
      }
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, IdTargetEntity);
      }
      if (hasTargetPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, TargetPosition);
      }
      if (hasMovementSpeed) {
        size += pb::CodedOutputStream.ComputeFloatSize(5, MovementSpeed);
      }
      if (hasMovementTimeMS) {
        size += pb::CodedOutputStream.ComputeUInt64Size(6, MovementTimeMS);
      }
      if (hasMissileRandomSeed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, MissileRandomSeed);
      }
      if (hasItemSourceId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(8, ItemSourceId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTryActivatePower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryActivatePower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryActivatePower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryActivatePower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryActivatePower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryActivatePower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryActivatePower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTryActivatePower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTryActivatePower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryActivatePower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTryActivatePower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTryActivatePower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTryActivatePower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTryActivatePower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTryActivatePower result;
      
      private NetMessageTryActivatePower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTryActivatePower original = result;
          result = new NetMessageTryActivatePower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTryActivatePower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTryActivatePower.Descriptor; }
      }
      
      public override NetMessageTryActivatePower DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTryActivatePower.DefaultInstance; }
      }
      
      public override NetMessageTryActivatePower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTryActivatePower) {
          return MergeFrom((NetMessageTryActivatePower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTryActivatePower other) {
        if (other == global::Gazillion.NetMessageTryActivatePower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdUserEntity) {
          IdUserEntity = other.IdUserEntity;
        }
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        if (other.HasTargetPosition) {
          MergeTargetPosition(other.TargetPosition);
        }
        if (other.HasMovementSpeed) {
          MovementSpeed = other.MovementSpeed;
        }
        if (other.HasMovementTimeMS) {
          MovementTimeMS = other.MovementTimeMS;
        }
        if (other.HasMissileRandomSeed) {
          MissileRandomSeed = other.MissileRandomSeed;
        }
        if (other.HasItemSourceId) {
          ItemSourceId = other.ItemSourceId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTryActivatePowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTryActivatePowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdUserEntity = input.ReadUInt64(ref result.idUserEntity_);
              break;
            }
            case 16: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
            case 24: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
            case 34: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasTargetPosition) {
                subBuilder.MergeFrom(TargetPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetPosition = subBuilder.BuildPartial();
              break;
            }
            case 45: {
              result.hasMovementSpeed = input.ReadFloat(ref result.movementSpeed_);
              break;
            }
            case 48: {
              result.hasMovementTimeMS = input.ReadUInt64(ref result.movementTimeMS_);
              break;
            }
            case 56: {
              result.hasMissileRandomSeed = input.ReadUInt32(ref result.missileRandomSeed_);
              break;
            }
            case 64: {
              result.hasItemSourceId = input.ReadUInt64(ref result.itemSourceId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdUserEntity {
        get { return result.hasIdUserEntity; }
      }
      public ulong IdUserEntity {
        get { return result.IdUserEntity; }
        set { SetIdUserEntity(value); }
      }
      public Builder SetIdUserEntity(ulong value) {
        PrepareBuilder();
        result.hasIdUserEntity = true;
        result.idUserEntity_ = value;
        return this;
      }
      public Builder ClearIdUserEntity() {
        PrepareBuilder();
        result.hasIdUserEntity = false;
        result.idUserEntity_ = 0UL;
        return this;
      }
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
      
      public bool HasTargetPosition {
       get { return result.hasTargetPosition; }
      }
      public global::Gazillion.NetStructPoint3 TargetPosition {
        get { return result.TargetPosition; }
        set { SetTargetPosition(value); }
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = value;
        return this;
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetPosition &&
            result.targetPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.targetPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.targetPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.targetPosition_ = value;
        }
        result.hasTargetPosition = true;
        return this;
      }
      public Builder ClearTargetPosition() {
        PrepareBuilder();
        result.hasTargetPosition = false;
        result.targetPosition_ = null;
        return this;
      }
      
      public bool HasMovementSpeed {
        get { return result.hasMovementSpeed; }
      }
      public float MovementSpeed {
        get { return result.MovementSpeed; }
        set { SetMovementSpeed(value); }
      }
      public Builder SetMovementSpeed(float value) {
        PrepareBuilder();
        result.hasMovementSpeed = true;
        result.movementSpeed_ = value;
        return this;
      }
      public Builder ClearMovementSpeed() {
        PrepareBuilder();
        result.hasMovementSpeed = false;
        result.movementSpeed_ = 0F;
        return this;
      }
      
      public bool HasMovementTimeMS {
        get { return result.hasMovementTimeMS; }
      }
      public ulong MovementTimeMS {
        get { return result.MovementTimeMS; }
        set { SetMovementTimeMS(value); }
      }
      public Builder SetMovementTimeMS(ulong value) {
        PrepareBuilder();
        result.hasMovementTimeMS = true;
        result.movementTimeMS_ = value;
        return this;
      }
      public Builder ClearMovementTimeMS() {
        PrepareBuilder();
        result.hasMovementTimeMS = false;
        result.movementTimeMS_ = 0UL;
        return this;
      }
      
      public bool HasMissileRandomSeed {
        get { return result.hasMissileRandomSeed; }
      }
      public uint MissileRandomSeed {
        get { return result.MissileRandomSeed; }
        set { SetMissileRandomSeed(value); }
      }
      public Builder SetMissileRandomSeed(uint value) {
        PrepareBuilder();
        result.hasMissileRandomSeed = true;
        result.missileRandomSeed_ = value;
        return this;
      }
      public Builder ClearMissileRandomSeed() {
        PrepareBuilder();
        result.hasMissileRandomSeed = false;
        result.missileRandomSeed_ = 0;
        return this;
      }
      
      public bool HasItemSourceId {
        get { return result.hasItemSourceId; }
      }
      public ulong ItemSourceId {
        get { return result.ItemSourceId; }
        set { SetItemSourceId(value); }
      }
      public Builder SetItemSourceId(ulong value) {
        PrepareBuilder();
        result.hasItemSourceId = true;
        result.itemSourceId_ = value;
        return this;
      }
      public Builder ClearItemSourceId() {
        PrepareBuilder();
        result.hasItemSourceId = false;
        result.itemSourceId_ = 0UL;
        return this;
      }
    }
    static NetMessageTryActivatePower() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePowerRelease : pb::GeneratedMessage<NetMessagePowerRelease, NetMessagePowerRelease.Builder> {
    private NetMessagePowerRelease() { }
    private static readonly NetMessagePowerRelease defaultInstance = new NetMessagePowerRelease().MakeReadOnly();
    private static readonly string[] _netMessagePowerReleaseFieldNames = new string[] { "idTargetEntity", "idUserEntity", "powerPrototypeId", "targetPosition" };
    private static readonly uint[] _netMessagePowerReleaseFieldTags = new uint[] { 24, 8, 16, 34 };
    public static NetMessagePowerRelease DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePowerRelease DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePowerRelease ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePowerRelease__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePowerRelease, NetMessagePowerRelease.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePowerRelease__FieldAccessorTable; }
    }
    
    public const int IdUserEntityFieldNumber = 1;
    private bool hasIdUserEntity;
    private ulong idUserEntity_;
    public bool HasIdUserEntity {
      get { return hasIdUserEntity; }
    }
    public ulong IdUserEntity {
      get { return idUserEntity_; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 2;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public const int IdTargetEntityFieldNumber = 3;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public const int TargetPositionFieldNumber = 4;
    private bool hasTargetPosition;
    private global::Gazillion.NetStructPoint3 targetPosition_;
    public bool HasTargetPosition {
      get { return hasTargetPosition; }
    }
    public global::Gazillion.NetStructPoint3 TargetPosition {
      get { return targetPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdUserEntity) return false;
        if (!hasPowerPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePowerReleaseFieldNames;
      if (hasIdUserEntity) {
        output.WriteUInt64(1, field_names[1], IdUserEntity);
      }
      if (hasPowerPrototypeId) {
        output.WriteUInt64(2, field_names[2], PowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        output.WriteUInt64(3, field_names[0], IdTargetEntity);
      }
      if (hasTargetPosition) {
        output.WriteMessage(4, field_names[3], TargetPosition);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdUserEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdUserEntity);
      }
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, IdTargetEntity);
      }
      if (hasTargetPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, TargetPosition);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePowerRelease ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerRelease ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerRelease ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerRelease ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerRelease ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerRelease ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerRelease ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePowerRelease ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePowerRelease ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerRelease ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePowerRelease MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePowerRelease prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePowerRelease, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePowerRelease cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePowerRelease result;
      
      private NetMessagePowerRelease PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePowerRelease original = result;
          result = new NetMessagePowerRelease();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePowerRelease MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePowerRelease.Descriptor; }
      }
      
      public override NetMessagePowerRelease DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePowerRelease.DefaultInstance; }
      }
      
      public override NetMessagePowerRelease BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePowerRelease) {
          return MergeFrom((NetMessagePowerRelease) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePowerRelease other) {
        if (other == global::Gazillion.NetMessagePowerRelease.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdUserEntity) {
          IdUserEntity = other.IdUserEntity;
        }
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        if (other.HasTargetPosition) {
          MergeTargetPosition(other.TargetPosition);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePowerReleaseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePowerReleaseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdUserEntity = input.ReadUInt64(ref result.idUserEntity_);
              break;
            }
            case 16: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
            case 24: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
            case 34: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasTargetPosition) {
                subBuilder.MergeFrom(TargetPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetPosition = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdUserEntity {
        get { return result.hasIdUserEntity; }
      }
      public ulong IdUserEntity {
        get { return result.IdUserEntity; }
        set { SetIdUserEntity(value); }
      }
      public Builder SetIdUserEntity(ulong value) {
        PrepareBuilder();
        result.hasIdUserEntity = true;
        result.idUserEntity_ = value;
        return this;
      }
      public Builder ClearIdUserEntity() {
        PrepareBuilder();
        result.hasIdUserEntity = false;
        result.idUserEntity_ = 0UL;
        return this;
      }
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
      
      public bool HasTargetPosition {
       get { return result.hasTargetPosition; }
      }
      public global::Gazillion.NetStructPoint3 TargetPosition {
        get { return result.TargetPosition; }
        set { SetTargetPosition(value); }
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = value;
        return this;
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetPosition &&
            result.targetPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.targetPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.targetPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.targetPosition_ = value;
        }
        result.hasTargetPosition = true;
        return this;
      }
      public Builder ClearTargetPosition() {
        PrepareBuilder();
        result.hasTargetPosition = false;
        result.targetPosition_ = null;
        return this;
      }
    }
    static NetMessagePowerRelease() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTryCancelPower : pb::GeneratedMessage<NetMessageTryCancelPower, NetMessageTryCancelPower.Builder> {
    private NetMessageTryCancelPower() { }
    private static readonly NetMessageTryCancelPower defaultInstance = new NetMessageTryCancelPower().MakeReadOnly();
    private static readonly string[] _netMessageTryCancelPowerFieldNames = new string[] { "endPowerFlags", "idUserEntity", "powerPrototypeId" };
    private static readonly uint[] _netMessageTryCancelPowerFieldTags = new uint[] { 24, 8, 16 };
    public static NetMessageTryCancelPower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTryCancelPower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTryCancelPower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryCancelPower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTryCancelPower, NetMessageTryCancelPower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryCancelPower__FieldAccessorTable; }
    }
    
    public const int IdUserEntityFieldNumber = 1;
    private bool hasIdUserEntity;
    private ulong idUserEntity_;
    public bool HasIdUserEntity {
      get { return hasIdUserEntity; }
    }
    public ulong IdUserEntity {
      get { return idUserEntity_; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 2;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public const int EndPowerFlagsFieldNumber = 3;
    private bool hasEndPowerFlags;
    private uint endPowerFlags_;
    public bool HasEndPowerFlags {
      get { return hasEndPowerFlags; }
    }
    public uint EndPowerFlags {
      get { return endPowerFlags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdUserEntity) return false;
        if (!hasPowerPrototypeId) return false;
        if (!hasEndPowerFlags) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTryCancelPowerFieldNames;
      if (hasIdUserEntity) {
        output.WriteUInt64(1, field_names[1], IdUserEntity);
      }
      if (hasPowerPrototypeId) {
        output.WriteUInt64(2, field_names[2], PowerPrototypeId);
      }
      if (hasEndPowerFlags) {
        output.WriteUInt32(3, field_names[0], EndPowerFlags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdUserEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdUserEntity);
      }
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerPrototypeId);
      }
      if (hasEndPowerFlags) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, EndPowerFlags);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTryCancelPower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryCancelPower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryCancelPower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryCancelPower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryCancelPower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryCancelPower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryCancelPower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTryCancelPower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTryCancelPower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryCancelPower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTryCancelPower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTryCancelPower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTryCancelPower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTryCancelPower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTryCancelPower result;
      
      private NetMessageTryCancelPower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTryCancelPower original = result;
          result = new NetMessageTryCancelPower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTryCancelPower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTryCancelPower.Descriptor; }
      }
      
      public override NetMessageTryCancelPower DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTryCancelPower.DefaultInstance; }
      }
      
      public override NetMessageTryCancelPower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTryCancelPower) {
          return MergeFrom((NetMessageTryCancelPower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTryCancelPower other) {
        if (other == global::Gazillion.NetMessageTryCancelPower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdUserEntity) {
          IdUserEntity = other.IdUserEntity;
        }
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        if (other.HasEndPowerFlags) {
          EndPowerFlags = other.EndPowerFlags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTryCancelPowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTryCancelPowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdUserEntity = input.ReadUInt64(ref result.idUserEntity_);
              break;
            }
            case 16: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
            case 24: {
              result.hasEndPowerFlags = input.ReadUInt32(ref result.endPowerFlags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdUserEntity {
        get { return result.hasIdUserEntity; }
      }
      public ulong IdUserEntity {
        get { return result.IdUserEntity; }
        set { SetIdUserEntity(value); }
      }
      public Builder SetIdUserEntity(ulong value) {
        PrepareBuilder();
        result.hasIdUserEntity = true;
        result.idUserEntity_ = value;
        return this;
      }
      public Builder ClearIdUserEntity() {
        PrepareBuilder();
        result.hasIdUserEntity = false;
        result.idUserEntity_ = 0UL;
        return this;
      }
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasEndPowerFlags {
        get { return result.hasEndPowerFlags; }
      }
      public uint EndPowerFlags {
        get { return result.EndPowerFlags; }
        set { SetEndPowerFlags(value); }
      }
      public Builder SetEndPowerFlags(uint value) {
        PrepareBuilder();
        result.hasEndPowerFlags = true;
        result.endPowerFlags_ = value;
        return this;
      }
      public Builder ClearEndPowerFlags() {
        PrepareBuilder();
        result.hasEndPowerFlags = false;
        result.endPowerFlags_ = 0;
        return this;
      }
    }
    static NetMessageTryCancelPower() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTryCancelActivePower : pb::GeneratedMessage<NetMessageTryCancelActivePower, NetMessageTryCancelActivePower.Builder> {
    private NetMessageTryCancelActivePower() { }
    private static readonly NetMessageTryCancelActivePower defaultInstance = new NetMessageTryCancelActivePower().MakeReadOnly();
    private static readonly string[] _netMessageTryCancelActivePowerFieldNames = new string[] { "idUserEntity" };
    private static readonly uint[] _netMessageTryCancelActivePowerFieldTags = new uint[] { 8 };
    public static NetMessageTryCancelActivePower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTryCancelActivePower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTryCancelActivePower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryCancelActivePower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTryCancelActivePower, NetMessageTryCancelActivePower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryCancelActivePower__FieldAccessorTable; }
    }
    
    public const int IdUserEntityFieldNumber = 1;
    private bool hasIdUserEntity;
    private ulong idUserEntity_;
    public bool HasIdUserEntity {
      get { return hasIdUserEntity; }
    }
    public ulong IdUserEntity {
      get { return idUserEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdUserEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTryCancelActivePowerFieldNames;
      if (hasIdUserEntity) {
        output.WriteUInt64(1, field_names[0], IdUserEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdUserEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdUserEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTryCancelActivePower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryCancelActivePower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryCancelActivePower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryCancelActivePower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryCancelActivePower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryCancelActivePower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryCancelActivePower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTryCancelActivePower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTryCancelActivePower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryCancelActivePower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTryCancelActivePower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTryCancelActivePower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTryCancelActivePower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTryCancelActivePower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTryCancelActivePower result;
      
      private NetMessageTryCancelActivePower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTryCancelActivePower original = result;
          result = new NetMessageTryCancelActivePower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTryCancelActivePower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTryCancelActivePower.Descriptor; }
      }
      
      public override NetMessageTryCancelActivePower DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTryCancelActivePower.DefaultInstance; }
      }
      
      public override NetMessageTryCancelActivePower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTryCancelActivePower) {
          return MergeFrom((NetMessageTryCancelActivePower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTryCancelActivePower other) {
        if (other == global::Gazillion.NetMessageTryCancelActivePower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdUserEntity) {
          IdUserEntity = other.IdUserEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTryCancelActivePowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTryCancelActivePowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdUserEntity = input.ReadUInt64(ref result.idUserEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdUserEntity {
        get { return result.hasIdUserEntity; }
      }
      public ulong IdUserEntity {
        get { return result.IdUserEntity; }
        set { SetIdUserEntity(value); }
      }
      public Builder SetIdUserEntity(ulong value) {
        PrepareBuilder();
        result.hasIdUserEntity = true;
        result.idUserEntity_ = value;
        return this;
      }
      public Builder ClearIdUserEntity() {
        PrepareBuilder();
        result.hasIdUserEntity = false;
        result.idUserEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageTryCancelActivePower() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageContinuousPowerUpdateToServer : pb::GeneratedMessage<NetMessageContinuousPowerUpdateToServer, NetMessageContinuousPowerUpdateToServer.Builder> {
    private NetMessageContinuousPowerUpdateToServer() { }
    private static readonly NetMessageContinuousPowerUpdateToServer defaultInstance = new NetMessageContinuousPowerUpdateToServer().MakeReadOnly();
    private static readonly string[] _netMessageContinuousPowerUpdateToServerFieldNames = new string[] { "idTargetEntity", "powerPrototypeId", "targetPosition" };
    private static readonly uint[] _netMessageContinuousPowerUpdateToServerFieldTags = new uint[] { 16, 8, 26 };
    public static NetMessageContinuousPowerUpdateToServer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageContinuousPowerUpdateToServer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageContinuousPowerUpdateToServer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageContinuousPowerUpdateToServer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageContinuousPowerUpdateToServer, NetMessageContinuousPowerUpdateToServer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageContinuousPowerUpdateToServer__FieldAccessorTable; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 1;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public const int IdTargetEntityFieldNumber = 2;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public const int TargetPositionFieldNumber = 3;
    private bool hasTargetPosition;
    private global::Gazillion.NetStructPoint3 targetPosition_;
    public bool HasTargetPosition {
      get { return hasTargetPosition; }
    }
    public global::Gazillion.NetStructPoint3 TargetPosition {
      get { return targetPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPowerPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageContinuousPowerUpdateToServerFieldNames;
      if (hasPowerPrototypeId) {
        output.WriteUInt64(1, field_names[1], PowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        output.WriteUInt64(2, field_names[0], IdTargetEntity);
      }
      if (hasTargetPosition) {
        output.WriteMessage(3, field_names[2], TargetPosition);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, IdTargetEntity);
      }
      if (hasTargetPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, TargetPosition);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageContinuousPowerUpdateToServer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToServer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToServer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToServer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToServer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToServer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToServer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToServer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToServer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToServer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageContinuousPowerUpdateToServer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageContinuousPowerUpdateToServer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageContinuousPowerUpdateToServer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageContinuousPowerUpdateToServer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageContinuousPowerUpdateToServer result;
      
      private NetMessageContinuousPowerUpdateToServer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageContinuousPowerUpdateToServer original = result;
          result = new NetMessageContinuousPowerUpdateToServer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageContinuousPowerUpdateToServer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageContinuousPowerUpdateToServer.Descriptor; }
      }
      
      public override NetMessageContinuousPowerUpdateToServer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageContinuousPowerUpdateToServer.DefaultInstance; }
      }
      
      public override NetMessageContinuousPowerUpdateToServer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageContinuousPowerUpdateToServer) {
          return MergeFrom((NetMessageContinuousPowerUpdateToServer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageContinuousPowerUpdateToServer other) {
        if (other == global::Gazillion.NetMessageContinuousPowerUpdateToServer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        if (other.HasTargetPosition) {
          MergeTargetPosition(other.TargetPosition);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageContinuousPowerUpdateToServerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageContinuousPowerUpdateToServerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
            case 16: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
            case 26: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasTargetPosition) {
                subBuilder.MergeFrom(TargetPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetPosition = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
      
      public bool HasTargetPosition {
       get { return result.hasTargetPosition; }
      }
      public global::Gazillion.NetStructPoint3 TargetPosition {
        get { return result.TargetPosition; }
        set { SetTargetPosition(value); }
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = value;
        return this;
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetPosition &&
            result.targetPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.targetPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.targetPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.targetPosition_ = value;
        }
        result.hasTargetPosition = true;
        return this;
      }
      public Builder ClearTargetPosition() {
        PrepareBuilder();
        result.hasTargetPosition = false;
        result.targetPosition_ = null;
        return this;
      }
    }
    static NetMessageContinuousPowerUpdateToServer() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCancelPendingAction : pb::GeneratedMessage<NetMessageCancelPendingAction, NetMessageCancelPendingAction.Builder> {
    private NetMessageCancelPendingAction() { }
    private static readonly NetMessageCancelPendingAction defaultInstance = new NetMessageCancelPendingAction().MakeReadOnly();
    private static readonly string[] _netMessageCancelPendingActionFieldNames = new string[] {  };
    private static readonly uint[] _netMessageCancelPendingActionFieldTags = new uint[] {  };
    public static NetMessageCancelPendingAction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCancelPendingAction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCancelPendingAction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageCancelPendingAction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCancelPendingAction, NetMessageCancelPendingAction.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageCancelPendingAction__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCancelPendingActionFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCancelPendingAction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCancelPendingAction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCancelPendingAction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCancelPendingAction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCancelPendingAction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCancelPendingAction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCancelPendingAction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCancelPendingAction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCancelPendingAction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCancelPendingAction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCancelPendingAction MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCancelPendingAction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCancelPendingAction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCancelPendingAction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCancelPendingAction result;
      
      private NetMessageCancelPendingAction PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCancelPendingAction original = result;
          result = new NetMessageCancelPendingAction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCancelPendingAction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCancelPendingAction.Descriptor; }
      }
      
      public override NetMessageCancelPendingAction DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCancelPendingAction.DefaultInstance; }
      }
      
      public override NetMessageCancelPendingAction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCancelPendingAction) {
          return MergeFrom((NetMessageCancelPendingAction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCancelPendingAction other) {
        if (other == global::Gazillion.NetMessageCancelPendingAction.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCancelPendingActionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCancelPendingActionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageCancelPendingAction() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageConfirmWeaponMissingStatus : pb::GeneratedMessage<NetMessageConfirmWeaponMissingStatus, NetMessageConfirmWeaponMissingStatus.Builder> {
    private NetMessageConfirmWeaponMissingStatus() { }
    private static readonly NetMessageConfirmWeaponMissingStatus defaultInstance = new NetMessageConfirmWeaponMissingStatus().MakeReadOnly();
    private static readonly string[] _netMessageConfirmWeaponMissingStatusFieldNames = new string[] { "idOwner" };
    private static readonly uint[] _netMessageConfirmWeaponMissingStatusFieldTags = new uint[] { 8 };
    public static NetMessageConfirmWeaponMissingStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageConfirmWeaponMissingStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageConfirmWeaponMissingStatus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageConfirmWeaponMissingStatus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageConfirmWeaponMissingStatus, NetMessageConfirmWeaponMissingStatus.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageConfirmWeaponMissingStatus__FieldAccessorTable; }
    }
    
    public const int IdOwnerFieldNumber = 1;
    private bool hasIdOwner;
    private ulong idOwner_;
    public bool HasIdOwner {
      get { return hasIdOwner; }
    }
    public ulong IdOwner {
      get { return idOwner_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdOwner) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageConfirmWeaponMissingStatusFieldNames;
      if (hasIdOwner) {
        output.WriteUInt64(1, field_names[0], IdOwner);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdOwner) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdOwner);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageConfirmWeaponMissingStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageConfirmWeaponMissingStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConfirmWeaponMissingStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageConfirmWeaponMissingStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConfirmWeaponMissingStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageConfirmWeaponMissingStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConfirmWeaponMissingStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageConfirmWeaponMissingStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageConfirmWeaponMissingStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageConfirmWeaponMissingStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageConfirmWeaponMissingStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageConfirmWeaponMissingStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageConfirmWeaponMissingStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageConfirmWeaponMissingStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageConfirmWeaponMissingStatus result;
      
      private NetMessageConfirmWeaponMissingStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageConfirmWeaponMissingStatus original = result;
          result = new NetMessageConfirmWeaponMissingStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageConfirmWeaponMissingStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageConfirmWeaponMissingStatus.Descriptor; }
      }
      
      public override NetMessageConfirmWeaponMissingStatus DefaultInstanceForType {
        get { return global::Gazillion.NetMessageConfirmWeaponMissingStatus.DefaultInstance; }
      }
      
      public override NetMessageConfirmWeaponMissingStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageConfirmWeaponMissingStatus) {
          return MergeFrom((NetMessageConfirmWeaponMissingStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageConfirmWeaponMissingStatus other) {
        if (other == global::Gazillion.NetMessageConfirmWeaponMissingStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdOwner) {
          IdOwner = other.IdOwner;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageConfirmWeaponMissingStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageConfirmWeaponMissingStatusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdOwner = input.ReadUInt64(ref result.idOwner_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdOwner {
        get { return result.hasIdOwner; }
      }
      public ulong IdOwner {
        get { return result.IdOwner; }
        set { SetIdOwner(value); }
      }
      public Builder SetIdOwner(ulong value) {
        PrepareBuilder();
        result.hasIdOwner = true;
        result.idOwner_ = value;
        return this;
      }
      public Builder ClearIdOwner() {
        PrepareBuilder();
        result.hasIdOwner = false;
        result.idOwner_ = 0UL;
        return this;
      }
    }
    static NetMessageConfirmWeaponMissingStatus() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStartAIDebugUI : pb::GeneratedMessage<NetMessageStartAIDebugUI, NetMessageStartAIDebugUI.Builder> {
    private NetMessageStartAIDebugUI() { }
    private static readonly NetMessageStartAIDebugUI defaultInstance = new NetMessageStartAIDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStartAIDebugUIFieldNames = new string[] { "idTargetNPC" };
    private static readonly uint[] _netMessageStartAIDebugUIFieldTags = new uint[] { 8 };
    public static NetMessageStartAIDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStartAIDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStartAIDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartAIDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStartAIDebugUI, NetMessageStartAIDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartAIDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetNPCFieldNumber = 1;
    private bool hasIdTargetNPC;
    private ulong idTargetNPC_;
    public bool HasIdTargetNPC {
      get { return hasIdTargetNPC; }
    }
    public ulong IdTargetNPC {
      get { return idTargetNPC_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetNPC) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStartAIDebugUIFieldNames;
      if (hasIdTargetNPC) {
        output.WriteUInt64(1, field_names[0], IdTargetNPC);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetNPC) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetNPC);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStartAIDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartAIDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartAIDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartAIDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartAIDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartAIDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartAIDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStartAIDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStartAIDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartAIDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStartAIDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStartAIDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStartAIDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStartAIDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStartAIDebugUI result;
      
      private NetMessageStartAIDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStartAIDebugUI original = result;
          result = new NetMessageStartAIDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStartAIDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStartAIDebugUI.Descriptor; }
      }
      
      public override NetMessageStartAIDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStartAIDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStartAIDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStartAIDebugUI) {
          return MergeFrom((NetMessageStartAIDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStartAIDebugUI other) {
        if (other == global::Gazillion.NetMessageStartAIDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetNPC) {
          IdTargetNPC = other.IdTargetNPC;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStartAIDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStartAIDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetNPC = input.ReadUInt64(ref result.idTargetNPC_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetNPC {
        get { return result.hasIdTargetNPC; }
      }
      public ulong IdTargetNPC {
        get { return result.IdTargetNPC; }
        set { SetIdTargetNPC(value); }
      }
      public Builder SetIdTargetNPC(ulong value) {
        PrepareBuilder();
        result.hasIdTargetNPC = true;
        result.idTargetNPC_ = value;
        return this;
      }
      public Builder ClearIdTargetNPC() {
        PrepareBuilder();
        result.hasIdTargetNPC = false;
        result.idTargetNPC_ = 0UL;
        return this;
      }
    }
    static NetMessageStartAIDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStopAIDebugUI : pb::GeneratedMessage<NetMessageStopAIDebugUI, NetMessageStopAIDebugUI.Builder> {
    private NetMessageStopAIDebugUI() { }
    private static readonly NetMessageStopAIDebugUI defaultInstance = new NetMessageStopAIDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStopAIDebugUIFieldNames = new string[] { "idTargetNPC" };
    private static readonly uint[] _netMessageStopAIDebugUIFieldTags = new uint[] { 8 };
    public static NetMessageStopAIDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStopAIDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStopAIDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopAIDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStopAIDebugUI, NetMessageStopAIDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopAIDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetNPCFieldNumber = 1;
    private bool hasIdTargetNPC;
    private ulong idTargetNPC_;
    public bool HasIdTargetNPC {
      get { return hasIdTargetNPC; }
    }
    public ulong IdTargetNPC {
      get { return idTargetNPC_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetNPC) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStopAIDebugUIFieldNames;
      if (hasIdTargetNPC) {
        output.WriteUInt64(1, field_names[0], IdTargetNPC);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetNPC) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetNPC);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStopAIDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopAIDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopAIDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopAIDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopAIDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopAIDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopAIDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStopAIDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStopAIDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopAIDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStopAIDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStopAIDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStopAIDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStopAIDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStopAIDebugUI result;
      
      private NetMessageStopAIDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStopAIDebugUI original = result;
          result = new NetMessageStopAIDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStopAIDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStopAIDebugUI.Descriptor; }
      }
      
      public override NetMessageStopAIDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStopAIDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStopAIDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStopAIDebugUI) {
          return MergeFrom((NetMessageStopAIDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStopAIDebugUI other) {
        if (other == global::Gazillion.NetMessageStopAIDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetNPC) {
          IdTargetNPC = other.IdTargetNPC;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStopAIDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStopAIDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetNPC = input.ReadUInt64(ref result.idTargetNPC_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetNPC {
        get { return result.hasIdTargetNPC; }
      }
      public ulong IdTargetNPC {
        get { return result.IdTargetNPC; }
        set { SetIdTargetNPC(value); }
      }
      public Builder SetIdTargetNPC(ulong value) {
        PrepareBuilder();
        result.hasIdTargetNPC = true;
        result.idTargetNPC_ = value;
        return this;
      }
      public Builder ClearIdTargetNPC() {
        PrepareBuilder();
        result.hasIdTargetNPC = false;
        result.idTargetNPC_ = 0UL;
        return this;
      }
    }
    static NetMessageStopAIDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStartMissionDebugUI : pb::GeneratedMessage<NetMessageStartMissionDebugUI, NetMessageStartMissionDebugUI.Builder> {
    private NetMessageStartMissionDebugUI() { }
    private static readonly NetMessageStartMissionDebugUI defaultInstance = new NetMessageStartMissionDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStartMissionDebugUIFieldNames = new string[] { "idTargetAgent", "missionListMatchPattern", "missionPrototypeRefId" };
    private static readonly uint[] _netMessageStartMissionDebugUIFieldTags = new uint[] { 8, 26, 16 };
    public static NetMessageStartMissionDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStartMissionDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStartMissionDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartMissionDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStartMissionDebugUI, NetMessageStartMissionDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartMissionDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetAgentFieldNumber = 1;
    private bool hasIdTargetAgent;
    private ulong idTargetAgent_;
    public bool HasIdTargetAgent {
      get { return hasIdTargetAgent; }
    }
    public ulong IdTargetAgent {
      get { return idTargetAgent_; }
    }
    
    public const int MissionPrototypeRefIdFieldNumber = 2;
    private bool hasMissionPrototypeRefId;
    private ulong missionPrototypeRefId_;
    public bool HasMissionPrototypeRefId {
      get { return hasMissionPrototypeRefId; }
    }
    public ulong MissionPrototypeRefId {
      get { return missionPrototypeRefId_; }
    }
    
    public const int MissionListMatchPatternFieldNumber = 3;
    private bool hasMissionListMatchPattern;
    private string missionListMatchPattern_ = "";
    public bool HasMissionListMatchPattern {
      get { return hasMissionListMatchPattern; }
    }
    public string MissionListMatchPattern {
      get { return missionListMatchPattern_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetAgent) return false;
        if (!hasMissionPrototypeRefId) return false;
        if (!hasMissionListMatchPattern) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStartMissionDebugUIFieldNames;
      if (hasIdTargetAgent) {
        output.WriteUInt64(1, field_names[0], IdTargetAgent);
      }
      if (hasMissionPrototypeRefId) {
        output.WriteUInt64(2, field_names[2], MissionPrototypeRefId);
      }
      if (hasMissionListMatchPattern) {
        output.WriteString(3, field_names[1], MissionListMatchPattern);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetAgent) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetAgent);
      }
      if (hasMissionPrototypeRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, MissionPrototypeRefId);
      }
      if (hasMissionListMatchPattern) {
        size += pb::CodedOutputStream.ComputeStringSize(3, MissionListMatchPattern);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStartMissionDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartMissionDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartMissionDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartMissionDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartMissionDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartMissionDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartMissionDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStartMissionDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStartMissionDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartMissionDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStartMissionDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStartMissionDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStartMissionDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStartMissionDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStartMissionDebugUI result;
      
      private NetMessageStartMissionDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStartMissionDebugUI original = result;
          result = new NetMessageStartMissionDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStartMissionDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStartMissionDebugUI.Descriptor; }
      }
      
      public override NetMessageStartMissionDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStartMissionDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStartMissionDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStartMissionDebugUI) {
          return MergeFrom((NetMessageStartMissionDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStartMissionDebugUI other) {
        if (other == global::Gazillion.NetMessageStartMissionDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetAgent) {
          IdTargetAgent = other.IdTargetAgent;
        }
        if (other.HasMissionPrototypeRefId) {
          MissionPrototypeRefId = other.MissionPrototypeRefId;
        }
        if (other.HasMissionListMatchPattern) {
          MissionListMatchPattern = other.MissionListMatchPattern;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStartMissionDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStartMissionDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetAgent = input.ReadUInt64(ref result.idTargetAgent_);
              break;
            }
            case 16: {
              result.hasMissionPrototypeRefId = input.ReadUInt64(ref result.missionPrototypeRefId_);
              break;
            }
            case 26: {
              result.hasMissionListMatchPattern = input.ReadString(ref result.missionListMatchPattern_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetAgent {
        get { return result.hasIdTargetAgent; }
      }
      public ulong IdTargetAgent {
        get { return result.IdTargetAgent; }
        set { SetIdTargetAgent(value); }
      }
      public Builder SetIdTargetAgent(ulong value) {
        PrepareBuilder();
        result.hasIdTargetAgent = true;
        result.idTargetAgent_ = value;
        return this;
      }
      public Builder ClearIdTargetAgent() {
        PrepareBuilder();
        result.hasIdTargetAgent = false;
        result.idTargetAgent_ = 0UL;
        return this;
      }
      
      public bool HasMissionPrototypeRefId {
        get { return result.hasMissionPrototypeRefId; }
      }
      public ulong MissionPrototypeRefId {
        get { return result.MissionPrototypeRefId; }
        set { SetMissionPrototypeRefId(value); }
      }
      public Builder SetMissionPrototypeRefId(ulong value) {
        PrepareBuilder();
        result.hasMissionPrototypeRefId = true;
        result.missionPrototypeRefId_ = value;
        return this;
      }
      public Builder ClearMissionPrototypeRefId() {
        PrepareBuilder();
        result.hasMissionPrototypeRefId = false;
        result.missionPrototypeRefId_ = 0UL;
        return this;
      }
      
      public bool HasMissionListMatchPattern {
        get { return result.hasMissionListMatchPattern; }
      }
      public string MissionListMatchPattern {
        get { return result.MissionListMatchPattern; }
        set { SetMissionListMatchPattern(value); }
      }
      public Builder SetMissionListMatchPattern(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMissionListMatchPattern = true;
        result.missionListMatchPattern_ = value;
        return this;
      }
      public Builder ClearMissionListMatchPattern() {
        PrepareBuilder();
        result.hasMissionListMatchPattern = false;
        result.missionListMatchPattern_ = "";
        return this;
      }
    }
    static NetMessageStartMissionDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStopMissionDebugUI : pb::GeneratedMessage<NetMessageStopMissionDebugUI, NetMessageStopMissionDebugUI.Builder> {
    private NetMessageStopMissionDebugUI() { }
    private static readonly NetMessageStopMissionDebugUI defaultInstance = new NetMessageStopMissionDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStopMissionDebugUIFieldNames = new string[] { "idTargetAgent" };
    private static readonly uint[] _netMessageStopMissionDebugUIFieldTags = new uint[] { 8 };
    public static NetMessageStopMissionDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStopMissionDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStopMissionDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopMissionDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStopMissionDebugUI, NetMessageStopMissionDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopMissionDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetAgentFieldNumber = 1;
    private bool hasIdTargetAgent;
    private ulong idTargetAgent_;
    public bool HasIdTargetAgent {
      get { return hasIdTargetAgent; }
    }
    public ulong IdTargetAgent {
      get { return idTargetAgent_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetAgent) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStopMissionDebugUIFieldNames;
      if (hasIdTargetAgent) {
        output.WriteUInt64(1, field_names[0], IdTargetAgent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetAgent) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetAgent);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStopMissionDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopMissionDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopMissionDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopMissionDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopMissionDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopMissionDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopMissionDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStopMissionDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStopMissionDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopMissionDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStopMissionDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStopMissionDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStopMissionDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStopMissionDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStopMissionDebugUI result;
      
      private NetMessageStopMissionDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStopMissionDebugUI original = result;
          result = new NetMessageStopMissionDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStopMissionDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStopMissionDebugUI.Descriptor; }
      }
      
      public override NetMessageStopMissionDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStopMissionDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStopMissionDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStopMissionDebugUI) {
          return MergeFrom((NetMessageStopMissionDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStopMissionDebugUI other) {
        if (other == global::Gazillion.NetMessageStopMissionDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetAgent) {
          IdTargetAgent = other.IdTargetAgent;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStopMissionDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStopMissionDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetAgent = input.ReadUInt64(ref result.idTargetAgent_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetAgent {
        get { return result.hasIdTargetAgent; }
      }
      public ulong IdTargetAgent {
        get { return result.IdTargetAgent; }
        set { SetIdTargetAgent(value); }
      }
      public Builder SetIdTargetAgent(ulong value) {
        PrepareBuilder();
        result.hasIdTargetAgent = true;
        result.idTargetAgent_ = value;
        return this;
      }
      public Builder ClearIdTargetAgent() {
        PrepareBuilder();
        result.hasIdTargetAgent = false;
        result.idTargetAgent_ = 0UL;
        return this;
      }
    }
    static NetMessageStopMissionDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStartPropertiesDebugUI : pb::GeneratedMessage<NetMessageStartPropertiesDebugUI, NetMessageStartPropertiesDebugUI.Builder> {
    private NetMessageStartPropertiesDebugUI() { }
    private static readonly NetMessageStartPropertiesDebugUI defaultInstance = new NetMessageStartPropertiesDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStartPropertiesDebugUIFieldNames = new string[] { "idTargetEntity" };
    private static readonly uint[] _netMessageStartPropertiesDebugUIFieldTags = new uint[] { 8 };
    public static NetMessageStartPropertiesDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStartPropertiesDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStartPropertiesDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartPropertiesDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStartPropertiesDebugUI, NetMessageStartPropertiesDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartPropertiesDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetEntityFieldNumber = 1;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStartPropertiesDebugUIFieldNames;
      if (hasIdTargetEntity) {
        output.WriteUInt64(1, field_names[0], IdTargetEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStartPropertiesDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartPropertiesDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartPropertiesDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartPropertiesDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartPropertiesDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartPropertiesDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartPropertiesDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStartPropertiesDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStartPropertiesDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartPropertiesDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStartPropertiesDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStartPropertiesDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStartPropertiesDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStartPropertiesDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStartPropertiesDebugUI result;
      
      private NetMessageStartPropertiesDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStartPropertiesDebugUI original = result;
          result = new NetMessageStartPropertiesDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStartPropertiesDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStartPropertiesDebugUI.Descriptor; }
      }
      
      public override NetMessageStartPropertiesDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStartPropertiesDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStartPropertiesDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStartPropertiesDebugUI) {
          return MergeFrom((NetMessageStartPropertiesDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStartPropertiesDebugUI other) {
        if (other == global::Gazillion.NetMessageStartPropertiesDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStartPropertiesDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStartPropertiesDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageStartPropertiesDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStopPropertiesDebugUI : pb::GeneratedMessage<NetMessageStopPropertiesDebugUI, NetMessageStopPropertiesDebugUI.Builder> {
    private NetMessageStopPropertiesDebugUI() { }
    private static readonly NetMessageStopPropertiesDebugUI defaultInstance = new NetMessageStopPropertiesDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStopPropertiesDebugUIFieldNames = new string[] { "idTargetEntity" };
    private static readonly uint[] _netMessageStopPropertiesDebugUIFieldTags = new uint[] { 8 };
    public static NetMessageStopPropertiesDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStopPropertiesDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStopPropertiesDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopPropertiesDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStopPropertiesDebugUI, NetMessageStopPropertiesDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopPropertiesDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetEntityFieldNumber = 1;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStopPropertiesDebugUIFieldNames;
      if (hasIdTargetEntity) {
        output.WriteUInt64(1, field_names[0], IdTargetEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStopPropertiesDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopPropertiesDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopPropertiesDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopPropertiesDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopPropertiesDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopPropertiesDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopPropertiesDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStopPropertiesDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStopPropertiesDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopPropertiesDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStopPropertiesDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStopPropertiesDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStopPropertiesDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStopPropertiesDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStopPropertiesDebugUI result;
      
      private NetMessageStopPropertiesDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStopPropertiesDebugUI original = result;
          result = new NetMessageStopPropertiesDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStopPropertiesDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStopPropertiesDebugUI.Descriptor; }
      }
      
      public override NetMessageStopPropertiesDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStopPropertiesDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStopPropertiesDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStopPropertiesDebugUI) {
          return MergeFrom((NetMessageStopPropertiesDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStopPropertiesDebugUI other) {
        if (other == global::Gazillion.NetMessageStopPropertiesDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStopPropertiesDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStopPropertiesDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageStopPropertiesDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStartConditionsDebugUI : pb::GeneratedMessage<NetMessageStartConditionsDebugUI, NetMessageStartConditionsDebugUI.Builder> {
    private NetMessageStartConditionsDebugUI() { }
    private static readonly NetMessageStartConditionsDebugUI defaultInstance = new NetMessageStartConditionsDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStartConditionsDebugUIFieldNames = new string[] { "idTargetEntity" };
    private static readonly uint[] _netMessageStartConditionsDebugUIFieldTags = new uint[] { 8 };
    public static NetMessageStartConditionsDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStartConditionsDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStartConditionsDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartConditionsDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStartConditionsDebugUI, NetMessageStartConditionsDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartConditionsDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetEntityFieldNumber = 1;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStartConditionsDebugUIFieldNames;
      if (hasIdTargetEntity) {
        output.WriteUInt64(1, field_names[0], IdTargetEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStartConditionsDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartConditionsDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartConditionsDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartConditionsDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartConditionsDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartConditionsDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartConditionsDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStartConditionsDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStartConditionsDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartConditionsDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStartConditionsDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStartConditionsDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStartConditionsDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStartConditionsDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStartConditionsDebugUI result;
      
      private NetMessageStartConditionsDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStartConditionsDebugUI original = result;
          result = new NetMessageStartConditionsDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStartConditionsDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStartConditionsDebugUI.Descriptor; }
      }
      
      public override NetMessageStartConditionsDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStartConditionsDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStartConditionsDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStartConditionsDebugUI) {
          return MergeFrom((NetMessageStartConditionsDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStartConditionsDebugUI other) {
        if (other == global::Gazillion.NetMessageStartConditionsDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStartConditionsDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStartConditionsDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageStartConditionsDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStopConditionsDebugUI : pb::GeneratedMessage<NetMessageStopConditionsDebugUI, NetMessageStopConditionsDebugUI.Builder> {
    private NetMessageStopConditionsDebugUI() { }
    private static readonly NetMessageStopConditionsDebugUI defaultInstance = new NetMessageStopConditionsDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStopConditionsDebugUIFieldNames = new string[] { "idTargetEntity" };
    private static readonly uint[] _netMessageStopConditionsDebugUIFieldTags = new uint[] { 8 };
    public static NetMessageStopConditionsDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStopConditionsDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStopConditionsDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopConditionsDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStopConditionsDebugUI, NetMessageStopConditionsDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopConditionsDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetEntityFieldNumber = 1;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStopConditionsDebugUIFieldNames;
      if (hasIdTargetEntity) {
        output.WriteUInt64(1, field_names[0], IdTargetEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStopConditionsDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopConditionsDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopConditionsDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopConditionsDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopConditionsDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopConditionsDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopConditionsDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStopConditionsDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStopConditionsDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopConditionsDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStopConditionsDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStopConditionsDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStopConditionsDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStopConditionsDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStopConditionsDebugUI result;
      
      private NetMessageStopConditionsDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStopConditionsDebugUI original = result;
          result = new NetMessageStopConditionsDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStopConditionsDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStopConditionsDebugUI.Descriptor; }
      }
      
      public override NetMessageStopConditionsDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStopConditionsDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStopConditionsDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStopConditionsDebugUI) {
          return MergeFrom((NetMessageStopConditionsDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStopConditionsDebugUI other) {
        if (other == global::Gazillion.NetMessageStopConditionsDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStopConditionsDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStopConditionsDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageStopConditionsDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStartPowersDebugUI : pb::GeneratedMessage<NetMessageStartPowersDebugUI, NetMessageStartPowersDebugUI.Builder> {
    private NetMessageStartPowersDebugUI() { }
    private static readonly NetMessageStartPowersDebugUI defaultInstance = new NetMessageStartPowersDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStartPowersDebugUIFieldNames = new string[] { "idTargetEntity" };
    private static readonly uint[] _netMessageStartPowersDebugUIFieldTags = new uint[] { 8 };
    public static NetMessageStartPowersDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStartPowersDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStartPowersDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartPowersDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStartPowersDebugUI, NetMessageStartPowersDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartPowersDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetEntityFieldNumber = 1;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStartPowersDebugUIFieldNames;
      if (hasIdTargetEntity) {
        output.WriteUInt64(1, field_names[0], IdTargetEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStartPowersDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartPowersDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartPowersDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartPowersDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartPowersDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartPowersDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartPowersDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStartPowersDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStartPowersDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartPowersDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStartPowersDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStartPowersDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStartPowersDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStartPowersDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStartPowersDebugUI result;
      
      private NetMessageStartPowersDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStartPowersDebugUI original = result;
          result = new NetMessageStartPowersDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStartPowersDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStartPowersDebugUI.Descriptor; }
      }
      
      public override NetMessageStartPowersDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStartPowersDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStartPowersDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStartPowersDebugUI) {
          return MergeFrom((NetMessageStartPowersDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStartPowersDebugUI other) {
        if (other == global::Gazillion.NetMessageStartPowersDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStartPowersDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStartPowersDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageStartPowersDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStopPowersDebugUI : pb::GeneratedMessage<NetMessageStopPowersDebugUI, NetMessageStopPowersDebugUI.Builder> {
    private NetMessageStopPowersDebugUI() { }
    private static readonly NetMessageStopPowersDebugUI defaultInstance = new NetMessageStopPowersDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStopPowersDebugUIFieldNames = new string[] { "idTargetEntity" };
    private static readonly uint[] _netMessageStopPowersDebugUIFieldTags = new uint[] { 8 };
    public static NetMessageStopPowersDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStopPowersDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStopPowersDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopPowersDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStopPowersDebugUI, NetMessageStopPowersDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopPowersDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetEntityFieldNumber = 1;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStopPowersDebugUIFieldNames;
      if (hasIdTargetEntity) {
        output.WriteUInt64(1, field_names[0], IdTargetEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStopPowersDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopPowersDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopPowersDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopPowersDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopPowersDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopPowersDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopPowersDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStopPowersDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStopPowersDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopPowersDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStopPowersDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStopPowersDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStopPowersDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStopPowersDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStopPowersDebugUI result;
      
      private NetMessageStopPowersDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStopPowersDebugUI original = result;
          result = new NetMessageStopPowersDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStopPowersDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStopPowersDebugUI.Descriptor; }
      }
      
      public override NetMessageStopPowersDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStopPowersDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStopPowersDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStopPowersDebugUI) {
          return MergeFrom((NetMessageStopPowersDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStopPowersDebugUI other) {
        if (other == global::Gazillion.NetMessageStopPowersDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStopPowersDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStopPowersDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageStopPowersDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePing : pb::GeneratedMessage<NetMessagePing, NetMessagePing.Builder> {
    private NetMessagePing() { }
    private static readonly NetMessagePing defaultInstance = new NetMessagePing().MakeReadOnly();
    private static readonly string[] _netMessagePingFieldNames = new string[] { "compositelevel", "cpulevel", "displayOutput", "gpulevel", "lastClientLatency", "lastFps", "minFps", "minFpsPos", "regionPrototype", "requestNetReceivedGameTime", "sendClientTime", "sendGameTime" };
    private static readonly uint[] _netMessagePingFieldTags = new uint[] { 80, 64, 8, 72, 40, 53, 93, 98, 56, 32, 16, 24 };
    public static NetMessagePing DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePing DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePing ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePing__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePing, NetMessagePing.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePing__FieldAccessorTable; }
    }
    
    public const int DisplayOutputFieldNumber = 1;
    private bool hasDisplayOutput;
    private bool displayOutput_;
    public bool HasDisplayOutput {
      get { return hasDisplayOutput; }
    }
    public bool DisplayOutput {
      get { return displayOutput_; }
    }
    
    public const int SendClientTimeFieldNumber = 2;
    private bool hasSendClientTime;
    private ulong sendClientTime_;
    public bool HasSendClientTime {
      get { return hasSendClientTime; }
    }
    public ulong SendClientTime {
      get { return sendClientTime_; }
    }
    
    public const int SendGameTimeFieldNumber = 3;
    private bool hasSendGameTime;
    private ulong sendGameTime_;
    public bool HasSendGameTime {
      get { return hasSendGameTime; }
    }
    public ulong SendGameTime {
      get { return sendGameTime_; }
    }
    
    public const int RequestNetReceivedGameTimeFieldNumber = 4;
    private bool hasRequestNetReceivedGameTime;
    private ulong requestNetReceivedGameTime_;
    public bool HasRequestNetReceivedGameTime {
      get { return hasRequestNetReceivedGameTime; }
    }
    public ulong RequestNetReceivedGameTime {
      get { return requestNetReceivedGameTime_; }
    }
    
    public const int LastClientLatencyFieldNumber = 5;
    private bool hasLastClientLatency;
    private ulong lastClientLatency_;
    public bool HasLastClientLatency {
      get { return hasLastClientLatency; }
    }
    public ulong LastClientLatency {
      get { return lastClientLatency_; }
    }
    
    public const int LastFpsFieldNumber = 6;
    private bool hasLastFps;
    private float lastFps_;
    public bool HasLastFps {
      get { return hasLastFps; }
    }
    public float LastFps {
      get { return lastFps_; }
    }
    
    public const int RegionPrototypeFieldNumber = 7;
    private bool hasRegionPrototype;
    private ulong regionPrototype_;
    public bool HasRegionPrototype {
      get { return hasRegionPrototype; }
    }
    public ulong RegionPrototype {
      get { return regionPrototype_; }
    }
    
    public const int CpulevelFieldNumber = 8;
    private bool hasCpulevel;
    private uint cpulevel_;
    public bool HasCpulevel {
      get { return hasCpulevel; }
    }
    public uint Cpulevel {
      get { return cpulevel_; }
    }
    
    public const int GpulevelFieldNumber = 9;
    private bool hasGpulevel;
    private uint gpulevel_;
    public bool HasGpulevel {
      get { return hasGpulevel; }
    }
    public uint Gpulevel {
      get { return gpulevel_; }
    }
    
    public const int CompositelevelFieldNumber = 10;
    private bool hasCompositelevel;
    private uint compositelevel_;
    public bool HasCompositelevel {
      get { return hasCompositelevel; }
    }
    public uint Compositelevel {
      get { return compositelevel_; }
    }
    
    public const int MinFpsFieldNumber = 11;
    private bool hasMinFps;
    private float minFps_;
    public bool HasMinFps {
      get { return hasMinFps; }
    }
    public float MinFps {
      get { return minFps_; }
    }
    
    public const int MinFpsPosFieldNumber = 12;
    private bool hasMinFpsPos;
    private global::Gazillion.NetStructPoint3 minFpsPos_;
    public bool HasMinFpsPos {
      get { return hasMinFpsPos; }
    }
    public global::Gazillion.NetStructPoint3 MinFpsPos {
      get { return minFpsPos_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDisplayOutput) return false;
        if (!hasSendClientTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePingFieldNames;
      if (hasDisplayOutput) {
        output.WriteBool(1, field_names[2], DisplayOutput);
      }
      if (hasSendClientTime) {
        output.WriteUInt64(2, field_names[10], SendClientTime);
      }
      if (hasSendGameTime) {
        output.WriteUInt64(3, field_names[11], SendGameTime);
      }
      if (hasRequestNetReceivedGameTime) {
        output.WriteUInt64(4, field_names[9], RequestNetReceivedGameTime);
      }
      if (hasLastClientLatency) {
        output.WriteUInt64(5, field_names[4], LastClientLatency);
      }
      if (hasLastFps) {
        output.WriteFloat(6, field_names[5], LastFps);
      }
      if (hasRegionPrototype) {
        output.WriteUInt64(7, field_names[8], RegionPrototype);
      }
      if (hasCpulevel) {
        output.WriteUInt32(8, field_names[1], Cpulevel);
      }
      if (hasGpulevel) {
        output.WriteUInt32(9, field_names[3], Gpulevel);
      }
      if (hasCompositelevel) {
        output.WriteUInt32(10, field_names[0], Compositelevel);
      }
      if (hasMinFps) {
        output.WriteFloat(11, field_names[6], MinFps);
      }
      if (hasMinFpsPos) {
        output.WriteMessage(12, field_names[7], MinFpsPos);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDisplayOutput) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, DisplayOutput);
      }
      if (hasSendClientTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, SendClientTime);
      }
      if (hasSendGameTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, SendGameTime);
      }
      if (hasRequestNetReceivedGameTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, RequestNetReceivedGameTime);
      }
      if (hasLastClientLatency) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, LastClientLatency);
      }
      if (hasLastFps) {
        size += pb::CodedOutputStream.ComputeFloatSize(6, LastFps);
      }
      if (hasRegionPrototype) {
        size += pb::CodedOutputStream.ComputeUInt64Size(7, RegionPrototype);
      }
      if (hasCpulevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, Cpulevel);
      }
      if (hasGpulevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, Gpulevel);
      }
      if (hasCompositelevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, Compositelevel);
      }
      if (hasMinFps) {
        size += pb::CodedOutputStream.ComputeFloatSize(11, MinFps);
      }
      if (hasMinFpsPos) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, MinFpsPos);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePing ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePing ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePing ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePing ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePing ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePing ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePing ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePing ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePing ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePing ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePing MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePing prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePing, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePing cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePing result;
      
      private NetMessagePing PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePing original = result;
          result = new NetMessagePing();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePing MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePing.Descriptor; }
      }
      
      public override NetMessagePing DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePing.DefaultInstance; }
      }
      
      public override NetMessagePing BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePing) {
          return MergeFrom((NetMessagePing) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePing other) {
        if (other == global::Gazillion.NetMessagePing.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDisplayOutput) {
          DisplayOutput = other.DisplayOutput;
        }
        if (other.HasSendClientTime) {
          SendClientTime = other.SendClientTime;
        }
        if (other.HasSendGameTime) {
          SendGameTime = other.SendGameTime;
        }
        if (other.HasRequestNetReceivedGameTime) {
          RequestNetReceivedGameTime = other.RequestNetReceivedGameTime;
        }
        if (other.HasLastClientLatency) {
          LastClientLatency = other.LastClientLatency;
        }
        if (other.HasLastFps) {
          LastFps = other.LastFps;
        }
        if (other.HasRegionPrototype) {
          RegionPrototype = other.RegionPrototype;
        }
        if (other.HasCpulevel) {
          Cpulevel = other.Cpulevel;
        }
        if (other.HasGpulevel) {
          Gpulevel = other.Gpulevel;
        }
        if (other.HasCompositelevel) {
          Compositelevel = other.Compositelevel;
        }
        if (other.HasMinFps) {
          MinFps = other.MinFps;
        }
        if (other.HasMinFpsPos) {
          MergeMinFpsPos(other.MinFpsPos);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePingFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePingFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDisplayOutput = input.ReadBool(ref result.displayOutput_);
              break;
            }
            case 16: {
              result.hasSendClientTime = input.ReadUInt64(ref result.sendClientTime_);
              break;
            }
            case 24: {
              result.hasSendGameTime = input.ReadUInt64(ref result.sendGameTime_);
              break;
            }
            case 32: {
              result.hasRequestNetReceivedGameTime = input.ReadUInt64(ref result.requestNetReceivedGameTime_);
              break;
            }
            case 40: {
              result.hasLastClientLatency = input.ReadUInt64(ref result.lastClientLatency_);
              break;
            }
            case 53: {
              result.hasLastFps = input.ReadFloat(ref result.lastFps_);
              break;
            }
            case 56: {
              result.hasRegionPrototype = input.ReadUInt64(ref result.regionPrototype_);
              break;
            }
            case 64: {
              result.hasCpulevel = input.ReadUInt32(ref result.cpulevel_);
              break;
            }
            case 72: {
              result.hasGpulevel = input.ReadUInt32(ref result.gpulevel_);
              break;
            }
            case 80: {
              result.hasCompositelevel = input.ReadUInt32(ref result.compositelevel_);
              break;
            }
            case 93: {
              result.hasMinFps = input.ReadFloat(ref result.minFps_);
              break;
            }
            case 98: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasMinFpsPos) {
                subBuilder.MergeFrom(MinFpsPos);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MinFpsPos = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDisplayOutput {
        get { return result.hasDisplayOutput; }
      }
      public bool DisplayOutput {
        get { return result.DisplayOutput; }
        set { SetDisplayOutput(value); }
      }
      public Builder SetDisplayOutput(bool value) {
        PrepareBuilder();
        result.hasDisplayOutput = true;
        result.displayOutput_ = value;
        return this;
      }
      public Builder ClearDisplayOutput() {
        PrepareBuilder();
        result.hasDisplayOutput = false;
        result.displayOutput_ = false;
        return this;
      }
      
      public bool HasSendClientTime {
        get { return result.hasSendClientTime; }
      }
      public ulong SendClientTime {
        get { return result.SendClientTime; }
        set { SetSendClientTime(value); }
      }
      public Builder SetSendClientTime(ulong value) {
        PrepareBuilder();
        result.hasSendClientTime = true;
        result.sendClientTime_ = value;
        return this;
      }
      public Builder ClearSendClientTime() {
        PrepareBuilder();
        result.hasSendClientTime = false;
        result.sendClientTime_ = 0UL;
        return this;
      }
      
      public bool HasSendGameTime {
        get { return result.hasSendGameTime; }
      }
      public ulong SendGameTime {
        get { return result.SendGameTime; }
        set { SetSendGameTime(value); }
      }
      public Builder SetSendGameTime(ulong value) {
        PrepareBuilder();
        result.hasSendGameTime = true;
        result.sendGameTime_ = value;
        return this;
      }
      public Builder ClearSendGameTime() {
        PrepareBuilder();
        result.hasSendGameTime = false;
        result.sendGameTime_ = 0UL;
        return this;
      }
      
      public bool HasRequestNetReceivedGameTime {
        get { return result.hasRequestNetReceivedGameTime; }
      }
      public ulong RequestNetReceivedGameTime {
        get { return result.RequestNetReceivedGameTime; }
        set { SetRequestNetReceivedGameTime(value); }
      }
      public Builder SetRequestNetReceivedGameTime(ulong value) {
        PrepareBuilder();
        result.hasRequestNetReceivedGameTime = true;
        result.requestNetReceivedGameTime_ = value;
        return this;
      }
      public Builder ClearRequestNetReceivedGameTime() {
        PrepareBuilder();
        result.hasRequestNetReceivedGameTime = false;
        result.requestNetReceivedGameTime_ = 0UL;
        return this;
      }
      
      public bool HasLastClientLatency {
        get { return result.hasLastClientLatency; }
      }
      public ulong LastClientLatency {
        get { return result.LastClientLatency; }
        set { SetLastClientLatency(value); }
      }
      public Builder SetLastClientLatency(ulong value) {
        PrepareBuilder();
        result.hasLastClientLatency = true;
        result.lastClientLatency_ = value;
        return this;
      }
      public Builder ClearLastClientLatency() {
        PrepareBuilder();
        result.hasLastClientLatency = false;
        result.lastClientLatency_ = 0UL;
        return this;
      }
      
      public bool HasLastFps {
        get { return result.hasLastFps; }
      }
      public float LastFps {
        get { return result.LastFps; }
        set { SetLastFps(value); }
      }
      public Builder SetLastFps(float value) {
        PrepareBuilder();
        result.hasLastFps = true;
        result.lastFps_ = value;
        return this;
      }
      public Builder ClearLastFps() {
        PrepareBuilder();
        result.hasLastFps = false;
        result.lastFps_ = 0F;
        return this;
      }
      
      public bool HasRegionPrototype {
        get { return result.hasRegionPrototype; }
      }
      public ulong RegionPrototype {
        get { return result.RegionPrototype; }
        set { SetRegionPrototype(value); }
      }
      public Builder SetRegionPrototype(ulong value) {
        PrepareBuilder();
        result.hasRegionPrototype = true;
        result.regionPrototype_ = value;
        return this;
      }
      public Builder ClearRegionPrototype() {
        PrepareBuilder();
        result.hasRegionPrototype = false;
        result.regionPrototype_ = 0UL;
        return this;
      }
      
      public bool HasCpulevel {
        get { return result.hasCpulevel; }
      }
      public uint Cpulevel {
        get { return result.Cpulevel; }
        set { SetCpulevel(value); }
      }
      public Builder SetCpulevel(uint value) {
        PrepareBuilder();
        result.hasCpulevel = true;
        result.cpulevel_ = value;
        return this;
      }
      public Builder ClearCpulevel() {
        PrepareBuilder();
        result.hasCpulevel = false;
        result.cpulevel_ = 0;
        return this;
      }
      
      public bool HasGpulevel {
        get { return result.hasGpulevel; }
      }
      public uint Gpulevel {
        get { return result.Gpulevel; }
        set { SetGpulevel(value); }
      }
      public Builder SetGpulevel(uint value) {
        PrepareBuilder();
        result.hasGpulevel = true;
        result.gpulevel_ = value;
        return this;
      }
      public Builder ClearGpulevel() {
        PrepareBuilder();
        result.hasGpulevel = false;
        result.gpulevel_ = 0;
        return this;
      }
      
      public bool HasCompositelevel {
        get { return result.hasCompositelevel; }
      }
      public uint Compositelevel {
        get { return result.Compositelevel; }
        set { SetCompositelevel(value); }
      }
      public Builder SetCompositelevel(uint value) {
        PrepareBuilder();
        result.hasCompositelevel = true;
        result.compositelevel_ = value;
        return this;
      }
      public Builder ClearCompositelevel() {
        PrepareBuilder();
        result.hasCompositelevel = false;
        result.compositelevel_ = 0;
        return this;
      }
      
      public bool HasMinFps {
        get { return result.hasMinFps; }
      }
      public float MinFps {
        get { return result.MinFps; }
        set { SetMinFps(value); }
      }
      public Builder SetMinFps(float value) {
        PrepareBuilder();
        result.hasMinFps = true;
        result.minFps_ = value;
        return this;
      }
      public Builder ClearMinFps() {
        PrepareBuilder();
        result.hasMinFps = false;
        result.minFps_ = 0F;
        return this;
      }
      
      public bool HasMinFpsPos {
       get { return result.hasMinFpsPos; }
      }
      public global::Gazillion.NetStructPoint3 MinFpsPos {
        get { return result.MinFpsPos; }
        set { SetMinFpsPos(value); }
      }
      public Builder SetMinFpsPos(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMinFpsPos = true;
        result.minFpsPos_ = value;
        return this;
      }
      public Builder SetMinFpsPos(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMinFpsPos = true;
        result.minFpsPos_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMinFpsPos(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMinFpsPos &&
            result.minFpsPos_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.minFpsPos_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.minFpsPos_).MergeFrom(value).BuildPartial();
        } else {
          result.minFpsPos_ = value;
        }
        result.hasMinFpsPos = true;
        return this;
      }
      public Builder ClearMinFpsPos() {
        PrepareBuilder();
        result.hasMinFpsPos = false;
        result.minFpsPos_ = null;
        return this;
      }
    }
    static NetMessagePing() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePickupInteraction : pb::GeneratedMessage<NetMessagePickupInteraction, NetMessagePickupInteraction.Builder> {
    private NetMessagePickupInteraction() { }
    private static readonly NetMessagePickupInteraction defaultInstance = new NetMessagePickupInteraction().MakeReadOnly();
    private static readonly string[] _netMessagePickupInteractionFieldNames = new string[] { "idTarget", "useInteractFallbackRange" };
    private static readonly uint[] _netMessagePickupInteractionFieldTags = new uint[] { 8, 16 };
    public static NetMessagePickupInteraction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePickupInteraction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePickupInteraction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePickupInteraction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePickupInteraction, NetMessagePickupInteraction.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePickupInteraction__FieldAccessorTable; }
    }
    
    public const int IdTargetFieldNumber = 1;
    private bool hasIdTarget;
    private ulong idTarget_;
    public bool HasIdTarget {
      get { return hasIdTarget; }
    }
    public ulong IdTarget {
      get { return idTarget_; }
    }
    
    public const int UseInteractFallbackRangeFieldNumber = 2;
    private bool hasUseInteractFallbackRange;
    private bool useInteractFallbackRange_;
    public bool HasUseInteractFallbackRange {
      get { return hasUseInteractFallbackRange; }
    }
    public bool UseInteractFallbackRange {
      get { return useInteractFallbackRange_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTarget) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePickupInteractionFieldNames;
      if (hasIdTarget) {
        output.WriteUInt64(1, field_names[0], IdTarget);
      }
      if (hasUseInteractFallbackRange) {
        output.WriteBool(2, field_names[1], UseInteractFallbackRange);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTarget) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTarget);
      }
      if (hasUseInteractFallbackRange) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, UseInteractFallbackRange);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePickupInteraction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePickupInteraction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePickupInteraction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePickupInteraction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePickupInteraction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePickupInteraction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePickupInteraction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePickupInteraction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePickupInteraction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePickupInteraction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePickupInteraction MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePickupInteraction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePickupInteraction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePickupInteraction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePickupInteraction result;
      
      private NetMessagePickupInteraction PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePickupInteraction original = result;
          result = new NetMessagePickupInteraction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePickupInteraction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePickupInteraction.Descriptor; }
      }
      
      public override NetMessagePickupInteraction DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePickupInteraction.DefaultInstance; }
      }
      
      public override NetMessagePickupInteraction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePickupInteraction) {
          return MergeFrom((NetMessagePickupInteraction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePickupInteraction other) {
        if (other == global::Gazillion.NetMessagePickupInteraction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTarget) {
          IdTarget = other.IdTarget;
        }
        if (other.HasUseInteractFallbackRange) {
          UseInteractFallbackRange = other.UseInteractFallbackRange;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePickupInteractionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePickupInteractionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTarget = input.ReadUInt64(ref result.idTarget_);
              break;
            }
            case 16: {
              result.hasUseInteractFallbackRange = input.ReadBool(ref result.useInteractFallbackRange_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTarget {
        get { return result.hasIdTarget; }
      }
      public ulong IdTarget {
        get { return result.IdTarget; }
        set { SetIdTarget(value); }
      }
      public Builder SetIdTarget(ulong value) {
        PrepareBuilder();
        result.hasIdTarget = true;
        result.idTarget_ = value;
        return this;
      }
      public Builder ClearIdTarget() {
        PrepareBuilder();
        result.hasIdTarget = false;
        result.idTarget_ = 0UL;
        return this;
      }
      
      public bool HasUseInteractFallbackRange {
        get { return result.hasUseInteractFallbackRange; }
      }
      public bool UseInteractFallbackRange {
        get { return result.UseInteractFallbackRange; }
        set { SetUseInteractFallbackRange(value); }
      }
      public Builder SetUseInteractFallbackRange(bool value) {
        PrepareBuilder();
        result.hasUseInteractFallbackRange = true;
        result.useInteractFallbackRange_ = value;
        return this;
      }
      public Builder ClearUseInteractFallbackRange() {
        PrepareBuilder();
        result.hasUseInteractFallbackRange = false;
        result.useInteractFallbackRange_ = false;
        return this;
      }
    }
    static NetMessagePickupInteraction() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTryInventoryMove : pb::GeneratedMessage<NetMessageTryInventoryMove, NetMessageTryInventoryMove.Builder> {
    private NetMessageTryInventoryMove() { }
    private static readonly NetMessageTryInventoryMove defaultInstance = new NetMessageTryInventoryMove().MakeReadOnly();
    private static readonly string[] _netMessageTryInventoryMoveFieldNames = new string[] { "itemId", "toInventoryOwnerId", "toInventoryPrototype", "toSlot" };
    private static readonly uint[] _netMessageTryInventoryMoveFieldTags = new uint[] { 8, 16, 24, 32 };
    public static NetMessageTryInventoryMove DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTryInventoryMove DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTryInventoryMove ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryInventoryMove__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTryInventoryMove, NetMessageTryInventoryMove.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryInventoryMove__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private ulong itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public ulong ItemId {
      get { return itemId_; }
    }
    
    public const int ToInventoryOwnerIdFieldNumber = 2;
    private bool hasToInventoryOwnerId;
    private ulong toInventoryOwnerId_;
    public bool HasToInventoryOwnerId {
      get { return hasToInventoryOwnerId; }
    }
    public ulong ToInventoryOwnerId {
      get { return toInventoryOwnerId_; }
    }
    
    public const int ToInventoryPrototypeFieldNumber = 3;
    private bool hasToInventoryPrototype;
    private ulong toInventoryPrototype_;
    public bool HasToInventoryPrototype {
      get { return hasToInventoryPrototype; }
    }
    public ulong ToInventoryPrototype {
      get { return toInventoryPrototype_; }
    }
    
    public const int ToSlotFieldNumber = 4;
    private bool hasToSlot;
    private uint toSlot_;
    public bool HasToSlot {
      get { return hasToSlot; }
    }
    public uint ToSlot {
      get { return toSlot_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemId) return false;
        if (!hasToInventoryOwnerId) return false;
        if (!hasToInventoryPrototype) return false;
        if (!hasToSlot) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTryInventoryMoveFieldNames;
      if (hasItemId) {
        output.WriteUInt64(1, field_names[0], ItemId);
      }
      if (hasToInventoryOwnerId) {
        output.WriteUInt64(2, field_names[1], ToInventoryOwnerId);
      }
      if (hasToInventoryPrototype) {
        output.WriteUInt64(3, field_names[2], ToInventoryPrototype);
      }
      if (hasToSlot) {
        output.WriteUInt32(4, field_names[3], ToSlot);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemId);
      }
      if (hasToInventoryOwnerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ToInventoryOwnerId);
      }
      if (hasToInventoryPrototype) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, ToInventoryPrototype);
      }
      if (hasToSlot) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, ToSlot);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTryInventoryMove ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryInventoryMove ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryInventoryMove ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryInventoryMove ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryInventoryMove ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryInventoryMove ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryInventoryMove ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTryInventoryMove ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTryInventoryMove ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryInventoryMove ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTryInventoryMove MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTryInventoryMove prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTryInventoryMove, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTryInventoryMove cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTryInventoryMove result;
      
      private NetMessageTryInventoryMove PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTryInventoryMove original = result;
          result = new NetMessageTryInventoryMove();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTryInventoryMove MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTryInventoryMove.Descriptor; }
      }
      
      public override NetMessageTryInventoryMove DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTryInventoryMove.DefaultInstance; }
      }
      
      public override NetMessageTryInventoryMove BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTryInventoryMove) {
          return MergeFrom((NetMessageTryInventoryMove) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTryInventoryMove other) {
        if (other == global::Gazillion.NetMessageTryInventoryMove.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        if (other.HasToInventoryOwnerId) {
          ToInventoryOwnerId = other.ToInventoryOwnerId;
        }
        if (other.HasToInventoryPrototype) {
          ToInventoryPrototype = other.ToInventoryPrototype;
        }
        if (other.HasToSlot) {
          ToSlot = other.ToSlot;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTryInventoryMoveFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTryInventoryMoveFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadUInt64(ref result.itemId_);
              break;
            }
            case 16: {
              result.hasToInventoryOwnerId = input.ReadUInt64(ref result.toInventoryOwnerId_);
              break;
            }
            case 24: {
              result.hasToInventoryPrototype = input.ReadUInt64(ref result.toInventoryPrototype_);
              break;
            }
            case 32: {
              result.hasToSlot = input.ReadUInt32(ref result.toSlot_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public ulong ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(ulong value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0UL;
        return this;
      }
      
      public bool HasToInventoryOwnerId {
        get { return result.hasToInventoryOwnerId; }
      }
      public ulong ToInventoryOwnerId {
        get { return result.ToInventoryOwnerId; }
        set { SetToInventoryOwnerId(value); }
      }
      public Builder SetToInventoryOwnerId(ulong value) {
        PrepareBuilder();
        result.hasToInventoryOwnerId = true;
        result.toInventoryOwnerId_ = value;
        return this;
      }
      public Builder ClearToInventoryOwnerId() {
        PrepareBuilder();
        result.hasToInventoryOwnerId = false;
        result.toInventoryOwnerId_ = 0UL;
        return this;
      }
      
      public bool HasToInventoryPrototype {
        get { return result.hasToInventoryPrototype; }
      }
      public ulong ToInventoryPrototype {
        get { return result.ToInventoryPrototype; }
        set { SetToInventoryPrototype(value); }
      }
      public Builder SetToInventoryPrototype(ulong value) {
        PrepareBuilder();
        result.hasToInventoryPrototype = true;
        result.toInventoryPrototype_ = value;
        return this;
      }
      public Builder ClearToInventoryPrototype() {
        PrepareBuilder();
        result.hasToInventoryPrototype = false;
        result.toInventoryPrototype_ = 0UL;
        return this;
      }
      
      public bool HasToSlot {
        get { return result.hasToSlot; }
      }
      public uint ToSlot {
        get { return result.ToSlot; }
        set { SetToSlot(value); }
      }
      public Builder SetToSlot(uint value) {
        PrepareBuilder();
        result.hasToSlot = true;
        result.toSlot_ = value;
        return this;
      }
      public Builder ClearToSlot() {
        PrepareBuilder();
        result.hasToSlot = false;
        result.toSlot_ = 0;
        return this;
      }
    }
    static NetMessageTryInventoryMove() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTryMoveCraftingResultsToGeneral : pb::GeneratedMessage<NetMessageTryMoveCraftingResultsToGeneral, NetMessageTryMoveCraftingResultsToGeneral.Builder> {
    private NetMessageTryMoveCraftingResultsToGeneral() { }
    private static readonly NetMessageTryMoveCraftingResultsToGeneral defaultInstance = new NetMessageTryMoveCraftingResultsToGeneral().MakeReadOnly();
    private static readonly string[] _netMessageTryMoveCraftingResultsToGeneralFieldNames = new string[] {  };
    private static readonly uint[] _netMessageTryMoveCraftingResultsToGeneralFieldTags = new uint[] {  };
    public static NetMessageTryMoveCraftingResultsToGeneral DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTryMoveCraftingResultsToGeneral DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTryMoveCraftingResultsToGeneral ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryMoveCraftingResultsToGeneral__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTryMoveCraftingResultsToGeneral, NetMessageTryMoveCraftingResultsToGeneral.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryMoveCraftingResultsToGeneral__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTryMoveCraftingResultsToGeneralFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTryMoveCraftingResultsToGeneral MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTryMoveCraftingResultsToGeneral prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTryMoveCraftingResultsToGeneral, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTryMoveCraftingResultsToGeneral cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTryMoveCraftingResultsToGeneral result;
      
      private NetMessageTryMoveCraftingResultsToGeneral PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTryMoveCraftingResultsToGeneral original = result;
          result = new NetMessageTryMoveCraftingResultsToGeneral();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTryMoveCraftingResultsToGeneral MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTryMoveCraftingResultsToGeneral.Descriptor; }
      }
      
      public override NetMessageTryMoveCraftingResultsToGeneral DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTryMoveCraftingResultsToGeneral.DefaultInstance; }
      }
      
      public override NetMessageTryMoveCraftingResultsToGeneral BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTryMoveCraftingResultsToGeneral) {
          return MergeFrom((NetMessageTryMoveCraftingResultsToGeneral) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTryMoveCraftingResultsToGeneral other) {
        if (other == global::Gazillion.NetMessageTryMoveCraftingResultsToGeneral.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTryMoveCraftingResultsToGeneralFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTryMoveCraftingResultsToGeneralFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageTryMoveCraftingResultsToGeneral() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageInventoryTrashItem : pb::GeneratedMessage<NetMessageInventoryTrashItem, NetMessageInventoryTrashItem.Builder> {
    private NetMessageInventoryTrashItem() { }
    private static readonly NetMessageInventoryTrashItem defaultInstance = new NetMessageInventoryTrashItem().MakeReadOnly();
    private static readonly string[] _netMessageInventoryTrashItemFieldNames = new string[] { "itemId" };
    private static readonly uint[] _netMessageInventoryTrashItemFieldTags = new uint[] { 8 };
    public static NetMessageInventoryTrashItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageInventoryTrashItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageInventoryTrashItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageInventoryTrashItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageInventoryTrashItem, NetMessageInventoryTrashItem.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageInventoryTrashItem__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private ulong itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public ulong ItemId {
      get { return itemId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageInventoryTrashItemFieldNames;
      if (hasItemId) {
        output.WriteUInt64(1, field_names[0], ItemId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageInventoryTrashItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryTrashItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryTrashItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryTrashItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryTrashItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryTrashItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryTrashItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageInventoryTrashItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageInventoryTrashItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryTrashItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageInventoryTrashItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageInventoryTrashItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageInventoryTrashItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageInventoryTrashItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageInventoryTrashItem result;
      
      private NetMessageInventoryTrashItem PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageInventoryTrashItem original = result;
          result = new NetMessageInventoryTrashItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageInventoryTrashItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageInventoryTrashItem.Descriptor; }
      }
      
      public override NetMessageInventoryTrashItem DefaultInstanceForType {
        get { return global::Gazillion.NetMessageInventoryTrashItem.DefaultInstance; }
      }
      
      public override NetMessageInventoryTrashItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageInventoryTrashItem) {
          return MergeFrom((NetMessageInventoryTrashItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageInventoryTrashItem other) {
        if (other == global::Gazillion.NetMessageInventoryTrashItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageInventoryTrashItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageInventoryTrashItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadUInt64(ref result.itemId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public ulong ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(ulong value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0UL;
        return this;
      }
    }
    static NetMessageInventoryTrashItem() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageThrowInteraction : pb::GeneratedMessage<NetMessageThrowInteraction, NetMessageThrowInteraction.Builder> {
    private NetMessageThrowInteraction() { }
    private static readonly NetMessageThrowInteraction defaultInstance = new NetMessageThrowInteraction().MakeReadOnly();
    private static readonly string[] _netMessageThrowInteractionFieldNames = new string[] { "idTarget" };
    private static readonly uint[] _netMessageThrowInteractionFieldTags = new uint[] { 8 };
    public static NetMessageThrowInteraction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageThrowInteraction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageThrowInteraction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageThrowInteraction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageThrowInteraction, NetMessageThrowInteraction.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageThrowInteraction__FieldAccessorTable; }
    }
    
    public const int IdTargetFieldNumber = 1;
    private bool hasIdTarget;
    private ulong idTarget_;
    public bool HasIdTarget {
      get { return hasIdTarget; }
    }
    public ulong IdTarget {
      get { return idTarget_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTarget) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageThrowInteractionFieldNames;
      if (hasIdTarget) {
        output.WriteUInt64(1, field_names[0], IdTarget);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTarget) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTarget);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageThrowInteraction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageThrowInteraction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageThrowInteraction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageThrowInteraction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageThrowInteraction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageThrowInteraction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageThrowInteraction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageThrowInteraction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageThrowInteraction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageThrowInteraction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageThrowInteraction MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageThrowInteraction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageThrowInteraction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageThrowInteraction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageThrowInteraction result;
      
      private NetMessageThrowInteraction PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageThrowInteraction original = result;
          result = new NetMessageThrowInteraction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageThrowInteraction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageThrowInteraction.Descriptor; }
      }
      
      public override NetMessageThrowInteraction DefaultInstanceForType {
        get { return global::Gazillion.NetMessageThrowInteraction.DefaultInstance; }
      }
      
      public override NetMessageThrowInteraction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageThrowInteraction) {
          return MergeFrom((NetMessageThrowInteraction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageThrowInteraction other) {
        if (other == global::Gazillion.NetMessageThrowInteraction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTarget) {
          IdTarget = other.IdTarget;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageThrowInteractionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageThrowInteractionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTarget = input.ReadUInt64(ref result.idTarget_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTarget {
        get { return result.hasIdTarget; }
      }
      public ulong IdTarget {
        get { return result.IdTarget; }
        set { SetIdTarget(value); }
      }
      public Builder SetIdTarget(ulong value) {
        PrepareBuilder();
        result.hasIdTarget = true;
        result.idTarget_ = value;
        return this;
      }
      public Builder ClearIdTarget() {
        PrepareBuilder();
        result.hasIdTarget = false;
        result.idTarget_ = 0UL;
        return this;
      }
    }
    static NetMessageThrowInteraction() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePerformPreInteractPower : pb::GeneratedMessage<NetMessagePerformPreInteractPower, NetMessagePerformPreInteractPower.Builder> {
    private NetMessagePerformPreInteractPower() { }
    private static readonly NetMessagePerformPreInteractPower defaultInstance = new NetMessagePerformPreInteractPower().MakeReadOnly();
    private static readonly string[] _netMessagePerformPreInteractPowerFieldNames = new string[] { "hasDialog", "idTarget" };
    private static readonly uint[] _netMessagePerformPreInteractPowerFieldTags = new uint[] { 16, 8 };
    public static NetMessagePerformPreInteractPower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePerformPreInteractPower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePerformPreInteractPower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePerformPreInteractPower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePerformPreInteractPower, NetMessagePerformPreInteractPower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePerformPreInteractPower__FieldAccessorTable; }
    }
    
    public const int IdTargetFieldNumber = 1;
    private bool hasIdTarget;
    private ulong idTarget_;
    public bool HasIdTarget {
      get { return hasIdTarget; }
    }
    public ulong IdTarget {
      get { return idTarget_; }
    }
    
    public const int HasDialogFieldNumber = 2;
    private bool hasHasDialog;
    private bool hasDialog_;
    public bool HasHasDialog {
      get { return hasHasDialog; }
    }
    public bool HasDialog {
      get { return hasDialog_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTarget) return false;
        if (!hasHasDialog) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePerformPreInteractPowerFieldNames;
      if (hasIdTarget) {
        output.WriteUInt64(1, field_names[1], IdTarget);
      }
      if (hasHasDialog) {
        output.WriteBool(2, field_names[0], HasDialog);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTarget) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTarget);
      }
      if (hasHasDialog) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, HasDialog);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePerformPreInteractPower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePerformPreInteractPower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePerformPreInteractPower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePerformPreInteractPower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePerformPreInteractPower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePerformPreInteractPower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePerformPreInteractPower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePerformPreInteractPower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePerformPreInteractPower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePerformPreInteractPower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePerformPreInteractPower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePerformPreInteractPower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePerformPreInteractPower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePerformPreInteractPower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePerformPreInteractPower result;
      
      private NetMessagePerformPreInteractPower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePerformPreInteractPower original = result;
          result = new NetMessagePerformPreInteractPower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePerformPreInteractPower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePerformPreInteractPower.Descriptor; }
      }
      
      public override NetMessagePerformPreInteractPower DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePerformPreInteractPower.DefaultInstance; }
      }
      
      public override NetMessagePerformPreInteractPower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePerformPreInteractPower) {
          return MergeFrom((NetMessagePerformPreInteractPower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePerformPreInteractPower other) {
        if (other == global::Gazillion.NetMessagePerformPreInteractPower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTarget) {
          IdTarget = other.IdTarget;
        }
        if (other.HasHasDialog) {
          HasDialog = other.HasDialog;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePerformPreInteractPowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePerformPreInteractPowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTarget = input.ReadUInt64(ref result.idTarget_);
              break;
            }
            case 16: {
              result.hasHasDialog = input.ReadBool(ref result.hasDialog_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTarget {
        get { return result.hasIdTarget; }
      }
      public ulong IdTarget {
        get { return result.IdTarget; }
        set { SetIdTarget(value); }
      }
      public Builder SetIdTarget(ulong value) {
        PrepareBuilder();
        result.hasIdTarget = true;
        result.idTarget_ = value;
        return this;
      }
      public Builder ClearIdTarget() {
        PrepareBuilder();
        result.hasIdTarget = false;
        result.idTarget_ = 0UL;
        return this;
      }
      
      public bool HasHasDialog {
        get { return result.hasHasDialog; }
      }
      public bool HasDialog {
        get { return result.HasDialog; }
        set { SetHasDialog(value); }
      }
      public Builder SetHasDialog(bool value) {
        PrepareBuilder();
        result.hasHasDialog = true;
        result.hasDialog_ = value;
        return this;
      }
      public Builder ClearHasDialog() {
        PrepareBuilder();
        result.hasHasDialog = false;
        result.hasDialog_ = false;
        return this;
      }
    }
    static NetMessagePerformPreInteractPower() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUseInteractableObject : pb::GeneratedMessage<NetMessageUseInteractableObject, NetMessageUseInteractableObject.Builder> {
    private NetMessageUseInteractableObject() { }
    private static readonly NetMessageUseInteractableObject defaultInstance = new NetMessageUseInteractableObject().MakeReadOnly();
    private static readonly string[] _netMessageUseInteractableObjectFieldNames = new string[] { "idTarget", "missionPrototypeRef" };
    private static readonly uint[] _netMessageUseInteractableObjectFieldTags = new uint[] { 8, 16 };
    public static NetMessageUseInteractableObject DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUseInteractableObject DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUseInteractableObject ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUseInteractableObject__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUseInteractableObject, NetMessageUseInteractableObject.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUseInteractableObject__FieldAccessorTable; }
    }
    
    public const int IdTargetFieldNumber = 1;
    private bool hasIdTarget;
    private ulong idTarget_;
    public bool HasIdTarget {
      get { return hasIdTarget; }
    }
    public ulong IdTarget {
      get { return idTarget_; }
    }
    
    public const int MissionPrototypeRefFieldNumber = 2;
    private bool hasMissionPrototypeRef;
    private ulong missionPrototypeRef_;
    public bool HasMissionPrototypeRef {
      get { return hasMissionPrototypeRef; }
    }
    public ulong MissionPrototypeRef {
      get { return missionPrototypeRef_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTarget) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUseInteractableObjectFieldNames;
      if (hasIdTarget) {
        output.WriteUInt64(1, field_names[0], IdTarget);
      }
      if (hasMissionPrototypeRef) {
        output.WriteUInt64(2, field_names[1], MissionPrototypeRef);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTarget) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTarget);
      }
      if (hasMissionPrototypeRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, MissionPrototypeRef);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUseInteractableObject ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUseInteractableObject ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUseInteractableObject ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUseInteractableObject ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUseInteractableObject ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUseInteractableObject ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUseInteractableObject ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUseInteractableObject ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUseInteractableObject ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUseInteractableObject ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUseInteractableObject MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUseInteractableObject prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUseInteractableObject, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUseInteractableObject cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUseInteractableObject result;
      
      private NetMessageUseInteractableObject PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUseInteractableObject original = result;
          result = new NetMessageUseInteractableObject();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUseInteractableObject MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUseInteractableObject.Descriptor; }
      }
      
      public override NetMessageUseInteractableObject DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUseInteractableObject.DefaultInstance; }
      }
      
      public override NetMessageUseInteractableObject BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUseInteractableObject) {
          return MergeFrom((NetMessageUseInteractableObject) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUseInteractableObject other) {
        if (other == global::Gazillion.NetMessageUseInteractableObject.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTarget) {
          IdTarget = other.IdTarget;
        }
        if (other.HasMissionPrototypeRef) {
          MissionPrototypeRef = other.MissionPrototypeRef;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUseInteractableObjectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUseInteractableObjectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTarget = input.ReadUInt64(ref result.idTarget_);
              break;
            }
            case 16: {
              result.hasMissionPrototypeRef = input.ReadUInt64(ref result.missionPrototypeRef_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTarget {
        get { return result.hasIdTarget; }
      }
      public ulong IdTarget {
        get { return result.IdTarget; }
        set { SetIdTarget(value); }
      }
      public Builder SetIdTarget(ulong value) {
        PrepareBuilder();
        result.hasIdTarget = true;
        result.idTarget_ = value;
        return this;
      }
      public Builder ClearIdTarget() {
        PrepareBuilder();
        result.hasIdTarget = false;
        result.idTarget_ = 0UL;
        return this;
      }
      
      public bool HasMissionPrototypeRef {
        get { return result.hasMissionPrototypeRef; }
      }
      public ulong MissionPrototypeRef {
        get { return result.MissionPrototypeRef; }
        set { SetMissionPrototypeRef(value); }
      }
      public Builder SetMissionPrototypeRef(ulong value) {
        PrepareBuilder();
        result.hasMissionPrototypeRef = true;
        result.missionPrototypeRef_ = value;
        return this;
      }
      public Builder ClearMissionPrototypeRef() {
        PrepareBuilder();
        result.hasMissionPrototypeRef = false;
        result.missionPrototypeRef_ = 0UL;
        return this;
      }
    }
    static NetMessageUseInteractableObject() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTryCraft : pb::GeneratedMessage<NetMessageTryCraft, NetMessageTryCraft.Builder> {
    private NetMessageTryCraft() { }
    private static readonly NetMessageTryCraft defaultInstance = new NetMessageTryCraft().MakeReadOnly();
    private static readonly string[] _netMessageTryCraftFieldNames = new string[] { "idIngredients", "idRecipe", "idVendor" };
    private static readonly uint[] _netMessageTryCraftFieldTags = new uint[] { 24, 8, 16 };
    public static NetMessageTryCraft DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTryCraft DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTryCraft ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryCraft__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTryCraft, NetMessageTryCraft.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryCraft__FieldAccessorTable; }
    }
    
    public const int IdRecipeFieldNumber = 1;
    private bool hasIdRecipe;
    private ulong idRecipe_;
    public bool HasIdRecipe {
      get { return hasIdRecipe; }
    }
    public ulong IdRecipe {
      get { return idRecipe_; }
    }
    
    public const int IdVendorFieldNumber = 2;
    private bool hasIdVendor;
    private ulong idVendor_;
    public bool HasIdVendor {
      get { return hasIdVendor; }
    }
    public ulong IdVendor {
      get { return idVendor_; }
    }
    
    public const int IdIngredientsFieldNumber = 3;
    private pbc::PopsicleList<ulong> idIngredients_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> IdIngredientsList {
      get { return pbc::Lists.AsReadOnly(idIngredients_); }
    }
    public int IdIngredientsCount {
      get { return idIngredients_.Count; }
    }
    public ulong GetIdIngredients(int index) {
      return idIngredients_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdRecipe) return false;
        if (!hasIdVendor) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTryCraftFieldNames;
      if (hasIdRecipe) {
        output.WriteUInt64(1, field_names[1], IdRecipe);
      }
      if (hasIdVendor) {
        output.WriteUInt64(2, field_names[2], IdVendor);
      }
      if (idIngredients_.Count > 0) {
        output.WriteUInt64Array(3, field_names[0], idIngredients_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdRecipe) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdRecipe);
      }
      if (hasIdVendor) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, IdVendor);
      }
      {
        int dataSize = 0;
        foreach (ulong element in IdIngredientsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * idIngredients_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTryCraft ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryCraft ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryCraft ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryCraft ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryCraft ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryCraft ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryCraft ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTryCraft ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTryCraft ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryCraft ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTryCraft MakeReadOnly() {
      idIngredients_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTryCraft prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTryCraft, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTryCraft cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTryCraft result;
      
      private NetMessageTryCraft PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTryCraft original = result;
          result = new NetMessageTryCraft();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTryCraft MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTryCraft.Descriptor; }
      }
      
      public override NetMessageTryCraft DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTryCraft.DefaultInstance; }
      }
      
      public override NetMessageTryCraft BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTryCraft) {
          return MergeFrom((NetMessageTryCraft) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTryCraft other) {
        if (other == global::Gazillion.NetMessageTryCraft.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdRecipe) {
          IdRecipe = other.IdRecipe;
        }
        if (other.HasIdVendor) {
          IdVendor = other.IdVendor;
        }
        if (other.idIngredients_.Count != 0) {
          result.idIngredients_.Add(other.idIngredients_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTryCraftFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTryCraftFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdRecipe = input.ReadUInt64(ref result.idRecipe_);
              break;
            }
            case 16: {
              result.hasIdVendor = input.ReadUInt64(ref result.idVendor_);
              break;
            }
            case 26:
            case 24: {
              input.ReadUInt64Array(tag, field_name, result.idIngredients_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdRecipe {
        get { return result.hasIdRecipe; }
      }
      public ulong IdRecipe {
        get { return result.IdRecipe; }
        set { SetIdRecipe(value); }
      }
      public Builder SetIdRecipe(ulong value) {
        PrepareBuilder();
        result.hasIdRecipe = true;
        result.idRecipe_ = value;
        return this;
      }
      public Builder ClearIdRecipe() {
        PrepareBuilder();
        result.hasIdRecipe = false;
        result.idRecipe_ = 0UL;
        return this;
      }
      
      public bool HasIdVendor {
        get { return result.hasIdVendor; }
      }
      public ulong IdVendor {
        get { return result.IdVendor; }
        set { SetIdVendor(value); }
      }
      public Builder SetIdVendor(ulong value) {
        PrepareBuilder();
        result.hasIdVendor = true;
        result.idVendor_ = value;
        return this;
      }
      public Builder ClearIdVendor() {
        PrepareBuilder();
        result.hasIdVendor = false;
        result.idVendor_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> IdIngredientsList {
        get { return PrepareBuilder().idIngredients_; }
      }
      public int IdIngredientsCount {
        get { return result.IdIngredientsCount; }
      }
      public ulong GetIdIngredients(int index) {
        return result.GetIdIngredients(index);
      }
      public Builder SetIdIngredients(int index, ulong value) {
        PrepareBuilder();
        result.idIngredients_[index] = value;
        return this;
      }
      public Builder AddIdIngredients(ulong value) {
        PrepareBuilder();
        result.idIngredients_.Add(value);
        return this;
      }
      public Builder AddRangeIdIngredients(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.idIngredients_.Add(values);
        return this;
      }
      public Builder ClearIdIngredients() {
        PrepareBuilder();
        result.idIngredients_.Clear();
        return this;
      }
    }
    static NetMessageTryCraft() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUseWaypoint : pb::GeneratedMessage<NetMessageUseWaypoint, NetMessageUseWaypoint.Builder> {
    private NetMessageUseWaypoint() { }
    private static readonly NetMessageUseWaypoint defaultInstance = new NetMessageUseWaypoint().MakeReadOnly();
    private static readonly string[] _netMessageUseWaypointFieldNames = new string[] { "idTransitionEntity", "waypointDataRef" };
    private static readonly uint[] _netMessageUseWaypointFieldTags = new uint[] { 8, 16 };
    public static NetMessageUseWaypoint DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUseWaypoint DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUseWaypoint ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUseWaypoint__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUseWaypoint, NetMessageUseWaypoint.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUseWaypoint__FieldAccessorTable; }
    }
    
    public const int IdTransitionEntityFieldNumber = 1;
    private bool hasIdTransitionEntity;
    private ulong idTransitionEntity_;
    public bool HasIdTransitionEntity {
      get { return hasIdTransitionEntity; }
    }
    public ulong IdTransitionEntity {
      get { return idTransitionEntity_; }
    }
    
    public const int WaypointDataRefFieldNumber = 2;
    private bool hasWaypointDataRef;
    private ulong waypointDataRef_;
    public bool HasWaypointDataRef {
      get { return hasWaypointDataRef; }
    }
    public ulong WaypointDataRef {
      get { return waypointDataRef_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTransitionEntity) return false;
        if (!hasWaypointDataRef) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUseWaypointFieldNames;
      if (hasIdTransitionEntity) {
        output.WriteUInt64(1, field_names[0], IdTransitionEntity);
      }
      if (hasWaypointDataRef) {
        output.WriteUInt64(2, field_names[1], WaypointDataRef);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTransitionEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTransitionEntity);
      }
      if (hasWaypointDataRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, WaypointDataRef);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUseWaypoint ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUseWaypoint ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUseWaypoint ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUseWaypoint ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUseWaypoint ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUseWaypoint ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUseWaypoint ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUseWaypoint ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUseWaypoint ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUseWaypoint ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUseWaypoint MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUseWaypoint prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUseWaypoint, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUseWaypoint cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUseWaypoint result;
      
      private NetMessageUseWaypoint PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUseWaypoint original = result;
          result = new NetMessageUseWaypoint();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUseWaypoint MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUseWaypoint.Descriptor; }
      }
      
      public override NetMessageUseWaypoint DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUseWaypoint.DefaultInstance; }
      }
      
      public override NetMessageUseWaypoint BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUseWaypoint) {
          return MergeFrom((NetMessageUseWaypoint) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUseWaypoint other) {
        if (other == global::Gazillion.NetMessageUseWaypoint.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTransitionEntity) {
          IdTransitionEntity = other.IdTransitionEntity;
        }
        if (other.HasWaypointDataRef) {
          WaypointDataRef = other.WaypointDataRef;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUseWaypointFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUseWaypointFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTransitionEntity = input.ReadUInt64(ref result.idTransitionEntity_);
              break;
            }
            case 16: {
              result.hasWaypointDataRef = input.ReadUInt64(ref result.waypointDataRef_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTransitionEntity {
        get { return result.hasIdTransitionEntity; }
      }
      public ulong IdTransitionEntity {
        get { return result.IdTransitionEntity; }
        set { SetIdTransitionEntity(value); }
      }
      public Builder SetIdTransitionEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTransitionEntity = true;
        result.idTransitionEntity_ = value;
        return this;
      }
      public Builder ClearIdTransitionEntity() {
        PrepareBuilder();
        result.hasIdTransitionEntity = false;
        result.idTransitionEntity_ = 0UL;
        return this;
      }
      
      public bool HasWaypointDataRef {
        get { return result.hasWaypointDataRef; }
      }
      public ulong WaypointDataRef {
        get { return result.WaypointDataRef; }
        set { SetWaypointDataRef(value); }
      }
      public Builder SetWaypointDataRef(ulong value) {
        PrepareBuilder();
        result.hasWaypointDataRef = true;
        result.waypointDataRef_ = value;
        return this;
      }
      public Builder ClearWaypointDataRef() {
        PrepareBuilder();
        result.hasWaypointDataRef = false;
        result.waypointDataRef_ = 0UL;
        return this;
      }
    }
    static NetMessageUseWaypoint() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDebugAcquireAndSwitchToAvatar : pb::GeneratedMessage<NetMessageDebugAcquireAndSwitchToAvatar, NetMessageDebugAcquireAndSwitchToAvatar.Builder> {
    private NetMessageDebugAcquireAndSwitchToAvatar() { }
    private static readonly NetMessageDebugAcquireAndSwitchToAvatar defaultInstance = new NetMessageDebugAcquireAndSwitchToAvatar().MakeReadOnly();
    private static readonly string[] _netMessageDebugAcquireAndSwitchToAvatarFieldNames = new string[] { "avatarPrototypeId" };
    private static readonly uint[] _netMessageDebugAcquireAndSwitchToAvatarFieldTags = new uint[] { 8 };
    public static NetMessageDebugAcquireAndSwitchToAvatar DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDebugAcquireAndSwitchToAvatar DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDebugAcquireAndSwitchToAvatar ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDebugAcquireAndSwitchToAvatar__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDebugAcquireAndSwitchToAvatar, NetMessageDebugAcquireAndSwitchToAvatar.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDebugAcquireAndSwitchToAvatar__FieldAccessorTable; }
    }
    
    public const int AvatarPrototypeIdFieldNumber = 1;
    private bool hasAvatarPrototypeId;
    private ulong avatarPrototypeId_;
    public bool HasAvatarPrototypeId {
      get { return hasAvatarPrototypeId; }
    }
    public ulong AvatarPrototypeId {
      get { return avatarPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDebugAcquireAndSwitchToAvatarFieldNames;
      if (hasAvatarPrototypeId) {
        output.WriteUInt64(1, field_names[0], AvatarPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDebugAcquireAndSwitchToAvatar MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDebugAcquireAndSwitchToAvatar prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDebugAcquireAndSwitchToAvatar, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDebugAcquireAndSwitchToAvatar cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDebugAcquireAndSwitchToAvatar result;
      
      private NetMessageDebugAcquireAndSwitchToAvatar PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDebugAcquireAndSwitchToAvatar original = result;
          result = new NetMessageDebugAcquireAndSwitchToAvatar();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDebugAcquireAndSwitchToAvatar MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDebugAcquireAndSwitchToAvatar.Descriptor; }
      }
      
      public override NetMessageDebugAcquireAndSwitchToAvatar DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDebugAcquireAndSwitchToAvatar.DefaultInstance; }
      }
      
      public override NetMessageDebugAcquireAndSwitchToAvatar BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDebugAcquireAndSwitchToAvatar) {
          return MergeFrom((NetMessageDebugAcquireAndSwitchToAvatar) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDebugAcquireAndSwitchToAvatar other) {
        if (other == global::Gazillion.NetMessageDebugAcquireAndSwitchToAvatar.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarPrototypeId) {
          AvatarPrototypeId = other.AvatarPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDebugAcquireAndSwitchToAvatarFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDebugAcquireAndSwitchToAvatarFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarPrototypeId = input.ReadUInt64(ref result.avatarPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarPrototypeId {
        get { return result.hasAvatarPrototypeId; }
      }
      public ulong AvatarPrototypeId {
        get { return result.AvatarPrototypeId; }
        set { SetAvatarPrototypeId(value); }
      }
      public Builder SetAvatarPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasAvatarPrototypeId = true;
        result.avatarPrototypeId_ = value;
        return this;
      }
      public Builder ClearAvatarPrototypeId() {
        PrepareBuilder();
        result.hasAvatarPrototypeId = false;
        result.avatarPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageDebugAcquireAndSwitchToAvatar() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSwitchAvatar : pb::GeneratedMessage<NetMessageSwitchAvatar, NetMessageSwitchAvatar.Builder> {
    private NetMessageSwitchAvatar() { }
    private static readonly NetMessageSwitchAvatar defaultInstance = new NetMessageSwitchAvatar().MakeReadOnly();
    private static readonly string[] _netMessageSwitchAvatarFieldNames = new string[] { "avatarId" };
    private static readonly uint[] _netMessageSwitchAvatarFieldTags = new uint[] { 8 };
    public static NetMessageSwitchAvatar DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSwitchAvatar DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSwitchAvatar ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSwitchAvatar__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSwitchAvatar, NetMessageSwitchAvatar.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSwitchAvatar__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSwitchAvatarFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSwitchAvatar ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSwitchAvatar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSwitchAvatar ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSwitchAvatar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSwitchAvatar ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSwitchAvatar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSwitchAvatar ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSwitchAvatar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSwitchAvatar ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSwitchAvatar ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSwitchAvatar MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSwitchAvatar prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSwitchAvatar, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSwitchAvatar cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSwitchAvatar result;
      
      private NetMessageSwitchAvatar PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSwitchAvatar original = result;
          result = new NetMessageSwitchAvatar();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSwitchAvatar MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSwitchAvatar.Descriptor; }
      }
      
      public override NetMessageSwitchAvatar DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSwitchAvatar.DefaultInstance; }
      }
      
      public override NetMessageSwitchAvatar BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSwitchAvatar) {
          return MergeFrom((NetMessageSwitchAvatar) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSwitchAvatar other) {
        if (other == global::Gazillion.NetMessageSwitchAvatar.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSwitchAvatarFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSwitchAvatarFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
    }
    static NetMessageSwitchAvatar() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAssignHotkey : pb::GeneratedMessage<NetMessageAssignHotkey, NetMessageAssignHotkey.Builder> {
    private NetMessageAssignHotkey() { }
    private static readonly NetMessageAssignHotkey defaultInstance = new NetMessageAssignHotkey().MakeReadOnly();
    private static readonly string[] _netMessageAssignHotkeyFieldNames = new string[] { "avatarId", "destinationSlotNumber", "prototypeRefId", "slotNumber" };
    private static readonly uint[] _netMessageAssignHotkeyFieldTags = new uint[] { 8, 32, 16, 24 };
    public static NetMessageAssignHotkey DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAssignHotkey DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAssignHotkey ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAssignHotkey__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAssignHotkey, NetMessageAssignHotkey.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAssignHotkey__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int PrototypeRefIdFieldNumber = 2;
    private bool hasPrototypeRefId;
    private ulong prototypeRefId_;
    public bool HasPrototypeRefId {
      get { return hasPrototypeRefId; }
    }
    public ulong PrototypeRefId {
      get { return prototypeRefId_; }
    }
    
    public const int SlotNumberFieldNumber = 3;
    private bool hasSlotNumber;
    private uint slotNumber_;
    public bool HasSlotNumber {
      get { return hasSlotNumber; }
    }
    public uint SlotNumber {
      get { return slotNumber_; }
    }
    
    public const int DestinationSlotNumberFieldNumber = 4;
    private bool hasDestinationSlotNumber;
    private uint destinationSlotNumber_;
    public bool HasDestinationSlotNumber {
      get { return hasDestinationSlotNumber; }
    }
    public uint DestinationSlotNumber {
      get { return destinationSlotNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasPrototypeRefId) return false;
        if (!hasSlotNumber) return false;
        if (!hasDestinationSlotNumber) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAssignHotkeyFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasPrototypeRefId) {
        output.WriteUInt64(2, field_names[2], PrototypeRefId);
      }
      if (hasSlotNumber) {
        output.WriteUInt32(3, field_names[3], SlotNumber);
      }
      if (hasDestinationSlotNumber) {
        output.WriteUInt32(4, field_names[1], DestinationSlotNumber);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasPrototypeRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PrototypeRefId);
      }
      if (hasSlotNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, SlotNumber);
      }
      if (hasDestinationSlotNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, DestinationSlotNumber);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAssignHotkey ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAssignHotkey ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAssignHotkey ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAssignHotkey ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAssignHotkey ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAssignHotkey ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAssignHotkey ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAssignHotkey ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAssignHotkey ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAssignHotkey ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAssignHotkey MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAssignHotkey prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAssignHotkey, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAssignHotkey cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAssignHotkey result;
      
      private NetMessageAssignHotkey PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAssignHotkey original = result;
          result = new NetMessageAssignHotkey();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAssignHotkey MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAssignHotkey.Descriptor; }
      }
      
      public override NetMessageAssignHotkey DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAssignHotkey.DefaultInstance; }
      }
      
      public override NetMessageAssignHotkey BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAssignHotkey) {
          return MergeFrom((NetMessageAssignHotkey) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAssignHotkey other) {
        if (other == global::Gazillion.NetMessageAssignHotkey.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasPrototypeRefId) {
          PrototypeRefId = other.PrototypeRefId;
        }
        if (other.HasSlotNumber) {
          SlotNumber = other.SlotNumber;
        }
        if (other.HasDestinationSlotNumber) {
          DestinationSlotNumber = other.DestinationSlotNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAssignHotkeyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAssignHotkeyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasPrototypeRefId = input.ReadUInt64(ref result.prototypeRefId_);
              break;
            }
            case 24: {
              result.hasSlotNumber = input.ReadUInt32(ref result.slotNumber_);
              break;
            }
            case 32: {
              result.hasDestinationSlotNumber = input.ReadUInt32(ref result.destinationSlotNumber_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasPrototypeRefId {
        get { return result.hasPrototypeRefId; }
      }
      public ulong PrototypeRefId {
        get { return result.PrototypeRefId; }
        set { SetPrototypeRefId(value); }
      }
      public Builder SetPrototypeRefId(ulong value) {
        PrepareBuilder();
        result.hasPrototypeRefId = true;
        result.prototypeRefId_ = value;
        return this;
      }
      public Builder ClearPrototypeRefId() {
        PrepareBuilder();
        result.hasPrototypeRefId = false;
        result.prototypeRefId_ = 0UL;
        return this;
      }
      
      public bool HasSlotNumber {
        get { return result.hasSlotNumber; }
      }
      public uint SlotNumber {
        get { return result.SlotNumber; }
        set { SetSlotNumber(value); }
      }
      public Builder SetSlotNumber(uint value) {
        PrepareBuilder();
        result.hasSlotNumber = true;
        result.slotNumber_ = value;
        return this;
      }
      public Builder ClearSlotNumber() {
        PrepareBuilder();
        result.hasSlotNumber = false;
        result.slotNumber_ = 0;
        return this;
      }
      
      public bool HasDestinationSlotNumber {
        get { return result.hasDestinationSlotNumber; }
      }
      public uint DestinationSlotNumber {
        get { return result.DestinationSlotNumber; }
        set { SetDestinationSlotNumber(value); }
      }
      public Builder SetDestinationSlotNumber(uint value) {
        PrepareBuilder();
        result.hasDestinationSlotNumber = true;
        result.destinationSlotNumber_ = value;
        return this;
      }
      public Builder ClearDestinationSlotNumber() {
        PrepareBuilder();
        result.hasDestinationSlotNumber = false;
        result.destinationSlotNumber_ = 0;
        return this;
      }
    }
    static NetMessageAssignHotkey() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUnassignHotkey : pb::GeneratedMessage<NetMessageUnassignHotkey, NetMessageUnassignHotkey.Builder> {
    private NetMessageUnassignHotkey() { }
    private static readonly NetMessageUnassignHotkey defaultInstance = new NetMessageUnassignHotkey().MakeReadOnly();
    private static readonly string[] _netMessageUnassignHotkeyFieldNames = new string[] { "avatarId", "slotNumber" };
    private static readonly uint[] _netMessageUnassignHotkeyFieldTags = new uint[] { 8, 16 };
    public static NetMessageUnassignHotkey DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUnassignHotkey DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUnassignHotkey ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUnassignHotkey__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUnassignHotkey, NetMessageUnassignHotkey.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUnassignHotkey__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int SlotNumberFieldNumber = 2;
    private bool hasSlotNumber;
    private uint slotNumber_;
    public bool HasSlotNumber {
      get { return hasSlotNumber; }
    }
    public uint SlotNumber {
      get { return slotNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasSlotNumber) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUnassignHotkeyFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasSlotNumber) {
        output.WriteUInt32(2, field_names[1], SlotNumber);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasSlotNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, SlotNumber);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUnassignHotkey ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnassignHotkey ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnassignHotkey ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnassignHotkey ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnassignHotkey ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnassignHotkey ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnassignHotkey ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUnassignHotkey ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUnassignHotkey ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnassignHotkey ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUnassignHotkey MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUnassignHotkey prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUnassignHotkey, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUnassignHotkey cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUnassignHotkey result;
      
      private NetMessageUnassignHotkey PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUnassignHotkey original = result;
          result = new NetMessageUnassignHotkey();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUnassignHotkey MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUnassignHotkey.Descriptor; }
      }
      
      public override NetMessageUnassignHotkey DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUnassignHotkey.DefaultInstance; }
      }
      
      public override NetMessageUnassignHotkey BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUnassignHotkey) {
          return MergeFrom((NetMessageUnassignHotkey) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUnassignHotkey other) {
        if (other == global::Gazillion.NetMessageUnassignHotkey.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasSlotNumber) {
          SlotNumber = other.SlotNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUnassignHotkeyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUnassignHotkeyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasSlotNumber = input.ReadUInt32(ref result.slotNumber_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasSlotNumber {
        get { return result.hasSlotNumber; }
      }
      public uint SlotNumber {
        get { return result.SlotNumber; }
        set { SetSlotNumber(value); }
      }
      public Builder SetSlotNumber(uint value) {
        PrepareBuilder();
        result.hasSlotNumber = true;
        result.slotNumber_ = value;
        return this;
      }
      public Builder ClearSlotNumber() {
        PrepareBuilder();
        result.hasSlotNumber = false;
        result.slotNumber_ = 0;
        return this;
      }
    }
    static NetMessageUnassignHotkey() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAssignAbility : pb::GeneratedMessage<NetMessageAssignAbility, NetMessageAssignAbility.Builder> {
    private NetMessageAssignAbility() { }
    private static readonly NetMessageAssignAbility defaultInstance = new NetMessageAssignAbility().MakeReadOnly();
    private static readonly string[] _netMessageAssignAbilityFieldNames = new string[] { "avatarId", "prototypeRefId", "slotNumber" };
    private static readonly uint[] _netMessageAssignAbilityFieldTags = new uint[] { 8, 16, 24 };
    public static NetMessageAssignAbility DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAssignAbility DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAssignAbility ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAssignAbility__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAssignAbility, NetMessageAssignAbility.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAssignAbility__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int PrototypeRefIdFieldNumber = 2;
    private bool hasPrototypeRefId;
    private ulong prototypeRefId_;
    public bool HasPrototypeRefId {
      get { return hasPrototypeRefId; }
    }
    public ulong PrototypeRefId {
      get { return prototypeRefId_; }
    }
    
    public const int SlotNumberFieldNumber = 3;
    private bool hasSlotNumber;
    private uint slotNumber_;
    public bool HasSlotNumber {
      get { return hasSlotNumber; }
    }
    public uint SlotNumber {
      get { return slotNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasPrototypeRefId) return false;
        if (!hasSlotNumber) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAssignAbilityFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasPrototypeRefId) {
        output.WriteUInt64(2, field_names[1], PrototypeRefId);
      }
      if (hasSlotNumber) {
        output.WriteUInt32(3, field_names[2], SlotNumber);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasPrototypeRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PrototypeRefId);
      }
      if (hasSlotNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, SlotNumber);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAssignAbility ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAssignAbility ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAssignAbility ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAssignAbility ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAssignAbility ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAssignAbility ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAssignAbility ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAssignAbility ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAssignAbility ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAssignAbility ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAssignAbility MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAssignAbility prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAssignAbility, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAssignAbility cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAssignAbility result;
      
      private NetMessageAssignAbility PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAssignAbility original = result;
          result = new NetMessageAssignAbility();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAssignAbility MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAssignAbility.Descriptor; }
      }
      
      public override NetMessageAssignAbility DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAssignAbility.DefaultInstance; }
      }
      
      public override NetMessageAssignAbility BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAssignAbility) {
          return MergeFrom((NetMessageAssignAbility) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAssignAbility other) {
        if (other == global::Gazillion.NetMessageAssignAbility.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasPrototypeRefId) {
          PrototypeRefId = other.PrototypeRefId;
        }
        if (other.HasSlotNumber) {
          SlotNumber = other.SlotNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAssignAbilityFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAssignAbilityFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasPrototypeRefId = input.ReadUInt64(ref result.prototypeRefId_);
              break;
            }
            case 24: {
              result.hasSlotNumber = input.ReadUInt32(ref result.slotNumber_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasPrototypeRefId {
        get { return result.hasPrototypeRefId; }
      }
      public ulong PrototypeRefId {
        get { return result.PrototypeRefId; }
        set { SetPrototypeRefId(value); }
      }
      public Builder SetPrototypeRefId(ulong value) {
        PrepareBuilder();
        result.hasPrototypeRefId = true;
        result.prototypeRefId_ = value;
        return this;
      }
      public Builder ClearPrototypeRefId() {
        PrepareBuilder();
        result.hasPrototypeRefId = false;
        result.prototypeRefId_ = 0UL;
        return this;
      }
      
      public bool HasSlotNumber {
        get { return result.hasSlotNumber; }
      }
      public uint SlotNumber {
        get { return result.SlotNumber; }
        set { SetSlotNumber(value); }
      }
      public Builder SetSlotNumber(uint value) {
        PrepareBuilder();
        result.hasSlotNumber = true;
        result.slotNumber_ = value;
        return this;
      }
      public Builder ClearSlotNumber() {
        PrepareBuilder();
        result.hasSlotNumber = false;
        result.slotNumber_ = 0;
        return this;
      }
    }
    static NetMessageAssignAbility() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUnassignAbility : pb::GeneratedMessage<NetMessageUnassignAbility, NetMessageUnassignAbility.Builder> {
    private NetMessageUnassignAbility() { }
    private static readonly NetMessageUnassignAbility defaultInstance = new NetMessageUnassignAbility().MakeReadOnly();
    private static readonly string[] _netMessageUnassignAbilityFieldNames = new string[] { "avatarId", "slotNumber" };
    private static readonly uint[] _netMessageUnassignAbilityFieldTags = new uint[] { 8, 16 };
    public static NetMessageUnassignAbility DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUnassignAbility DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUnassignAbility ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUnassignAbility__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUnassignAbility, NetMessageUnassignAbility.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUnassignAbility__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int SlotNumberFieldNumber = 2;
    private bool hasSlotNumber;
    private uint slotNumber_;
    public bool HasSlotNumber {
      get { return hasSlotNumber; }
    }
    public uint SlotNumber {
      get { return slotNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasSlotNumber) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUnassignAbilityFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasSlotNumber) {
        output.WriteUInt32(2, field_names[1], SlotNumber);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasSlotNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, SlotNumber);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUnassignAbility ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnassignAbility ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnassignAbility ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnassignAbility ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnassignAbility ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnassignAbility ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnassignAbility ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUnassignAbility ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUnassignAbility ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnassignAbility ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUnassignAbility MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUnassignAbility prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUnassignAbility, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUnassignAbility cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUnassignAbility result;
      
      private NetMessageUnassignAbility PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUnassignAbility original = result;
          result = new NetMessageUnassignAbility();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUnassignAbility MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUnassignAbility.Descriptor; }
      }
      
      public override NetMessageUnassignAbility DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUnassignAbility.DefaultInstance; }
      }
      
      public override NetMessageUnassignAbility BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUnassignAbility) {
          return MergeFrom((NetMessageUnassignAbility) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUnassignAbility other) {
        if (other == global::Gazillion.NetMessageUnassignAbility.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasSlotNumber) {
          SlotNumber = other.SlotNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUnassignAbilityFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUnassignAbilityFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasSlotNumber = input.ReadUInt32(ref result.slotNumber_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasSlotNumber {
        get { return result.hasSlotNumber; }
      }
      public uint SlotNumber {
        get { return result.SlotNumber; }
        set { SetSlotNumber(value); }
      }
      public Builder SetSlotNumber(uint value) {
        PrepareBuilder();
        result.hasSlotNumber = true;
        result.slotNumber_ = value;
        return this;
      }
      public Builder ClearSlotNumber() {
        PrepareBuilder();
        result.hasSlotNumber = false;
        result.slotNumber_ = 0;
        return this;
      }
    }
    static NetMessageUnassignAbility() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSwapAbilities : pb::GeneratedMessage<NetMessageSwapAbilities, NetMessageSwapAbilities.Builder> {
    private NetMessageSwapAbilities() { }
    private static readonly NetMessageSwapAbilities defaultInstance = new NetMessageSwapAbilities().MakeReadOnly();
    private static readonly string[] _netMessageSwapAbilitiesFieldNames = new string[] { "avatarId", "slotNumberA", "slotNumberB" };
    private static readonly uint[] _netMessageSwapAbilitiesFieldTags = new uint[] { 8, 16, 24 };
    public static NetMessageSwapAbilities DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSwapAbilities DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSwapAbilities ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSwapAbilities__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSwapAbilities, NetMessageSwapAbilities.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSwapAbilities__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int SlotNumberAFieldNumber = 2;
    private bool hasSlotNumberA;
    private uint slotNumberA_;
    public bool HasSlotNumberA {
      get { return hasSlotNumberA; }
    }
    public uint SlotNumberA {
      get { return slotNumberA_; }
    }
    
    public const int SlotNumberBFieldNumber = 3;
    private bool hasSlotNumberB;
    private uint slotNumberB_;
    public bool HasSlotNumberB {
      get { return hasSlotNumberB; }
    }
    public uint SlotNumberB {
      get { return slotNumberB_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasSlotNumberA) return false;
        if (!hasSlotNumberB) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSwapAbilitiesFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasSlotNumberA) {
        output.WriteUInt32(2, field_names[1], SlotNumberA);
      }
      if (hasSlotNumberB) {
        output.WriteUInt32(3, field_names[2], SlotNumberB);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasSlotNumberA) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, SlotNumberA);
      }
      if (hasSlotNumberB) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, SlotNumberB);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSwapAbilities ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSwapAbilities ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSwapAbilities ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSwapAbilities ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSwapAbilities ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSwapAbilities ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSwapAbilities ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSwapAbilities ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSwapAbilities ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSwapAbilities ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSwapAbilities MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSwapAbilities prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSwapAbilities, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSwapAbilities cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSwapAbilities result;
      
      private NetMessageSwapAbilities PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSwapAbilities original = result;
          result = new NetMessageSwapAbilities();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSwapAbilities MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSwapAbilities.Descriptor; }
      }
      
      public override NetMessageSwapAbilities DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSwapAbilities.DefaultInstance; }
      }
      
      public override NetMessageSwapAbilities BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSwapAbilities) {
          return MergeFrom((NetMessageSwapAbilities) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSwapAbilities other) {
        if (other == global::Gazillion.NetMessageSwapAbilities.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasSlotNumberA) {
          SlotNumberA = other.SlotNumberA;
        }
        if (other.HasSlotNumberB) {
          SlotNumberB = other.SlotNumberB;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSwapAbilitiesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSwapAbilitiesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasSlotNumberA = input.ReadUInt32(ref result.slotNumberA_);
              break;
            }
            case 24: {
              result.hasSlotNumberB = input.ReadUInt32(ref result.slotNumberB_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasSlotNumberA {
        get { return result.hasSlotNumberA; }
      }
      public uint SlotNumberA {
        get { return result.SlotNumberA; }
        set { SetSlotNumberA(value); }
      }
      public Builder SetSlotNumberA(uint value) {
        PrepareBuilder();
        result.hasSlotNumberA = true;
        result.slotNumberA_ = value;
        return this;
      }
      public Builder ClearSlotNumberA() {
        PrepareBuilder();
        result.hasSlotNumberA = false;
        result.slotNumberA_ = 0;
        return this;
      }
      
      public bool HasSlotNumberB {
        get { return result.hasSlotNumberB; }
      }
      public uint SlotNumberB {
        get { return result.SlotNumberB; }
        set { SetSlotNumberB(value); }
      }
      public Builder SetSlotNumberB(uint value) {
        PrepareBuilder();
        result.hasSlotNumberB = true;
        result.slotNumberB_ = value;
        return this;
      }
      public Builder ClearSlotNumberB() {
        PrepareBuilder();
        result.hasSlotNumberB = false;
        result.slotNumberB_ = 0;
        return this;
      }
    }
    static NetMessageSwapAbilities() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageModCommitTemporary : pb::GeneratedMessage<NetMessageModCommitTemporary, NetMessageModCommitTemporary.Builder> {
    private NetMessageModCommitTemporary() { }
    private static readonly NetMessageModCommitTemporary defaultInstance = new NetMessageModCommitTemporary().MakeReadOnly();
    private static readonly string[] _netMessageModCommitTemporaryFieldNames = new string[] { "avatarRef", "changes", "modTypeRef" };
    private static readonly uint[] _netMessageModCommitTemporaryFieldTags = new uint[] { 8, 26, 16 };
    public static NetMessageModCommitTemporary DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageModCommitTemporary DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageModCommitTemporary ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageModCommitTemporary__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageModCommitTemporary, NetMessageModCommitTemporary.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageModCommitTemporary__FieldAccessorTable; }
    }
    
    public const int AvatarRefFieldNumber = 1;
    private bool hasAvatarRef;
    private ulong avatarRef_;
    public bool HasAvatarRef {
      get { return hasAvatarRef; }
    }
    public ulong AvatarRef {
      get { return avatarRef_; }
    }
    
    public const int ModTypeRefFieldNumber = 2;
    private bool hasModTypeRef;
    private ulong modTypeRef_;
    public bool HasModTypeRef {
      get { return hasModTypeRef; }
    }
    public ulong ModTypeRef {
      get { return modTypeRef_; }
    }
    
    public const int ChangesFieldNumber = 3;
    private pbc::PopsicleList<global::Gazillion.NetStructModChangeObject> changes_ = new pbc::PopsicleList<global::Gazillion.NetStructModChangeObject>();
    public scg::IList<global::Gazillion.NetStructModChangeObject> ChangesList {
      get { return changes_; }
    }
    public int ChangesCount {
      get { return changes_.Count; }
    }
    public global::Gazillion.NetStructModChangeObject GetChanges(int index) {
      return changes_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarRef) return false;
        if (!hasModTypeRef) return false;
        foreach (global::Gazillion.NetStructModChangeObject element in ChangesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageModCommitTemporaryFieldNames;
      if (hasAvatarRef) {
        output.WriteUInt64(1, field_names[0], AvatarRef);
      }
      if (hasModTypeRef) {
        output.WriteUInt64(2, field_names[2], ModTypeRef);
      }
      if (changes_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], changes_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarRef);
      }
      if (hasModTypeRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ModTypeRef);
      }
      foreach (global::Gazillion.NetStructModChangeObject element in ChangesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageModCommitTemporary ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageModCommitTemporary ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModCommitTemporary ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageModCommitTemporary ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModCommitTemporary ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageModCommitTemporary ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModCommitTemporary ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageModCommitTemporary ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageModCommitTemporary ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageModCommitTemporary ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageModCommitTemporary MakeReadOnly() {
      changes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageModCommitTemporary prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageModCommitTemporary, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageModCommitTemporary cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageModCommitTemporary result;
      
      private NetMessageModCommitTemporary PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageModCommitTemporary original = result;
          result = new NetMessageModCommitTemporary();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageModCommitTemporary MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageModCommitTemporary.Descriptor; }
      }
      
      public override NetMessageModCommitTemporary DefaultInstanceForType {
        get { return global::Gazillion.NetMessageModCommitTemporary.DefaultInstance; }
      }
      
      public override NetMessageModCommitTemporary BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageModCommitTemporary) {
          return MergeFrom((NetMessageModCommitTemporary) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageModCommitTemporary other) {
        if (other == global::Gazillion.NetMessageModCommitTemporary.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarRef) {
          AvatarRef = other.AvatarRef;
        }
        if (other.HasModTypeRef) {
          ModTypeRef = other.ModTypeRef;
        }
        if (other.changes_.Count != 0) {
          result.changes_.Add(other.changes_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageModCommitTemporaryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageModCommitTemporaryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarRef = input.ReadUInt64(ref result.avatarRef_);
              break;
            }
            case 16: {
              result.hasModTypeRef = input.ReadUInt64(ref result.modTypeRef_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.changes_, global::Gazillion.NetStructModChangeObject.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarRef {
        get { return result.hasAvatarRef; }
      }
      public ulong AvatarRef {
        get { return result.AvatarRef; }
        set { SetAvatarRef(value); }
      }
      public Builder SetAvatarRef(ulong value) {
        PrepareBuilder();
        result.hasAvatarRef = true;
        result.avatarRef_ = value;
        return this;
      }
      public Builder ClearAvatarRef() {
        PrepareBuilder();
        result.hasAvatarRef = false;
        result.avatarRef_ = 0UL;
        return this;
      }
      
      public bool HasModTypeRef {
        get { return result.hasModTypeRef; }
      }
      public ulong ModTypeRef {
        get { return result.ModTypeRef; }
        set { SetModTypeRef(value); }
      }
      public Builder SetModTypeRef(ulong value) {
        PrepareBuilder();
        result.hasModTypeRef = true;
        result.modTypeRef_ = value;
        return this;
      }
      public Builder ClearModTypeRef() {
        PrepareBuilder();
        result.hasModTypeRef = false;
        result.modTypeRef_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.NetStructModChangeObject> ChangesList {
        get { return PrepareBuilder().changes_; }
      }
      public int ChangesCount {
        get { return result.ChangesCount; }
      }
      public global::Gazillion.NetStructModChangeObject GetChanges(int index) {
        return result.GetChanges(index);
      }
      public Builder SetChanges(int index, global::Gazillion.NetStructModChangeObject value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.changes_[index] = value;
        return this;
      }
      public Builder SetChanges(int index, global::Gazillion.NetStructModChangeObject.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.changes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddChanges(global::Gazillion.NetStructModChangeObject value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.changes_.Add(value);
        return this;
      }
      public Builder AddChanges(global::Gazillion.NetStructModChangeObject.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.changes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeChanges(scg::IEnumerable<global::Gazillion.NetStructModChangeObject> values) {
        PrepareBuilder();
        result.changes_.Add(values);
        return this;
      }
      public Builder ClearChanges() {
        PrepareBuilder();
        result.changes_.Clear();
        return this;
      }
    }
    static NetMessageModCommitTemporary() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageModReset : pb::GeneratedMessage<NetMessageModReset, NetMessageModReset.Builder> {
    private NetMessageModReset() { }
    private static readonly NetMessageModReset defaultInstance = new NetMessageModReset().MakeReadOnly();
    private static readonly string[] _netMessageModResetFieldNames = new string[] { "avatarId", "modTypeRef" };
    private static readonly uint[] _netMessageModResetFieldTags = new uint[] { 8, 16 };
    public static NetMessageModReset DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageModReset DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageModReset ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageModReset__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageModReset, NetMessageModReset.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageModReset__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int ModTypeRefFieldNumber = 2;
    private bool hasModTypeRef;
    private ulong modTypeRef_;
    public bool HasModTypeRef {
      get { return hasModTypeRef; }
    }
    public ulong ModTypeRef {
      get { return modTypeRef_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasModTypeRef) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageModResetFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasModTypeRef) {
        output.WriteUInt64(2, field_names[1], ModTypeRef);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasModTypeRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ModTypeRef);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageModReset ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageModReset ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModReset ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageModReset ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModReset ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageModReset ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModReset ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageModReset ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageModReset ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageModReset ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageModReset MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageModReset prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageModReset, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageModReset cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageModReset result;
      
      private NetMessageModReset PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageModReset original = result;
          result = new NetMessageModReset();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageModReset MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageModReset.Descriptor; }
      }
      
      public override NetMessageModReset DefaultInstanceForType {
        get { return global::Gazillion.NetMessageModReset.DefaultInstance; }
      }
      
      public override NetMessageModReset BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageModReset) {
          return MergeFrom((NetMessageModReset) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageModReset other) {
        if (other == global::Gazillion.NetMessageModReset.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasModTypeRef) {
          ModTypeRef = other.ModTypeRef;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageModResetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageModResetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasModTypeRef = input.ReadUInt64(ref result.modTypeRef_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasModTypeRef {
        get { return result.hasModTypeRef; }
      }
      public ulong ModTypeRef {
        get { return result.ModTypeRef; }
        set { SetModTypeRef(value); }
      }
      public Builder SetModTypeRef(ulong value) {
        PrepareBuilder();
        result.hasModTypeRef = true;
        result.modTypeRef_ = value;
        return this;
      }
      public Builder ClearModTypeRef() {
        PrepareBuilder();
        result.hasModTypeRef = false;
        result.modTypeRef_ = 0UL;
        return this;
      }
    }
    static NetMessageModReset() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePowerPointAllocationCommit : pb::GeneratedMessage<NetMessagePowerPointAllocationCommit, NetMessagePowerPointAllocationCommit.Builder> {
    private NetMessagePowerPointAllocationCommit() { }
    private static readonly NetMessagePowerPointAllocationCommit defaultInstance = new NetMessagePowerPointAllocationCommit().MakeReadOnly();
    private static readonly string[] _netMessagePowerPointAllocationCommitFieldNames = new string[] { "allocations", "avatarRef" };
    private static readonly uint[] _netMessagePowerPointAllocationCommitFieldTags = new uint[] { 18, 8 };
    public static NetMessagePowerPointAllocationCommit DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePowerPointAllocationCommit DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePowerPointAllocationCommit ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePowerPointAllocationCommit__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePowerPointAllocationCommit, NetMessagePowerPointAllocationCommit.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePowerPointAllocationCommit__FieldAccessorTable; }
    }
    
    public const int AvatarRefFieldNumber = 1;
    private bool hasAvatarRef;
    private ulong avatarRef_;
    public bool HasAvatarRef {
      get { return hasAvatarRef; }
    }
    public ulong AvatarRef {
      get { return avatarRef_; }
    }
    
    public const int AllocationsFieldNumber = 2;
    private pbc::PopsicleList<global::Gazillion.NetStructPowerPointAllocation> allocations_ = new pbc::PopsicleList<global::Gazillion.NetStructPowerPointAllocation>();
    public scg::IList<global::Gazillion.NetStructPowerPointAllocation> AllocationsList {
      get { return allocations_; }
    }
    public int AllocationsCount {
      get { return allocations_.Count; }
    }
    public global::Gazillion.NetStructPowerPointAllocation GetAllocations(int index) {
      return allocations_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarRef) return false;
        foreach (global::Gazillion.NetStructPowerPointAllocation element in AllocationsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePowerPointAllocationCommitFieldNames;
      if (hasAvatarRef) {
        output.WriteUInt64(1, field_names[1], AvatarRef);
      }
      if (allocations_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], allocations_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarRef);
      }
      foreach (global::Gazillion.NetStructPowerPointAllocation element in AllocationsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePowerPointAllocationCommit ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerPointAllocationCommit ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerPointAllocationCommit ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerPointAllocationCommit ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerPointAllocationCommit ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerPointAllocationCommit ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerPointAllocationCommit ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePowerPointAllocationCommit ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePowerPointAllocationCommit ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerPointAllocationCommit ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePowerPointAllocationCommit MakeReadOnly() {
      allocations_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePowerPointAllocationCommit prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePowerPointAllocationCommit, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePowerPointAllocationCommit cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePowerPointAllocationCommit result;
      
      private NetMessagePowerPointAllocationCommit PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePowerPointAllocationCommit original = result;
          result = new NetMessagePowerPointAllocationCommit();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePowerPointAllocationCommit MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePowerPointAllocationCommit.Descriptor; }
      }
      
      public override NetMessagePowerPointAllocationCommit DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePowerPointAllocationCommit.DefaultInstance; }
      }
      
      public override NetMessagePowerPointAllocationCommit BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePowerPointAllocationCommit) {
          return MergeFrom((NetMessagePowerPointAllocationCommit) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePowerPointAllocationCommit other) {
        if (other == global::Gazillion.NetMessagePowerPointAllocationCommit.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarRef) {
          AvatarRef = other.AvatarRef;
        }
        if (other.allocations_.Count != 0) {
          result.allocations_.Add(other.allocations_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePowerPointAllocationCommitFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePowerPointAllocationCommitFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarRef = input.ReadUInt64(ref result.avatarRef_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.allocations_, global::Gazillion.NetStructPowerPointAllocation.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarRef {
        get { return result.hasAvatarRef; }
      }
      public ulong AvatarRef {
        get { return result.AvatarRef; }
        set { SetAvatarRef(value); }
      }
      public Builder SetAvatarRef(ulong value) {
        PrepareBuilder();
        result.hasAvatarRef = true;
        result.avatarRef_ = value;
        return this;
      }
      public Builder ClearAvatarRef() {
        PrepareBuilder();
        result.hasAvatarRef = false;
        result.avatarRef_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.NetStructPowerPointAllocation> AllocationsList {
        get { return PrepareBuilder().allocations_; }
      }
      public int AllocationsCount {
        get { return result.AllocationsCount; }
      }
      public global::Gazillion.NetStructPowerPointAllocation GetAllocations(int index) {
        return result.GetAllocations(index);
      }
      public Builder SetAllocations(int index, global::Gazillion.NetStructPowerPointAllocation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allocations_[index] = value;
        return this;
      }
      public Builder SetAllocations(int index, global::Gazillion.NetStructPowerPointAllocation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.allocations_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAllocations(global::Gazillion.NetStructPowerPointAllocation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allocations_.Add(value);
        return this;
      }
      public Builder AddAllocations(global::Gazillion.NetStructPowerPointAllocation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.allocations_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAllocations(scg::IEnumerable<global::Gazillion.NetStructPowerPointAllocation> values) {
        PrepareBuilder();
        result.allocations_.Add(values);
        return this;
      }
      public Builder ClearAllocations() {
        PrepareBuilder();
        result.allocations_.Clear();
        return this;
      }
    }
    static NetMessagePowerPointAllocationCommit() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestDeathRelease : pb::GeneratedMessage<NetMessageRequestDeathRelease, NetMessageRequestDeathRelease.Builder> {
    private NetMessageRequestDeathRelease() { }
    private static readonly NetMessageRequestDeathRelease defaultInstance = new NetMessageRequestDeathRelease().MakeReadOnly();
    private static readonly string[] _netMessageRequestDeathReleaseFieldNames = new string[] { "hitOk", "resurrectedFromOtherEntity" };
    private static readonly uint[] _netMessageRequestDeathReleaseFieldTags = new uint[] { 8, 16 };
    public static NetMessageRequestDeathRelease DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestDeathRelease DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestDeathRelease ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestDeathRelease__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestDeathRelease, NetMessageRequestDeathRelease.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestDeathRelease__FieldAccessorTable; }
    }
    
    public const int HitOkFieldNumber = 1;
    private bool hasHitOk;
    private bool hitOk_;
    public bool HasHitOk {
      get { return hasHitOk; }
    }
    public bool HitOk {
      get { return hitOk_; }
    }
    
    public const int ResurrectedFromOtherEntityFieldNumber = 2;
    private bool hasResurrectedFromOtherEntity;
    private bool resurrectedFromOtherEntity_;
    public bool HasResurrectedFromOtherEntity {
      get { return hasResurrectedFromOtherEntity; }
    }
    public bool ResurrectedFromOtherEntity {
      get { return resurrectedFromOtherEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHitOk) return false;
        if (!hasResurrectedFromOtherEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestDeathReleaseFieldNames;
      if (hasHitOk) {
        output.WriteBool(1, field_names[0], HitOk);
      }
      if (hasResurrectedFromOtherEntity) {
        output.WriteBool(2, field_names[1], ResurrectedFromOtherEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHitOk) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, HitOk);
      }
      if (hasResurrectedFromOtherEntity) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, ResurrectedFromOtherEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestDeathRelease ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestDeathRelease ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestDeathRelease ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestDeathRelease ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestDeathRelease ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestDeathRelease ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestDeathRelease ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestDeathRelease ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestDeathRelease ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestDeathRelease ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestDeathRelease MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestDeathRelease prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestDeathRelease, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestDeathRelease cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestDeathRelease result;
      
      private NetMessageRequestDeathRelease PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestDeathRelease original = result;
          result = new NetMessageRequestDeathRelease();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestDeathRelease MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestDeathRelease.Descriptor; }
      }
      
      public override NetMessageRequestDeathRelease DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestDeathRelease.DefaultInstance; }
      }
      
      public override NetMessageRequestDeathRelease BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestDeathRelease) {
          return MergeFrom((NetMessageRequestDeathRelease) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestDeathRelease other) {
        if (other == global::Gazillion.NetMessageRequestDeathRelease.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHitOk) {
          HitOk = other.HitOk;
        }
        if (other.HasResurrectedFromOtherEntity) {
          ResurrectedFromOtherEntity = other.ResurrectedFromOtherEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestDeathReleaseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestDeathReleaseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHitOk = input.ReadBool(ref result.hitOk_);
              break;
            }
            case 16: {
              result.hasResurrectedFromOtherEntity = input.ReadBool(ref result.resurrectedFromOtherEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHitOk {
        get { return result.hasHitOk; }
      }
      public bool HitOk {
        get { return result.HitOk; }
        set { SetHitOk(value); }
      }
      public Builder SetHitOk(bool value) {
        PrepareBuilder();
        result.hasHitOk = true;
        result.hitOk_ = value;
        return this;
      }
      public Builder ClearHitOk() {
        PrepareBuilder();
        result.hasHitOk = false;
        result.hitOk_ = false;
        return this;
      }
      
      public bool HasResurrectedFromOtherEntity {
        get { return result.hasResurrectedFromOtherEntity; }
      }
      public bool ResurrectedFromOtherEntity {
        get { return result.ResurrectedFromOtherEntity; }
        set { SetResurrectedFromOtherEntity(value); }
      }
      public Builder SetResurrectedFromOtherEntity(bool value) {
        PrepareBuilder();
        result.hasResurrectedFromOtherEntity = true;
        result.resurrectedFromOtherEntity_ = value;
        return this;
      }
      public Builder ClearResurrectedFromOtherEntity() {
        PrepareBuilder();
        result.hasResurrectedFromOtherEntity = false;
        result.resurrectedFromOtherEntity_ = false;
        return this;
      }
    }
    static NetMessageRequestDeathRelease() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestResurrectDecline : pb::GeneratedMessage<NetMessageRequestResurrectDecline, NetMessageRequestResurrectDecline.Builder> {
    private NetMessageRequestResurrectDecline() { }
    private static readonly NetMessageRequestResurrectDecline defaultInstance = new NetMessageRequestResurrectDecline().MakeReadOnly();
    private static readonly string[] _netMessageRequestResurrectDeclineFieldNames = new string[] {  };
    private static readonly uint[] _netMessageRequestResurrectDeclineFieldTags = new uint[] {  };
    public static NetMessageRequestResurrectDecline DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestResurrectDecline DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestResurrectDecline ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestResurrectDecline__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestResurrectDecline, NetMessageRequestResurrectDecline.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestResurrectDecline__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestResurrectDeclineFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestResurrectDecline ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestResurrectDecline ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestResurrectDecline ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestResurrectDecline ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestResurrectDecline ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestResurrectDecline ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestResurrectDecline ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestResurrectDecline ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestResurrectDecline ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestResurrectDecline ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestResurrectDecline MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestResurrectDecline prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestResurrectDecline, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestResurrectDecline cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestResurrectDecline result;
      
      private NetMessageRequestResurrectDecline PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestResurrectDecline original = result;
          result = new NetMessageRequestResurrectDecline();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestResurrectDecline MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestResurrectDecline.Descriptor; }
      }
      
      public override NetMessageRequestResurrectDecline DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestResurrectDecline.DefaultInstance; }
      }
      
      public override NetMessageRequestResurrectDecline BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestResurrectDecline) {
          return MergeFrom((NetMessageRequestResurrectDecline) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestResurrectDecline other) {
        if (other == global::Gazillion.NetMessageRequestResurrectDecline.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestResurrectDeclineFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestResurrectDeclineFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageRequestResurrectDecline() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestResurrectAvatar : pb::GeneratedMessage<NetMessageRequestResurrectAvatar, NetMessageRequestResurrectAvatar.Builder> {
    private NetMessageRequestResurrectAvatar() { }
    private static readonly NetMessageRequestResurrectAvatar defaultInstance = new NetMessageRequestResurrectAvatar().MakeReadOnly();
    private static readonly string[] _netMessageRequestResurrectAvatarFieldNames = new string[] { "targetId" };
    private static readonly uint[] _netMessageRequestResurrectAvatarFieldTags = new uint[] { 8 };
    public static NetMessageRequestResurrectAvatar DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestResurrectAvatar DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestResurrectAvatar ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestResurrectAvatar__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestResurrectAvatar, NetMessageRequestResurrectAvatar.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestResurrectAvatar__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestResurrectAvatarFieldNames;
      if (hasTargetId) {
        output.WriteUInt64(1, field_names[0], TargetId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestResurrectAvatar ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestResurrectAvatar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestResurrectAvatar ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestResurrectAvatar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestResurrectAvatar ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestResurrectAvatar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestResurrectAvatar ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestResurrectAvatar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestResurrectAvatar ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestResurrectAvatar ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestResurrectAvatar MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestResurrectAvatar prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestResurrectAvatar, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestResurrectAvatar cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestResurrectAvatar result;
      
      private NetMessageRequestResurrectAvatar PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestResurrectAvatar original = result;
          result = new NetMessageRequestResurrectAvatar();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestResurrectAvatar MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestResurrectAvatar.Descriptor; }
      }
      
      public override NetMessageRequestResurrectAvatar DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestResurrectAvatar.DefaultInstance; }
      }
      
      public override NetMessageRequestResurrectAvatar BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestResurrectAvatar) {
          return MergeFrom((NetMessageRequestResurrectAvatar) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestResurrectAvatar other) {
        if (other == global::Gazillion.NetMessageRequestResurrectAvatar.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestResurrectAvatarFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestResurrectAvatarFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
    }
    static NetMessageRequestResurrectAvatar() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageReturnToHub : pb::GeneratedMessage<NetMessageReturnToHub, NetMessageReturnToHub.Builder> {
    private NetMessageReturnToHub() { }
    private static readonly NetMessageReturnToHub defaultInstance = new NetMessageReturnToHub().MakeReadOnly();
    private static readonly string[] _netMessageReturnToHubFieldNames = new string[] {  };
    private static readonly uint[] _netMessageReturnToHubFieldTags = new uint[] {  };
    public static NetMessageReturnToHub DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageReturnToHub DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageReturnToHub ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageReturnToHub__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageReturnToHub, NetMessageReturnToHub.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageReturnToHub__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageReturnToHubFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageReturnToHub ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReturnToHub ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReturnToHub ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReturnToHub ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReturnToHub ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReturnToHub ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReturnToHub ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageReturnToHub ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageReturnToHub ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReturnToHub ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageReturnToHub MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageReturnToHub prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageReturnToHub, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageReturnToHub cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageReturnToHub result;
      
      private NetMessageReturnToHub PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageReturnToHub original = result;
          result = new NetMessageReturnToHub();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageReturnToHub MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageReturnToHub.Descriptor; }
      }
      
      public override NetMessageReturnToHub DefaultInstanceForType {
        get { return global::Gazillion.NetMessageReturnToHub.DefaultInstance; }
      }
      
      public override NetMessageReturnToHub BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageReturnToHub) {
          return MergeFrom((NetMessageReturnToHub) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageReturnToHub other) {
        if (other == global::Gazillion.NetMessageReturnToHub.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageReturnToHubFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageReturnToHubFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageReturnToHub() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestStoryWarp : pb::GeneratedMessage<NetMessageRequestStoryWarp, NetMessageRequestStoryWarp.Builder> {
    private NetMessageRequestStoryWarp() { }
    private static readonly NetMessageRequestStoryWarp defaultInstance = new NetMessageRequestStoryWarp().MakeReadOnly();
    private static readonly string[] _netMessageRequestStoryWarpFieldNames = new string[] { "storyWarpNPC", "storyWarpPrototypeId" };
    private static readonly uint[] _netMessageRequestStoryWarpFieldTags = new uint[] { 16, 8 };
    public static NetMessageRequestStoryWarp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestStoryWarp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestStoryWarp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestStoryWarp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestStoryWarp, NetMessageRequestStoryWarp.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestStoryWarp__FieldAccessorTable; }
    }
    
    public const int StoryWarpPrototypeIdFieldNumber = 1;
    private bool hasStoryWarpPrototypeId;
    private ulong storyWarpPrototypeId_;
    public bool HasStoryWarpPrototypeId {
      get { return hasStoryWarpPrototypeId; }
    }
    public ulong StoryWarpPrototypeId {
      get { return storyWarpPrototypeId_; }
    }
    
    public const int StoryWarpNPCFieldNumber = 2;
    private bool hasStoryWarpNPC;
    private ulong storyWarpNPC_;
    public bool HasStoryWarpNPC {
      get { return hasStoryWarpNPC; }
    }
    public ulong StoryWarpNPC {
      get { return storyWarpNPC_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStoryWarpPrototypeId) return false;
        if (!hasStoryWarpNPC) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestStoryWarpFieldNames;
      if (hasStoryWarpPrototypeId) {
        output.WriteUInt64(1, field_names[1], StoryWarpPrototypeId);
      }
      if (hasStoryWarpNPC) {
        output.WriteUInt64(2, field_names[0], StoryWarpNPC);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStoryWarpPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, StoryWarpPrototypeId);
      }
      if (hasStoryWarpNPC) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, StoryWarpNPC);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestStoryWarp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestStoryWarp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestStoryWarp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestStoryWarp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestStoryWarp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestStoryWarp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestStoryWarp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestStoryWarp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestStoryWarp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestStoryWarp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestStoryWarp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestStoryWarp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestStoryWarp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestStoryWarp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestStoryWarp result;
      
      private NetMessageRequestStoryWarp PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestStoryWarp original = result;
          result = new NetMessageRequestStoryWarp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestStoryWarp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestStoryWarp.Descriptor; }
      }
      
      public override NetMessageRequestStoryWarp DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestStoryWarp.DefaultInstance; }
      }
      
      public override NetMessageRequestStoryWarp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestStoryWarp) {
          return MergeFrom((NetMessageRequestStoryWarp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestStoryWarp other) {
        if (other == global::Gazillion.NetMessageRequestStoryWarp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStoryWarpPrototypeId) {
          StoryWarpPrototypeId = other.StoryWarpPrototypeId;
        }
        if (other.HasStoryWarpNPC) {
          StoryWarpNPC = other.StoryWarpNPC;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestStoryWarpFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestStoryWarpFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStoryWarpPrototypeId = input.ReadUInt64(ref result.storyWarpPrototypeId_);
              break;
            }
            case 16: {
              result.hasStoryWarpNPC = input.ReadUInt64(ref result.storyWarpNPC_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStoryWarpPrototypeId {
        get { return result.hasStoryWarpPrototypeId; }
      }
      public ulong StoryWarpPrototypeId {
        get { return result.StoryWarpPrototypeId; }
        set { SetStoryWarpPrototypeId(value); }
      }
      public Builder SetStoryWarpPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasStoryWarpPrototypeId = true;
        result.storyWarpPrototypeId_ = value;
        return this;
      }
      public Builder ClearStoryWarpPrototypeId() {
        PrepareBuilder();
        result.hasStoryWarpPrototypeId = false;
        result.storyWarpPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasStoryWarpNPC {
        get { return result.hasStoryWarpNPC; }
      }
      public ulong StoryWarpNPC {
        get { return result.StoryWarpNPC; }
        set { SetStoryWarpNPC(value); }
      }
      public Builder SetStoryWarpNPC(ulong value) {
        PrepareBuilder();
        result.hasStoryWarpNPC = true;
        result.storyWarpNPC_ = value;
        return this;
      }
      public Builder ClearStoryWarpNPC() {
        PrepareBuilder();
        result.hasStoryWarpNPC = false;
        result.storyWarpNPC_ = 0UL;
        return this;
      }
    }
    static NetMessageRequestStoryWarp() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageInvitePlayer : pb::GeneratedMessage<NetMessageInvitePlayer, NetMessageInvitePlayer.Builder> {
    private NetMessageInvitePlayer() { }
    private static readonly NetMessageInvitePlayer defaultInstance = new NetMessageInvitePlayer().MakeReadOnly();
    private static readonly string[] _netMessageInvitePlayerFieldNames = new string[] { "inviteeEntityId", "inviteeName" };
    private static readonly uint[] _netMessageInvitePlayerFieldTags = new uint[] { 8, 18 };
    public static NetMessageInvitePlayer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageInvitePlayer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageInvitePlayer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageInvitePlayer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageInvitePlayer, NetMessageInvitePlayer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageInvitePlayer__FieldAccessorTable; }
    }
    
    public const int InviteeEntityIdFieldNumber = 1;
    private bool hasInviteeEntityId;
    private ulong inviteeEntityId_;
    public bool HasInviteeEntityId {
      get { return hasInviteeEntityId; }
    }
    public ulong InviteeEntityId {
      get { return inviteeEntityId_; }
    }
    
    public const int InviteeNameFieldNumber = 2;
    private bool hasInviteeName;
    private string inviteeName_ = "";
    public bool HasInviteeName {
      get { return hasInviteeName; }
    }
    public string InviteeName {
      get { return inviteeName_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageInvitePlayerFieldNames;
      if (hasInviteeEntityId) {
        output.WriteUInt64(1, field_names[0], InviteeEntityId);
      }
      if (hasInviteeName) {
        output.WriteString(2, field_names[1], InviteeName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasInviteeEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, InviteeEntityId);
      }
      if (hasInviteeName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, InviteeName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageInvitePlayer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInvitePlayer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInvitePlayer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInvitePlayer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInvitePlayer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInvitePlayer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInvitePlayer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageInvitePlayer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageInvitePlayer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInvitePlayer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageInvitePlayer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageInvitePlayer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageInvitePlayer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageInvitePlayer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageInvitePlayer result;
      
      private NetMessageInvitePlayer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageInvitePlayer original = result;
          result = new NetMessageInvitePlayer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageInvitePlayer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageInvitePlayer.Descriptor; }
      }
      
      public override NetMessageInvitePlayer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageInvitePlayer.DefaultInstance; }
      }
      
      public override NetMessageInvitePlayer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageInvitePlayer) {
          return MergeFrom((NetMessageInvitePlayer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageInvitePlayer other) {
        if (other == global::Gazillion.NetMessageInvitePlayer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasInviteeEntityId) {
          InviteeEntityId = other.InviteeEntityId;
        }
        if (other.HasInviteeName) {
          InviteeName = other.InviteeName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageInvitePlayerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageInvitePlayerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasInviteeEntityId = input.ReadUInt64(ref result.inviteeEntityId_);
              break;
            }
            case 18: {
              result.hasInviteeName = input.ReadString(ref result.inviteeName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasInviteeEntityId {
        get { return result.hasInviteeEntityId; }
      }
      public ulong InviteeEntityId {
        get { return result.InviteeEntityId; }
        set { SetInviteeEntityId(value); }
      }
      public Builder SetInviteeEntityId(ulong value) {
        PrepareBuilder();
        result.hasInviteeEntityId = true;
        result.inviteeEntityId_ = value;
        return this;
      }
      public Builder ClearInviteeEntityId() {
        PrepareBuilder();
        result.hasInviteeEntityId = false;
        result.inviteeEntityId_ = 0UL;
        return this;
      }
      
      public bool HasInviteeName {
        get { return result.hasInviteeName; }
      }
      public string InviteeName {
        get { return result.InviteeName; }
        set { SetInviteeName(value); }
      }
      public Builder SetInviteeName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInviteeName = true;
        result.inviteeName_ = value;
        return this;
      }
      public Builder ClearInviteeName() {
        PrepareBuilder();
        result.hasInviteeName = false;
        result.inviteeName_ = "";
        return this;
      }
    }
    static NetMessageInvitePlayer() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestPartyJoinPortal : pb::GeneratedMessage<NetMessageRequestPartyJoinPortal, NetMessageRequestPartyJoinPortal.Builder> {
    private NetMessageRequestPartyJoinPortal() { }
    private static readonly NetMessageRequestPartyJoinPortal defaultInstance = new NetMessageRequestPartyJoinPortal().MakeReadOnly();
    private static readonly string[] _netMessageRequestPartyJoinPortalFieldNames = new string[] { "bypassValidation", "usePortal", "warpToDest" };
    private static readonly uint[] _netMessageRequestPartyJoinPortalFieldTags = new uint[] { 24, 8, 18 };
    public static NetMessageRequestPartyJoinPortal DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestPartyJoinPortal DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestPartyJoinPortal ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestPartyJoinPortal__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestPartyJoinPortal, NetMessageRequestPartyJoinPortal.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestPartyJoinPortal__FieldAccessorTable; }
    }
    
    public const int UsePortalFieldNumber = 1;
    private bool hasUsePortal;
    private bool usePortal_;
    public bool HasUsePortal {
      get { return hasUsePortal; }
    }
    public bool UsePortal {
      get { return usePortal_; }
    }
    
    public const int WarpToDestFieldNumber = 2;
    private bool hasWarpToDest;
    private global::Gazillion.NetStructWarpDest warpToDest_;
    public bool HasWarpToDest {
      get { return hasWarpToDest; }
    }
    public global::Gazillion.NetStructWarpDest WarpToDest {
      get { return warpToDest_ ?? global::Gazillion.NetStructWarpDest.DefaultInstance; }
    }
    
    public const int BypassValidationFieldNumber = 3;
    private bool hasBypassValidation;
    private bool bypassValidation_;
    public bool HasBypassValidation {
      get { return hasBypassValidation; }
    }
    public bool BypassValidation {
      get { return bypassValidation_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUsePortal) return false;
        if (HasWarpToDest) {
          if (!WarpToDest.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestPartyJoinPortalFieldNames;
      if (hasUsePortal) {
        output.WriteBool(1, field_names[1], UsePortal);
      }
      if (hasWarpToDest) {
        output.WriteMessage(2, field_names[2], WarpToDest);
      }
      if (hasBypassValidation) {
        output.WriteBool(3, field_names[0], BypassValidation);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUsePortal) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, UsePortal);
      }
      if (hasWarpToDest) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, WarpToDest);
      }
      if (hasBypassValidation) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, BypassValidation);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestPartyJoinPortal ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestPartyJoinPortal ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestPartyJoinPortal ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestPartyJoinPortal ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestPartyJoinPortal ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestPartyJoinPortal ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestPartyJoinPortal ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestPartyJoinPortal ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestPartyJoinPortal ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestPartyJoinPortal ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestPartyJoinPortal MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestPartyJoinPortal prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestPartyJoinPortal, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestPartyJoinPortal cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestPartyJoinPortal result;
      
      private NetMessageRequestPartyJoinPortal PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestPartyJoinPortal original = result;
          result = new NetMessageRequestPartyJoinPortal();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestPartyJoinPortal MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestPartyJoinPortal.Descriptor; }
      }
      
      public override NetMessageRequestPartyJoinPortal DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestPartyJoinPortal.DefaultInstance; }
      }
      
      public override NetMessageRequestPartyJoinPortal BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestPartyJoinPortal) {
          return MergeFrom((NetMessageRequestPartyJoinPortal) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestPartyJoinPortal other) {
        if (other == global::Gazillion.NetMessageRequestPartyJoinPortal.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUsePortal) {
          UsePortal = other.UsePortal;
        }
        if (other.HasWarpToDest) {
          MergeWarpToDest(other.WarpToDest);
        }
        if (other.HasBypassValidation) {
          BypassValidation = other.BypassValidation;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestPartyJoinPortalFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestPartyJoinPortalFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUsePortal = input.ReadBool(ref result.usePortal_);
              break;
            }
            case 18: {
              global::Gazillion.NetStructWarpDest.Builder subBuilder = global::Gazillion.NetStructWarpDest.CreateBuilder();
              if (result.hasWarpToDest) {
                subBuilder.MergeFrom(WarpToDest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              WarpToDest = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasBypassValidation = input.ReadBool(ref result.bypassValidation_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUsePortal {
        get { return result.hasUsePortal; }
      }
      public bool UsePortal {
        get { return result.UsePortal; }
        set { SetUsePortal(value); }
      }
      public Builder SetUsePortal(bool value) {
        PrepareBuilder();
        result.hasUsePortal = true;
        result.usePortal_ = value;
        return this;
      }
      public Builder ClearUsePortal() {
        PrepareBuilder();
        result.hasUsePortal = false;
        result.usePortal_ = false;
        return this;
      }
      
      public bool HasWarpToDest {
       get { return result.hasWarpToDest; }
      }
      public global::Gazillion.NetStructWarpDest WarpToDest {
        get { return result.WarpToDest; }
        set { SetWarpToDest(value); }
      }
      public Builder SetWarpToDest(global::Gazillion.NetStructWarpDest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWarpToDest = true;
        result.warpToDest_ = value;
        return this;
      }
      public Builder SetWarpToDest(global::Gazillion.NetStructWarpDest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasWarpToDest = true;
        result.warpToDest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeWarpToDest(global::Gazillion.NetStructWarpDest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasWarpToDest &&
            result.warpToDest_ != global::Gazillion.NetStructWarpDest.DefaultInstance) {
            result.warpToDest_ = global::Gazillion.NetStructWarpDest.CreateBuilder(result.warpToDest_).MergeFrom(value).BuildPartial();
        } else {
          result.warpToDest_ = value;
        }
        result.hasWarpToDest = true;
        return this;
      }
      public Builder ClearWarpToDest() {
        PrepareBuilder();
        result.hasWarpToDest = false;
        result.warpToDest_ = null;
        return this;
      }
      
      public bool HasBypassValidation {
        get { return result.hasBypassValidation; }
      }
      public bool BypassValidation {
        get { return result.BypassValidation; }
        set { SetBypassValidation(value); }
      }
      public Builder SetBypassValidation(bool value) {
        PrepareBuilder();
        result.hasBypassValidation = true;
        result.bypassValidation_ = value;
        return this;
      }
      public Builder ClearBypassValidation() {
        PrepareBuilder();
        result.hasBypassValidation = false;
        result.bypassValidation_ = false;
        return this;
      }
    }
    static NetMessageRequestPartyJoinPortal() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDeclineGroupInvite : pb::GeneratedMessage<NetMessageDeclineGroupInvite, NetMessageDeclineGroupInvite.Builder> {
    private NetMessageDeclineGroupInvite() { }
    private static readonly NetMessageDeclineGroupInvite defaultInstance = new NetMessageDeclineGroupInvite().MakeReadOnly();
    private static readonly string[] _netMessageDeclineGroupInviteFieldNames = new string[] {  };
    private static readonly uint[] _netMessageDeclineGroupInviteFieldTags = new uint[] {  };
    public static NetMessageDeclineGroupInvite DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDeclineGroupInvite DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDeclineGroupInvite ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDeclineGroupInvite__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDeclineGroupInvite, NetMessageDeclineGroupInvite.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDeclineGroupInvite__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDeclineGroupInviteFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDeclineGroupInvite ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDeclineGroupInvite ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDeclineGroupInvite ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDeclineGroupInvite ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDeclineGroupInvite ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDeclineGroupInvite ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDeclineGroupInvite ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDeclineGroupInvite ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDeclineGroupInvite ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDeclineGroupInvite ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDeclineGroupInvite MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDeclineGroupInvite prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDeclineGroupInvite, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDeclineGroupInvite cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDeclineGroupInvite result;
      
      private NetMessageDeclineGroupInvite PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDeclineGroupInvite original = result;
          result = new NetMessageDeclineGroupInvite();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDeclineGroupInvite MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDeclineGroupInvite.Descriptor; }
      }
      
      public override NetMessageDeclineGroupInvite DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDeclineGroupInvite.DefaultInstance; }
      }
      
      public override NetMessageDeclineGroupInvite BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDeclineGroupInvite) {
          return MergeFrom((NetMessageDeclineGroupInvite) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDeclineGroupInvite other) {
        if (other == global::Gazillion.NetMessageDeclineGroupInvite.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDeclineGroupInviteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDeclineGroupInviteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageDeclineGroupInvite() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLeaveGroup : pb::GeneratedMessage<NetMessageLeaveGroup, NetMessageLeaveGroup.Builder> {
    private NetMessageLeaveGroup() { }
    private static readonly NetMessageLeaveGroup defaultInstance = new NetMessageLeaveGroup().MakeReadOnly();
    private static readonly string[] _netMessageLeaveGroupFieldNames = new string[] {  };
    private static readonly uint[] _netMessageLeaveGroupFieldTags = new uint[] {  };
    public static NetMessageLeaveGroup DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLeaveGroup DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLeaveGroup ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageLeaveGroup__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLeaveGroup, NetMessageLeaveGroup.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageLeaveGroup__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLeaveGroupFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLeaveGroup ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaveGroup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaveGroup ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaveGroup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaveGroup ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaveGroup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaveGroup ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLeaveGroup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLeaveGroup ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaveGroup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLeaveGroup MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLeaveGroup prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLeaveGroup, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLeaveGroup cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLeaveGroup result;
      
      private NetMessageLeaveGroup PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLeaveGroup original = result;
          result = new NetMessageLeaveGroup();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLeaveGroup MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLeaveGroup.Descriptor; }
      }
      
      public override NetMessageLeaveGroup DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLeaveGroup.DefaultInstance; }
      }
      
      public override NetMessageLeaveGroup BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLeaveGroup) {
          return MergeFrom((NetMessageLeaveGroup) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLeaveGroup other) {
        if (other == global::Gazillion.NetMessageLeaveGroup.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLeaveGroupFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLeaveGroupFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageLeaveGroup() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageChangeGroupLeader : pb::GeneratedMessage<NetMessageChangeGroupLeader, NetMessageChangeGroupLeader.Builder> {
    private NetMessageChangeGroupLeader() { }
    private static readonly NetMessageChangeGroupLeader defaultInstance = new NetMessageChangeGroupLeader().MakeReadOnly();
    private static readonly string[] _netMessageChangeGroupLeaderFieldNames = new string[] { "targetMemberId" };
    private static readonly uint[] _netMessageChangeGroupLeaderFieldTags = new uint[] { 8 };
    public static NetMessageChangeGroupLeader DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageChangeGroupLeader DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageChangeGroupLeader ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageChangeGroupLeader__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageChangeGroupLeader, NetMessageChangeGroupLeader.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageChangeGroupLeader__FieldAccessorTable; }
    }
    
    public const int TargetMemberIdFieldNumber = 1;
    private bool hasTargetMemberId;
    private ulong targetMemberId_;
    public bool HasTargetMemberId {
      get { return hasTargetMemberId; }
    }
    public ulong TargetMemberId {
      get { return targetMemberId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetMemberId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageChangeGroupLeaderFieldNames;
      if (hasTargetMemberId) {
        output.WriteUInt64(1, field_names[0], TargetMemberId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetMemberId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetMemberId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageChangeGroupLeader ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChangeGroupLeader ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeGroupLeader ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChangeGroupLeader ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeGroupLeader ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChangeGroupLeader ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeGroupLeader ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageChangeGroupLeader ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageChangeGroupLeader ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChangeGroupLeader ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageChangeGroupLeader MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageChangeGroupLeader prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageChangeGroupLeader, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageChangeGroupLeader cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageChangeGroupLeader result;
      
      private NetMessageChangeGroupLeader PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageChangeGroupLeader original = result;
          result = new NetMessageChangeGroupLeader();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageChangeGroupLeader MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageChangeGroupLeader.Descriptor; }
      }
      
      public override NetMessageChangeGroupLeader DefaultInstanceForType {
        get { return global::Gazillion.NetMessageChangeGroupLeader.DefaultInstance; }
      }
      
      public override NetMessageChangeGroupLeader BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageChangeGroupLeader) {
          return MergeFrom((NetMessageChangeGroupLeader) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageChangeGroupLeader other) {
        if (other == global::Gazillion.NetMessageChangeGroupLeader.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetMemberId) {
          TargetMemberId = other.TargetMemberId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageChangeGroupLeaderFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageChangeGroupLeaderFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetMemberId = input.ReadUInt64(ref result.targetMemberId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetMemberId {
        get { return result.hasTargetMemberId; }
      }
      public ulong TargetMemberId {
        get { return result.TargetMemberId; }
        set { SetTargetMemberId(value); }
      }
      public Builder SetTargetMemberId(ulong value) {
        PrepareBuilder();
        result.hasTargetMemberId = true;
        result.targetMemberId_ = value;
        return this;
      }
      public Builder ClearTargetMemberId() {
        PrepareBuilder();
        result.hasTargetMemberId = false;
        result.targetMemberId_ = 0UL;
        return this;
      }
    }
    static NetMessageChangeGroupLeader() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBootPlayer : pb::GeneratedMessage<NetMessageBootPlayer, NetMessageBootPlayer.Builder> {
    private NetMessageBootPlayer() { }
    private static readonly NetMessageBootPlayer defaultInstance = new NetMessageBootPlayer().MakeReadOnly();
    private static readonly string[] _netMessageBootPlayerFieldNames = new string[] { "targetMemberId" };
    private static readonly uint[] _netMessageBootPlayerFieldTags = new uint[] { 8 };
    public static NetMessageBootPlayer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBootPlayer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBootPlayer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBootPlayer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBootPlayer, NetMessageBootPlayer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBootPlayer__FieldAccessorTable; }
    }
    
    public const int TargetMemberIdFieldNumber = 1;
    private bool hasTargetMemberId;
    private ulong targetMemberId_;
    public bool HasTargetMemberId {
      get { return hasTargetMemberId; }
    }
    public ulong TargetMemberId {
      get { return targetMemberId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetMemberId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBootPlayerFieldNames;
      if (hasTargetMemberId) {
        output.WriteUInt64(1, field_names[0], TargetMemberId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetMemberId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetMemberId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBootPlayer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBootPlayer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBootPlayer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBootPlayer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBootPlayer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBootPlayer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBootPlayer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBootPlayer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBootPlayer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBootPlayer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBootPlayer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBootPlayer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBootPlayer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBootPlayer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBootPlayer result;
      
      private NetMessageBootPlayer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBootPlayer original = result;
          result = new NetMessageBootPlayer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBootPlayer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBootPlayer.Descriptor; }
      }
      
      public override NetMessageBootPlayer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBootPlayer.DefaultInstance; }
      }
      
      public override NetMessageBootPlayer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBootPlayer) {
          return MergeFrom((NetMessageBootPlayer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBootPlayer other) {
        if (other == global::Gazillion.NetMessageBootPlayer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetMemberId) {
          TargetMemberId = other.TargetMemberId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBootPlayerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBootPlayerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetMemberId = input.ReadUInt64(ref result.targetMemberId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetMemberId {
        get { return result.hasTargetMemberId; }
      }
      public ulong TargetMemberId {
        get { return result.TargetMemberId; }
        set { SetTargetMemberId(value); }
      }
      public Builder SetTargetMemberId(ulong value) {
        PrepareBuilder();
        result.hasTargetMemberId = true;
        result.targetMemberId_ = value;
        return this;
      }
      public Builder ClearTargetMemberId() {
        PrepareBuilder();
        result.hasTargetMemberId = false;
        result.targetMemberId_ = 0UL;
        return this;
      }
    }
    static NetMessageBootPlayer() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDisbandGroup : pb::GeneratedMessage<NetMessageDisbandGroup, NetMessageDisbandGroup.Builder> {
    private NetMessageDisbandGroup() { }
    private static readonly NetMessageDisbandGroup defaultInstance = new NetMessageDisbandGroup().MakeReadOnly();
    private static readonly string[] _netMessageDisbandGroupFieldNames = new string[] {  };
    private static readonly uint[] _netMessageDisbandGroupFieldTags = new uint[] {  };
    public static NetMessageDisbandGroup DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDisbandGroup DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDisbandGroup ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDisbandGroup__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDisbandGroup, NetMessageDisbandGroup.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDisbandGroup__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDisbandGroupFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDisbandGroup ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDisbandGroup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDisbandGroup ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDisbandGroup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDisbandGroup ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDisbandGroup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDisbandGroup ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDisbandGroup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDisbandGroup ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDisbandGroup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDisbandGroup MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDisbandGroup prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDisbandGroup, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDisbandGroup cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDisbandGroup result;
      
      private NetMessageDisbandGroup PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDisbandGroup original = result;
          result = new NetMessageDisbandGroup();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDisbandGroup MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDisbandGroup.Descriptor; }
      }
      
      public override NetMessageDisbandGroup DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDisbandGroup.DefaultInstance; }
      }
      
      public override NetMessageDisbandGroup BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDisbandGroup) {
          return MergeFrom((NetMessageDisbandGroup) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDisbandGroup other) {
        if (other == global::Gazillion.NetMessageDisbandGroup.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDisbandGroupFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDisbandGroupFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageDisbandGroup() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMatchQueueListRequest : pb::GeneratedMessage<NetMessageMatchQueueListRequest, NetMessageMatchQueueListRequest.Builder> {
    private NetMessageMatchQueueListRequest() { }
    private static readonly NetMessageMatchQueueListRequest defaultInstance = new NetMessageMatchQueueListRequest().MakeReadOnly();
    private static readonly string[] _netMessageMatchQueueListRequestFieldNames = new string[] {  };
    private static readonly uint[] _netMessageMatchQueueListRequestFieldTags = new uint[] {  };
    public static NetMessageMatchQueueListRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMatchQueueListRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMatchQueueListRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageMatchQueueListRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMatchQueueListRequest, NetMessageMatchQueueListRequest.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageMatchQueueListRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMatchQueueListRequestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMatchQueueListRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchQueueListRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchQueueListRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchQueueListRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchQueueListRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchQueueListRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchQueueListRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMatchQueueListRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMatchQueueListRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchQueueListRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMatchQueueListRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMatchQueueListRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMatchQueueListRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMatchQueueListRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMatchQueueListRequest result;
      
      private NetMessageMatchQueueListRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMatchQueueListRequest original = result;
          result = new NetMessageMatchQueueListRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMatchQueueListRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMatchQueueListRequest.Descriptor; }
      }
      
      public override NetMessageMatchQueueListRequest DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMatchQueueListRequest.DefaultInstance; }
      }
      
      public override NetMessageMatchQueueListRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMatchQueueListRequest) {
          return MergeFrom((NetMessageMatchQueueListRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMatchQueueListRequest other) {
        if (other == global::Gazillion.NetMessageMatchQueueListRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMatchQueueListRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMatchQueueListRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageMatchQueueListRequest() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMatchQueueRequest : pb::GeneratedMessage<NetMessageMatchQueueRequest, NetMessageMatchQueueRequest.Builder> {
    private NetMessageMatchQueueRequest() { }
    private static readonly NetMessageMatchQueueRequest defaultInstance = new NetMessageMatchQueueRequest().MakeReadOnly();
    private static readonly string[] _netMessageMatchQueueRequestFieldNames = new string[] { "queueEntireGroup", "queueIndex" };
    private static readonly uint[] _netMessageMatchQueueRequestFieldTags = new uint[] { 16, 8 };
    public static NetMessageMatchQueueRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMatchQueueRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMatchQueueRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageMatchQueueRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMatchQueueRequest, NetMessageMatchQueueRequest.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageMatchQueueRequest__FieldAccessorTable; }
    }
    
    public const int QueueIndexFieldNumber = 1;
    private bool hasQueueIndex;
    private uint queueIndex_;
    public bool HasQueueIndex {
      get { return hasQueueIndex; }
    }
    public uint QueueIndex {
      get { return queueIndex_; }
    }
    
    public const int QueueEntireGroupFieldNumber = 2;
    private bool hasQueueEntireGroup;
    private bool queueEntireGroup_;
    public bool HasQueueEntireGroup {
      get { return hasQueueEntireGroup; }
    }
    public bool QueueEntireGroup {
      get { return queueEntireGroup_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasQueueIndex) return false;
        if (!hasQueueEntireGroup) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMatchQueueRequestFieldNames;
      if (hasQueueIndex) {
        output.WriteUInt32(1, field_names[1], QueueIndex);
      }
      if (hasQueueEntireGroup) {
        output.WriteBool(2, field_names[0], QueueEntireGroup);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasQueueIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, QueueIndex);
      }
      if (hasQueueEntireGroup) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, QueueEntireGroup);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMatchQueueRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchQueueRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchQueueRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchQueueRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchQueueRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchQueueRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchQueueRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMatchQueueRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMatchQueueRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchQueueRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMatchQueueRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMatchQueueRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMatchQueueRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMatchQueueRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMatchQueueRequest result;
      
      private NetMessageMatchQueueRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMatchQueueRequest original = result;
          result = new NetMessageMatchQueueRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMatchQueueRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMatchQueueRequest.Descriptor; }
      }
      
      public override NetMessageMatchQueueRequest DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMatchQueueRequest.DefaultInstance; }
      }
      
      public override NetMessageMatchQueueRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMatchQueueRequest) {
          return MergeFrom((NetMessageMatchQueueRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMatchQueueRequest other) {
        if (other == global::Gazillion.NetMessageMatchQueueRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasQueueIndex) {
          QueueIndex = other.QueueIndex;
        }
        if (other.HasQueueEntireGroup) {
          QueueEntireGroup = other.QueueEntireGroup;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMatchQueueRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMatchQueueRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasQueueIndex = input.ReadUInt32(ref result.queueIndex_);
              break;
            }
            case 16: {
              result.hasQueueEntireGroup = input.ReadBool(ref result.queueEntireGroup_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasQueueIndex {
        get { return result.hasQueueIndex; }
      }
      public uint QueueIndex {
        get { return result.QueueIndex; }
        set { SetQueueIndex(value); }
      }
      public Builder SetQueueIndex(uint value) {
        PrepareBuilder();
        result.hasQueueIndex = true;
        result.queueIndex_ = value;
        return this;
      }
      public Builder ClearQueueIndex() {
        PrepareBuilder();
        result.hasQueueIndex = false;
        result.queueIndex_ = 0;
        return this;
      }
      
      public bool HasQueueEntireGroup {
        get { return result.hasQueueEntireGroup; }
      }
      public bool QueueEntireGroup {
        get { return result.QueueEntireGroup; }
        set { SetQueueEntireGroup(value); }
      }
      public Builder SetQueueEntireGroup(bool value) {
        PrepareBuilder();
        result.hasQueueEntireGroup = true;
        result.queueEntireGroup_ = value;
        return this;
      }
      public Builder ClearQueueEntireGroup() {
        PrepareBuilder();
        result.hasQueueEntireGroup = false;
        result.queueEntireGroup_ = false;
        return this;
      }
    }
    static NetMessageMatchQueueRequest() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMatchStatisticsRequest : pb::GeneratedMessage<NetMessageMatchStatisticsRequest, NetMessageMatchStatisticsRequest.Builder> {
    private NetMessageMatchStatisticsRequest() { }
    private static readonly NetMessageMatchStatisticsRequest defaultInstance = new NetMessageMatchStatisticsRequest().MakeReadOnly();
    private static readonly string[] _netMessageMatchStatisticsRequestFieldNames = new string[] { "playerName", "statRequestNumber" };
    private static readonly uint[] _netMessageMatchStatisticsRequestFieldTags = new uint[] { 18, 8 };
    public static NetMessageMatchStatisticsRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMatchStatisticsRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMatchStatisticsRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageMatchStatisticsRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMatchStatisticsRequest, NetMessageMatchStatisticsRequest.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageMatchStatisticsRequest__FieldAccessorTable; }
    }
    
    public const int StatRequestNumberFieldNumber = 1;
    private bool hasStatRequestNumber;
    private uint statRequestNumber_;
    public bool HasStatRequestNumber {
      get { return hasStatRequestNumber; }
    }
    public uint StatRequestNumber {
      get { return statRequestNumber_; }
    }
    
    public const int PlayerNameFieldNumber = 2;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStatRequestNumber) return false;
        if (!hasPlayerName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMatchStatisticsRequestFieldNames;
      if (hasStatRequestNumber) {
        output.WriteUInt32(1, field_names[1], StatRequestNumber);
      }
      if (hasPlayerName) {
        output.WriteString(2, field_names[0], PlayerName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStatRequestNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, StatRequestNumber);
      }
      if (hasPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, PlayerName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMatchStatisticsRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchStatisticsRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchStatisticsRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchStatisticsRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchStatisticsRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchStatisticsRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchStatisticsRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMatchStatisticsRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMatchStatisticsRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchStatisticsRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMatchStatisticsRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMatchStatisticsRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMatchStatisticsRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMatchStatisticsRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMatchStatisticsRequest result;
      
      private NetMessageMatchStatisticsRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMatchStatisticsRequest original = result;
          result = new NetMessageMatchStatisticsRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMatchStatisticsRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMatchStatisticsRequest.Descriptor; }
      }
      
      public override NetMessageMatchStatisticsRequest DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMatchStatisticsRequest.DefaultInstance; }
      }
      
      public override NetMessageMatchStatisticsRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMatchStatisticsRequest) {
          return MergeFrom((NetMessageMatchStatisticsRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMatchStatisticsRequest other) {
        if (other == global::Gazillion.NetMessageMatchStatisticsRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStatRequestNumber) {
          StatRequestNumber = other.StatRequestNumber;
        }
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMatchStatisticsRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMatchStatisticsRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStatRequestNumber = input.ReadUInt32(ref result.statRequestNumber_);
              break;
            }
            case 18: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStatRequestNumber {
        get { return result.hasStatRequestNumber; }
      }
      public uint StatRequestNumber {
        get { return result.StatRequestNumber; }
        set { SetStatRequestNumber(value); }
      }
      public Builder SetStatRequestNumber(uint value) {
        PrepareBuilder();
        result.hasStatRequestNumber = true;
        result.statRequestNumber_ = value;
        return this;
      }
      public Builder ClearStatRequestNumber() {
        PrepareBuilder();
        result.hasStatRequestNumber = false;
        result.statRequestNumber_ = 0;
        return this;
      }
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
    }
    static NetMessageMatchStatisticsRequest() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMatchInviteResponse : pb::GeneratedMessage<NetMessageMatchInviteResponse, NetMessageMatchInviteResponse.Builder> {
    private NetMessageMatchInviteResponse() { }
    private static readonly NetMessageMatchInviteResponse defaultInstance = new NetMessageMatchInviteResponse().MakeReadOnly();
    private static readonly string[] _netMessageMatchInviteResponseFieldNames = new string[] { "inviteAccepted", "matchNumber" };
    private static readonly uint[] _netMessageMatchInviteResponseFieldTags = new uint[] { 16, 8 };
    public static NetMessageMatchInviteResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMatchInviteResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMatchInviteResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageMatchInviteResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMatchInviteResponse, NetMessageMatchInviteResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageMatchInviteResponse__FieldAccessorTable; }
    }
    
    public const int MatchNumberFieldNumber = 1;
    private bool hasMatchNumber;
    private ulong matchNumber_;
    public bool HasMatchNumber {
      get { return hasMatchNumber; }
    }
    public ulong MatchNumber {
      get { return matchNumber_; }
    }
    
    public const int InviteAcceptedFieldNumber = 2;
    private bool hasInviteAccepted;
    private bool inviteAccepted_;
    public bool HasInviteAccepted {
      get { return hasInviteAccepted; }
    }
    public bool InviteAccepted {
      get { return inviteAccepted_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMatchNumber) return false;
        if (!hasInviteAccepted) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMatchInviteResponseFieldNames;
      if (hasMatchNumber) {
        output.WriteUInt64(1, field_names[1], MatchNumber);
      }
      if (hasInviteAccepted) {
        output.WriteBool(2, field_names[0], InviteAccepted);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMatchNumber) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MatchNumber);
      }
      if (hasInviteAccepted) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, InviteAccepted);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMatchInviteResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchInviteResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchInviteResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchInviteResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchInviteResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchInviteResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchInviteResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMatchInviteResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMatchInviteResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchInviteResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMatchInviteResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMatchInviteResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMatchInviteResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMatchInviteResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMatchInviteResponse result;
      
      private NetMessageMatchInviteResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMatchInviteResponse original = result;
          result = new NetMessageMatchInviteResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMatchInviteResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMatchInviteResponse.Descriptor; }
      }
      
      public override NetMessageMatchInviteResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMatchInviteResponse.DefaultInstance; }
      }
      
      public override NetMessageMatchInviteResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMatchInviteResponse) {
          return MergeFrom((NetMessageMatchInviteResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMatchInviteResponse other) {
        if (other == global::Gazillion.NetMessageMatchInviteResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMatchNumber) {
          MatchNumber = other.MatchNumber;
        }
        if (other.HasInviteAccepted) {
          InviteAccepted = other.InviteAccepted;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMatchInviteResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMatchInviteResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMatchNumber = input.ReadUInt64(ref result.matchNumber_);
              break;
            }
            case 16: {
              result.hasInviteAccepted = input.ReadBool(ref result.inviteAccepted_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMatchNumber {
        get { return result.hasMatchNumber; }
      }
      public ulong MatchNumber {
        get { return result.MatchNumber; }
        set { SetMatchNumber(value); }
      }
      public Builder SetMatchNumber(ulong value) {
        PrepareBuilder();
        result.hasMatchNumber = true;
        result.matchNumber_ = value;
        return this;
      }
      public Builder ClearMatchNumber() {
        PrepareBuilder();
        result.hasMatchNumber = false;
        result.matchNumber_ = 0UL;
        return this;
      }
      
      public bool HasInviteAccepted {
        get { return result.hasInviteAccepted; }
      }
      public bool InviteAccepted {
        get { return result.InviteAccepted; }
        set { SetInviteAccepted(value); }
      }
      public Builder SetInviteAccepted(bool value) {
        PrepareBuilder();
        result.hasInviteAccepted = true;
        result.inviteAccepted_ = value;
        return this;
      }
      public Builder ClearInviteAccepted() {
        PrepareBuilder();
        result.hasInviteAccepted = false;
        result.inviteAccepted_ = false;
        return this;
      }
    }
    static NetMessageMatchInviteResponse() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDuelInvite : pb::GeneratedMessage<NetMessageDuelInvite, NetMessageDuelInvite.Builder> {
    private NetMessageDuelInvite() { }
    private static readonly NetMessageDuelInvite defaultInstance = new NetMessageDuelInvite().MakeReadOnly();
    private static readonly string[] _netMessageDuelInviteFieldNames = new string[] { "challengerEntityId", "challengerName", "opponentEntityId", "opponentName" };
    private static readonly uint[] _netMessageDuelInviteFieldTags = new uint[] { 8, 18, 24, 34 };
    public static NetMessageDuelInvite DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDuelInvite DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDuelInvite ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDuelInvite__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDuelInvite, NetMessageDuelInvite.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDuelInvite__FieldAccessorTable; }
    }
    
    public const int ChallengerEntityIdFieldNumber = 1;
    private bool hasChallengerEntityId;
    private ulong challengerEntityId_;
    public bool HasChallengerEntityId {
      get { return hasChallengerEntityId; }
    }
    public ulong ChallengerEntityId {
      get { return challengerEntityId_; }
    }
    
    public const int ChallengerNameFieldNumber = 2;
    private bool hasChallengerName;
    private string challengerName_ = "";
    public bool HasChallengerName {
      get { return hasChallengerName; }
    }
    public string ChallengerName {
      get { return challengerName_; }
    }
    
    public const int OpponentEntityIdFieldNumber = 3;
    private bool hasOpponentEntityId;
    private ulong opponentEntityId_;
    public bool HasOpponentEntityId {
      get { return hasOpponentEntityId; }
    }
    public ulong OpponentEntityId {
      get { return opponentEntityId_; }
    }
    
    public const int OpponentNameFieldNumber = 4;
    private bool hasOpponentName;
    private string opponentName_ = "";
    public bool HasOpponentName {
      get { return hasOpponentName; }
    }
    public string OpponentName {
      get { return opponentName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChallengerEntityId) return false;
        if (!hasOpponentName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDuelInviteFieldNames;
      if (hasChallengerEntityId) {
        output.WriteUInt64(1, field_names[0], ChallengerEntityId);
      }
      if (hasChallengerName) {
        output.WriteString(2, field_names[1], ChallengerName);
      }
      if (hasOpponentEntityId) {
        output.WriteUInt64(3, field_names[2], OpponentEntityId);
      }
      if (hasOpponentName) {
        output.WriteString(4, field_names[3], OpponentName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasChallengerEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ChallengerEntityId);
      }
      if (hasChallengerName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, ChallengerName);
      }
      if (hasOpponentEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, OpponentEntityId);
      }
      if (hasOpponentName) {
        size += pb::CodedOutputStream.ComputeStringSize(4, OpponentName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDuelInvite ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDuelInvite ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDuelInvite ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDuelInvite ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDuelInvite ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDuelInvite ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDuelInvite ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDuelInvite ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDuelInvite ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDuelInvite ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDuelInvite MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDuelInvite prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDuelInvite, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDuelInvite cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDuelInvite result;
      
      private NetMessageDuelInvite PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDuelInvite original = result;
          result = new NetMessageDuelInvite();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDuelInvite MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDuelInvite.Descriptor; }
      }
      
      public override NetMessageDuelInvite DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDuelInvite.DefaultInstance; }
      }
      
      public override NetMessageDuelInvite BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDuelInvite) {
          return MergeFrom((NetMessageDuelInvite) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDuelInvite other) {
        if (other == global::Gazillion.NetMessageDuelInvite.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChallengerEntityId) {
          ChallengerEntityId = other.ChallengerEntityId;
        }
        if (other.HasChallengerName) {
          ChallengerName = other.ChallengerName;
        }
        if (other.HasOpponentEntityId) {
          OpponentEntityId = other.OpponentEntityId;
        }
        if (other.HasOpponentName) {
          OpponentName = other.OpponentName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDuelInviteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDuelInviteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasChallengerEntityId = input.ReadUInt64(ref result.challengerEntityId_);
              break;
            }
            case 18: {
              result.hasChallengerName = input.ReadString(ref result.challengerName_);
              break;
            }
            case 24: {
              result.hasOpponentEntityId = input.ReadUInt64(ref result.opponentEntityId_);
              break;
            }
            case 34: {
              result.hasOpponentName = input.ReadString(ref result.opponentName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChallengerEntityId {
        get { return result.hasChallengerEntityId; }
      }
      public ulong ChallengerEntityId {
        get { return result.ChallengerEntityId; }
        set { SetChallengerEntityId(value); }
      }
      public Builder SetChallengerEntityId(ulong value) {
        PrepareBuilder();
        result.hasChallengerEntityId = true;
        result.challengerEntityId_ = value;
        return this;
      }
      public Builder ClearChallengerEntityId() {
        PrepareBuilder();
        result.hasChallengerEntityId = false;
        result.challengerEntityId_ = 0UL;
        return this;
      }
      
      public bool HasChallengerName {
        get { return result.hasChallengerName; }
      }
      public string ChallengerName {
        get { return result.ChallengerName; }
        set { SetChallengerName(value); }
      }
      public Builder SetChallengerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChallengerName = true;
        result.challengerName_ = value;
        return this;
      }
      public Builder ClearChallengerName() {
        PrepareBuilder();
        result.hasChallengerName = false;
        result.challengerName_ = "";
        return this;
      }
      
      public bool HasOpponentEntityId {
        get { return result.hasOpponentEntityId; }
      }
      public ulong OpponentEntityId {
        get { return result.OpponentEntityId; }
        set { SetOpponentEntityId(value); }
      }
      public Builder SetOpponentEntityId(ulong value) {
        PrepareBuilder();
        result.hasOpponentEntityId = true;
        result.opponentEntityId_ = value;
        return this;
      }
      public Builder ClearOpponentEntityId() {
        PrepareBuilder();
        result.hasOpponentEntityId = false;
        result.opponentEntityId_ = 0UL;
        return this;
      }
      
      public bool HasOpponentName {
        get { return result.hasOpponentName; }
      }
      public string OpponentName {
        get { return result.OpponentName; }
        set { SetOpponentName(value); }
      }
      public Builder SetOpponentName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpponentName = true;
        result.opponentName_ = value;
        return this;
      }
      public Builder ClearOpponentName() {
        PrepareBuilder();
        result.hasOpponentName = false;
        result.opponentName_ = "";
        return this;
      }
    }
    static NetMessageDuelInvite() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDuelAccept : pb::GeneratedMessage<NetMessageDuelAccept, NetMessageDuelAccept.Builder> {
    private NetMessageDuelAccept() { }
    private static readonly NetMessageDuelAccept defaultInstance = new NetMessageDuelAccept().MakeReadOnly();
    private static readonly string[] _netMessageDuelAcceptFieldNames = new string[] { "challengedEntityId", "challengedName" };
    private static readonly uint[] _netMessageDuelAcceptFieldTags = new uint[] { 8, 18 };
    public static NetMessageDuelAccept DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDuelAccept DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDuelAccept ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDuelAccept__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDuelAccept, NetMessageDuelAccept.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDuelAccept__FieldAccessorTable; }
    }
    
    public const int ChallengedEntityIdFieldNumber = 1;
    private bool hasChallengedEntityId;
    private ulong challengedEntityId_;
    public bool HasChallengedEntityId {
      get { return hasChallengedEntityId; }
    }
    public ulong ChallengedEntityId {
      get { return challengedEntityId_; }
    }
    
    public const int ChallengedNameFieldNumber = 2;
    private bool hasChallengedName;
    private string challengedName_ = "";
    public bool HasChallengedName {
      get { return hasChallengedName; }
    }
    public string ChallengedName {
      get { return challengedName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChallengedEntityId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDuelAcceptFieldNames;
      if (hasChallengedEntityId) {
        output.WriteUInt64(1, field_names[0], ChallengedEntityId);
      }
      if (hasChallengedName) {
        output.WriteString(2, field_names[1], ChallengedName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasChallengedEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ChallengedEntityId);
      }
      if (hasChallengedName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, ChallengedName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDuelAccept ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDuelAccept ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDuelAccept ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDuelAccept ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDuelAccept ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDuelAccept ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDuelAccept ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDuelAccept ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDuelAccept ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDuelAccept ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDuelAccept MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDuelAccept prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDuelAccept, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDuelAccept cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDuelAccept result;
      
      private NetMessageDuelAccept PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDuelAccept original = result;
          result = new NetMessageDuelAccept();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDuelAccept MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDuelAccept.Descriptor; }
      }
      
      public override NetMessageDuelAccept DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDuelAccept.DefaultInstance; }
      }
      
      public override NetMessageDuelAccept BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDuelAccept) {
          return MergeFrom((NetMessageDuelAccept) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDuelAccept other) {
        if (other == global::Gazillion.NetMessageDuelAccept.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChallengedEntityId) {
          ChallengedEntityId = other.ChallengedEntityId;
        }
        if (other.HasChallengedName) {
          ChallengedName = other.ChallengedName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDuelAcceptFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDuelAcceptFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasChallengedEntityId = input.ReadUInt64(ref result.challengedEntityId_);
              break;
            }
            case 18: {
              result.hasChallengedName = input.ReadString(ref result.challengedName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChallengedEntityId {
        get { return result.hasChallengedEntityId; }
      }
      public ulong ChallengedEntityId {
        get { return result.ChallengedEntityId; }
        set { SetChallengedEntityId(value); }
      }
      public Builder SetChallengedEntityId(ulong value) {
        PrepareBuilder();
        result.hasChallengedEntityId = true;
        result.challengedEntityId_ = value;
        return this;
      }
      public Builder ClearChallengedEntityId() {
        PrepareBuilder();
        result.hasChallengedEntityId = false;
        result.challengedEntityId_ = 0UL;
        return this;
      }
      
      public bool HasChallengedName {
        get { return result.hasChallengedName; }
      }
      public string ChallengedName {
        get { return result.ChallengedName; }
        set { SetChallengedName(value); }
      }
      public Builder SetChallengedName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChallengedName = true;
        result.challengedName_ = value;
        return this;
      }
      public Builder ClearChallengedName() {
        PrepareBuilder();
        result.hasChallengedName = false;
        result.challengedName_ = "";
        return this;
      }
    }
    static NetMessageDuelAccept() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDuelCancel : pb::GeneratedMessage<NetMessageDuelCancel, NetMessageDuelCancel.Builder> {
    private NetMessageDuelCancel() { }
    private static readonly NetMessageDuelCancel defaultInstance = new NetMessageDuelCancel().MakeReadOnly();
    private static readonly string[] _netMessageDuelCancelFieldNames = new string[] { "cancellingEntityId", "cancellingName" };
    private static readonly uint[] _netMessageDuelCancelFieldTags = new uint[] { 8, 18 };
    public static NetMessageDuelCancel DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDuelCancel DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDuelCancel ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDuelCancel__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDuelCancel, NetMessageDuelCancel.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDuelCancel__FieldAccessorTable; }
    }
    
    public const int CancellingEntityIdFieldNumber = 1;
    private bool hasCancellingEntityId;
    private ulong cancellingEntityId_;
    public bool HasCancellingEntityId {
      get { return hasCancellingEntityId; }
    }
    public ulong CancellingEntityId {
      get { return cancellingEntityId_; }
    }
    
    public const int CancellingNameFieldNumber = 2;
    private bool hasCancellingName;
    private string cancellingName_ = "";
    public bool HasCancellingName {
      get { return hasCancellingName; }
    }
    public string CancellingName {
      get { return cancellingName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCancellingEntityId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDuelCancelFieldNames;
      if (hasCancellingEntityId) {
        output.WriteUInt64(1, field_names[0], CancellingEntityId);
      }
      if (hasCancellingName) {
        output.WriteString(2, field_names[1], CancellingName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCancellingEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, CancellingEntityId);
      }
      if (hasCancellingName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, CancellingName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDuelCancel ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDuelCancel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDuelCancel ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDuelCancel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDuelCancel ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDuelCancel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDuelCancel ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDuelCancel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDuelCancel ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDuelCancel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDuelCancel MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDuelCancel prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDuelCancel, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDuelCancel cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDuelCancel result;
      
      private NetMessageDuelCancel PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDuelCancel original = result;
          result = new NetMessageDuelCancel();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDuelCancel MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDuelCancel.Descriptor; }
      }
      
      public override NetMessageDuelCancel DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDuelCancel.DefaultInstance; }
      }
      
      public override NetMessageDuelCancel BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDuelCancel) {
          return MergeFrom((NetMessageDuelCancel) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDuelCancel other) {
        if (other == global::Gazillion.NetMessageDuelCancel.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCancellingEntityId) {
          CancellingEntityId = other.CancellingEntityId;
        }
        if (other.HasCancellingName) {
          CancellingName = other.CancellingName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDuelCancelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDuelCancelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCancellingEntityId = input.ReadUInt64(ref result.cancellingEntityId_);
              break;
            }
            case 18: {
              result.hasCancellingName = input.ReadString(ref result.cancellingName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCancellingEntityId {
        get { return result.hasCancellingEntityId; }
      }
      public ulong CancellingEntityId {
        get { return result.CancellingEntityId; }
        set { SetCancellingEntityId(value); }
      }
      public Builder SetCancellingEntityId(ulong value) {
        PrepareBuilder();
        result.hasCancellingEntityId = true;
        result.cancellingEntityId_ = value;
        return this;
      }
      public Builder ClearCancellingEntityId() {
        PrepareBuilder();
        result.hasCancellingEntityId = false;
        result.cancellingEntityId_ = 0UL;
        return this;
      }
      
      public bool HasCancellingName {
        get { return result.hasCancellingName; }
      }
      public string CancellingName {
        get { return result.CancellingName; }
        set { SetCancellingName(value); }
      }
      public Builder SetCancellingName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCancellingName = true;
        result.cancellingName_ = value;
        return this;
      }
      public Builder ClearCancellingName() {
        PrepareBuilder();
        result.hasCancellingName = false;
        result.cancellingName_ = "";
        return this;
      }
    }
    static NetMessageDuelCancel() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMetaGameUpdateNotification : pb::GeneratedMessage<NetMessageMetaGameUpdateNotification, NetMessageMetaGameUpdateNotification.Builder> {
    private NetMessageMetaGameUpdateNotification() { }
    private static readonly NetMessageMetaGameUpdateNotification defaultInstance = new NetMessageMetaGameUpdateNotification().MakeReadOnly();
    private static readonly string[] _netMessageMetaGameUpdateNotificationFieldNames = new string[] { "metaGameEntityId" };
    private static readonly uint[] _netMessageMetaGameUpdateNotificationFieldTags = new uint[] { 8 };
    public static NetMessageMetaGameUpdateNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMetaGameUpdateNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMetaGameUpdateNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageMetaGameUpdateNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMetaGameUpdateNotification, NetMessageMetaGameUpdateNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageMetaGameUpdateNotification__FieldAccessorTable; }
    }
    
    public const int MetaGameEntityIdFieldNumber = 1;
    private bool hasMetaGameEntityId;
    private ulong metaGameEntityId_;
    public bool HasMetaGameEntityId {
      get { return hasMetaGameEntityId; }
    }
    public ulong MetaGameEntityId {
      get { return metaGameEntityId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMetaGameEntityId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMetaGameUpdateNotificationFieldNames;
      if (hasMetaGameEntityId) {
        output.WriteUInt64(1, field_names[0], MetaGameEntityId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMetaGameEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MetaGameEntityId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMetaGameUpdateNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMetaGameUpdateNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMetaGameUpdateNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMetaGameUpdateNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMetaGameUpdateNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMetaGameUpdateNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMetaGameUpdateNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMetaGameUpdateNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMetaGameUpdateNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMetaGameUpdateNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMetaGameUpdateNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMetaGameUpdateNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMetaGameUpdateNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMetaGameUpdateNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMetaGameUpdateNotification result;
      
      private NetMessageMetaGameUpdateNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMetaGameUpdateNotification original = result;
          result = new NetMessageMetaGameUpdateNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMetaGameUpdateNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMetaGameUpdateNotification.Descriptor; }
      }
      
      public override NetMessageMetaGameUpdateNotification DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMetaGameUpdateNotification.DefaultInstance; }
      }
      
      public override NetMessageMetaGameUpdateNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMetaGameUpdateNotification) {
          return MergeFrom((NetMessageMetaGameUpdateNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMetaGameUpdateNotification other) {
        if (other == global::Gazillion.NetMessageMetaGameUpdateNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMetaGameEntityId) {
          MetaGameEntityId = other.MetaGameEntityId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMetaGameUpdateNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMetaGameUpdateNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMetaGameEntityId = input.ReadUInt64(ref result.metaGameEntityId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMetaGameEntityId {
        get { return result.hasMetaGameEntityId; }
      }
      public ulong MetaGameEntityId {
        get { return result.MetaGameEntityId; }
        set { SetMetaGameEntityId(value); }
      }
      public Builder SetMetaGameEntityId(ulong value) {
        PrepareBuilder();
        result.hasMetaGameEntityId = true;
        result.metaGameEntityId_ = value;
        return this;
      }
      public Builder ClearMetaGameEntityId() {
        PrepareBuilder();
        result.hasMetaGameEntityId = false;
        result.metaGameEntityId_ = 0UL;
        return this;
      }
    }
    static NetMessageMetaGameUpdateNotification() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageChat : pb::GeneratedMessage<NetMessageChat, NetMessageChat.Builder> {
    private NetMessageChat() { }
    private static readonly NetMessageChat defaultInstance = new NetMessageChat().MakeReadOnly();
    private static readonly string[] _netMessageChatFieldNames = new string[] { "roomType", "theMessage" };
    private static readonly uint[] _netMessageChatFieldTags = new uint[] { 8, 18 };
    public static NetMessageChat DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageChat DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageChat ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageChat__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageChat, NetMessageChat.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageChat__FieldAccessorTable; }
    }
    
    public const int RoomTypeFieldNumber = 1;
    private bool hasRoomType;
    private global::Gazillion.ChatRoomTypes roomType_ = global::Gazillion.ChatRoomTypes.CHAT_ROOM_TYPE_LOCAL;
    public bool HasRoomType {
      get { return hasRoomType; }
    }
    public global::Gazillion.ChatRoomTypes RoomType {
      get { return roomType_; }
    }
    
    public const int TheMessageFieldNumber = 2;
    private bool hasTheMessage;
    private global::Gazillion.ChatMessage theMessage_;
    public bool HasTheMessage {
      get { return hasTheMessage; }
    }
    public global::Gazillion.ChatMessage TheMessage {
      get { return theMessage_ ?? global::Gazillion.ChatMessage.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRoomType) return false;
        if (!hasTheMessage) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageChatFieldNames;
      if (hasRoomType) {
        output.WriteEnum(1, field_names[0], (int) RoomType, RoomType);
      }
      if (hasTheMessage) {
        output.WriteMessage(2, field_names[1], TheMessage);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRoomType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) RoomType);
      }
      if (hasTheMessage) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, TheMessage);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageChat ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChat ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChat ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChat ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChat ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChat ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChat ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageChat ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageChat ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChat ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageChat MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageChat prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageChat, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageChat cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageChat result;
      
      private NetMessageChat PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageChat original = result;
          result = new NetMessageChat();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageChat MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageChat.Descriptor; }
      }
      
      public override NetMessageChat DefaultInstanceForType {
        get { return global::Gazillion.NetMessageChat.DefaultInstance; }
      }
      
      public override NetMessageChat BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageChat) {
          return MergeFrom((NetMessageChat) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageChat other) {
        if (other == global::Gazillion.NetMessageChat.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRoomType) {
          RoomType = other.RoomType;
        }
        if (other.HasTheMessage) {
          MergeTheMessage(other.TheMessage);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageChatFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageChatFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.roomType_, out unknown)) {
                result.hasRoomType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::Gazillion.ChatMessage.Builder subBuilder = global::Gazillion.ChatMessage.CreateBuilder();
              if (result.hasTheMessage) {
                subBuilder.MergeFrom(TheMessage);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TheMessage = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRoomType {
       get { return result.hasRoomType; }
      }
      public global::Gazillion.ChatRoomTypes RoomType {
        get { return result.RoomType; }
        set { SetRoomType(value); }
      }
      public Builder SetRoomType(global::Gazillion.ChatRoomTypes value) {
        PrepareBuilder();
        result.hasRoomType = true;
        result.roomType_ = value;
        return this;
      }
      public Builder ClearRoomType() {
        PrepareBuilder();
        result.hasRoomType = false;
        result.roomType_ = global::Gazillion.ChatRoomTypes.CHAT_ROOM_TYPE_LOCAL;
        return this;
      }
      
      public bool HasTheMessage {
       get { return result.hasTheMessage; }
      }
      public global::Gazillion.ChatMessage TheMessage {
        get { return result.TheMessage; }
        set { SetTheMessage(value); }
      }
      public Builder SetTheMessage(global::Gazillion.ChatMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTheMessage = true;
        result.theMessage_ = value;
        return this;
      }
      public Builder SetTheMessage(global::Gazillion.ChatMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTheMessage = true;
        result.theMessage_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTheMessage(global::Gazillion.ChatMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTheMessage &&
            result.theMessage_ != global::Gazillion.ChatMessage.DefaultInstance) {
            result.theMessage_ = global::Gazillion.ChatMessage.CreateBuilder(result.theMessage_).MergeFrom(value).BuildPartial();
        } else {
          result.theMessage_ = value;
        }
        result.hasTheMessage = true;
        return this;
      }
      public Builder ClearTheMessage() {
        PrepareBuilder();
        result.hasTheMessage = false;
        result.theMessage_ = null;
        return this;
      }
    }
    static NetMessageChat() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTell : pb::GeneratedMessage<NetMessageTell, NetMessageTell.Builder> {
    private NetMessageTell() { }
    private static readonly NetMessageTell defaultInstance = new NetMessageTell().MakeReadOnly();
    private static readonly string[] _netMessageTellFieldNames = new string[] { "targetPlayerName", "theMessage" };
    private static readonly uint[] _netMessageTellFieldTags = new uint[] { 10, 18 };
    public static NetMessageTell DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTell DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTell ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTell__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTell, NetMessageTell.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTell__FieldAccessorTable; }
    }
    
    public const int TargetPlayerNameFieldNumber = 1;
    private bool hasTargetPlayerName;
    private string targetPlayerName_ = "";
    public bool HasTargetPlayerName {
      get { return hasTargetPlayerName; }
    }
    public string TargetPlayerName {
      get { return targetPlayerName_; }
    }
    
    public const int TheMessageFieldNumber = 2;
    private bool hasTheMessage;
    private global::Gazillion.ChatMessage theMessage_;
    public bool HasTheMessage {
      get { return hasTheMessage; }
    }
    public global::Gazillion.ChatMessage TheMessage {
      get { return theMessage_ ?? global::Gazillion.ChatMessage.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetPlayerName) return false;
        if (!hasTheMessage) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTellFieldNames;
      if (hasTargetPlayerName) {
        output.WriteString(1, field_names[0], TargetPlayerName);
      }
      if (hasTheMessage) {
        output.WriteMessage(2, field_names[1], TheMessage);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, TargetPlayerName);
      }
      if (hasTheMessage) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, TheMessage);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTell ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTell ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTell ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTell ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTell ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTell ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTell ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTell ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTell ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTell ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTell MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTell prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTell, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTell cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTell result;
      
      private NetMessageTell PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTell original = result;
          result = new NetMessageTell();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTell MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTell.Descriptor; }
      }
      
      public override NetMessageTell DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTell.DefaultInstance; }
      }
      
      public override NetMessageTell BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTell) {
          return MergeFrom((NetMessageTell) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTell other) {
        if (other == global::Gazillion.NetMessageTell.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetPlayerName) {
          TargetPlayerName = other.TargetPlayerName;
        }
        if (other.HasTheMessage) {
          MergeTheMessage(other.TheMessage);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTellFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTellFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasTargetPlayerName = input.ReadString(ref result.targetPlayerName_);
              break;
            }
            case 18: {
              global::Gazillion.ChatMessage.Builder subBuilder = global::Gazillion.ChatMessage.CreateBuilder();
              if (result.hasTheMessage) {
                subBuilder.MergeFrom(TheMessage);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TheMessage = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetPlayerName {
        get { return result.hasTargetPlayerName; }
      }
      public string TargetPlayerName {
        get { return result.TargetPlayerName; }
        set { SetTargetPlayerName(value); }
      }
      public Builder SetTargetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPlayerName = true;
        result.targetPlayerName_ = value;
        return this;
      }
      public Builder ClearTargetPlayerName() {
        PrepareBuilder();
        result.hasTargetPlayerName = false;
        result.targetPlayerName_ = "";
        return this;
      }
      
      public bool HasTheMessage {
       get { return result.hasTheMessage; }
      }
      public global::Gazillion.ChatMessage TheMessage {
        get { return result.TheMessage; }
        set { SetTheMessage(value); }
      }
      public Builder SetTheMessage(global::Gazillion.ChatMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTheMessage = true;
        result.theMessage_ = value;
        return this;
      }
      public Builder SetTheMessage(global::Gazillion.ChatMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTheMessage = true;
        result.theMessage_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTheMessage(global::Gazillion.ChatMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTheMessage &&
            result.theMessage_ != global::Gazillion.ChatMessage.DefaultInstance) {
            result.theMessage_ = global::Gazillion.ChatMessage.CreateBuilder(result.theMessage_).MergeFrom(value).BuildPartial();
        } else {
          result.theMessage_ = value;
        }
        result.hasTheMessage = true;
        return this;
      }
      public Builder ClearTheMessage() {
        PrepareBuilder();
        result.hasTheMessage = false;
        result.theMessage_ = null;
        return this;
      }
    }
    static NetMessageTell() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageReportPlayer : pb::GeneratedMessage<NetMessageReportPlayer, NetMessageReportPlayer.Builder> {
    private NetMessageReportPlayer() { }
    private static readonly NetMessageReportPlayer defaultInstance = new NetMessageReportPlayer().MakeReadOnly();
    private static readonly string[] _netMessageReportPlayerFieldNames = new string[] { "reason", "targetPlayerName" };
    private static readonly uint[] _netMessageReportPlayerFieldTags = new uint[] { 18, 10 };
    public static NetMessageReportPlayer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageReportPlayer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageReportPlayer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageReportPlayer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageReportPlayer, NetMessageReportPlayer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageReportPlayer__FieldAccessorTable; }
    }
    
    public const int TargetPlayerNameFieldNumber = 1;
    private bool hasTargetPlayerName;
    private string targetPlayerName_ = "";
    public bool HasTargetPlayerName {
      get { return hasTargetPlayerName; }
    }
    public string TargetPlayerName {
      get { return targetPlayerName_; }
    }
    
    public const int ReasonFieldNumber = 2;
    private bool hasReason;
    private string reason_ = "";
    public bool HasReason {
      get { return hasReason; }
    }
    public string Reason {
      get { return reason_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetPlayerName) return false;
        if (!hasReason) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageReportPlayerFieldNames;
      if (hasTargetPlayerName) {
        output.WriteString(1, field_names[1], TargetPlayerName);
      }
      if (hasReason) {
        output.WriteString(2, field_names[0], Reason);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, TargetPlayerName);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Reason);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageReportPlayer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReportPlayer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReportPlayer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReportPlayer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReportPlayer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReportPlayer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReportPlayer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageReportPlayer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageReportPlayer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReportPlayer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageReportPlayer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageReportPlayer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageReportPlayer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageReportPlayer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageReportPlayer result;
      
      private NetMessageReportPlayer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageReportPlayer original = result;
          result = new NetMessageReportPlayer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageReportPlayer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageReportPlayer.Descriptor; }
      }
      
      public override NetMessageReportPlayer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageReportPlayer.DefaultInstance; }
      }
      
      public override NetMessageReportPlayer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageReportPlayer) {
          return MergeFrom((NetMessageReportPlayer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageReportPlayer other) {
        if (other == global::Gazillion.NetMessageReportPlayer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetPlayerName) {
          TargetPlayerName = other.TargetPlayerName;
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageReportPlayerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageReportPlayerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasTargetPlayerName = input.ReadString(ref result.targetPlayerName_);
              break;
            }
            case 18: {
              result.hasReason = input.ReadString(ref result.reason_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetPlayerName {
        get { return result.hasTargetPlayerName; }
      }
      public string TargetPlayerName {
        get { return result.TargetPlayerName; }
        set { SetTargetPlayerName(value); }
      }
      public Builder SetTargetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPlayerName = true;
        result.targetPlayerName_ = value;
        return this;
      }
      public Builder ClearTargetPlayerName() {
        PrepareBuilder();
        result.hasTargetPlayerName = false;
        result.targetPlayerName_ = "";
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public string Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = "";
        return this;
      }
    }
    static NetMessageReportPlayer() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGetCatalog : pb::GeneratedMessage<NetMessageGetCatalog, NetMessageGetCatalog.Builder> {
    private NetMessageGetCatalog() { }
    private static readonly NetMessageGetCatalog defaultInstance = new NetMessageGetCatalog().MakeReadOnly();
    private static readonly string[] _netMessageGetCatalogFieldNames = new string[] { "itemPrototypeRuntimeId", "localeid", "timestamp" };
    private static readonly uint[] _netMessageGetCatalogFieldTags = new uint[] { 8, 34, 24 };
    public static NetMessageGetCatalog DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGetCatalog DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGetCatalog ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGetCatalog__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGetCatalog, NetMessageGetCatalog.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGetCatalog__FieldAccessorTable; }
    }
    
    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private long timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public long Timestamp {
      get { return timestamp_; }
    }
    
    public const int ItemPrototypeRuntimeIdFieldNumber = 1;
    private bool hasItemPrototypeRuntimeId;
    private ulong itemPrototypeRuntimeId_;
    public bool HasItemPrototypeRuntimeId {
      get { return hasItemPrototypeRuntimeId; }
    }
    public ulong ItemPrototypeRuntimeId {
      get { return itemPrototypeRuntimeId_; }
    }
    
    public const int LocaleidFieldNumber = 4;
    private bool hasLocaleid;
    private string localeid_ = "en_us";
    public bool HasLocaleid {
      get { return hasLocaleid; }
    }
    public string Localeid {
      get { return localeid_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGetCatalogFieldNames;
      if (hasItemPrototypeRuntimeId) {
        output.WriteUInt64(1, field_names[0], ItemPrototypeRuntimeId);
      }
      if (hasTimestamp) {
        output.WriteInt64(3, field_names[2], Timestamp);
      }
      if (hasLocaleid) {
        output.WriteString(4, field_names[1], Localeid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTimestamp) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, Timestamp);
      }
      if (hasItemPrototypeRuntimeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemPrototypeRuntimeId);
      }
      if (hasLocaleid) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Localeid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGetCatalog ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGetCatalog ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetCatalog ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGetCatalog ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetCatalog ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGetCatalog ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetCatalog ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGetCatalog ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGetCatalog ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGetCatalog ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGetCatalog MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGetCatalog prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGetCatalog, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGetCatalog cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGetCatalog result;
      
      private NetMessageGetCatalog PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGetCatalog original = result;
          result = new NetMessageGetCatalog();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGetCatalog MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGetCatalog.Descriptor; }
      }
      
      public override NetMessageGetCatalog DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGetCatalog.DefaultInstance; }
      }
      
      public override NetMessageGetCatalog BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGetCatalog) {
          return MergeFrom((NetMessageGetCatalog) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGetCatalog other) {
        if (other == global::Gazillion.NetMessageGetCatalog.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasItemPrototypeRuntimeId) {
          ItemPrototypeRuntimeId = other.ItemPrototypeRuntimeId;
        }
        if (other.HasLocaleid) {
          Localeid = other.Localeid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGetCatalogFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGetCatalogFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemPrototypeRuntimeId = input.ReadUInt64(ref result.itemPrototypeRuntimeId_);
              break;
            }
            case 24: {
              result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
              break;
            }
            case 34: {
              result.hasLocaleid = input.ReadString(ref result.localeid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public long Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(long value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
      
      public bool HasItemPrototypeRuntimeId {
        get { return result.hasItemPrototypeRuntimeId; }
      }
      public ulong ItemPrototypeRuntimeId {
        get { return result.ItemPrototypeRuntimeId; }
        set { SetItemPrototypeRuntimeId(value); }
      }
      public Builder SetItemPrototypeRuntimeId(ulong value) {
        PrepareBuilder();
        result.hasItemPrototypeRuntimeId = true;
        result.itemPrototypeRuntimeId_ = value;
        return this;
      }
      public Builder ClearItemPrototypeRuntimeId() {
        PrepareBuilder();
        result.hasItemPrototypeRuntimeId = false;
        result.itemPrototypeRuntimeId_ = 0UL;
        return this;
      }
      
      public bool HasLocaleid {
        get { return result.hasLocaleid; }
      }
      public string Localeid {
        get { return result.Localeid; }
        set { SetLocaleid(value); }
      }
      public Builder SetLocaleid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocaleid = true;
        result.localeid_ = value;
        return this;
      }
      public Builder ClearLocaleid() {
        PrepareBuilder();
        result.hasLocaleid = false;
        result.localeid_ = "en_us";
        return this;
      }
    }
    static NetMessageGetCatalog() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGetCurrencyBalance : pb::GeneratedMessage<NetMessageGetCurrencyBalance, NetMessageGetCurrencyBalance.Builder> {
    private NetMessageGetCurrencyBalance() { }
    private static readonly NetMessageGetCurrencyBalance defaultInstance = new NetMessageGetCurrencyBalance().MakeReadOnly();
    private static readonly string[] _netMessageGetCurrencyBalanceFieldNames = new string[] {  };
    private static readonly uint[] _netMessageGetCurrencyBalanceFieldTags = new uint[] {  };
    public static NetMessageGetCurrencyBalance DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGetCurrencyBalance DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGetCurrencyBalance ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGetCurrencyBalance__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGetCurrencyBalance, NetMessageGetCurrencyBalance.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGetCurrencyBalance__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGetCurrencyBalanceFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGetCurrencyBalance ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalance ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalance ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalance ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalance ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalance ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalance ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGetCurrencyBalance ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGetCurrencyBalance ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalance ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGetCurrencyBalance MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGetCurrencyBalance prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGetCurrencyBalance, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGetCurrencyBalance cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGetCurrencyBalance result;
      
      private NetMessageGetCurrencyBalance PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGetCurrencyBalance original = result;
          result = new NetMessageGetCurrencyBalance();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGetCurrencyBalance MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGetCurrencyBalance.Descriptor; }
      }
      
      public override NetMessageGetCurrencyBalance DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGetCurrencyBalance.DefaultInstance; }
      }
      
      public override NetMessageGetCurrencyBalance BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGetCurrencyBalance) {
          return MergeFrom((NetMessageGetCurrencyBalance) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGetCurrencyBalance other) {
        if (other == global::Gazillion.NetMessageGetCurrencyBalance.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGetCurrencyBalanceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGetCurrencyBalanceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageGetCurrencyBalance() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBuyItemFromCatalog : pb::GeneratedMessage<NetMessageBuyItemFromCatalog, NetMessageBuyItemFromCatalog.Builder> {
    private NetMessageBuyItemFromCatalog() { }
    private static readonly NetMessageBuyItemFromCatalog defaultInstance = new NetMessageBuyItemFromCatalog().MakeReadOnly();
    private static readonly string[] _netMessageBuyItemFromCatalogFieldNames = new string[] { "itemUnitPrice", "numUnits", "skuId" };
    private static readonly uint[] _netMessageBuyItemFromCatalogFieldTags = new uint[] { 16, 24, 8 };
    public static NetMessageBuyItemFromCatalog DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBuyItemFromCatalog DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBuyItemFromCatalog ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBuyItemFromCatalog__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBuyItemFromCatalog, NetMessageBuyItemFromCatalog.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBuyItemFromCatalog__FieldAccessorTable; }
    }
    
    public const int SkuIdFieldNumber = 1;
    private bool hasSkuId;
    private long skuId_;
    public bool HasSkuId {
      get { return hasSkuId; }
    }
    public long SkuId {
      get { return skuId_; }
    }
    
    public const int ItemUnitPriceFieldNumber = 2;
    private bool hasItemUnitPrice;
    private long itemUnitPrice_;
    public bool HasItemUnitPrice {
      get { return hasItemUnitPrice; }
    }
    public long ItemUnitPrice {
      get { return itemUnitPrice_; }
    }
    
    public const int NumUnitsFieldNumber = 3;
    private bool hasNumUnits;
    private int numUnits_ = 1;
    public bool HasNumUnits {
      get { return hasNumUnits; }
    }
    public int NumUnits {
      get { return numUnits_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSkuId) return false;
        if (!hasItemUnitPrice) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBuyItemFromCatalogFieldNames;
      if (hasSkuId) {
        output.WriteInt64(1, field_names[2], SkuId);
      }
      if (hasItemUnitPrice) {
        output.WriteInt64(2, field_names[0], ItemUnitPrice);
      }
      if (hasNumUnits) {
        output.WriteInt32(3, field_names[1], NumUnits);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSkuId) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, SkuId);
      }
      if (hasItemUnitPrice) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, ItemUnitPrice);
      }
      if (hasNumUnits) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, NumUnits);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBuyItemFromCatalog ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalog ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalog ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalog ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalog ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalog ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalog ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalog ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalog ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalog ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBuyItemFromCatalog MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBuyItemFromCatalog prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBuyItemFromCatalog, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBuyItemFromCatalog cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBuyItemFromCatalog result;
      
      private NetMessageBuyItemFromCatalog PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBuyItemFromCatalog original = result;
          result = new NetMessageBuyItemFromCatalog();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBuyItemFromCatalog MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBuyItemFromCatalog.Descriptor; }
      }
      
      public override NetMessageBuyItemFromCatalog DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBuyItemFromCatalog.DefaultInstance; }
      }
      
      public override NetMessageBuyItemFromCatalog BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBuyItemFromCatalog) {
          return MergeFrom((NetMessageBuyItemFromCatalog) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBuyItemFromCatalog other) {
        if (other == global::Gazillion.NetMessageBuyItemFromCatalog.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSkuId) {
          SkuId = other.SkuId;
        }
        if (other.HasItemUnitPrice) {
          ItemUnitPrice = other.ItemUnitPrice;
        }
        if (other.HasNumUnits) {
          NumUnits = other.NumUnits;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBuyItemFromCatalogFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBuyItemFromCatalogFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSkuId = input.ReadInt64(ref result.skuId_);
              break;
            }
            case 16: {
              result.hasItemUnitPrice = input.ReadInt64(ref result.itemUnitPrice_);
              break;
            }
            case 24: {
              result.hasNumUnits = input.ReadInt32(ref result.numUnits_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSkuId {
        get { return result.hasSkuId; }
      }
      public long SkuId {
        get { return result.SkuId; }
        set { SetSkuId(value); }
      }
      public Builder SetSkuId(long value) {
        PrepareBuilder();
        result.hasSkuId = true;
        result.skuId_ = value;
        return this;
      }
      public Builder ClearSkuId() {
        PrepareBuilder();
        result.hasSkuId = false;
        result.skuId_ = 0L;
        return this;
      }
      
      public bool HasItemUnitPrice {
        get { return result.hasItemUnitPrice; }
      }
      public long ItemUnitPrice {
        get { return result.ItemUnitPrice; }
        set { SetItemUnitPrice(value); }
      }
      public Builder SetItemUnitPrice(long value) {
        PrepareBuilder();
        result.hasItemUnitPrice = true;
        result.itemUnitPrice_ = value;
        return this;
      }
      public Builder ClearItemUnitPrice() {
        PrepareBuilder();
        result.hasItemUnitPrice = false;
        result.itemUnitPrice_ = 0L;
        return this;
      }
      
      public bool HasNumUnits {
        get { return result.hasNumUnits; }
      }
      public int NumUnits {
        get { return result.NumUnits; }
        set { SetNumUnits(value); }
      }
      public Builder SetNumUnits(int value) {
        PrepareBuilder();
        result.hasNumUnits = true;
        result.numUnits_ = value;
        return this;
      }
      public Builder ClearNumUnits() {
        PrepareBuilder();
        result.hasNumUnits = false;
        result.numUnits_ = 1;
        return this;
      }
    }
    static NetMessageBuyItemFromCatalog() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EntityPreviewerEnum : pb::GeneratedMessage<EntityPreviewerEnum, EntityPreviewerEnum.Builder> {
    private EntityPreviewerEnum() { }
    private static readonly EntityPreviewerEnum defaultInstance = new EntityPreviewerEnum().MakeReadOnly();
    private static readonly string[] _entityPreviewerEnumFieldNames = new string[] {  };
    private static readonly uint[] _entityPreviewerEnumFieldTags = new uint[] {  };
    public static EntityPreviewerEnum DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EntityPreviewerEnum DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EntityPreviewerEnum ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_EntityPreviewerEnum__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EntityPreviewerEnum, EntityPreviewerEnum.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_EntityPreviewerEnum__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Alliance {
        Ally = 0,
        Enemy = 1,
        Total = 2,
      }
      
    }
    #endregion
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _entityPreviewerEnumFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EntityPreviewerEnum ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EntityPreviewerEnum ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EntityPreviewerEnum ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EntityPreviewerEnum ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EntityPreviewerEnum ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EntityPreviewerEnum ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EntityPreviewerEnum ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EntityPreviewerEnum ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EntityPreviewerEnum ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EntityPreviewerEnum ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EntityPreviewerEnum MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EntityPreviewerEnum prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EntityPreviewerEnum, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EntityPreviewerEnum cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EntityPreviewerEnum result;
      
      private EntityPreviewerEnum PrepareBuilder() {
        if (resultIsReadOnly) {
          EntityPreviewerEnum original = result;
          result = new EntityPreviewerEnum();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EntityPreviewerEnum MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.EntityPreviewerEnum.Descriptor; }
      }
      
      public override EntityPreviewerEnum DefaultInstanceForType {
        get { return global::Gazillion.EntityPreviewerEnum.DefaultInstance; }
      }
      
      public override EntityPreviewerEnum BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EntityPreviewerEnum) {
          return MergeFrom((EntityPreviewerEnum) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EntityPreviewerEnum other) {
        if (other == global::Gazillion.EntityPreviewerEnum.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_entityPreviewerEnumFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _entityPreviewerEnumFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static EntityPreviewerEnum() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityPreviewerNewTargets : pb::GeneratedMessage<NetMessageEntityPreviewerNewTargets, NetMessageEntityPreviewerNewTargets.Builder> {
    private NetMessageEntityPreviewerNewTargets() { }
    private static readonly NetMessageEntityPreviewerNewTargets defaultInstance = new NetMessageEntityPreviewerNewTargets().MakeReadOnly();
    private static readonly string[] _netMessageEntityPreviewerNewTargetsFieldNames = new string[] { "alliance", "numNewTargets" };
    private static readonly uint[] _netMessageEntityPreviewerNewTargetsFieldTags = new uint[] { 8, 16 };
    public static NetMessageEntityPreviewerNewTargets DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityPreviewerNewTargets DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityPreviewerNewTargets ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerNewTargets__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityPreviewerNewTargets, NetMessageEntityPreviewerNewTargets.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerNewTargets__FieldAccessorTable; }
    }
    
    public const int AllianceFieldNumber = 1;
    private bool hasAlliance;
    private global::Gazillion.EntityPreviewerEnum.Types.Alliance alliance_ = global::Gazillion.EntityPreviewerEnum.Types.Alliance.Ally;
    public bool HasAlliance {
      get { return hasAlliance; }
    }
    public global::Gazillion.EntityPreviewerEnum.Types.Alliance Alliance {
      get { return alliance_; }
    }
    
    public const int NumNewTargetsFieldNumber = 2;
    private bool hasNumNewTargets;
    private uint numNewTargets_;
    public bool HasNumNewTargets {
      get { return hasNumNewTargets; }
    }
    public uint NumNewTargets {
      get { return numNewTargets_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAlliance) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityPreviewerNewTargetsFieldNames;
      if (hasAlliance) {
        output.WriteEnum(1, field_names[0], (int) Alliance, Alliance);
      }
      if (hasNumNewTargets) {
        output.WriteUInt32(2, field_names[1], NumNewTargets);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAlliance) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Alliance);
      }
      if (hasNumNewTargets) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, NumNewTargets);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityPreviewerNewTargets ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTargets ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTargets ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTargets ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTargets ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTargets ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTargets ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTargets ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTargets ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTargets ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityPreviewerNewTargets MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityPreviewerNewTargets prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityPreviewerNewTargets, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityPreviewerNewTargets cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityPreviewerNewTargets result;
      
      private NetMessageEntityPreviewerNewTargets PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityPreviewerNewTargets original = result;
          result = new NetMessageEntityPreviewerNewTargets();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityPreviewerNewTargets MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityPreviewerNewTargets.Descriptor; }
      }
      
      public override NetMessageEntityPreviewerNewTargets DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityPreviewerNewTargets.DefaultInstance; }
      }
      
      public override NetMessageEntityPreviewerNewTargets BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityPreviewerNewTargets) {
          return MergeFrom((NetMessageEntityPreviewerNewTargets) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityPreviewerNewTargets other) {
        if (other == global::Gazillion.NetMessageEntityPreviewerNewTargets.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAlliance) {
          Alliance = other.Alliance;
        }
        if (other.HasNumNewTargets) {
          NumNewTargets = other.NumNewTargets;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityPreviewerNewTargetsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityPreviewerNewTargetsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.alliance_, out unknown)) {
                result.hasAlliance = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              result.hasNumNewTargets = input.ReadUInt32(ref result.numNewTargets_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAlliance {
       get { return result.hasAlliance; }
      }
      public global::Gazillion.EntityPreviewerEnum.Types.Alliance Alliance {
        get { return result.Alliance; }
        set { SetAlliance(value); }
      }
      public Builder SetAlliance(global::Gazillion.EntityPreviewerEnum.Types.Alliance value) {
        PrepareBuilder();
        result.hasAlliance = true;
        result.alliance_ = value;
        return this;
      }
      public Builder ClearAlliance() {
        PrepareBuilder();
        result.hasAlliance = false;
        result.alliance_ = global::Gazillion.EntityPreviewerEnum.Types.Alliance.Ally;
        return this;
      }
      
      public bool HasNumNewTargets {
        get { return result.hasNumNewTargets; }
      }
      public uint NumNewTargets {
        get { return result.NumNewTargets; }
        set { SetNumNewTargets(value); }
      }
      public Builder SetNumNewTargets(uint value) {
        PrepareBuilder();
        result.hasNumNewTargets = true;
        result.numNewTargets_ = value;
        return this;
      }
      public Builder ClearNumNewTargets() {
        PrepareBuilder();
        result.hasNumNewTargets = false;
        result.numNewTargets_ = 0;
        return this;
      }
    }
    static NetMessageEntityPreviewerNewTargets() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityPreviewerClearTargets : pb::GeneratedMessage<NetMessageEntityPreviewerClearTargets, NetMessageEntityPreviewerClearTargets.Builder> {
    private NetMessageEntityPreviewerClearTargets() { }
    private static readonly NetMessageEntityPreviewerClearTargets defaultInstance = new NetMessageEntityPreviewerClearTargets().MakeReadOnly();
    private static readonly string[] _netMessageEntityPreviewerClearTargetsFieldNames = new string[] {  };
    private static readonly uint[] _netMessageEntityPreviewerClearTargetsFieldTags = new uint[] {  };
    public static NetMessageEntityPreviewerClearTargets DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityPreviewerClearTargets DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityPreviewerClearTargets ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerClearTargets__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityPreviewerClearTargets, NetMessageEntityPreviewerClearTargets.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerClearTargets__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityPreviewerClearTargetsFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityPreviewerClearTargets ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerClearTargets ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerClearTargets ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerClearTargets ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerClearTargets ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerClearTargets ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerClearTargets ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityPreviewerClearTargets ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityPreviewerClearTargets ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerClearTargets ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityPreviewerClearTargets MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityPreviewerClearTargets prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityPreviewerClearTargets, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityPreviewerClearTargets cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityPreviewerClearTargets result;
      
      private NetMessageEntityPreviewerClearTargets PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityPreviewerClearTargets original = result;
          result = new NetMessageEntityPreviewerClearTargets();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityPreviewerClearTargets MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityPreviewerClearTargets.Descriptor; }
      }
      
      public override NetMessageEntityPreviewerClearTargets DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityPreviewerClearTargets.DefaultInstance; }
      }
      
      public override NetMessageEntityPreviewerClearTargets BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityPreviewerClearTargets) {
          return MergeFrom((NetMessageEntityPreviewerClearTargets) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityPreviewerClearTargets other) {
        if (other == global::Gazillion.NetMessageEntityPreviewerClearTargets.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityPreviewerClearTargetsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityPreviewerClearTargetsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageEntityPreviewerClearTargets() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityPreviewerSetTargetRef : pb::GeneratedMessage<NetMessageEntityPreviewerSetTargetRef, NetMessageEntityPreviewerSetTargetRef.Builder> {
    private NetMessageEntityPreviewerSetTargetRef() { }
    private static readonly NetMessageEntityPreviewerSetTargetRef defaultInstance = new NetMessageEntityPreviewerSetTargetRef().MakeReadOnly();
    private static readonly string[] _netMessageEntityPreviewerSetTargetRefFieldNames = new string[] { "targetRefId" };
    private static readonly uint[] _netMessageEntityPreviewerSetTargetRefFieldTags = new uint[] { 8 };
    public static NetMessageEntityPreviewerSetTargetRef DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityPreviewerSetTargetRef DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityPreviewerSetTargetRef ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerSetTargetRef__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityPreviewerSetTargetRef, NetMessageEntityPreviewerSetTargetRef.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerSetTargetRef__FieldAccessorTable; }
    }
    
    public const int TargetRefIdFieldNumber = 1;
    private bool hasTargetRefId;
    private ulong targetRefId_;
    public bool HasTargetRefId {
      get { return hasTargetRefId; }
    }
    public ulong TargetRefId {
      get { return targetRefId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetRefId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityPreviewerSetTargetRefFieldNames;
      if (hasTargetRefId) {
        output.WriteUInt64(1, field_names[0], TargetRefId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetRefId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityPreviewerSetTargetRef MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityPreviewerSetTargetRef prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityPreviewerSetTargetRef, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityPreviewerSetTargetRef cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityPreviewerSetTargetRef result;
      
      private NetMessageEntityPreviewerSetTargetRef PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityPreviewerSetTargetRef original = result;
          result = new NetMessageEntityPreviewerSetTargetRef();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityPreviewerSetTargetRef MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityPreviewerSetTargetRef.Descriptor; }
      }
      
      public override NetMessageEntityPreviewerSetTargetRef DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityPreviewerSetTargetRef.DefaultInstance; }
      }
      
      public override NetMessageEntityPreviewerSetTargetRef BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityPreviewerSetTargetRef) {
          return MergeFrom((NetMessageEntityPreviewerSetTargetRef) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityPreviewerSetTargetRef other) {
        if (other == global::Gazillion.NetMessageEntityPreviewerSetTargetRef.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetRefId) {
          TargetRefId = other.TargetRefId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityPreviewerSetTargetRefFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityPreviewerSetTargetRefFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetRefId = input.ReadUInt64(ref result.targetRefId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetRefId {
        get { return result.hasTargetRefId; }
      }
      public ulong TargetRefId {
        get { return result.TargetRefId; }
        set { SetTargetRefId(value); }
      }
      public Builder SetTargetRefId(ulong value) {
        PrepareBuilder();
        result.hasTargetRefId = true;
        result.targetRefId_ = value;
        return this;
      }
      public Builder ClearTargetRefId() {
        PrepareBuilder();
        result.hasTargetRefId = false;
        result.targetRefId_ = 0UL;
        return this;
      }
    }
    static NetMessageEntityPreviewerSetTargetRef() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityPreviewerActivatePower : pb::GeneratedMessage<NetMessageEntityPreviewerActivatePower, NetMessageEntityPreviewerActivatePower.Builder> {
    private NetMessageEntityPreviewerActivatePower() { }
    private static readonly NetMessageEntityPreviewerActivatePower defaultInstance = new NetMessageEntityPreviewerActivatePower().MakeReadOnly();
    private static readonly string[] _netMessageEntityPreviewerActivatePowerFieldNames = new string[] { "casterId", "createTarget", "powerRefId", "randomTargetPos" };
    private static readonly uint[] _netMessageEntityPreviewerActivatePowerFieldTags = new uint[] { 8, 24, 16, 32 };
    public static NetMessageEntityPreviewerActivatePower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityPreviewerActivatePower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityPreviewerActivatePower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerActivatePower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityPreviewerActivatePower, NetMessageEntityPreviewerActivatePower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerActivatePower__FieldAccessorTable; }
    }
    
    public const int CasterIdFieldNumber = 1;
    private bool hasCasterId;
    private ulong casterId_;
    public bool HasCasterId {
      get { return hasCasterId; }
    }
    public ulong CasterId {
      get { return casterId_; }
    }
    
    public const int PowerRefIdFieldNumber = 2;
    private bool hasPowerRefId;
    private ulong powerRefId_;
    public bool HasPowerRefId {
      get { return hasPowerRefId; }
    }
    public ulong PowerRefId {
      get { return powerRefId_; }
    }
    
    public const int CreateTargetFieldNumber = 3;
    private bool hasCreateTarget;
    private bool createTarget_;
    public bool HasCreateTarget {
      get { return hasCreateTarget; }
    }
    public bool CreateTarget {
      get { return createTarget_; }
    }
    
    public const int RandomTargetPosFieldNumber = 4;
    private bool hasRandomTargetPos;
    private bool randomTargetPos_;
    public bool HasRandomTargetPos {
      get { return hasRandomTargetPos; }
    }
    public bool RandomTargetPos {
      get { return randomTargetPos_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCasterId) return false;
        if (!hasPowerRefId) return false;
        if (!hasCreateTarget) return false;
        if (!hasRandomTargetPos) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityPreviewerActivatePowerFieldNames;
      if (hasCasterId) {
        output.WriteUInt64(1, field_names[0], CasterId);
      }
      if (hasPowerRefId) {
        output.WriteUInt64(2, field_names[2], PowerRefId);
      }
      if (hasCreateTarget) {
        output.WriteBool(3, field_names[1], CreateTarget);
      }
      if (hasRandomTargetPos) {
        output.WriteBool(4, field_names[3], RandomTargetPos);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCasterId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, CasterId);
      }
      if (hasPowerRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerRefId);
      }
      if (hasCreateTarget) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, CreateTarget);
      }
      if (hasRandomTargetPos) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, RandomTargetPos);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityPreviewerActivatePower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerActivatePower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerActivatePower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerActivatePower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerActivatePower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerActivatePower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerActivatePower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityPreviewerActivatePower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityPreviewerActivatePower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerActivatePower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityPreviewerActivatePower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityPreviewerActivatePower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityPreviewerActivatePower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityPreviewerActivatePower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityPreviewerActivatePower result;
      
      private NetMessageEntityPreviewerActivatePower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityPreviewerActivatePower original = result;
          result = new NetMessageEntityPreviewerActivatePower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityPreviewerActivatePower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityPreviewerActivatePower.Descriptor; }
      }
      
      public override NetMessageEntityPreviewerActivatePower DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityPreviewerActivatePower.DefaultInstance; }
      }
      
      public override NetMessageEntityPreviewerActivatePower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityPreviewerActivatePower) {
          return MergeFrom((NetMessageEntityPreviewerActivatePower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityPreviewerActivatePower other) {
        if (other == global::Gazillion.NetMessageEntityPreviewerActivatePower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCasterId) {
          CasterId = other.CasterId;
        }
        if (other.HasPowerRefId) {
          PowerRefId = other.PowerRefId;
        }
        if (other.HasCreateTarget) {
          CreateTarget = other.CreateTarget;
        }
        if (other.HasRandomTargetPos) {
          RandomTargetPos = other.RandomTargetPos;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityPreviewerActivatePowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityPreviewerActivatePowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCasterId = input.ReadUInt64(ref result.casterId_);
              break;
            }
            case 16: {
              result.hasPowerRefId = input.ReadUInt64(ref result.powerRefId_);
              break;
            }
            case 24: {
              result.hasCreateTarget = input.ReadBool(ref result.createTarget_);
              break;
            }
            case 32: {
              result.hasRandomTargetPos = input.ReadBool(ref result.randomTargetPos_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCasterId {
        get { return result.hasCasterId; }
      }
      public ulong CasterId {
        get { return result.CasterId; }
        set { SetCasterId(value); }
      }
      public Builder SetCasterId(ulong value) {
        PrepareBuilder();
        result.hasCasterId = true;
        result.casterId_ = value;
        return this;
      }
      public Builder ClearCasterId() {
        PrepareBuilder();
        result.hasCasterId = false;
        result.casterId_ = 0UL;
        return this;
      }
      
      public bool HasPowerRefId {
        get { return result.hasPowerRefId; }
      }
      public ulong PowerRefId {
        get { return result.PowerRefId; }
        set { SetPowerRefId(value); }
      }
      public Builder SetPowerRefId(ulong value) {
        PrepareBuilder();
        result.hasPowerRefId = true;
        result.powerRefId_ = value;
        return this;
      }
      public Builder ClearPowerRefId() {
        PrepareBuilder();
        result.hasPowerRefId = false;
        result.powerRefId_ = 0UL;
        return this;
      }
      
      public bool HasCreateTarget {
        get { return result.hasCreateTarget; }
      }
      public bool CreateTarget {
        get { return result.CreateTarget; }
        set { SetCreateTarget(value); }
      }
      public Builder SetCreateTarget(bool value) {
        PrepareBuilder();
        result.hasCreateTarget = true;
        result.createTarget_ = value;
        return this;
      }
      public Builder ClearCreateTarget() {
        PrepareBuilder();
        result.hasCreateTarget = false;
        result.createTarget_ = false;
        return this;
      }
      
      public bool HasRandomTargetPos {
        get { return result.hasRandomTargetPos; }
      }
      public bool RandomTargetPos {
        get { return result.RandomTargetPos; }
        set { SetRandomTargetPos(value); }
      }
      public Builder SetRandomTargetPos(bool value) {
        PrepareBuilder();
        result.hasRandomTargetPos = true;
        result.randomTargetPos_ = value;
        return this;
      }
      public Builder ClearRandomTargetPos() {
        PrepareBuilder();
        result.hasRandomTargetPos = false;
        result.randomTargetPos_ = false;
        return this;
      }
    }
    static NetMessageEntityPreviewerActivatePower() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityPreviewerAddTarget : pb::GeneratedMessage<NetMessageEntityPreviewerAddTarget, NetMessageEntityPreviewerAddTarget.Builder> {
    private NetMessageEntityPreviewerAddTarget() { }
    private static readonly NetMessageEntityPreviewerAddTarget defaultInstance = new NetMessageEntityPreviewerAddTarget().MakeReadOnly();
    private static readonly string[] _netMessageEntityPreviewerAddTargetFieldNames = new string[] { "targetId" };
    private static readonly uint[] _netMessageEntityPreviewerAddTargetFieldTags = new uint[] { 8 };
    public static NetMessageEntityPreviewerAddTarget DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityPreviewerAddTarget DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityPreviewerAddTarget ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerAddTarget__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityPreviewerAddTarget, NetMessageEntityPreviewerAddTarget.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerAddTarget__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityPreviewerAddTargetFieldNames;
      if (hasTargetId) {
        output.WriteUInt64(1, field_names[0], TargetId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityPreviewerAddTarget ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerAddTarget ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerAddTarget ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerAddTarget ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerAddTarget ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerAddTarget ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerAddTarget ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityPreviewerAddTarget ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityPreviewerAddTarget ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerAddTarget ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityPreviewerAddTarget MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityPreviewerAddTarget prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityPreviewerAddTarget, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityPreviewerAddTarget cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityPreviewerAddTarget result;
      
      private NetMessageEntityPreviewerAddTarget PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityPreviewerAddTarget original = result;
          result = new NetMessageEntityPreviewerAddTarget();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityPreviewerAddTarget MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityPreviewerAddTarget.Descriptor; }
      }
      
      public override NetMessageEntityPreviewerAddTarget DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityPreviewerAddTarget.DefaultInstance; }
      }
      
      public override NetMessageEntityPreviewerAddTarget BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityPreviewerAddTarget) {
          return MergeFrom((NetMessageEntityPreviewerAddTarget) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityPreviewerAddTarget other) {
        if (other == global::Gazillion.NetMessageEntityPreviewerAddTarget.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityPreviewerAddTargetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityPreviewerAddTargetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
    }
    static NetMessageEntityPreviewerAddTarget() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityPreviewerSetEntityState : pb::GeneratedMessage<NetMessageEntityPreviewerSetEntityState, NetMessageEntityPreviewerSetEntityState.Builder> {
    private NetMessageEntityPreviewerSetEntityState() { }
    private static readonly NetMessageEntityPreviewerSetEntityState defaultInstance = new NetMessageEntityPreviewerSetEntityState().MakeReadOnly();
    private static readonly string[] _netMessageEntityPreviewerSetEntityStateFieldNames = new string[] { "stateRefId", "targetId" };
    private static readonly uint[] _netMessageEntityPreviewerSetEntityStateFieldTags = new uint[] { 16, 8 };
    public static NetMessageEntityPreviewerSetEntityState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityPreviewerSetEntityState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityPreviewerSetEntityState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerSetEntityState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityPreviewerSetEntityState, NetMessageEntityPreviewerSetEntityState.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerSetEntityState__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public const int StateRefIdFieldNumber = 2;
    private bool hasStateRefId;
    private ulong stateRefId_;
    public bool HasStateRefId {
      get { return hasStateRefId; }
    }
    public ulong StateRefId {
      get { return stateRefId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        if (!hasStateRefId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityPreviewerSetEntityStateFieldNames;
      if (hasTargetId) {
        output.WriteUInt64(1, field_names[1], TargetId);
      }
      if (hasStateRefId) {
        output.WriteUInt64(2, field_names[0], StateRefId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetId);
      }
      if (hasStateRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, StateRefId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityPreviewerSetEntityState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetEntityState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetEntityState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetEntityState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetEntityState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetEntityState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetEntityState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetEntityState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetEntityState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetEntityState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityPreviewerSetEntityState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityPreviewerSetEntityState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityPreviewerSetEntityState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityPreviewerSetEntityState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityPreviewerSetEntityState result;
      
      private NetMessageEntityPreviewerSetEntityState PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityPreviewerSetEntityState original = result;
          result = new NetMessageEntityPreviewerSetEntityState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityPreviewerSetEntityState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityPreviewerSetEntityState.Descriptor; }
      }
      
      public override NetMessageEntityPreviewerSetEntityState DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityPreviewerSetEntityState.DefaultInstance; }
      }
      
      public override NetMessageEntityPreviewerSetEntityState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityPreviewerSetEntityState) {
          return MergeFrom((NetMessageEntityPreviewerSetEntityState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityPreviewerSetEntityState other) {
        if (other == global::Gazillion.NetMessageEntityPreviewerSetEntityState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        if (other.HasStateRefId) {
          StateRefId = other.StateRefId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityPreviewerSetEntityStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityPreviewerSetEntityStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
            case 16: {
              result.hasStateRefId = input.ReadUInt64(ref result.stateRefId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
      
      public bool HasStateRefId {
        get { return result.hasStateRefId; }
      }
      public ulong StateRefId {
        get { return result.StateRefId; }
        set { SetStateRefId(value); }
      }
      public Builder SetStateRefId(ulong value) {
        PrepareBuilder();
        result.hasStateRefId = true;
        result.stateRefId_ = value;
        return this;
      }
      public Builder ClearStateRefId() {
        PrepareBuilder();
        result.hasStateRefId = false;
        result.stateRefId_ = 0UL;
        return this;
      }
    }
    static NetMessageEntityPreviewerSetEntityState() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityPreviewerApplyConditions : pb::GeneratedMessage<NetMessageEntityPreviewerApplyConditions, NetMessageEntityPreviewerApplyConditions.Builder> {
    private NetMessageEntityPreviewerApplyConditions() { }
    private static readonly NetMessageEntityPreviewerApplyConditions defaultInstance = new NetMessageEntityPreviewerApplyConditions().MakeReadOnly();
    private static readonly string[] _netMessageEntityPreviewerApplyConditionsFieldNames = new string[] { "powerRefId", "targetId" };
    private static readonly uint[] _netMessageEntityPreviewerApplyConditionsFieldTags = new uint[] { 16, 8 };
    public static NetMessageEntityPreviewerApplyConditions DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityPreviewerApplyConditions DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityPreviewerApplyConditions ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerApplyConditions__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityPreviewerApplyConditions, NetMessageEntityPreviewerApplyConditions.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerApplyConditions__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public const int PowerRefIdFieldNumber = 2;
    private bool hasPowerRefId;
    private ulong powerRefId_;
    public bool HasPowerRefId {
      get { return hasPowerRefId; }
    }
    public ulong PowerRefId {
      get { return powerRefId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        if (!hasPowerRefId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityPreviewerApplyConditionsFieldNames;
      if (hasTargetId) {
        output.WriteUInt64(1, field_names[1], TargetId);
      }
      if (hasPowerRefId) {
        output.WriteUInt64(2, field_names[0], PowerRefId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetId);
      }
      if (hasPowerRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerRefId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityPreviewerApplyConditions ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerApplyConditions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerApplyConditions ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerApplyConditions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerApplyConditions ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerApplyConditions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerApplyConditions ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityPreviewerApplyConditions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityPreviewerApplyConditions ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerApplyConditions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityPreviewerApplyConditions MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityPreviewerApplyConditions prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityPreviewerApplyConditions, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityPreviewerApplyConditions cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityPreviewerApplyConditions result;
      
      private NetMessageEntityPreviewerApplyConditions PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityPreviewerApplyConditions original = result;
          result = new NetMessageEntityPreviewerApplyConditions();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityPreviewerApplyConditions MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityPreviewerApplyConditions.Descriptor; }
      }
      
      public override NetMessageEntityPreviewerApplyConditions DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityPreviewerApplyConditions.DefaultInstance; }
      }
      
      public override NetMessageEntityPreviewerApplyConditions BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityPreviewerApplyConditions) {
          return MergeFrom((NetMessageEntityPreviewerApplyConditions) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityPreviewerApplyConditions other) {
        if (other == global::Gazillion.NetMessageEntityPreviewerApplyConditions.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        if (other.HasPowerRefId) {
          PowerRefId = other.PowerRefId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityPreviewerApplyConditionsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityPreviewerApplyConditionsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
            case 16: {
              result.hasPowerRefId = input.ReadUInt64(ref result.powerRefId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
      
      public bool HasPowerRefId {
        get { return result.hasPowerRefId; }
      }
      public ulong PowerRefId {
        get { return result.PowerRefId; }
        set { SetPowerRefId(value); }
      }
      public Builder SetPowerRefId(ulong value) {
        PrepareBuilder();
        result.hasPowerRefId = true;
        result.powerRefId_ = value;
        return this;
      }
      public Builder ClearPowerRefId() {
        PrepareBuilder();
        result.hasPowerRefId = false;
        result.powerRefId_ = 0UL;
        return this;
      }
    }
    static NetMessageEntityPreviewerApplyConditions() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCreateNewPlayerWithSelectedStartingAvatar : pb::GeneratedMessage<NetMessageCreateNewPlayerWithSelectedStartingAvatar, NetMessageCreateNewPlayerWithSelectedStartingAvatar.Builder> {
    private NetMessageCreateNewPlayerWithSelectedStartingAvatar() { }
    private static readonly NetMessageCreateNewPlayerWithSelectedStartingAvatar defaultInstance = new NetMessageCreateNewPlayerWithSelectedStartingAvatar().MakeReadOnly();
    private static readonly string[] _netMessageCreateNewPlayerWithSelectedStartingAvatarFieldNames = new string[] { "startingAvatarPrototypeId" };
    private static readonly uint[] _netMessageCreateNewPlayerWithSelectedStartingAvatarFieldTags = new uint[] { 8 };
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCreateNewPlayerWithSelectedStartingAvatar DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCreateNewPlayerWithSelectedStartingAvatar ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageCreateNewPlayerWithSelectedStartingAvatar__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCreateNewPlayerWithSelectedStartingAvatar, NetMessageCreateNewPlayerWithSelectedStartingAvatar.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageCreateNewPlayerWithSelectedStartingAvatar__FieldAccessorTable; }
    }
    
    public const int StartingAvatarPrototypeIdFieldNumber = 1;
    private bool hasStartingAvatarPrototypeId;
    private ulong startingAvatarPrototypeId_;
    public bool HasStartingAvatarPrototypeId {
      get { return hasStartingAvatarPrototypeId; }
    }
    public ulong StartingAvatarPrototypeId {
      get { return startingAvatarPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStartingAvatarPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCreateNewPlayerWithSelectedStartingAvatarFieldNames;
      if (hasStartingAvatarPrototypeId) {
        output.WriteUInt64(1, field_names[0], StartingAvatarPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStartingAvatarPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, StartingAvatarPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCreateNewPlayerWithSelectedStartingAvatar MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCreateNewPlayerWithSelectedStartingAvatar prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCreateNewPlayerWithSelectedStartingAvatar, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCreateNewPlayerWithSelectedStartingAvatar cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCreateNewPlayerWithSelectedStartingAvatar result;
      
      private NetMessageCreateNewPlayerWithSelectedStartingAvatar PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCreateNewPlayerWithSelectedStartingAvatar original = result;
          result = new NetMessageCreateNewPlayerWithSelectedStartingAvatar();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCreateNewPlayerWithSelectedStartingAvatar MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCreateNewPlayerWithSelectedStartingAvatar.Descriptor; }
      }
      
      public override NetMessageCreateNewPlayerWithSelectedStartingAvatar DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCreateNewPlayerWithSelectedStartingAvatar.DefaultInstance; }
      }
      
      public override NetMessageCreateNewPlayerWithSelectedStartingAvatar BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCreateNewPlayerWithSelectedStartingAvatar) {
          return MergeFrom((NetMessageCreateNewPlayerWithSelectedStartingAvatar) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCreateNewPlayerWithSelectedStartingAvatar other) {
        if (other == global::Gazillion.NetMessageCreateNewPlayerWithSelectedStartingAvatar.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStartingAvatarPrototypeId) {
          StartingAvatarPrototypeId = other.StartingAvatarPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCreateNewPlayerWithSelectedStartingAvatarFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCreateNewPlayerWithSelectedStartingAvatarFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStartingAvatarPrototypeId = input.ReadUInt64(ref result.startingAvatarPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStartingAvatarPrototypeId {
        get { return result.hasStartingAvatarPrototypeId; }
      }
      public ulong StartingAvatarPrototypeId {
        get { return result.StartingAvatarPrototypeId; }
        set { SetStartingAvatarPrototypeId(value); }
      }
      public Builder SetStartingAvatarPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasStartingAvatarPrototypeId = true;
        result.startingAvatarPrototypeId_ = value;
        return this;
      }
      public Builder ClearStartingAvatarPrototypeId() {
        PrepareBuilder();
        result.hasStartingAvatarPrototypeId = false;
        result.startingAvatarPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageCreateNewPlayerWithSelectedStartingAvatar() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageOnKioskStartButtonPressed : pb::GeneratedMessage<NetMessageOnKioskStartButtonPressed, NetMessageOnKioskStartButtonPressed.Builder> {
    private NetMessageOnKioskStartButtonPressed() { }
    private static readonly NetMessageOnKioskStartButtonPressed defaultInstance = new NetMessageOnKioskStartButtonPressed().MakeReadOnly();
    private static readonly string[] _netMessageOnKioskStartButtonPressedFieldNames = new string[] {  };
    private static readonly uint[] _netMessageOnKioskStartButtonPressedFieldTags = new uint[] {  };
    public static NetMessageOnKioskStartButtonPressed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageOnKioskStartButtonPressed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageOnKioskStartButtonPressed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageOnKioskStartButtonPressed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageOnKioskStartButtonPressed, NetMessageOnKioskStartButtonPressed.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageOnKioskStartButtonPressed__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageOnKioskStartButtonPressedFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageOnKioskStartButtonPressed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnKioskStartButtonPressed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnKioskStartButtonPressed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnKioskStartButtonPressed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnKioskStartButtonPressed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnKioskStartButtonPressed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnKioskStartButtonPressed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageOnKioskStartButtonPressed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageOnKioskStartButtonPressed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnKioskStartButtonPressed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageOnKioskStartButtonPressed MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageOnKioskStartButtonPressed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageOnKioskStartButtonPressed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageOnKioskStartButtonPressed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageOnKioskStartButtonPressed result;
      
      private NetMessageOnKioskStartButtonPressed PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageOnKioskStartButtonPressed original = result;
          result = new NetMessageOnKioskStartButtonPressed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageOnKioskStartButtonPressed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageOnKioskStartButtonPressed.Descriptor; }
      }
      
      public override NetMessageOnKioskStartButtonPressed DefaultInstanceForType {
        get { return global::Gazillion.NetMessageOnKioskStartButtonPressed.DefaultInstance; }
      }
      
      public override NetMessageOnKioskStartButtonPressed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageOnKioskStartButtonPressed) {
          return MergeFrom((NetMessageOnKioskStartButtonPressed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageOnKioskStartButtonPressed other) {
        if (other == global::Gazillion.NetMessageOnKioskStartButtonPressed.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageOnKioskStartButtonPressedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageOnKioskStartButtonPressedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageOnKioskStartButtonPressed() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageNotifyFullscreenMovieFinished : pb::GeneratedMessage<NetMessageNotifyFullscreenMovieFinished, NetMessageNotifyFullscreenMovieFinished.Builder> {
    private NetMessageNotifyFullscreenMovieFinished() { }
    private static readonly NetMessageNotifyFullscreenMovieFinished defaultInstance = new NetMessageNotifyFullscreenMovieFinished().MakeReadOnly();
    private static readonly string[] _netMessageNotifyFullscreenMovieFinishedFieldNames = new string[] { "cinematicsRemaining", "moviePrototypeId", "userCancelled" };
    private static readonly uint[] _netMessageNotifyFullscreenMovieFinishedFieldTags = new uint[] { 24, 8, 16 };
    public static NetMessageNotifyFullscreenMovieFinished DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageNotifyFullscreenMovieFinished DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageNotifyFullscreenMovieFinished ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageNotifyFullscreenMovieFinished__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageNotifyFullscreenMovieFinished, NetMessageNotifyFullscreenMovieFinished.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageNotifyFullscreenMovieFinished__FieldAccessorTable; }
    }
    
    public const int MoviePrototypeIdFieldNumber = 1;
    private bool hasMoviePrototypeId;
    private ulong moviePrototypeId_;
    public bool HasMoviePrototypeId {
      get { return hasMoviePrototypeId; }
    }
    public ulong MoviePrototypeId {
      get { return moviePrototypeId_; }
    }
    
    public const int UserCancelledFieldNumber = 2;
    private bool hasUserCancelled;
    private bool userCancelled_;
    public bool HasUserCancelled {
      get { return hasUserCancelled; }
    }
    public bool UserCancelled {
      get { return userCancelled_; }
    }
    
    public const int CinematicsRemainingFieldNumber = 3;
    private bool hasCinematicsRemaining;
    private uint cinematicsRemaining_;
    public bool HasCinematicsRemaining {
      get { return hasCinematicsRemaining; }
    }
    public uint CinematicsRemaining {
      get { return cinematicsRemaining_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMoviePrototypeId) return false;
        if (!hasUserCancelled) return false;
        if (!hasCinematicsRemaining) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageNotifyFullscreenMovieFinishedFieldNames;
      if (hasMoviePrototypeId) {
        output.WriteUInt64(1, field_names[1], MoviePrototypeId);
      }
      if (hasUserCancelled) {
        output.WriteBool(2, field_names[2], UserCancelled);
      }
      if (hasCinematicsRemaining) {
        output.WriteUInt32(3, field_names[0], CinematicsRemaining);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMoviePrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MoviePrototypeId);
      }
      if (hasUserCancelled) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, UserCancelled);
      }
      if (hasCinematicsRemaining) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, CinematicsRemaining);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageNotifyFullscreenMovieFinished MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageNotifyFullscreenMovieFinished prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageNotifyFullscreenMovieFinished, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageNotifyFullscreenMovieFinished cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageNotifyFullscreenMovieFinished result;
      
      private NetMessageNotifyFullscreenMovieFinished PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageNotifyFullscreenMovieFinished original = result;
          result = new NetMessageNotifyFullscreenMovieFinished();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageNotifyFullscreenMovieFinished MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageNotifyFullscreenMovieFinished.Descriptor; }
      }
      
      public override NetMessageNotifyFullscreenMovieFinished DefaultInstanceForType {
        get { return global::Gazillion.NetMessageNotifyFullscreenMovieFinished.DefaultInstance; }
      }
      
      public override NetMessageNotifyFullscreenMovieFinished BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageNotifyFullscreenMovieFinished) {
          return MergeFrom((NetMessageNotifyFullscreenMovieFinished) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageNotifyFullscreenMovieFinished other) {
        if (other == global::Gazillion.NetMessageNotifyFullscreenMovieFinished.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMoviePrototypeId) {
          MoviePrototypeId = other.MoviePrototypeId;
        }
        if (other.HasUserCancelled) {
          UserCancelled = other.UserCancelled;
        }
        if (other.HasCinematicsRemaining) {
          CinematicsRemaining = other.CinematicsRemaining;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageNotifyFullscreenMovieFinishedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageNotifyFullscreenMovieFinishedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMoviePrototypeId = input.ReadUInt64(ref result.moviePrototypeId_);
              break;
            }
            case 16: {
              result.hasUserCancelled = input.ReadBool(ref result.userCancelled_);
              break;
            }
            case 24: {
              result.hasCinematicsRemaining = input.ReadUInt32(ref result.cinematicsRemaining_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMoviePrototypeId {
        get { return result.hasMoviePrototypeId; }
      }
      public ulong MoviePrototypeId {
        get { return result.MoviePrototypeId; }
        set { SetMoviePrototypeId(value); }
      }
      public Builder SetMoviePrototypeId(ulong value) {
        PrepareBuilder();
        result.hasMoviePrototypeId = true;
        result.moviePrototypeId_ = value;
        return this;
      }
      public Builder ClearMoviePrototypeId() {
        PrepareBuilder();
        result.hasMoviePrototypeId = false;
        result.moviePrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasUserCancelled {
        get { return result.hasUserCancelled; }
      }
      public bool UserCancelled {
        get { return result.UserCancelled; }
        set { SetUserCancelled(value); }
      }
      public Builder SetUserCancelled(bool value) {
        PrepareBuilder();
        result.hasUserCancelled = true;
        result.userCancelled_ = value;
        return this;
      }
      public Builder ClearUserCancelled() {
        PrepareBuilder();
        result.hasUserCancelled = false;
        result.userCancelled_ = false;
        return this;
      }
      
      public bool HasCinematicsRemaining {
        get { return result.hasCinematicsRemaining; }
      }
      public uint CinematicsRemaining {
        get { return result.CinematicsRemaining; }
        set { SetCinematicsRemaining(value); }
      }
      public Builder SetCinematicsRemaining(uint value) {
        PrepareBuilder();
        result.hasCinematicsRemaining = true;
        result.cinematicsRemaining_ = value;
        return this;
      }
      public Builder ClearCinematicsRemaining() {
        PrepareBuilder();
        result.hasCinematicsRemaining = false;
        result.cinematicsRemaining_ = 0;
        return this;
      }
    }
    static NetMessageNotifyFullscreenMovieFinished() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBotSetLevel : pb::GeneratedMessage<NetMessageBotSetLevel, NetMessageBotSetLevel.Builder> {
    private NetMessageBotSetLevel() { }
    private static readonly NetMessageBotSetLevel defaultInstance = new NetMessageBotSetLevel().MakeReadOnly();
    private static readonly string[] _netMessageBotSetLevelFieldNames = new string[] { "level" };
    private static readonly uint[] _netMessageBotSetLevelFieldTags = new uint[] { 8 };
    public static NetMessageBotSetLevel DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBotSetLevel DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBotSetLevel ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotSetLevel__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBotSetLevel, NetMessageBotSetLevel.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotSetLevel__FieldAccessorTable; }
    }
    
    public const int LevelFieldNumber = 1;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLevel) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBotSetLevelFieldNames;
      if (hasLevel) {
        output.WriteInt32(1, field_names[0], Level);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLevel) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Level);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBotSetLevel ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotSetLevel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotSetLevel ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotSetLevel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotSetLevel ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotSetLevel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotSetLevel ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBotSetLevel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBotSetLevel ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotSetLevel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBotSetLevel MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBotSetLevel prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBotSetLevel, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBotSetLevel cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBotSetLevel result;
      
      private NetMessageBotSetLevel PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBotSetLevel original = result;
          result = new NetMessageBotSetLevel();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBotSetLevel MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBotSetLevel.Descriptor; }
      }
      
      public override NetMessageBotSetLevel DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBotSetLevel.DefaultInstance; }
      }
      
      public override NetMessageBotSetLevel BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBotSetLevel) {
          return MergeFrom((NetMessageBotSetLevel) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBotSetLevel other) {
        if (other == global::Gazillion.NetMessageBotSetLevel.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLevel) {
          Level = other.Level;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBotSetLevelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBotSetLevelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
    }
    static NetMessageBotSetLevel() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBotGodMode : pb::GeneratedMessage<NetMessageBotGodMode, NetMessageBotGodMode.Builder> {
    private NetMessageBotGodMode() { }
    private static readonly NetMessageBotGodMode defaultInstance = new NetMessageBotGodMode().MakeReadOnly();
    private static readonly string[] _netMessageBotGodModeFieldNames = new string[] {  };
    private static readonly uint[] _netMessageBotGodModeFieldTags = new uint[] {  };
    public static NetMessageBotGodMode DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBotGodMode DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBotGodMode ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotGodMode__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBotGodMode, NetMessageBotGodMode.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotGodMode__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBotGodModeFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBotGodMode ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotGodMode ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotGodMode ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotGodMode ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotGodMode ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotGodMode ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotGodMode ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBotGodMode ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBotGodMode ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotGodMode ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBotGodMode MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBotGodMode prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBotGodMode, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBotGodMode cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBotGodMode result;
      
      private NetMessageBotGodMode PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBotGodMode original = result;
          result = new NetMessageBotGodMode();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBotGodMode MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBotGodMode.Descriptor; }
      }
      
      public override NetMessageBotGodMode DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBotGodMode.DefaultInstance; }
      }
      
      public override NetMessageBotGodMode BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBotGodMode) {
          return MergeFrom((NetMessageBotGodMode) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBotGodMode other) {
        if (other == global::Gazillion.NetMessageBotGodMode.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBotGodModeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBotGodModeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageBotGodMode() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBotPickAvatar : pb::GeneratedMessage<NetMessageBotPickAvatar, NetMessageBotPickAvatar.Builder> {
    private NetMessageBotPickAvatar() { }
    private static readonly NetMessageBotPickAvatar defaultInstance = new NetMessageBotPickAvatar().MakeReadOnly();
    private static readonly string[] _netMessageBotPickAvatarFieldNames = new string[] { "avatarBotDataId", "level", "lootPrototype", "lootTableRoll" };
    private static readonly uint[] _netMessageBotPickAvatarFieldTags = new uint[] { 8, 16, 24, 32 };
    public static NetMessageBotPickAvatar DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBotPickAvatar DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBotPickAvatar ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotPickAvatar__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBotPickAvatar, NetMessageBotPickAvatar.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotPickAvatar__FieldAccessorTable; }
    }
    
    public const int AvatarBotDataIdFieldNumber = 1;
    private bool hasAvatarBotDataId;
    private ulong avatarBotDataId_;
    public bool HasAvatarBotDataId {
      get { return hasAvatarBotDataId; }
    }
    public ulong AvatarBotDataId {
      get { return avatarBotDataId_; }
    }
    
    public const int LevelFieldNumber = 2;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int LootPrototypeFieldNumber = 3;
    private bool hasLootPrototype;
    private ulong lootPrototype_;
    public bool HasLootPrototype {
      get { return hasLootPrototype; }
    }
    public ulong LootPrototype {
      get { return lootPrototype_; }
    }
    
    public const int LootTableRollFieldNumber = 4;
    private bool hasLootTableRoll;
    private uint lootTableRoll_;
    public bool HasLootTableRoll {
      get { return hasLootTableRoll; }
    }
    public uint LootTableRoll {
      get { return lootTableRoll_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarBotDataId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBotPickAvatarFieldNames;
      if (hasAvatarBotDataId) {
        output.WriteUInt64(1, field_names[0], AvatarBotDataId);
      }
      if (hasLevel) {
        output.WriteInt32(2, field_names[1], Level);
      }
      if (hasLootPrototype) {
        output.WriteUInt64(3, field_names[2], LootPrototype);
      }
      if (hasLootTableRoll) {
        output.WriteUInt32(4, field_names[3], LootTableRoll);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarBotDataId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarBotDataId);
      }
      if (hasLevel) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Level);
      }
      if (hasLootPrototype) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, LootPrototype);
      }
      if (hasLootTableRoll) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, LootTableRoll);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBotPickAvatar ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotPickAvatar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotPickAvatar ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotPickAvatar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotPickAvatar ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotPickAvatar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotPickAvatar ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBotPickAvatar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBotPickAvatar ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotPickAvatar ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBotPickAvatar MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBotPickAvatar prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBotPickAvatar, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBotPickAvatar cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBotPickAvatar result;
      
      private NetMessageBotPickAvatar PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBotPickAvatar original = result;
          result = new NetMessageBotPickAvatar();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBotPickAvatar MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBotPickAvatar.Descriptor; }
      }
      
      public override NetMessageBotPickAvatar DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBotPickAvatar.DefaultInstance; }
      }
      
      public override NetMessageBotPickAvatar BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBotPickAvatar) {
          return MergeFrom((NetMessageBotPickAvatar) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBotPickAvatar other) {
        if (other == global::Gazillion.NetMessageBotPickAvatar.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarBotDataId) {
          AvatarBotDataId = other.AvatarBotDataId;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasLootPrototype) {
          LootPrototype = other.LootPrototype;
        }
        if (other.HasLootTableRoll) {
          LootTableRoll = other.LootTableRoll;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBotPickAvatarFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBotPickAvatarFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarBotDataId = input.ReadUInt64(ref result.avatarBotDataId_);
              break;
            }
            case 16: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 24: {
              result.hasLootPrototype = input.ReadUInt64(ref result.lootPrototype_);
              break;
            }
            case 32: {
              result.hasLootTableRoll = input.ReadUInt32(ref result.lootTableRoll_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarBotDataId {
        get { return result.hasAvatarBotDataId; }
      }
      public ulong AvatarBotDataId {
        get { return result.AvatarBotDataId; }
        set { SetAvatarBotDataId(value); }
      }
      public Builder SetAvatarBotDataId(ulong value) {
        PrepareBuilder();
        result.hasAvatarBotDataId = true;
        result.avatarBotDataId_ = value;
        return this;
      }
      public Builder ClearAvatarBotDataId() {
        PrepareBuilder();
        result.hasAvatarBotDataId = false;
        result.avatarBotDataId_ = 0UL;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasLootPrototype {
        get { return result.hasLootPrototype; }
      }
      public ulong LootPrototype {
        get { return result.LootPrototype; }
        set { SetLootPrototype(value); }
      }
      public Builder SetLootPrototype(ulong value) {
        PrepareBuilder();
        result.hasLootPrototype = true;
        result.lootPrototype_ = value;
        return this;
      }
      public Builder ClearLootPrototype() {
        PrepareBuilder();
        result.hasLootPrototype = false;
        result.lootPrototype_ = 0UL;
        return this;
      }
      
      public bool HasLootTableRoll {
        get { return result.hasLootTableRoll; }
      }
      public uint LootTableRoll {
        get { return result.LootTableRoll; }
        set { SetLootTableRoll(value); }
      }
      public Builder SetLootTableRoll(uint value) {
        PrepareBuilder();
        result.hasLootTableRoll = true;
        result.lootTableRoll_ = value;
        return this;
      }
      public Builder ClearLootTableRoll() {
        PrepareBuilder();
        result.hasLootTableRoll = false;
        result.lootTableRoll_ = 0;
        return this;
      }
    }
    static NetMessageBotPickAvatar() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBotRegionChange : pb::GeneratedMessage<NetMessageBotRegionChange, NetMessageBotRegionChange.Builder> {
    private NetMessageBotRegionChange() { }
    private static readonly NetMessageBotRegionChange defaultInstance = new NetMessageBotRegionChange().MakeReadOnly();
    private static readonly string[] _netMessageBotRegionChangeFieldNames = new string[] { "regionDataId" };
    private static readonly uint[] _netMessageBotRegionChangeFieldTags = new uint[] { 8 };
    public static NetMessageBotRegionChange DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBotRegionChange DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBotRegionChange ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotRegionChange__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBotRegionChange, NetMessageBotRegionChange.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotRegionChange__FieldAccessorTable; }
    }
    
    public const int RegionDataIdFieldNumber = 1;
    private bool hasRegionDataId;
    private ulong regionDataId_;
    public bool HasRegionDataId {
      get { return hasRegionDataId; }
    }
    public ulong RegionDataId {
      get { return regionDataId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRegionDataId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBotRegionChangeFieldNames;
      if (hasRegionDataId) {
        output.WriteUInt64(1, field_names[0], RegionDataId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRegionDataId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, RegionDataId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBotRegionChange ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotRegionChange ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotRegionChange ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotRegionChange ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotRegionChange ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotRegionChange ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotRegionChange ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBotRegionChange ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBotRegionChange ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotRegionChange ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBotRegionChange MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBotRegionChange prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBotRegionChange, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBotRegionChange cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBotRegionChange result;
      
      private NetMessageBotRegionChange PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBotRegionChange original = result;
          result = new NetMessageBotRegionChange();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBotRegionChange MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBotRegionChange.Descriptor; }
      }
      
      public override NetMessageBotRegionChange DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBotRegionChange.DefaultInstance; }
      }
      
      public override NetMessageBotRegionChange BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBotRegionChange) {
          return MergeFrom((NetMessageBotRegionChange) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBotRegionChange other) {
        if (other == global::Gazillion.NetMessageBotRegionChange.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRegionDataId) {
          RegionDataId = other.RegionDataId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBotRegionChangeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBotRegionChangeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRegionDataId = input.ReadUInt64(ref result.regionDataId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRegionDataId {
        get { return result.hasRegionDataId; }
      }
      public ulong RegionDataId {
        get { return result.RegionDataId; }
        set { SetRegionDataId(value); }
      }
      public Builder SetRegionDataId(ulong value) {
        PrepareBuilder();
        result.hasRegionDataId = true;
        result.regionDataId_ = value;
        return this;
      }
      public Builder ClearRegionDataId() {
        PrepareBuilder();
        result.hasRegionDataId = false;
        result.regionDataId_ = 0UL;
        return this;
      }
    }
    static NetMessageBotRegionChange() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBotWarpAreaNext : pb::GeneratedMessage<NetMessageBotWarpAreaNext, NetMessageBotWarpAreaNext.Builder> {
    private NetMessageBotWarpAreaNext() { }
    private static readonly NetMessageBotWarpAreaNext defaultInstance = new NetMessageBotWarpAreaNext().MakeReadOnly();
    private static readonly string[] _netMessageBotWarpAreaNextFieldNames = new string[] {  };
    private static readonly uint[] _netMessageBotWarpAreaNextFieldTags = new uint[] {  };
    public static NetMessageBotWarpAreaNext DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBotWarpAreaNext DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBotWarpAreaNext ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotWarpAreaNext__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBotWarpAreaNext, NetMessageBotWarpAreaNext.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotWarpAreaNext__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBotWarpAreaNextFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBotWarpAreaNext ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotWarpAreaNext ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotWarpAreaNext ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotWarpAreaNext ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotWarpAreaNext ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotWarpAreaNext ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotWarpAreaNext ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBotWarpAreaNext ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBotWarpAreaNext ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotWarpAreaNext ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBotWarpAreaNext MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBotWarpAreaNext prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBotWarpAreaNext, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBotWarpAreaNext cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBotWarpAreaNext result;
      
      private NetMessageBotWarpAreaNext PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBotWarpAreaNext original = result;
          result = new NetMessageBotWarpAreaNext();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBotWarpAreaNext MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBotWarpAreaNext.Descriptor; }
      }
      
      public override NetMessageBotWarpAreaNext DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBotWarpAreaNext.DefaultInstance; }
      }
      
      public override NetMessageBotWarpAreaNext BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBotWarpAreaNext) {
          return MergeFrom((NetMessageBotWarpAreaNext) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBotWarpAreaNext other) {
        if (other == global::Gazillion.NetMessageBotWarpAreaNext.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBotWarpAreaNextFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBotWarpAreaNextFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageBotWarpAreaNext() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBotLootGive : pb::GeneratedMessage<NetMessageBotLootGive, NetMessageBotLootGive.Builder> {
    private NetMessageBotLootGive() { }
    private static readonly NetMessageBotLootGive defaultInstance = new NetMessageBotLootGive().MakeReadOnly();
    private static readonly string[] _netMessageBotLootGiveFieldNames = new string[] { "lootPrototype", "lootTableRoll" };
    private static readonly uint[] _netMessageBotLootGiveFieldTags = new uint[] { 8, 16 };
    public static NetMessageBotLootGive DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBotLootGive DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBotLootGive ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotLootGive__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBotLootGive, NetMessageBotLootGive.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotLootGive__FieldAccessorTable; }
    }
    
    public const int LootPrototypeFieldNumber = 1;
    private bool hasLootPrototype;
    private ulong lootPrototype_;
    public bool HasLootPrototype {
      get { return hasLootPrototype; }
    }
    public ulong LootPrototype {
      get { return lootPrototype_; }
    }
    
    public const int LootTableRollFieldNumber = 2;
    private bool hasLootTableRoll;
    private uint lootTableRoll_;
    public bool HasLootTableRoll {
      get { return hasLootTableRoll; }
    }
    public uint LootTableRoll {
      get { return lootTableRoll_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLootPrototype) return false;
        if (!hasLootTableRoll) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBotLootGiveFieldNames;
      if (hasLootPrototype) {
        output.WriteUInt64(1, field_names[0], LootPrototype);
      }
      if (hasLootTableRoll) {
        output.WriteUInt32(2, field_names[1], LootTableRoll);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLootPrototype) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, LootPrototype);
      }
      if (hasLootTableRoll) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, LootTableRoll);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBotLootGive ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotLootGive ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotLootGive ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotLootGive ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotLootGive ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotLootGive ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotLootGive ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBotLootGive ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBotLootGive ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotLootGive ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBotLootGive MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBotLootGive prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBotLootGive, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBotLootGive cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBotLootGive result;
      
      private NetMessageBotLootGive PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBotLootGive original = result;
          result = new NetMessageBotLootGive();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBotLootGive MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBotLootGive.Descriptor; }
      }
      
      public override NetMessageBotLootGive DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBotLootGive.DefaultInstance; }
      }
      
      public override NetMessageBotLootGive BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBotLootGive) {
          return MergeFrom((NetMessageBotLootGive) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBotLootGive other) {
        if (other == global::Gazillion.NetMessageBotLootGive.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLootPrototype) {
          LootPrototype = other.LootPrototype;
        }
        if (other.HasLootTableRoll) {
          LootTableRoll = other.LootTableRoll;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBotLootGiveFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBotLootGiveFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLootPrototype = input.ReadUInt64(ref result.lootPrototype_);
              break;
            }
            case 16: {
              result.hasLootTableRoll = input.ReadUInt32(ref result.lootTableRoll_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLootPrototype {
        get { return result.hasLootPrototype; }
      }
      public ulong LootPrototype {
        get { return result.LootPrototype; }
        set { SetLootPrototype(value); }
      }
      public Builder SetLootPrototype(ulong value) {
        PrepareBuilder();
        result.hasLootPrototype = true;
        result.lootPrototype_ = value;
        return this;
      }
      public Builder ClearLootPrototype() {
        PrepareBuilder();
        result.hasLootPrototype = false;
        result.lootPrototype_ = 0UL;
        return this;
      }
      
      public bool HasLootTableRoll {
        get { return result.hasLootTableRoll; }
      }
      public uint LootTableRoll {
        get { return result.LootTableRoll; }
        set { SetLootTableRoll(value); }
      }
      public Builder SetLootTableRoll(uint value) {
        PrepareBuilder();
        result.hasLootTableRoll = true;
        result.lootTableRoll_ = value;
        return this;
      }
      public Builder ClearLootTableRoll() {
        PrepareBuilder();
        result.hasLootTableRoll = false;
        result.lootTableRoll_ = 0;
        return this;
      }
    }
    static NetMessageBotLootGive() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBotSetPvPFaction : pb::GeneratedMessage<NetMessageBotSetPvPFaction, NetMessageBotSetPvPFaction.Builder> {
    private NetMessageBotSetPvPFaction() { }
    private static readonly NetMessageBotSetPvPFaction defaultInstance = new NetMessageBotSetPvPFaction().MakeReadOnly();
    private static readonly string[] _netMessageBotSetPvPFactionFieldNames = new string[] { "factionSetPrototype" };
    private static readonly uint[] _netMessageBotSetPvPFactionFieldTags = new uint[] { 8 };
    public static NetMessageBotSetPvPFaction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBotSetPvPFaction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBotSetPvPFaction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotSetPvPFaction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBotSetPvPFaction, NetMessageBotSetPvPFaction.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotSetPvPFaction__FieldAccessorTable; }
    }
    
    public const int FactionSetPrototypeFieldNumber = 1;
    private bool hasFactionSetPrototype;
    private ulong factionSetPrototype_;
    public bool HasFactionSetPrototype {
      get { return hasFactionSetPrototype; }
    }
    public ulong FactionSetPrototype {
      get { return factionSetPrototype_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFactionSetPrototype) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBotSetPvPFactionFieldNames;
      if (hasFactionSetPrototype) {
        output.WriteUInt64(1, field_names[0], FactionSetPrototype);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasFactionSetPrototype) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, FactionSetPrototype);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBotSetPvPFaction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotSetPvPFaction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotSetPvPFaction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotSetPvPFaction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotSetPvPFaction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotSetPvPFaction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotSetPvPFaction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBotSetPvPFaction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBotSetPvPFaction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotSetPvPFaction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBotSetPvPFaction MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBotSetPvPFaction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBotSetPvPFaction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBotSetPvPFaction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBotSetPvPFaction result;
      
      private NetMessageBotSetPvPFaction PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBotSetPvPFaction original = result;
          result = new NetMessageBotSetPvPFaction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBotSetPvPFaction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBotSetPvPFaction.Descriptor; }
      }
      
      public override NetMessageBotSetPvPFaction DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBotSetPvPFaction.DefaultInstance; }
      }
      
      public override NetMessageBotSetPvPFaction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBotSetPvPFaction) {
          return MergeFrom((NetMessageBotSetPvPFaction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBotSetPvPFaction other) {
        if (other == global::Gazillion.NetMessageBotSetPvPFaction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFactionSetPrototype) {
          FactionSetPrototype = other.FactionSetPrototype;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBotSetPvPFactionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBotSetPvPFactionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasFactionSetPrototype = input.ReadUInt64(ref result.factionSetPrototype_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFactionSetPrototype {
        get { return result.hasFactionSetPrototype; }
      }
      public ulong FactionSetPrototype {
        get { return result.FactionSetPrototype; }
        set { SetFactionSetPrototype(value); }
      }
      public Builder SetFactionSetPrototype(ulong value) {
        PrepareBuilder();
        result.hasFactionSetPrototype = true;
        result.factionSetPrototype_ = value;
        return this;
      }
      public Builder ClearFactionSetPrototype() {
        PrepareBuilder();
        result.hasFactionSetPrototype = false;
        result.factionSetPrototype_ = 0UL;
        return this;
      }
    }
    static NetMessageBotSetPvPFaction() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBotPvPQueue : pb::GeneratedMessage<NetMessageBotPvPQueue, NetMessageBotPvPQueue.Builder> {
    private NetMessageBotPvPQueue() { }
    private static readonly NetMessageBotPvPQueue defaultInstance = new NetMessageBotPvPQueue().MakeReadOnly();
    private static readonly string[] _netMessageBotPvPQueueFieldNames = new string[] { "pvpQueueId" };
    private static readonly uint[] _netMessageBotPvPQueueFieldTags = new uint[] { 8 };
    public static NetMessageBotPvPQueue DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBotPvPQueue DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBotPvPQueue ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotPvPQueue__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBotPvPQueue, NetMessageBotPvPQueue.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotPvPQueue__FieldAccessorTable; }
    }
    
    public const int PvpQueueIdFieldNumber = 1;
    private bool hasPvpQueueId;
    private ulong pvpQueueId_;
    public bool HasPvpQueueId {
      get { return hasPvpQueueId; }
    }
    public ulong PvpQueueId {
      get { return pvpQueueId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPvpQueueId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBotPvPQueueFieldNames;
      if (hasPvpQueueId) {
        output.WriteUInt64(1, field_names[0], PvpQueueId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPvpQueueId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PvpQueueId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBotPvPQueue ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotPvPQueue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotPvPQueue ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotPvPQueue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotPvPQueue ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotPvPQueue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotPvPQueue ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBotPvPQueue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBotPvPQueue ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotPvPQueue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBotPvPQueue MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBotPvPQueue prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBotPvPQueue, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBotPvPQueue cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBotPvPQueue result;
      
      private NetMessageBotPvPQueue PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBotPvPQueue original = result;
          result = new NetMessageBotPvPQueue();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBotPvPQueue MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBotPvPQueue.Descriptor; }
      }
      
      public override NetMessageBotPvPQueue DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBotPvPQueue.DefaultInstance; }
      }
      
      public override NetMessageBotPvPQueue BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBotPvPQueue) {
          return MergeFrom((NetMessageBotPvPQueue) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBotPvPQueue other) {
        if (other == global::Gazillion.NetMessageBotPvPQueue.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPvpQueueId) {
          PvpQueueId = other.PvpQueueId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBotPvPQueueFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBotPvPQueueFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPvpQueueId = input.ReadUInt64(ref result.pvpQueueId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPvpQueueId {
        get { return result.hasPvpQueueId; }
      }
      public ulong PvpQueueId {
        get { return result.PvpQueueId; }
        set { SetPvpQueueId(value); }
      }
      public Builder SetPvpQueueId(ulong value) {
        PrepareBuilder();
        result.hasPvpQueueId = true;
        result.pvpQueueId_ = value;
        return this;
      }
      public Builder ClearPvpQueueId() {
        PrepareBuilder();
        result.hasPvpQueueId = false;
        result.pvpQueueId_ = 0UL;
        return this;
      }
    }
    static NetMessageBotPvPQueue() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGetTrackerReport : pb::GeneratedMessage<NetMessageGetTrackerReport, NetMessageGetTrackerReport.Builder> {
    private NetMessageGetTrackerReport() { }
    private static readonly NetMessageGetTrackerReport defaultInstance = new NetMessageGetTrackerReport().MakeReadOnly();
    private static readonly string[] _netMessageGetTrackerReportFieldNames = new string[] { "messageDirection", "messageSource" };
    private static readonly uint[] _netMessageGetTrackerReportFieldTags = new uint[] { 16, 8 };
    public static NetMessageGetTrackerReport DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGetTrackerReport DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGetTrackerReport ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGetTrackerReport__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGetTrackerReport, NetMessageGetTrackerReport.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGetTrackerReport__FieldAccessorTable; }
    }
    
    public const int MessageSourceFieldNumber = 1;
    private bool hasMessageSource;
    private uint messageSource_;
    public bool HasMessageSource {
      get { return hasMessageSource; }
    }
    public uint MessageSource {
      get { return messageSource_; }
    }
    
    public const int MessageDirectionFieldNumber = 2;
    private bool hasMessageDirection;
    private uint messageDirection_;
    public bool HasMessageDirection {
      get { return hasMessageDirection; }
    }
    public uint MessageDirection {
      get { return messageDirection_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageSource) return false;
        if (!hasMessageDirection) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGetTrackerReportFieldNames;
      if (hasMessageSource) {
        output.WriteUInt32(1, field_names[1], MessageSource);
      }
      if (hasMessageDirection) {
        output.WriteUInt32(2, field_names[0], MessageDirection);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMessageSource) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, MessageSource);
      }
      if (hasMessageDirection) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, MessageDirection);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGetTrackerReport ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGetTrackerReport ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetTrackerReport ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGetTrackerReport ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetTrackerReport ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGetTrackerReport ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetTrackerReport ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGetTrackerReport ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGetTrackerReport ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGetTrackerReport ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGetTrackerReport MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGetTrackerReport prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGetTrackerReport, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGetTrackerReport cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGetTrackerReport result;
      
      private NetMessageGetTrackerReport PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGetTrackerReport original = result;
          result = new NetMessageGetTrackerReport();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGetTrackerReport MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGetTrackerReport.Descriptor; }
      }
      
      public override NetMessageGetTrackerReport DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGetTrackerReport.DefaultInstance; }
      }
      
      public override NetMessageGetTrackerReport BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGetTrackerReport) {
          return MergeFrom((NetMessageGetTrackerReport) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGetTrackerReport other) {
        if (other == global::Gazillion.NetMessageGetTrackerReport.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageSource) {
          MessageSource = other.MessageSource;
        }
        if (other.HasMessageDirection) {
          MessageDirection = other.MessageDirection;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGetTrackerReportFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGetTrackerReportFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMessageSource = input.ReadUInt32(ref result.messageSource_);
              break;
            }
            case 16: {
              result.hasMessageDirection = input.ReadUInt32(ref result.messageDirection_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageSource {
        get { return result.hasMessageSource; }
      }
      public uint MessageSource {
        get { return result.MessageSource; }
        set { SetMessageSource(value); }
      }
      public Builder SetMessageSource(uint value) {
        PrepareBuilder();
        result.hasMessageSource = true;
        result.messageSource_ = value;
        return this;
      }
      public Builder ClearMessageSource() {
        PrepareBuilder();
        result.hasMessageSource = false;
        result.messageSource_ = 0;
        return this;
      }
      
      public bool HasMessageDirection {
        get { return result.hasMessageDirection; }
      }
      public uint MessageDirection {
        get { return result.MessageDirection; }
        set { SetMessageDirection(value); }
      }
      public Builder SetMessageDirection(uint value) {
        PrepareBuilder();
        result.hasMessageDirection = true;
        result.messageDirection_ = value;
        return this;
      }
      public Builder ClearMessageDirection() {
        PrepareBuilder();
        result.hasMessageDirection = false;
        result.messageDirection_ = 0;
        return this;
      }
    }
    static NetMessageGetTrackerReport() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePlayKismetSeqDone : pb::GeneratedMessage<NetMessagePlayKismetSeqDone, NetMessagePlayKismetSeqDone.Builder> {
    private NetMessagePlayKismetSeqDone() { }
    private static readonly NetMessagePlayKismetSeqDone defaultInstance = new NetMessagePlayKismetSeqDone().MakeReadOnly();
    private static readonly string[] _netMessagePlayKismetSeqDoneFieldNames = new string[] { "kismetSeqPrototypeId" };
    private static readonly uint[] _netMessagePlayKismetSeqDoneFieldTags = new uint[] { 8 };
    public static NetMessagePlayKismetSeqDone DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePlayKismetSeqDone DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePlayKismetSeqDone ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePlayKismetSeqDone__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePlayKismetSeqDone, NetMessagePlayKismetSeqDone.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePlayKismetSeqDone__FieldAccessorTable; }
    }
    
    public const int KismetSeqPrototypeIdFieldNumber = 1;
    private bool hasKismetSeqPrototypeId;
    private ulong kismetSeqPrototypeId_;
    public bool HasKismetSeqPrototypeId {
      get { return hasKismetSeqPrototypeId; }
    }
    public ulong KismetSeqPrototypeId {
      get { return kismetSeqPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKismetSeqPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePlayKismetSeqDoneFieldNames;
      if (hasKismetSeqPrototypeId) {
        output.WriteUInt64(1, field_names[0], KismetSeqPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasKismetSeqPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, KismetSeqPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePlayKismetSeqDone ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayKismetSeqDone ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayKismetSeqDone ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayKismetSeqDone ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayKismetSeqDone ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayKismetSeqDone ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayKismetSeqDone ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePlayKismetSeqDone ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePlayKismetSeqDone ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayKismetSeqDone ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePlayKismetSeqDone MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePlayKismetSeqDone prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePlayKismetSeqDone, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePlayKismetSeqDone cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePlayKismetSeqDone result;
      
      private NetMessagePlayKismetSeqDone PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePlayKismetSeqDone original = result;
          result = new NetMessagePlayKismetSeqDone();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePlayKismetSeqDone MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePlayKismetSeqDone.Descriptor; }
      }
      
      public override NetMessagePlayKismetSeqDone DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePlayKismetSeqDone.DefaultInstance; }
      }
      
      public override NetMessagePlayKismetSeqDone BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePlayKismetSeqDone) {
          return MergeFrom((NetMessagePlayKismetSeqDone) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePlayKismetSeqDone other) {
        if (other == global::Gazillion.NetMessagePlayKismetSeqDone.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKismetSeqPrototypeId) {
          KismetSeqPrototypeId = other.KismetSeqPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePlayKismetSeqDoneFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePlayKismetSeqDoneFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasKismetSeqPrototypeId = input.ReadUInt64(ref result.kismetSeqPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKismetSeqPrototypeId {
        get { return result.hasKismetSeqPrototypeId; }
      }
      public ulong KismetSeqPrototypeId {
        get { return result.KismetSeqPrototypeId; }
        set { SetKismetSeqPrototypeId(value); }
      }
      public Builder SetKismetSeqPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasKismetSeqPrototypeId = true;
        result.kismetSeqPrototypeId_ = value;
        return this;
      }
      public Builder ClearKismetSeqPrototypeId() {
        PrepareBuilder();
        result.hasKismetSeqPrototypeId = false;
        result.kismetSeqPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessagePlayKismetSeqDone() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageVerifyFailedForRepId : pb::GeneratedMessage<NetMessageVerifyFailedForRepId, NetMessageVerifyFailedForRepId.Builder> {
    private NetMessageVerifyFailedForRepId() { }
    private static readonly NetMessageVerifyFailedForRepId defaultInstance = new NetMessageVerifyFailedForRepId().MakeReadOnly();
    private static readonly string[] _netMessageVerifyFailedForRepIdFieldNames = new string[] { "debugmsg", "file", "line", "repid1", "repid2" };
    private static readonly uint[] _netMessageVerifyFailedForRepIdFieldTags = new uint[] { 34, 18, 24, 8, 40 };
    public static NetMessageVerifyFailedForRepId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageVerifyFailedForRepId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageVerifyFailedForRepId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVerifyFailedForRepId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageVerifyFailedForRepId, NetMessageVerifyFailedForRepId.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVerifyFailedForRepId__FieldAccessorTable; }
    }
    
    public const int Repid1FieldNumber = 1;
    private bool hasRepid1;
    private ulong repid1_;
    public bool HasRepid1 {
      get { return hasRepid1; }
    }
    public ulong Repid1 {
      get { return repid1_; }
    }
    
    public const int FileFieldNumber = 2;
    private bool hasFile;
    private string file_ = "";
    public bool HasFile {
      get { return hasFile; }
    }
    public string File {
      get { return file_; }
    }
    
    public const int LineFieldNumber = 3;
    private bool hasLine;
    private uint line_;
    public bool HasLine {
      get { return hasLine; }
    }
    public uint Line {
      get { return line_; }
    }
    
    public const int DebugmsgFieldNumber = 4;
    private bool hasDebugmsg;
    private string debugmsg_ = "";
    public bool HasDebugmsg {
      get { return hasDebugmsg; }
    }
    public string Debugmsg {
      get { return debugmsg_; }
    }
    
    public const int Repid2FieldNumber = 5;
    private bool hasRepid2;
    private ulong repid2_;
    public bool HasRepid2 {
      get { return hasRepid2; }
    }
    public ulong Repid2 {
      get { return repid2_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRepid1) return false;
        if (!hasFile) return false;
        if (!hasLine) return false;
        if (!hasDebugmsg) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageVerifyFailedForRepIdFieldNames;
      if (hasRepid1) {
        output.WriteUInt64(1, field_names[3], Repid1);
      }
      if (hasFile) {
        output.WriteString(2, field_names[1], File);
      }
      if (hasLine) {
        output.WriteUInt32(3, field_names[2], Line);
      }
      if (hasDebugmsg) {
        output.WriteString(4, field_names[0], Debugmsg);
      }
      if (hasRepid2) {
        output.WriteUInt64(5, field_names[4], Repid2);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRepid1) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Repid1);
      }
      if (hasFile) {
        size += pb::CodedOutputStream.ComputeStringSize(2, File);
      }
      if (hasLine) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Line);
      }
      if (hasDebugmsg) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Debugmsg);
      }
      if (hasRepid2) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, Repid2);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageVerifyFailedForRepId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVerifyFailedForRepId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVerifyFailedForRepId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVerifyFailedForRepId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVerifyFailedForRepId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVerifyFailedForRepId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVerifyFailedForRepId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageVerifyFailedForRepId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageVerifyFailedForRepId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVerifyFailedForRepId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageVerifyFailedForRepId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageVerifyFailedForRepId prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageVerifyFailedForRepId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageVerifyFailedForRepId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageVerifyFailedForRepId result;
      
      private NetMessageVerifyFailedForRepId PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageVerifyFailedForRepId original = result;
          result = new NetMessageVerifyFailedForRepId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageVerifyFailedForRepId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageVerifyFailedForRepId.Descriptor; }
      }
      
      public override NetMessageVerifyFailedForRepId DefaultInstanceForType {
        get { return global::Gazillion.NetMessageVerifyFailedForRepId.DefaultInstance; }
      }
      
      public override NetMessageVerifyFailedForRepId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageVerifyFailedForRepId) {
          return MergeFrom((NetMessageVerifyFailedForRepId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageVerifyFailedForRepId other) {
        if (other == global::Gazillion.NetMessageVerifyFailedForRepId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRepid1) {
          Repid1 = other.Repid1;
        }
        if (other.HasFile) {
          File = other.File;
        }
        if (other.HasLine) {
          Line = other.Line;
        }
        if (other.HasDebugmsg) {
          Debugmsg = other.Debugmsg;
        }
        if (other.HasRepid2) {
          Repid2 = other.Repid2;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageVerifyFailedForRepIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageVerifyFailedForRepIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRepid1 = input.ReadUInt64(ref result.repid1_);
              break;
            }
            case 18: {
              result.hasFile = input.ReadString(ref result.file_);
              break;
            }
            case 24: {
              result.hasLine = input.ReadUInt32(ref result.line_);
              break;
            }
            case 34: {
              result.hasDebugmsg = input.ReadString(ref result.debugmsg_);
              break;
            }
            case 40: {
              result.hasRepid2 = input.ReadUInt64(ref result.repid2_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRepid1 {
        get { return result.hasRepid1; }
      }
      public ulong Repid1 {
        get { return result.Repid1; }
        set { SetRepid1(value); }
      }
      public Builder SetRepid1(ulong value) {
        PrepareBuilder();
        result.hasRepid1 = true;
        result.repid1_ = value;
        return this;
      }
      public Builder ClearRepid1() {
        PrepareBuilder();
        result.hasRepid1 = false;
        result.repid1_ = 0UL;
        return this;
      }
      
      public bool HasFile {
        get { return result.hasFile; }
      }
      public string File {
        get { return result.File; }
        set { SetFile(value); }
      }
      public Builder SetFile(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFile = true;
        result.file_ = value;
        return this;
      }
      public Builder ClearFile() {
        PrepareBuilder();
        result.hasFile = false;
        result.file_ = "";
        return this;
      }
      
      public bool HasLine {
        get { return result.hasLine; }
      }
      public uint Line {
        get { return result.Line; }
        set { SetLine(value); }
      }
      public Builder SetLine(uint value) {
        PrepareBuilder();
        result.hasLine = true;
        result.line_ = value;
        return this;
      }
      public Builder ClearLine() {
        PrepareBuilder();
        result.hasLine = false;
        result.line_ = 0;
        return this;
      }
      
      public bool HasDebugmsg {
        get { return result.hasDebugmsg; }
      }
      public string Debugmsg {
        get { return result.Debugmsg; }
        set { SetDebugmsg(value); }
      }
      public Builder SetDebugmsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDebugmsg = true;
        result.debugmsg_ = value;
        return this;
      }
      public Builder ClearDebugmsg() {
        PrepareBuilder();
        result.hasDebugmsg = false;
        result.debugmsg_ = "";
        return this;
      }
      
      public bool HasRepid2 {
        get { return result.hasRepid2; }
      }
      public ulong Repid2 {
        get { return result.Repid2; }
        set { SetRepid2(value); }
      }
      public Builder SetRepid2(ulong value) {
        PrepareBuilder();
        result.hasRepid2 = true;
        result.repid2_ = value;
        return this;
      }
      public Builder ClearRepid2() {
        PrepareBuilder();
        result.hasRepid2 = false;
        result.repid2_ = 0UL;
        return this;
      }
    }
    static NetMessageVerifyFailedForRepId() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGracefulDisconnect : pb::GeneratedMessage<NetMessageGracefulDisconnect, NetMessageGracefulDisconnect.Builder> {
    private NetMessageGracefulDisconnect() { }
    private static readonly NetMessageGracefulDisconnect defaultInstance = new NetMessageGracefulDisconnect().MakeReadOnly();
    private static readonly string[] _netMessageGracefulDisconnectFieldNames = new string[] {  };
    private static readonly uint[] _netMessageGracefulDisconnectFieldTags = new uint[] {  };
    public static NetMessageGracefulDisconnect DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGracefulDisconnect DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGracefulDisconnect ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGracefulDisconnect__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGracefulDisconnect, NetMessageGracefulDisconnect.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGracefulDisconnect__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGracefulDisconnectFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGracefulDisconnect ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGracefulDisconnect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGracefulDisconnect ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGracefulDisconnect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGracefulDisconnect ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGracefulDisconnect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGracefulDisconnect ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGracefulDisconnect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGracefulDisconnect ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGracefulDisconnect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGracefulDisconnect MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGracefulDisconnect prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGracefulDisconnect, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGracefulDisconnect cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGracefulDisconnect result;
      
      private NetMessageGracefulDisconnect PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGracefulDisconnect original = result;
          result = new NetMessageGracefulDisconnect();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGracefulDisconnect MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGracefulDisconnect.Descriptor; }
      }
      
      public override NetMessageGracefulDisconnect DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGracefulDisconnect.DefaultInstance; }
      }
      
      public override NetMessageGracefulDisconnect BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGracefulDisconnect) {
          return MergeFrom((NetMessageGracefulDisconnect) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGracefulDisconnect other) {
        if (other == global::Gazillion.NetMessageGracefulDisconnect.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGracefulDisconnectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGracefulDisconnectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageGracefulDisconnect() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestStartNewGame : pb::GeneratedMessage<NetMessageRequestStartNewGame, NetMessageRequestStartNewGame.Builder> {
    private NetMessageRequestStartNewGame() { }
    private static readonly NetMessageRequestStartNewGame defaultInstance = new NetMessageRequestStartNewGame().MakeReadOnly();
    private static readonly string[] _netMessageRequestStartNewGameFieldNames = new string[] {  };
    private static readonly uint[] _netMessageRequestStartNewGameFieldTags = new uint[] {  };
    public static NetMessageRequestStartNewGame DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestStartNewGame DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestStartNewGame ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestStartNewGame__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestStartNewGame, NetMessageRequestStartNewGame.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestStartNewGame__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestStartNewGameFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestStartNewGame ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestStartNewGame ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestStartNewGame ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestStartNewGame ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestStartNewGame ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestStartNewGame ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestStartNewGame ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestStartNewGame ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestStartNewGame ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestStartNewGame ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestStartNewGame MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestStartNewGame prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestStartNewGame, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestStartNewGame cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestStartNewGame result;
      
      private NetMessageRequestStartNewGame PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestStartNewGame original = result;
          result = new NetMessageRequestStartNewGame();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestStartNewGame MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestStartNewGame.Descriptor; }
      }
      
      public override NetMessageRequestStartNewGame DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestStartNewGame.DefaultInstance; }
      }
      
      public override NetMessageRequestStartNewGame BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestStartNewGame) {
          return MergeFrom((NetMessageRequestStartNewGame) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestStartNewGame other) {
        if (other == global::Gazillion.NetMessageRequestStartNewGame.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestStartNewGameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestStartNewGameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageRequestStartNewGame() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetDialogTarget : pb::GeneratedMessage<NetMessageSetDialogTarget, NetMessageSetDialogTarget.Builder> {
    private NetMessageSetDialogTarget() { }
    private static readonly NetMessageSetDialogTarget defaultInstance = new NetMessageSetDialogTarget().MakeReadOnly();
    private static readonly string[] _netMessageSetDialogTargetFieldNames = new string[] { "targetId" };
    private static readonly uint[] _netMessageSetDialogTargetFieldTags = new uint[] { 8 };
    public static NetMessageSetDialogTarget DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetDialogTarget DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetDialogTarget ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetDialogTarget__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetDialogTarget, NetMessageSetDialogTarget.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetDialogTarget__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetDialogTargetFieldNames;
      if (hasTargetId) {
        output.WriteUInt64(1, field_names[0], TargetId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetDialogTarget ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetDialogTarget ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetDialogTarget ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetDialogTarget ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetDialogTarget ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetDialogTarget ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetDialogTarget ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetDialogTarget ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetDialogTarget ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetDialogTarget ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetDialogTarget MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetDialogTarget prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetDialogTarget, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetDialogTarget cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetDialogTarget result;
      
      private NetMessageSetDialogTarget PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetDialogTarget original = result;
          result = new NetMessageSetDialogTarget();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetDialogTarget MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetDialogTarget.Descriptor; }
      }
      
      public override NetMessageSetDialogTarget DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetDialogTarget.DefaultInstance; }
      }
      
      public override NetMessageSetDialogTarget BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetDialogTarget) {
          return MergeFrom((NetMessageSetDialogTarget) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetDialogTarget other) {
        if (other == global::Gazillion.NetMessageSetDialogTarget.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetDialogTargetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetDialogTargetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
    }
    static NetMessageSetDialogTarget() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageVendorRequestBuyItemFrom : pb::GeneratedMessage<NetMessageVendorRequestBuyItemFrom, NetMessageVendorRequestBuyItemFrom.Builder> {
    private NetMessageVendorRequestBuyItemFrom() { }
    private static readonly NetMessageVendorRequestBuyItemFrom defaultInstance = new NetMessageVendorRequestBuyItemFrom().MakeReadOnly();
    private static readonly string[] _netMessageVendorRequestBuyItemFromFieldNames = new string[] { "inventorySlot", "itemId", "vendorId" };
    private static readonly uint[] _netMessageVendorRequestBuyItemFromFieldTags = new uint[] { 24, 8, 16 };
    public static NetMessageVendorRequestBuyItemFrom DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageVendorRequestBuyItemFrom DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageVendorRequestBuyItemFrom ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVendorRequestBuyItemFrom__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageVendorRequestBuyItemFrom, NetMessageVendorRequestBuyItemFrom.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVendorRequestBuyItemFrom__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private ulong itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public ulong ItemId {
      get { return itemId_; }
    }
    
    public const int VendorIdFieldNumber = 2;
    private bool hasVendorId;
    private ulong vendorId_;
    public bool HasVendorId {
      get { return hasVendorId; }
    }
    public ulong VendorId {
      get { return vendorId_; }
    }
    
    public const int InventorySlotFieldNumber = 3;
    private bool hasInventorySlot;
    private uint inventorySlot_;
    public bool HasInventorySlot {
      get { return hasInventorySlot; }
    }
    public uint InventorySlot {
      get { return inventorySlot_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemId) return false;
        if (!hasVendorId) return false;
        if (!hasInventorySlot) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageVendorRequestBuyItemFromFieldNames;
      if (hasItemId) {
        output.WriteUInt64(1, field_names[1], ItemId);
      }
      if (hasVendorId) {
        output.WriteUInt64(2, field_names[2], VendorId);
      }
      if (hasInventorySlot) {
        output.WriteUInt32(3, field_names[0], InventorySlot);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemId);
      }
      if (hasVendorId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, VendorId);
      }
      if (hasInventorySlot) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, InventorySlot);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageVendorRequestBuyItemFrom ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRequestBuyItemFrom ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestBuyItemFrom ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRequestBuyItemFrom ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestBuyItemFrom ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRequestBuyItemFrom ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestBuyItemFrom ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageVendorRequestBuyItemFrom ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageVendorRequestBuyItemFrom ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRequestBuyItemFrom ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageVendorRequestBuyItemFrom MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageVendorRequestBuyItemFrom prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageVendorRequestBuyItemFrom, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageVendorRequestBuyItemFrom cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageVendorRequestBuyItemFrom result;
      
      private NetMessageVendorRequestBuyItemFrom PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageVendorRequestBuyItemFrom original = result;
          result = new NetMessageVendorRequestBuyItemFrom();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageVendorRequestBuyItemFrom MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageVendorRequestBuyItemFrom.Descriptor; }
      }
      
      public override NetMessageVendorRequestBuyItemFrom DefaultInstanceForType {
        get { return global::Gazillion.NetMessageVendorRequestBuyItemFrom.DefaultInstance; }
      }
      
      public override NetMessageVendorRequestBuyItemFrom BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageVendorRequestBuyItemFrom) {
          return MergeFrom((NetMessageVendorRequestBuyItemFrom) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageVendorRequestBuyItemFrom other) {
        if (other == global::Gazillion.NetMessageVendorRequestBuyItemFrom.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        if (other.HasVendorId) {
          VendorId = other.VendorId;
        }
        if (other.HasInventorySlot) {
          InventorySlot = other.InventorySlot;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageVendorRequestBuyItemFromFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageVendorRequestBuyItemFromFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadUInt64(ref result.itemId_);
              break;
            }
            case 16: {
              result.hasVendorId = input.ReadUInt64(ref result.vendorId_);
              break;
            }
            case 24: {
              result.hasInventorySlot = input.ReadUInt32(ref result.inventorySlot_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public ulong ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(ulong value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0UL;
        return this;
      }
      
      public bool HasVendorId {
        get { return result.hasVendorId; }
      }
      public ulong VendorId {
        get { return result.VendorId; }
        set { SetVendorId(value); }
      }
      public Builder SetVendorId(ulong value) {
        PrepareBuilder();
        result.hasVendorId = true;
        result.vendorId_ = value;
        return this;
      }
      public Builder ClearVendorId() {
        PrepareBuilder();
        result.hasVendorId = false;
        result.vendorId_ = 0UL;
        return this;
      }
      
      public bool HasInventorySlot {
        get { return result.hasInventorySlot; }
      }
      public uint InventorySlot {
        get { return result.InventorySlot; }
        set { SetInventorySlot(value); }
      }
      public Builder SetInventorySlot(uint value) {
        PrepareBuilder();
        result.hasInventorySlot = true;
        result.inventorySlot_ = value;
        return this;
      }
      public Builder ClearInventorySlot() {
        PrepareBuilder();
        result.hasInventorySlot = false;
        result.inventorySlot_ = 0;
        return this;
      }
    }
    static NetMessageVendorRequestBuyItemFrom() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageVendorRequestSellItemTo : pb::GeneratedMessage<NetMessageVendorRequestSellItemTo, NetMessageVendorRequestSellItemTo.Builder> {
    private NetMessageVendorRequestSellItemTo() { }
    private static readonly NetMessageVendorRequestSellItemTo defaultInstance = new NetMessageVendorRequestSellItemTo().MakeReadOnly();
    private static readonly string[] _netMessageVendorRequestSellItemToFieldNames = new string[] { "itemId", "vendorId" };
    private static readonly uint[] _netMessageVendorRequestSellItemToFieldTags = new uint[] { 8, 16 };
    public static NetMessageVendorRequestSellItemTo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageVendorRequestSellItemTo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageVendorRequestSellItemTo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVendorRequestSellItemTo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageVendorRequestSellItemTo, NetMessageVendorRequestSellItemTo.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVendorRequestSellItemTo__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private ulong itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public ulong ItemId {
      get { return itemId_; }
    }
    
    public const int VendorIdFieldNumber = 2;
    private bool hasVendorId;
    private ulong vendorId_;
    public bool HasVendorId {
      get { return hasVendorId; }
    }
    public ulong VendorId {
      get { return vendorId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemId) return false;
        if (!hasVendorId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageVendorRequestSellItemToFieldNames;
      if (hasItemId) {
        output.WriteUInt64(1, field_names[0], ItemId);
      }
      if (hasVendorId) {
        output.WriteUInt64(2, field_names[1], VendorId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemId);
      }
      if (hasVendorId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, VendorId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageVendorRequestSellItemTo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRequestSellItemTo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestSellItemTo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRequestSellItemTo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestSellItemTo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRequestSellItemTo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestSellItemTo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageVendorRequestSellItemTo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageVendorRequestSellItemTo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRequestSellItemTo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageVendorRequestSellItemTo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageVendorRequestSellItemTo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageVendorRequestSellItemTo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageVendorRequestSellItemTo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageVendorRequestSellItemTo result;
      
      private NetMessageVendorRequestSellItemTo PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageVendorRequestSellItemTo original = result;
          result = new NetMessageVendorRequestSellItemTo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageVendorRequestSellItemTo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageVendorRequestSellItemTo.Descriptor; }
      }
      
      public override NetMessageVendorRequestSellItemTo DefaultInstanceForType {
        get { return global::Gazillion.NetMessageVendorRequestSellItemTo.DefaultInstance; }
      }
      
      public override NetMessageVendorRequestSellItemTo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageVendorRequestSellItemTo) {
          return MergeFrom((NetMessageVendorRequestSellItemTo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageVendorRequestSellItemTo other) {
        if (other == global::Gazillion.NetMessageVendorRequestSellItemTo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        if (other.HasVendorId) {
          VendorId = other.VendorId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageVendorRequestSellItemToFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageVendorRequestSellItemToFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadUInt64(ref result.itemId_);
              break;
            }
            case 16: {
              result.hasVendorId = input.ReadUInt64(ref result.vendorId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public ulong ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(ulong value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0UL;
        return this;
      }
      
      public bool HasVendorId {
        get { return result.hasVendorId; }
      }
      public ulong VendorId {
        get { return result.VendorId; }
        set { SetVendorId(value); }
      }
      public Builder SetVendorId(ulong value) {
        PrepareBuilder();
        result.hasVendorId = true;
        result.vendorId_ = value;
        return this;
      }
      public Builder ClearVendorId() {
        PrepareBuilder();
        result.hasVendorId = false;
        result.vendorId_ = 0UL;
        return this;
      }
    }
    static NetMessageVendorRequestSellItemTo() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageVendorRequestDonateItemTo : pb::GeneratedMessage<NetMessageVendorRequestDonateItemTo, NetMessageVendorRequestDonateItemTo.Builder> {
    private NetMessageVendorRequestDonateItemTo() { }
    private static readonly NetMessageVendorRequestDonateItemTo defaultInstance = new NetMessageVendorRequestDonateItemTo().MakeReadOnly();
    private static readonly string[] _netMessageVendorRequestDonateItemToFieldNames = new string[] { "itemId", "vendorId" };
    private static readonly uint[] _netMessageVendorRequestDonateItemToFieldTags = new uint[] { 8, 16 };
    public static NetMessageVendorRequestDonateItemTo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageVendorRequestDonateItemTo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageVendorRequestDonateItemTo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVendorRequestDonateItemTo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageVendorRequestDonateItemTo, NetMessageVendorRequestDonateItemTo.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVendorRequestDonateItemTo__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private ulong itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public ulong ItemId {
      get { return itemId_; }
    }
    
    public const int VendorIdFieldNumber = 2;
    private bool hasVendorId;
    private ulong vendorId_;
    public bool HasVendorId {
      get { return hasVendorId; }
    }
    public ulong VendorId {
      get { return vendorId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemId) return false;
        if (!hasVendorId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageVendorRequestDonateItemToFieldNames;
      if (hasItemId) {
        output.WriteUInt64(1, field_names[0], ItemId);
      }
      if (hasVendorId) {
        output.WriteUInt64(2, field_names[1], VendorId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemId);
      }
      if (hasVendorId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, VendorId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageVendorRequestDonateItemTo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRequestDonateItemTo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestDonateItemTo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRequestDonateItemTo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestDonateItemTo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRequestDonateItemTo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestDonateItemTo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageVendorRequestDonateItemTo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageVendorRequestDonateItemTo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRequestDonateItemTo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageVendorRequestDonateItemTo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageVendorRequestDonateItemTo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageVendorRequestDonateItemTo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageVendorRequestDonateItemTo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageVendorRequestDonateItemTo result;
      
      private NetMessageVendorRequestDonateItemTo PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageVendorRequestDonateItemTo original = result;
          result = new NetMessageVendorRequestDonateItemTo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageVendorRequestDonateItemTo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageVendorRequestDonateItemTo.Descriptor; }
      }
      
      public override NetMessageVendorRequestDonateItemTo DefaultInstanceForType {
        get { return global::Gazillion.NetMessageVendorRequestDonateItemTo.DefaultInstance; }
      }
      
      public override NetMessageVendorRequestDonateItemTo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageVendorRequestDonateItemTo) {
          return MergeFrom((NetMessageVendorRequestDonateItemTo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageVendorRequestDonateItemTo other) {
        if (other == global::Gazillion.NetMessageVendorRequestDonateItemTo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        if (other.HasVendorId) {
          VendorId = other.VendorId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageVendorRequestDonateItemToFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageVendorRequestDonateItemToFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadUInt64(ref result.itemId_);
              break;
            }
            case 16: {
              result.hasVendorId = input.ReadUInt64(ref result.vendorId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public ulong ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(ulong value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0UL;
        return this;
      }
      
      public bool HasVendorId {
        get { return result.hasVendorId; }
      }
      public ulong VendorId {
        get { return result.VendorId; }
        set { SetVendorId(value); }
      }
      public Builder SetVendorId(ulong value) {
        PrepareBuilder();
        result.hasVendorId = true;
        result.vendorId_ = value;
        return this;
      }
      public Builder ClearVendorId() {
        PrepareBuilder();
        result.hasVendorId = false;
        result.vendorId_ = 0UL;
        return this;
      }
    }
    static NetMessageVendorRequestDonateItemTo() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageVendorRequestRefresh : pb::GeneratedMessage<NetMessageVendorRequestRefresh, NetMessageVendorRequestRefresh.Builder> {
    private NetMessageVendorRequestRefresh() { }
    private static readonly NetMessageVendorRequestRefresh defaultInstance = new NetMessageVendorRequestRefresh().MakeReadOnly();
    private static readonly string[] _netMessageVendorRequestRefreshFieldNames = new string[] { "vendorId" };
    private static readonly uint[] _netMessageVendorRequestRefreshFieldTags = new uint[] { 8 };
    public static NetMessageVendorRequestRefresh DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageVendorRequestRefresh DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageVendorRequestRefresh ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVendorRequestRefresh__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageVendorRequestRefresh, NetMessageVendorRequestRefresh.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVendorRequestRefresh__FieldAccessorTable; }
    }
    
    public const int VendorIdFieldNumber = 1;
    private bool hasVendorId;
    private ulong vendorId_;
    public bool HasVendorId {
      get { return hasVendorId; }
    }
    public ulong VendorId {
      get { return vendorId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVendorId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageVendorRequestRefreshFieldNames;
      if (hasVendorId) {
        output.WriteUInt64(1, field_names[0], VendorId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasVendorId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, VendorId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageVendorRequestRefresh ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRequestRefresh ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestRefresh ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRequestRefresh ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestRefresh ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRequestRefresh ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestRefresh ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageVendorRequestRefresh ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageVendorRequestRefresh ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRequestRefresh ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageVendorRequestRefresh MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageVendorRequestRefresh prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageVendorRequestRefresh, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageVendorRequestRefresh cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageVendorRequestRefresh result;
      
      private NetMessageVendorRequestRefresh PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageVendorRequestRefresh original = result;
          result = new NetMessageVendorRequestRefresh();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageVendorRequestRefresh MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageVendorRequestRefresh.Descriptor; }
      }
      
      public override NetMessageVendorRequestRefresh DefaultInstanceForType {
        get { return global::Gazillion.NetMessageVendorRequestRefresh.DefaultInstance; }
      }
      
      public override NetMessageVendorRequestRefresh BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageVendorRequestRefresh) {
          return MergeFrom((NetMessageVendorRequestRefresh) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageVendorRequestRefresh other) {
        if (other == global::Gazillion.NetMessageVendorRequestRefresh.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVendorId) {
          VendorId = other.VendorId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageVendorRequestRefreshFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageVendorRequestRefreshFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVendorId = input.ReadUInt64(ref result.vendorId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVendorId {
        get { return result.hasVendorId; }
      }
      public ulong VendorId {
        get { return result.VendorId; }
        set { SetVendorId(value); }
      }
      public Builder SetVendorId(ulong value) {
        PrepareBuilder();
        result.hasVendorId = true;
        result.vendorId_ = value;
        return this;
      }
      public Builder ClearVendorId() {
        PrepareBuilder();
        result.hasVendorId = false;
        result.vendorId_ = 0UL;
        return this;
      }
    }
    static NetMessageVendorRequestRefresh() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTryModifyCommunityMemberCircle : pb::GeneratedMessage<NetMessageTryModifyCommunityMemberCircle, NetMessageTryModifyCommunityMemberCircle.Builder> {
    private NetMessageTryModifyCommunityMemberCircle() { }
    private static readonly NetMessageTryModifyCommunityMemberCircle defaultInstance = new NetMessageTryModifyCommunityMemberCircle().MakeReadOnly();
    private static readonly string[] _netMessageTryModifyCommunityMemberCircleFieldNames = new string[] { "circleId", "operation", "playerName" };
    private static readonly uint[] _netMessageTryModifyCommunityMemberCircleFieldTags = new uint[] { 8, 16, 26 };
    public static NetMessageTryModifyCommunityMemberCircle DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTryModifyCommunityMemberCircle DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTryModifyCommunityMemberCircle ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryModifyCommunityMemberCircle__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTryModifyCommunityMemberCircle, NetMessageTryModifyCommunityMemberCircle.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryModifyCommunityMemberCircle__FieldAccessorTable; }
    }
    
    public const int CircleIdFieldNumber = 1;
    private bool hasCircleId;
    private ulong circleId_;
    public bool HasCircleId {
      get { return hasCircleId; }
    }
    public ulong CircleId {
      get { return circleId_; }
    }
    
    public const int OperationFieldNumber = 2;
    private bool hasOperation;
    private global::Gazillion.ModifyCircleOperation operation_ = global::Gazillion.ModifyCircleOperation.eMCO_Add;
    public bool HasOperation {
      get { return hasOperation; }
    }
    public global::Gazillion.ModifyCircleOperation Operation {
      get { return operation_; }
    }
    
    public const int PlayerNameFieldNumber = 3;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCircleId) return false;
        if (!hasOperation) return false;
        if (!hasPlayerName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTryModifyCommunityMemberCircleFieldNames;
      if (hasCircleId) {
        output.WriteUInt64(1, field_names[0], CircleId);
      }
      if (hasOperation) {
        output.WriteEnum(2, field_names[1], (int) Operation, Operation);
      }
      if (hasPlayerName) {
        output.WriteString(3, field_names[2], PlayerName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCircleId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, CircleId);
      }
      if (hasOperation) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Operation);
      }
      if (hasPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, PlayerName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTryModifyCommunityMemberCircle MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTryModifyCommunityMemberCircle prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTryModifyCommunityMemberCircle, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTryModifyCommunityMemberCircle cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTryModifyCommunityMemberCircle result;
      
      private NetMessageTryModifyCommunityMemberCircle PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTryModifyCommunityMemberCircle original = result;
          result = new NetMessageTryModifyCommunityMemberCircle();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTryModifyCommunityMemberCircle MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTryModifyCommunityMemberCircle.Descriptor; }
      }
      
      public override NetMessageTryModifyCommunityMemberCircle DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTryModifyCommunityMemberCircle.DefaultInstance; }
      }
      
      public override NetMessageTryModifyCommunityMemberCircle BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTryModifyCommunityMemberCircle) {
          return MergeFrom((NetMessageTryModifyCommunityMemberCircle) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTryModifyCommunityMemberCircle other) {
        if (other == global::Gazillion.NetMessageTryModifyCommunityMemberCircle.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCircleId) {
          CircleId = other.CircleId;
        }
        if (other.HasOperation) {
          Operation = other.Operation;
        }
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTryModifyCommunityMemberCircleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTryModifyCommunityMemberCircleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCircleId = input.ReadUInt64(ref result.circleId_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.operation_, out unknown)) {
                result.hasOperation = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCircleId {
        get { return result.hasCircleId; }
      }
      public ulong CircleId {
        get { return result.CircleId; }
        set { SetCircleId(value); }
      }
      public Builder SetCircleId(ulong value) {
        PrepareBuilder();
        result.hasCircleId = true;
        result.circleId_ = value;
        return this;
      }
      public Builder ClearCircleId() {
        PrepareBuilder();
        result.hasCircleId = false;
        result.circleId_ = 0UL;
        return this;
      }
      
      public bool HasOperation {
       get { return result.hasOperation; }
      }
      public global::Gazillion.ModifyCircleOperation Operation {
        get { return result.Operation; }
        set { SetOperation(value); }
      }
      public Builder SetOperation(global::Gazillion.ModifyCircleOperation value) {
        PrepareBuilder();
        result.hasOperation = true;
        result.operation_ = value;
        return this;
      }
      public Builder ClearOperation() {
        PrepareBuilder();
        result.hasOperation = false;
        result.operation_ = global::Gazillion.ModifyCircleOperation.eMCO_Add;
        return this;
      }
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
    }
    static NetMessageTryModifyCommunityMemberCircle() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGuildMessageToPlayerManager : pb::GeneratedMessage<NetMessageGuildMessageToPlayerManager, NetMessageGuildMessageToPlayerManager.Builder> {
    private NetMessageGuildMessageToPlayerManager() { }
    private static readonly NetMessageGuildMessageToPlayerManager defaultInstance = new NetMessageGuildMessageToPlayerManager().MakeReadOnly();
    private static readonly string[] _netMessageGuildMessageToPlayerManagerFieldNames = new string[] { "messages" };
    private static readonly uint[] _netMessageGuildMessageToPlayerManagerFieldTags = new uint[] { 10 };
    public static NetMessageGuildMessageToPlayerManager DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGuildMessageToPlayerManager DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGuildMessageToPlayerManager ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGuildMessageToPlayerManager__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGuildMessageToPlayerManager, NetMessageGuildMessageToPlayerManager.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGuildMessageToPlayerManager__FieldAccessorTable; }
    }
    
    public const int MessagesFieldNumber = 1;
    private bool hasMessages;
    private global::Gazillion.GuildMessageSetToPlayerManager messages_;
    public bool HasMessages {
      get { return hasMessages; }
    }
    public global::Gazillion.GuildMessageSetToPlayerManager Messages {
      get { return messages_ ?? global::Gazillion.GuildMessageSetToPlayerManager.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessages) return false;
        if (!Messages.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGuildMessageToPlayerManagerFieldNames;
      if (hasMessages) {
        output.WriteMessage(1, field_names[0], Messages);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMessages) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Messages);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGuildMessageToPlayerManager ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGuildMessageToPlayerManager ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGuildMessageToPlayerManager ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGuildMessageToPlayerManager ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGuildMessageToPlayerManager ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGuildMessageToPlayerManager ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGuildMessageToPlayerManager ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGuildMessageToPlayerManager ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGuildMessageToPlayerManager ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGuildMessageToPlayerManager ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGuildMessageToPlayerManager MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGuildMessageToPlayerManager prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGuildMessageToPlayerManager, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGuildMessageToPlayerManager cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGuildMessageToPlayerManager result;
      
      private NetMessageGuildMessageToPlayerManager PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGuildMessageToPlayerManager original = result;
          result = new NetMessageGuildMessageToPlayerManager();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGuildMessageToPlayerManager MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGuildMessageToPlayerManager.Descriptor; }
      }
      
      public override NetMessageGuildMessageToPlayerManager DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGuildMessageToPlayerManager.DefaultInstance; }
      }
      
      public override NetMessageGuildMessageToPlayerManager BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGuildMessageToPlayerManager) {
          return MergeFrom((NetMessageGuildMessageToPlayerManager) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGuildMessageToPlayerManager other) {
        if (other == global::Gazillion.NetMessageGuildMessageToPlayerManager.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessages) {
          MergeMessages(other.Messages);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGuildMessageToPlayerManagerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGuildMessageToPlayerManagerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.GuildMessageSetToPlayerManager.Builder subBuilder = global::Gazillion.GuildMessageSetToPlayerManager.CreateBuilder();
              if (result.hasMessages) {
                subBuilder.MergeFrom(Messages);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Messages = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessages {
       get { return result.hasMessages; }
      }
      public global::Gazillion.GuildMessageSetToPlayerManager Messages {
        get { return result.Messages; }
        set { SetMessages(value); }
      }
      public Builder SetMessages(global::Gazillion.GuildMessageSetToPlayerManager value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessages = true;
        result.messages_ = value;
        return this;
      }
      public Builder SetMessages(global::Gazillion.GuildMessageSetToPlayerManager.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMessages = true;
        result.messages_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMessages(global::Gazillion.GuildMessageSetToPlayerManager value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMessages &&
            result.messages_ != global::Gazillion.GuildMessageSetToPlayerManager.DefaultInstance) {
            result.messages_ = global::Gazillion.GuildMessageSetToPlayerManager.CreateBuilder(result.messages_).MergeFrom(value).BuildPartial();
        } else {
          result.messages_ = value;
        }
        result.hasMessages = true;
        return this;
      }
      public Builder ClearMessages() {
        PrepareBuilder();
        result.hasMessages = false;
        result.messages_ = null;
        return this;
      }
    }
    static NetMessageGuildMessageToPlayerManager() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetShowTips : pb::GeneratedMessage<NetMessageSetShowTips, NetMessageSetShowTips.Builder> {
    private NetMessageSetShowTips() { }
    private static readonly NetMessageSetShowTips defaultInstance = new NetMessageSetShowTips().MakeReadOnly();
    private static readonly string[] _netMessageSetShowTipsFieldNames = new string[] { "showTips" };
    private static readonly uint[] _netMessageSetShowTipsFieldTags = new uint[] { 8 };
    public static NetMessageSetShowTips DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetShowTips DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetShowTips ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetShowTips__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetShowTips, NetMessageSetShowTips.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetShowTips__FieldAccessorTable; }
    }
    
    public const int ShowTipsFieldNumber = 1;
    private bool hasShowTips;
    private bool showTips_;
    public bool HasShowTips {
      get { return hasShowTips; }
    }
    public bool ShowTips {
      get { return showTips_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasShowTips) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetShowTipsFieldNames;
      if (hasShowTips) {
        output.WriteBool(1, field_names[0], ShowTips);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasShowTips) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, ShowTips);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetShowTips ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetShowTips ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetShowTips ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetShowTips ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetShowTips ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetShowTips ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetShowTips ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetShowTips ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetShowTips ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetShowTips ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetShowTips MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetShowTips prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetShowTips, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetShowTips cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetShowTips result;
      
      private NetMessageSetShowTips PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetShowTips original = result;
          result = new NetMessageSetShowTips();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetShowTips MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetShowTips.Descriptor; }
      }
      
      public override NetMessageSetShowTips DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetShowTips.DefaultInstance; }
      }
      
      public override NetMessageSetShowTips BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetShowTips) {
          return MergeFrom((NetMessageSetShowTips) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetShowTips other) {
        if (other == global::Gazillion.NetMessageSetShowTips.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasShowTips) {
          ShowTips = other.ShowTips;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetShowTipsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetShowTipsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasShowTips = input.ReadBool(ref result.showTips_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasShowTips {
        get { return result.hasShowTips; }
      }
      public bool ShowTips {
        get { return result.ShowTips; }
        set { SetShowTips(value); }
      }
      public Builder SetShowTips(bool value) {
        PrepareBuilder();
        result.hasShowTips = true;
        result.showTips_ = value;
        return this;
      }
      public Builder ClearShowTips() {
        PrepareBuilder();
        result.hasShowTips = false;
        result.showTips_ = false;
        return this;
      }
    }
    static NetMessageSetShowTips() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetTipSeen : pb::GeneratedMessage<NetMessageSetTipSeen, NetMessageSetTipSeen.Builder> {
    private NetMessageSetTipSeen() { }
    private static readonly NetMessageSetTipSeen defaultInstance = new NetMessageSetTipSeen().MakeReadOnly();
    private static readonly string[] _netMessageSetTipSeenFieldNames = new string[] { "tipDataRefId" };
    private static readonly uint[] _netMessageSetTipSeenFieldTags = new uint[] { 8 };
    public static NetMessageSetTipSeen DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetTipSeen DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetTipSeen ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetTipSeen__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetTipSeen, NetMessageSetTipSeen.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetTipSeen__FieldAccessorTable; }
    }
    
    public const int TipDataRefIdFieldNumber = 1;
    private bool hasTipDataRefId;
    private ulong tipDataRefId_;
    public bool HasTipDataRefId {
      get { return hasTipDataRefId; }
    }
    public ulong TipDataRefId {
      get { return tipDataRefId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTipDataRefId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetTipSeenFieldNames;
      if (hasTipDataRefId) {
        output.WriteUInt64(1, field_names[0], TipDataRefId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTipDataRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TipDataRefId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetTipSeen ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetTipSeen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetTipSeen ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetTipSeen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetTipSeen ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetTipSeen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetTipSeen ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetTipSeen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetTipSeen ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetTipSeen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetTipSeen MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetTipSeen prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetTipSeen, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetTipSeen cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetTipSeen result;
      
      private NetMessageSetTipSeen PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetTipSeen original = result;
          result = new NetMessageSetTipSeen();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetTipSeen MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetTipSeen.Descriptor; }
      }
      
      public override NetMessageSetTipSeen DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetTipSeen.DefaultInstance; }
      }
      
      public override NetMessageSetTipSeen BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetTipSeen) {
          return MergeFrom((NetMessageSetTipSeen) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetTipSeen other) {
        if (other == global::Gazillion.NetMessageSetTipSeen.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTipDataRefId) {
          TipDataRefId = other.TipDataRefId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetTipSeenFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetTipSeenFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTipDataRefId = input.ReadUInt64(ref result.tipDataRefId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTipDataRefId {
        get { return result.hasTipDataRefId; }
      }
      public ulong TipDataRefId {
        get { return result.TipDataRefId; }
        set { SetTipDataRefId(value); }
      }
      public Builder SetTipDataRefId(ulong value) {
        PrepareBuilder();
        result.hasTipDataRefId = true;
        result.tipDataRefId_ = value;
        return this;
      }
      public Builder ClearTipDataRefId() {
        PrepareBuilder();
        result.hasTipDataRefId = false;
        result.tipDataRefId_ = 0UL;
        return this;
      }
    }
    static NetMessageSetTipSeen() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageResetSeenTips : pb::GeneratedMessage<NetMessageResetSeenTips, NetMessageResetSeenTips.Builder> {
    private NetMessageResetSeenTips() { }
    private static readonly NetMessageResetSeenTips defaultInstance = new NetMessageResetSeenTips().MakeReadOnly();
    private static readonly string[] _netMessageResetSeenTipsFieldNames = new string[] {  };
    private static readonly uint[] _netMessageResetSeenTipsFieldTags = new uint[] {  };
    public static NetMessageResetSeenTips DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageResetSeenTips DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageResetSeenTips ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageResetSeenTips__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageResetSeenTips, NetMessageResetSeenTips.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageResetSeenTips__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageResetSeenTipsFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageResetSeenTips ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageResetSeenTips ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageResetSeenTips ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageResetSeenTips ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageResetSeenTips ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageResetSeenTips ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageResetSeenTips ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageResetSeenTips ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageResetSeenTips ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageResetSeenTips ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageResetSeenTips MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageResetSeenTips prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageResetSeenTips, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageResetSeenTips cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageResetSeenTips result;
      
      private NetMessageResetSeenTips PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageResetSeenTips original = result;
          result = new NetMessageResetSeenTips();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageResetSeenTips MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageResetSeenTips.Descriptor; }
      }
      
      public override NetMessageResetSeenTips DefaultInstanceForType {
        get { return global::Gazillion.NetMessageResetSeenTips.DefaultInstance; }
      }
      
      public override NetMessageResetSeenTips BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageResetSeenTips) {
          return MergeFrom((NetMessageResetSeenTips) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageResetSeenTips other) {
        if (other == global::Gazillion.NetMessageResetSeenTips.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageResetSeenTipsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageResetSeenTipsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageResetSeenTips() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTryMoveInventoryContentsToGeneral : pb::GeneratedMessage<NetMessageTryMoveInventoryContentsToGeneral, NetMessageTryMoveInventoryContentsToGeneral.Builder> {
    private NetMessageTryMoveInventoryContentsToGeneral() { }
    private static readonly NetMessageTryMoveInventoryContentsToGeneral defaultInstance = new NetMessageTryMoveInventoryContentsToGeneral().MakeReadOnly();
    private static readonly string[] _netMessageTryMoveInventoryContentsToGeneralFieldNames = new string[] { "sourceInventoryPrototype" };
    private static readonly uint[] _netMessageTryMoveInventoryContentsToGeneralFieldTags = new uint[] { 8 };
    public static NetMessageTryMoveInventoryContentsToGeneral DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTryMoveInventoryContentsToGeneral DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTryMoveInventoryContentsToGeneral ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryMoveInventoryContentsToGeneral__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTryMoveInventoryContentsToGeneral, NetMessageTryMoveInventoryContentsToGeneral.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryMoveInventoryContentsToGeneral__FieldAccessorTable; }
    }
    
    public const int SourceInventoryPrototypeFieldNumber = 1;
    private bool hasSourceInventoryPrototype;
    private ulong sourceInventoryPrototype_;
    public bool HasSourceInventoryPrototype {
      get { return hasSourceInventoryPrototype; }
    }
    public ulong SourceInventoryPrototype {
      get { return sourceInventoryPrototype_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSourceInventoryPrototype) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTryMoveInventoryContentsToGeneralFieldNames;
      if (hasSourceInventoryPrototype) {
        output.WriteUInt64(1, field_names[0], SourceInventoryPrototype);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSourceInventoryPrototype) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, SourceInventoryPrototype);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTryMoveInventoryContentsToGeneral MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTryMoveInventoryContentsToGeneral prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTryMoveInventoryContentsToGeneral, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTryMoveInventoryContentsToGeneral cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTryMoveInventoryContentsToGeneral result;
      
      private NetMessageTryMoveInventoryContentsToGeneral PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTryMoveInventoryContentsToGeneral original = result;
          result = new NetMessageTryMoveInventoryContentsToGeneral();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTryMoveInventoryContentsToGeneral MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTryMoveInventoryContentsToGeneral.Descriptor; }
      }
      
      public override NetMessageTryMoveInventoryContentsToGeneral DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTryMoveInventoryContentsToGeneral.DefaultInstance; }
      }
      
      public override NetMessageTryMoveInventoryContentsToGeneral BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTryMoveInventoryContentsToGeneral) {
          return MergeFrom((NetMessageTryMoveInventoryContentsToGeneral) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTryMoveInventoryContentsToGeneral other) {
        if (other == global::Gazillion.NetMessageTryMoveInventoryContentsToGeneral.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSourceInventoryPrototype) {
          SourceInventoryPrototype = other.SourceInventoryPrototype;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTryMoveInventoryContentsToGeneralFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTryMoveInventoryContentsToGeneralFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSourceInventoryPrototype = input.ReadUInt64(ref result.sourceInventoryPrototype_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSourceInventoryPrototype {
        get { return result.hasSourceInventoryPrototype; }
      }
      public ulong SourceInventoryPrototype {
        get { return result.SourceInventoryPrototype; }
        set { SetSourceInventoryPrototype(value); }
      }
      public Builder SetSourceInventoryPrototype(ulong value) {
        PrepareBuilder();
        result.hasSourceInventoryPrototype = true;
        result.sourceInventoryPrototype_ = value;
        return this;
      }
      public Builder ClearSourceInventoryPrototype() {
        PrepareBuilder();
        result.hasSourceInventoryPrototype = false;
        result.sourceInventoryPrototype_ = 0UL;
        return this;
      }
    }
    static NetMessageTryMoveInventoryContentsToGeneral() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetPlayerGameplayOptions : pb::GeneratedMessage<NetMessageSetPlayerGameplayOptions, NetMessageSetPlayerGameplayOptions.Builder> {
    private NetMessageSetPlayerGameplayOptions() { }
    private static readonly NetMessageSetPlayerGameplayOptions defaultInstance = new NetMessageSetPlayerGameplayOptions().MakeReadOnly();
    private static readonly string[] _netMessageSetPlayerGameplayOptionsFieldNames = new string[] { "optionsData" };
    private static readonly uint[] _netMessageSetPlayerGameplayOptionsFieldTags = new uint[] { 10 };
    public static NetMessageSetPlayerGameplayOptions DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetPlayerGameplayOptions DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetPlayerGameplayOptions ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetPlayerGameplayOptions__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetPlayerGameplayOptions, NetMessageSetPlayerGameplayOptions.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetPlayerGameplayOptions__FieldAccessorTable; }
    }
    
    public const int OptionsDataFieldNumber = 1;
    private bool hasOptionsData;
    private global::Gazillion.NetStructGameplayOptions optionsData_;
    public bool HasOptionsData {
      get { return hasOptionsData; }
    }
    public global::Gazillion.NetStructGameplayOptions OptionsData {
      get { return optionsData_ ?? global::Gazillion.NetStructGameplayOptions.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOptionsData) return false;
        if (!OptionsData.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetPlayerGameplayOptionsFieldNames;
      if (hasOptionsData) {
        output.WriteMessage(1, field_names[0], OptionsData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOptionsData) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, OptionsData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetPlayerGameplayOptions ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetPlayerGameplayOptions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetPlayerGameplayOptions ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetPlayerGameplayOptions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetPlayerGameplayOptions ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetPlayerGameplayOptions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetPlayerGameplayOptions ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetPlayerGameplayOptions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetPlayerGameplayOptions ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetPlayerGameplayOptions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetPlayerGameplayOptions MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetPlayerGameplayOptions prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetPlayerGameplayOptions, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetPlayerGameplayOptions cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetPlayerGameplayOptions result;
      
      private NetMessageSetPlayerGameplayOptions PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetPlayerGameplayOptions original = result;
          result = new NetMessageSetPlayerGameplayOptions();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetPlayerGameplayOptions MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetPlayerGameplayOptions.Descriptor; }
      }
      
      public override NetMessageSetPlayerGameplayOptions DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetPlayerGameplayOptions.DefaultInstance; }
      }
      
      public override NetMessageSetPlayerGameplayOptions BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetPlayerGameplayOptions) {
          return MergeFrom((NetMessageSetPlayerGameplayOptions) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetPlayerGameplayOptions other) {
        if (other == global::Gazillion.NetMessageSetPlayerGameplayOptions.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOptionsData) {
          MergeOptionsData(other.OptionsData);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetPlayerGameplayOptionsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetPlayerGameplayOptionsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.NetStructGameplayOptions.Builder subBuilder = global::Gazillion.NetStructGameplayOptions.CreateBuilder();
              if (result.hasOptionsData) {
                subBuilder.MergeFrom(OptionsData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OptionsData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOptionsData {
       get { return result.hasOptionsData; }
      }
      public global::Gazillion.NetStructGameplayOptions OptionsData {
        get { return result.OptionsData; }
        set { SetOptionsData(value); }
      }
      public Builder SetOptionsData(global::Gazillion.NetStructGameplayOptions value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOptionsData = true;
        result.optionsData_ = value;
        return this;
      }
      public Builder SetOptionsData(global::Gazillion.NetStructGameplayOptions.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOptionsData = true;
        result.optionsData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOptionsData(global::Gazillion.NetStructGameplayOptions value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOptionsData &&
            result.optionsData_ != global::Gazillion.NetStructGameplayOptions.DefaultInstance) {
            result.optionsData_ = global::Gazillion.NetStructGameplayOptions.CreateBuilder(result.optionsData_).MergeFrom(value).BuildPartial();
        } else {
          result.optionsData_ = value;
        }
        result.hasOptionsData = true;
        return this;
      }
      public Builder ClearOptionsData() {
        PrepareBuilder();
        result.hasOptionsData = false;
        result.optionsData_ = null;
        return this;
      }
    }
    static NetMessageSetPlayerGameplayOptions() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTeleportToPartyMember : pb::GeneratedMessage<NetMessageTeleportToPartyMember, NetMessageTeleportToPartyMember.Builder> {
    private NetMessageTeleportToPartyMember() { }
    private static readonly NetMessageTeleportToPartyMember defaultInstance = new NetMessageTeleportToPartyMember().MakeReadOnly();
    private static readonly string[] _netMessageTeleportToPartyMemberFieldNames = new string[] { "playerName" };
    private static readonly uint[] _netMessageTeleportToPartyMemberFieldTags = new uint[] { 10 };
    public static NetMessageTeleportToPartyMember DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTeleportToPartyMember DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTeleportToPartyMember ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTeleportToPartyMember__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTeleportToPartyMember, NetMessageTeleportToPartyMember.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTeleportToPartyMember__FieldAccessorTable; }
    }
    
    public const int PlayerNameFieldNumber = 1;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTeleportToPartyMemberFieldNames;
      if (hasPlayerName) {
        output.WriteString(1, field_names[0], PlayerName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, PlayerName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTeleportToPartyMember ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTeleportToPartyMember ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeleportToPartyMember ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTeleportToPartyMember ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeleportToPartyMember ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTeleportToPartyMember ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeleportToPartyMember ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTeleportToPartyMember ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTeleportToPartyMember ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTeleportToPartyMember ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTeleportToPartyMember MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTeleportToPartyMember prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTeleportToPartyMember, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTeleportToPartyMember cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTeleportToPartyMember result;
      
      private NetMessageTeleportToPartyMember PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTeleportToPartyMember original = result;
          result = new NetMessageTeleportToPartyMember();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTeleportToPartyMember MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTeleportToPartyMember.Descriptor; }
      }
      
      public override NetMessageTeleportToPartyMember DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTeleportToPartyMember.DefaultInstance; }
      }
      
      public override NetMessageTeleportToPartyMember BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTeleportToPartyMember) {
          return MergeFrom((NetMessageTeleportToPartyMember) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTeleportToPartyMember other) {
        if (other == global::Gazillion.NetMessageTeleportToPartyMember.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTeleportToPartyMemberFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTeleportToPartyMemberFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
    }
    static NetMessageTeleportToPartyMember() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
