// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Gazillion {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Guild {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Gazillion_GuildForm__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildForm, global::Gazillion.GuildForm.Builder> internal__static_Gazillion_GuildForm__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_GuildFormResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildFormResult, global::Gazillion.GuildFormResult.Builder> internal__static_Gazillion_GuildFormResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_GuildDisbanded__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildDisbanded, global::Gazillion.GuildDisbanded.Builder> internal__static_Gazillion_GuildDisbanded__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_GuildChangeName__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildChangeName, global::Gazillion.GuildChangeName.Builder> internal__static_Gazillion_GuildChangeName__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_GuildChangeNameResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildChangeNameResult, global::Gazillion.GuildChangeNameResult.Builder> internal__static_Gazillion_GuildChangeNameResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_GuildNameChanged__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildNameChanged, global::Gazillion.GuildNameChanged.Builder> internal__static_Gazillion_GuildNameChanged__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_GuildInvite__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildInvite, global::Gazillion.GuildInvite.Builder> internal__static_Gazillion_GuildInvite__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_GuildInviteResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildInviteResult, global::Gazillion.GuildInviteResult.Builder> internal__static_Gazillion_GuildInviteResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_GuildInvitedToJoin__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildInvitedToJoin, global::Gazillion.GuildInvitedToJoin.Builder> internal__static_Gazillion_GuildInvitedToJoin__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_GuildRespondToInvite__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildRespondToInvite, global::Gazillion.GuildRespondToInvite.Builder> internal__static_Gazillion_GuildRespondToInvite__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_GuildRespondToInviteResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildRespondToInviteResult, global::Gazillion.GuildRespondToInviteResult.Builder> internal__static_Gazillion_GuildRespondToInviteResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_GuildMemberInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildMemberInfo, global::Gazillion.GuildMemberInfo.Builder> internal__static_Gazillion_GuildMemberInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_GuildChangeMember__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildChangeMember, global::Gazillion.GuildChangeMember.Builder> internal__static_Gazillion_GuildChangeMember__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_GuildChangeMemberResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildChangeMemberResult, global::Gazillion.GuildChangeMemberResult.Builder> internal__static_Gazillion_GuildChangeMemberResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_GuildMembersInfoChanged__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildMembersInfoChanged, global::Gazillion.GuildMembersInfoChanged.Builder> internal__static_Gazillion_GuildMembersInfoChanged__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_GuildCompleteInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildCompleteInfo, global::Gazillion.GuildCompleteInfo.Builder> internal__static_Gazillion_GuildCompleteInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_GuildMessageSetToServer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildMessageSetToServer, global::Gazillion.GuildMessageSetToServer.Builder> internal__static_Gazillion_GuildMessageSetToServer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_GuildMessageSetToClient__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildMessageSetToClient, global::Gazillion.GuildMessageSetToClient.Builder> internal__static_Gazillion_GuildMessageSetToClient__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_GuildMessageSetToPlayerManager__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildMessageSetToPlayerManager, global::Gazillion.GuildMessageSetToPlayerManager.Builder> internal__static_Gazillion_GuildMessageSetToPlayerManager__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Guild() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtHdWlsZC5wcm90bxIJR2F6aWxsaW9uIkUKCUd1aWxkRm9ybRIaCghwbGF5", 
            "ZXJJZBgBIAIoBFIIcGxheWVySWQSHAoJZ3VpbGROYW1lGAIgAigJUglndWls", 
            "ZE5hbWUibwoPR3VpbGRGb3JtUmVzdWx0EhwKCWd1aWxkTmFtZRgBIAIoCVIJ", 
            "Z3VpbGROYW1lEj4KCnJlc3VsdENvZGUYAiACKA4yHi5HYXppbGxpb24uR3Vp", 
            "bGRGb3JtUmVzdWx0Q29kZVIKcmVzdWx0Q29kZSJeCg5HdWlsZERpc2JhbmRl", 
            "ZBIYCgdndWlsZElkGAEgAigEUgdndWlsZElkEjIKFGRpc2JhbmRpbmdQbGF5", 
            "ZXJOYW1lGAIgAigJUhRkaXNiYW5kaW5nUGxheWVyTmFtZSJLCg9HdWlsZENo", 
            "YW5nZU5hbWUSGgoIcGxheWVySWQYASACKARSCHBsYXllcklkEhwKCWd1aWxk", 
            "TmFtZRgCIAIoCVIJZ3VpbGROYW1lIoMBChVHdWlsZENoYW5nZU5hbWVSZXN1", 
            "bHQSJAoNc3VibWl0dGVkTmFtZRgBIAIoCVINc3VibWl0dGVkTmFtZRJECgpy", 
            "ZXN1bHRDb2RlGAIgAigOMiQuR2F6aWxsaW9uLkd1aWxkQ2hhbmdlTmFtZVJl", 
            "c3VsdENvZGVSCnJlc3VsdENvZGUiggEKEEd1aWxkTmFtZUNoYW5nZWQSGAoH", 
            "Z3VpbGRJZBgBIAIoBFIHZ3VpbGRJZBIiCgxuZXdHdWlsZE5hbWUYAiACKAlS", 
            "DG5ld0d1aWxkTmFtZRIwChNjaGFuZ2VkQnlQbGF5ZXJOYW1lGAMgASgJUhNj", 
            "aGFuZ2VkQnlQbGF5ZXJOYW1lImsKC0d1aWxkSW52aXRlEi4KEnRvSW52aXRl", 
            "UGxheWVyTmFtZRgBIAIoCVISdG9JbnZpdGVQbGF5ZXJOYW1lEiwKEWludml0", 
            "ZWRCeVBsYXllcklkGAIgAigEUhFpbnZpdGVkQnlQbGF5ZXJJZCKFAQoRR3Vp", 
            "bGRJbnZpdGVSZXN1bHQSLgoGaW52aXRlGAEgAigLMhYuR2F6aWxsaW9uLkd1", 
            "aWxkSW52aXRlUgZpbnZpdGUSQAoKcmVzdWx0Q29kZRgCIAIoDjIgLkdhemls", 
            "bGlvbi5HdWlsZEludml0ZVJlc3VsdENvZGVSCnJlc3VsdENvZGUifgoSR3Vp", 
            "bGRJbnZpdGVkVG9Kb2luEhgKB2d1aWxkSWQYASACKARSB2d1aWxkSWQSHAoJ", 
            "Z3VpbGROYW1lGAIgAigJUglndWlsZE5hbWUSMAoTaW52aXRlZEJ5UGxheWVy", 
            "TmFtZRgDIAIoCVITaW52aXRlZEJ5UGxheWVyTmFtZSKTAQoUR3VpbGRSZXNw", 
            "b25kVG9JbnZpdGUSGgoIcGxheWVySWQYASACKARSCHBsYXllcklkEhgKB2d1", 
            "aWxkSWQYAiACKARSB2d1aWxkSWQSRQoLcmVzcG9uZENvZGUYAyACKA4yIy5H", 
            "YXppbGxpb24uR3VpbGRSZXNwb25kVG9JbnZpdGVDb2RlUgtyZXNwb25kQ29k", 
            "ZSKFAQoaR3VpbGRSZXNwb25kVG9JbnZpdGVSZXN1bHQSSQoKcmVzdWx0Q29k", 
            "ZRgBIAIoDjIpLkdhemlsbGlvbi5HdWlsZFJlc3BvbmRUb0ludml0ZVJlc3Vs", 
            "dENvZGVSCnJlc3VsdENvZGUSHAoJZ3VpbGROYW1lGAIgAigJUglndWlsZE5h", 
            "bWUiiQEKD0d1aWxkTWVtYmVySW5mbxIaCghwbGF5ZXJJZBgBIAIoBFIIcGxh", 
            "eWVySWQSHgoKcGxheWVyTmFtZRgCIAIoCVIKcGxheWVyTmFtZRI6CgptZW1i", 
            "ZXJzaGlwGAMgAigOMhouR2F6aWxsaW9uLkd1aWxkTWVtYmVyc2hpcFIKbWVt", 
            "YmVyc2hpcCK1AQoRR3VpbGRDaGFuZ2VNZW1iZXISJgoOc291cmNlUGxheWVy", 
            "SWQYASACKARSDnNvdXJjZVBsYXllcklkEioKEHRhcmdldFBsYXllck5hbWUY", 
            "AiACKAlSEHRhcmdldFBsYXllck5hbWUSTAoTdGFyZ2V0TmV3TWVtYmVyc2hp", 
            "cBgDIAIoDjIaLkdhemlsbGlvbi5HdWlsZE1lbWJlcnNoaXBSE3RhcmdldE5l", 
            "d01lbWJlcnNoaXAijQEKF0d1aWxkQ2hhbmdlTWVtYmVyUmVzdWx0EioKEHRh", 
            "cmdldFBsYXllck5hbWUYASACKAlSEHRhcmdldFBsYXllck5hbWUSRgoKcmVz", 
            "dWx0Q29kZRgCIAIoDjImLkdhemlsbGlvbi5HdWlsZENoYW5nZU1lbWJlclJl", 
            "c3VsdENvZGVSCnJlc3VsdENvZGUiwgEKF0d1aWxkTWVtYmVyc0luZm9DaGFu", 
            "Z2VkEhgKB2d1aWxkSWQYASACKARSB2d1aWxkSWQSNAoHbWVtYmVycxgCIAMo", 
            "CzIaLkdhemlsbGlvbi5HdWlsZE1lbWJlckluZm9SB21lbWJlcnMSMgoUaW5p", 
            "dGlhdGluZ01lbWJlck5hbWUYAyACKAlSFGluaXRpYXRpbmdNZW1iZXJOYW1l", 
            "EiMKCW5ld01lbWJlchgEIAEoCDoFZmFsc2VSCW5ld01lbWJlciKBAQoRR3Vp", 
            "bGRDb21wbGV0ZUluZm8SGAoHZ3VpbGRJZBgBIAIoBFIHZ3VpbGRJZBIcCgln", 
            "dWlsZE5hbWUYAiACKAlSCWd1aWxkTmFtZRI0CgdtZW1iZXJzGAMgAygLMhou", 
            "R2F6aWxsaW9uLkd1aWxkTWVtYmVySW5mb1IHbWVtYmVycyLPAgoXR3VpbGRN", 
            "ZXNzYWdlU2V0VG9TZXJ2ZXISRwoQZ3VpbGROYW1lQ2hhbmdlZBgBIAEoCzIb", 
            "LkdhemlsbGlvbi5HdWlsZE5hbWVDaGFuZ2VkUhBndWlsZE5hbWVDaGFuZ2Vk", 
            "ElwKF2d1aWxkTWVtYmVyc0luZm9DaGFuZ2VkGAIgASgLMiIuR2F6aWxsaW9u", 
            "Lkd1aWxkTWVtYmVyc0luZm9DaGFuZ2VkUhdndWlsZE1lbWJlcnNJbmZvQ2hh", 
            "bmdlZBJKChFndWlsZENvbXBsZXRlSW5mbxgDIAEoCzIcLkdhemlsbGlvbi5H", 
            "dWlsZENvbXBsZXRlSW5mb1IRZ3VpbGRDb21wbGV0ZUluZm8SQQoOZ3VpbGRE", 
            "aXNiYW5kZWQYBCABKAsyGS5HYXppbGxpb24uR3VpbGREaXNiYW5kZWRSDmd1", 
            "aWxkRGlzYmFuZGVkIs0GChdHdWlsZE1lc3NhZ2VTZXRUb0NsaWVudBJECg9n", 
            "dWlsZEZvcm1SZXN1bHQYASABKAsyGi5HYXppbGxpb24uR3VpbGRGb3JtUmVz", 
            "dWx0Ug9ndWlsZEZvcm1SZXN1bHQSVgoVZ3VpbGRDaGFuZ2VOYW1lUmVzdWx0", 
            "GAIgASgLMiAuR2F6aWxsaW9uLkd1aWxkQ2hhbmdlTmFtZVJlc3VsdFIVZ3Vp", 
            "bGRDaGFuZ2VOYW1lUmVzdWx0EkoKEWd1aWxkSW52aXRlUmVzdWx0GAMgASgL", 
            "MhwuR2F6aWxsaW9uLkd1aWxkSW52aXRlUmVzdWx0UhFndWlsZEludml0ZVJl", 
            "c3VsdBJlChpndWlsZFJlc3BvbmRUb0ludml0ZVJlc3VsdBgEIAEoCzIlLkdh", 
            "emlsbGlvbi5HdWlsZFJlc3BvbmRUb0ludml0ZVJlc3VsdFIaZ3VpbGRSZXNw", 
            "b25kVG9JbnZpdGVSZXN1bHQSXAoXZ3VpbGRDaGFuZ2VNZW1iZXJSZXN1bHQY", 
            "BSABKAsyIi5HYXppbGxpb24uR3VpbGRDaGFuZ2VNZW1iZXJSZXN1bHRSF2d1", 
            "aWxkQ2hhbmdlTWVtYmVyUmVzdWx0Ek0KEmd1aWxkSW52aXRlZFRvSm9pbhgG", 
            "IAEoCzIdLkdhemlsbGlvbi5HdWlsZEludml0ZWRUb0pvaW5SEmd1aWxkSW52", 
            "aXRlZFRvSm9pbhJHChBndWlsZE5hbWVDaGFuZ2VkGAcgASgLMhsuR2F6aWxs", 
            "aW9uLkd1aWxkTmFtZUNoYW5nZWRSEGd1aWxkTmFtZUNoYW5nZWQSXAoXZ3Vp", 
            "bGRNZW1iZXJzSW5mb0NoYW5nZWQYCCABKAsyIi5HYXppbGxpb24uR3VpbGRN", 
            "ZW1iZXJzSW5mb0NoYW5nZWRSF2d1aWxkTWVtYmVyc0luZm9DaGFuZ2VkEkoK", 
            "EWd1aWxkQ29tcGxldGVJbmZvGAkgASgLMhwuR2F6aWxsaW9uLkd1aWxkQ29t", 
            "cGxldGVJbmZvUhFndWlsZENvbXBsZXRlSW5mbxJBCg5ndWlsZERpc2JhbmRl", 
            "ZBgKIAEoCzIZLkdhemlsbGlvbi5HdWlsZERpc2JhbmRlZFIOZ3VpbGREaXNi", 
            "YW5kZWQi9QIKHkd1aWxkTWVzc2FnZVNldFRvUGxheWVyTWFuYWdlchIyCgln", 
            "dWlsZEZvcm0YASABKAsyFC5HYXppbGxpb24uR3VpbGRGb3JtUglndWlsZEZv", 
            "cm0SRAoPZ3VpbGRDaGFuZ2VOYW1lGAIgASgLMhouR2F6aWxsaW9uLkd1aWxk", 
            "Q2hhbmdlTmFtZVIPZ3VpbGRDaGFuZ2VOYW1lEjgKC2d1aWxkSW52aXRlGAMg", 
            "ASgLMhYuR2F6aWxsaW9uLkd1aWxkSW52aXRlUgtndWlsZEludml0ZRJTChRn", 
            "dWlsZFJlc3BvbmRUb0ludml0ZRgEIAEoCzIfLkdhemlsbGlvbi5HdWlsZFJl", 
            "c3BvbmRUb0ludml0ZVIUZ3VpbGRSZXNwb25kVG9JbnZpdGUSSgoRZ3VpbGRD", 
            "aGFuZ2VNZW1iZXIYBSABKAsyHC5HYXppbGxpb24uR3VpbGRDaGFuZ2VNZW1i", 
            "ZXJSEWd1aWxkQ2hhbmdlTWVtYmVyKs4BChNHdWlsZEZvcm1SZXN1bHRDb2Rl", 
            "EhUKEWVHRkNJbnRlcm5hbEVycm9yEAASGQoVZUdGQ0d1aWxkSW5FcnJvclN0", 
            "YXRlEAESEQoNZUdGQ05vdE9ubGluZRACEhYKEmVHRkNSZXN0cmljdGVkTmFt", 
            "ZRADEhUKEWVHRkNEdXBsaWNhdGVOYW1lEAQSFgoSZUdGQ0FscmVhZHlJbkd1", 
            "aWxkEAUSGgoWZUdGQ1dhaXRpbmdGb3JEYXRhYmFzZRAGEg8KC2VHRkNTdWNj", 
            "ZXNzEAcqkAIKGUd1aWxkQ2hhbmdlTmFtZVJlc3VsdENvZGUSFwoTZUdDTlJD", 
            "SW50ZXJuYWxFcnJvchAAEhsKF2VHQ05SQ0d1aWxkSW5FcnJvclN0YXRlEAES", 
            "EwoPZUdDTlJDTm90T25saW5lEAISFgoSZUdDTlJDSW52YWxpZEd1aWxkEAMS", 
            "FAoQZUdDTlJDTm90SW5HdWlsZBAEEhgKFGVHQ05SQ1Jlc3RyaWN0ZWROYW1l", 
            "EAUSFwoTZUdDTlJDRHVwbGljYXRlTmFtZRAGEhYKEmVHQ05SQ05vUGVybWlz", 
            "c2lvbhAHEhwKGGVHQ05SQ1dhaXRpbmdGb3JEYXRhYmFzZRAIEhEKDWVHQ05S", 
            "Q1N1Y2Nlc3MQCSqbAgoVR3VpbGRJbnZpdGVSZXN1bHRDb2RlEhYKEmVHSVJD", 
            "SW50ZXJuYWxFcnJvchAAEhoKFmVHSVJDR3VpbGRJbkVycm9yU3RhdGUQARIZ", 
            "ChVlR0lSQ0ludml0ZXJOb3RPbmxpbmUQAhISCg5lR0lSQ0d1aWxkRnVsbBAD", 
            "EhcKE2VHSVJDSW52aXRlZEluR3VpbGQQBBIcChhlR0lSQ0ludml0ZWRJbk90", 
            "aGVyR3VpbGQQBRIcChhlR0lSQ0ludml0ZWRVbmtvd25QbGF5ZXIQBhIaChZl", 
            "R0lSQ0ludml0ZXJOb3RJbkd1aWxkEAcSHAoYZUdJUkNJbnZpdGVyTm9QZXJt", 
            "aXNzaW9uEAgSEAoMZUdJUkNTdWNjZXNzEAkqVgoYR3VpbGRSZXNwb25kVG9J", 
            "bnZpdGVDb2RlEhEKDWVHUklDUmVqZWN0ZWQQABIRCg1lR1JJQ0FjY2VwdGVk", 
            "EAESFAoQZUdSSUNBdXRvSWdub3JlZBACKu4BCh5HdWlsZFJlc3BvbmRUb0lu", 
            "dml0ZVJlc3VsdENvZGUSFwoTZUdSSVJDSW50ZXJuYWxFcnJvchAAEhsKF2VH", 
            "UklSQ0d1aWxkSW5FcnJvclN0YXRlEAESEwoPZUdSSVJDTm90T25saW5lEAIS", 
            "FgoSZUdSSVJDSW52YWxpZEd1aWxkEAMSGAoUZUdSSVJDQWxyZWFkeUluR3Vp", 
            "bGQQBBITCg9lR1JJUkNHdWlsZEZ1bGwQBRIUChBlR1JJUkNOb3RJbnZpdGVk", 
            "EAYSEAoMZUdSSVJDSm9pbmVkEAcSEgoOZUdSSVJDUmVqZWN0ZWQQCCpMCg9H", 
            "dWlsZE1lbWJlcnNoaXASCwoHZUdNTm9uZRAAEg0KCWVHTU1lbWJlchABEg4K", 
            "CmVHTU9mZmljZXIQAhINCgllR01MZWFkZXIQAyr4AgobR3VpbGRDaGFuZ2VN", 
            "ZW1iZXJSZXN1bHRDb2RlEhcKE2VHQ01SQ0ludGVybmFsRXJyb3IQABIbChdl", 
            "R0NNUkNHdWlsZEluRXJyb3JTdGF0ZRABEhMKD2VHQ01SQ05vdE9ubGluZRAC", 
            "Eh0KGWVHQ01SQ0luaXRpYXRvck5vdEluR3VpbGQQAxIfChtlR0NNUkNJbml0", 
            "aWF0b3JOb1Blcm1pc3Npb24QBBIXChNlR0NNUkNVbmtub3duTWVtYmVyEAUS", 
            "EgoOZUdDTVJDTm9DaGFuZ2UQBhIaChZlR0NNUkNDYW50TW9kaWZ5TGVhZGVy", 
            "EAcSFwoTZUdDTVJDUmVxdWlyZXNTdGFmZhAIEhgKFGVHQ01SQ1JlcXVpcmVz", 
            "TGVhZGVyEAkSHgoaZUdDTVJDTm9UcmFuc2ZlckxlYWRlcnNoaXAQChIRCg1l", 
            "R0NNUkNTdWNjZXNzEAsSHwobZUdDTVJDU3VjY2Vzc0d1aWxkRGlzc29sdmVk", 
          "EAw="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Gazillion_GuildForm__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Gazillion_GuildForm__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildForm, global::Gazillion.GuildForm.Builder>(internal__static_Gazillion_GuildForm__Descriptor,
                new string[] { "PlayerId", "GuildName", });
        internal__static_Gazillion_GuildFormResult__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Gazillion_GuildFormResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildFormResult, global::Gazillion.GuildFormResult.Builder>(internal__static_Gazillion_GuildFormResult__Descriptor,
                new string[] { "GuildName", "ResultCode", });
        internal__static_Gazillion_GuildDisbanded__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Gazillion_GuildDisbanded__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildDisbanded, global::Gazillion.GuildDisbanded.Builder>(internal__static_Gazillion_GuildDisbanded__Descriptor,
                new string[] { "GuildId", "DisbandingPlayerName", });
        internal__static_Gazillion_GuildChangeName__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Gazillion_GuildChangeName__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildChangeName, global::Gazillion.GuildChangeName.Builder>(internal__static_Gazillion_GuildChangeName__Descriptor,
                new string[] { "PlayerId", "GuildName", });
        internal__static_Gazillion_GuildChangeNameResult__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Gazillion_GuildChangeNameResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildChangeNameResult, global::Gazillion.GuildChangeNameResult.Builder>(internal__static_Gazillion_GuildChangeNameResult__Descriptor,
                new string[] { "SubmittedName", "ResultCode", });
        internal__static_Gazillion_GuildNameChanged__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Gazillion_GuildNameChanged__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildNameChanged, global::Gazillion.GuildNameChanged.Builder>(internal__static_Gazillion_GuildNameChanged__Descriptor,
                new string[] { "GuildId", "NewGuildName", "ChangedByPlayerName", });
        internal__static_Gazillion_GuildInvite__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Gazillion_GuildInvite__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildInvite, global::Gazillion.GuildInvite.Builder>(internal__static_Gazillion_GuildInvite__Descriptor,
                new string[] { "ToInvitePlayerName", "InvitedByPlayerId", });
        internal__static_Gazillion_GuildInviteResult__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Gazillion_GuildInviteResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildInviteResult, global::Gazillion.GuildInviteResult.Builder>(internal__static_Gazillion_GuildInviteResult__Descriptor,
                new string[] { "Invite", "ResultCode", });
        internal__static_Gazillion_GuildInvitedToJoin__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Gazillion_GuildInvitedToJoin__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildInvitedToJoin, global::Gazillion.GuildInvitedToJoin.Builder>(internal__static_Gazillion_GuildInvitedToJoin__Descriptor,
                new string[] { "GuildId", "GuildName", "InvitedByPlayerName", });
        internal__static_Gazillion_GuildRespondToInvite__Descriptor = Descriptor.MessageTypes[9];
        internal__static_Gazillion_GuildRespondToInvite__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildRespondToInvite, global::Gazillion.GuildRespondToInvite.Builder>(internal__static_Gazillion_GuildRespondToInvite__Descriptor,
                new string[] { "PlayerId", "GuildId", "RespondCode", });
        internal__static_Gazillion_GuildRespondToInviteResult__Descriptor = Descriptor.MessageTypes[10];
        internal__static_Gazillion_GuildRespondToInviteResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildRespondToInviteResult, global::Gazillion.GuildRespondToInviteResult.Builder>(internal__static_Gazillion_GuildRespondToInviteResult__Descriptor,
                new string[] { "ResultCode", "GuildName", });
        internal__static_Gazillion_GuildMemberInfo__Descriptor = Descriptor.MessageTypes[11];
        internal__static_Gazillion_GuildMemberInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildMemberInfo, global::Gazillion.GuildMemberInfo.Builder>(internal__static_Gazillion_GuildMemberInfo__Descriptor,
                new string[] { "PlayerId", "PlayerName", "Membership", });
        internal__static_Gazillion_GuildChangeMember__Descriptor = Descriptor.MessageTypes[12];
        internal__static_Gazillion_GuildChangeMember__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildChangeMember, global::Gazillion.GuildChangeMember.Builder>(internal__static_Gazillion_GuildChangeMember__Descriptor,
                new string[] { "SourcePlayerId", "TargetPlayerName", "TargetNewMembership", });
        internal__static_Gazillion_GuildChangeMemberResult__Descriptor = Descriptor.MessageTypes[13];
        internal__static_Gazillion_GuildChangeMemberResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildChangeMemberResult, global::Gazillion.GuildChangeMemberResult.Builder>(internal__static_Gazillion_GuildChangeMemberResult__Descriptor,
                new string[] { "TargetPlayerName", "ResultCode", });
        internal__static_Gazillion_GuildMembersInfoChanged__Descriptor = Descriptor.MessageTypes[14];
        internal__static_Gazillion_GuildMembersInfoChanged__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildMembersInfoChanged, global::Gazillion.GuildMembersInfoChanged.Builder>(internal__static_Gazillion_GuildMembersInfoChanged__Descriptor,
                new string[] { "GuildId", "Members", "InitiatingMemberName", "NewMember", });
        internal__static_Gazillion_GuildCompleteInfo__Descriptor = Descriptor.MessageTypes[15];
        internal__static_Gazillion_GuildCompleteInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildCompleteInfo, global::Gazillion.GuildCompleteInfo.Builder>(internal__static_Gazillion_GuildCompleteInfo__Descriptor,
                new string[] { "GuildId", "GuildName", "Members", });
        internal__static_Gazillion_GuildMessageSetToServer__Descriptor = Descriptor.MessageTypes[16];
        internal__static_Gazillion_GuildMessageSetToServer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildMessageSetToServer, global::Gazillion.GuildMessageSetToServer.Builder>(internal__static_Gazillion_GuildMessageSetToServer__Descriptor,
                new string[] { "GuildNameChanged", "GuildMembersInfoChanged", "GuildCompleteInfo", "GuildDisbanded", });
        internal__static_Gazillion_GuildMessageSetToClient__Descriptor = Descriptor.MessageTypes[17];
        internal__static_Gazillion_GuildMessageSetToClient__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildMessageSetToClient, global::Gazillion.GuildMessageSetToClient.Builder>(internal__static_Gazillion_GuildMessageSetToClient__Descriptor,
                new string[] { "GuildFormResult", "GuildChangeNameResult", "GuildInviteResult", "GuildRespondToInviteResult", "GuildChangeMemberResult", "GuildInvitedToJoin", "GuildNameChanged", "GuildMembersInfoChanged", "GuildCompleteInfo", "GuildDisbanded", });
        internal__static_Gazillion_GuildMessageSetToPlayerManager__Descriptor = Descriptor.MessageTypes[18];
        internal__static_Gazillion_GuildMessageSetToPlayerManager__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GuildMessageSetToPlayerManager, global::Gazillion.GuildMessageSetToPlayerManager.Builder>(internal__static_Gazillion_GuildMessageSetToPlayerManager__Descriptor,
                new string[] { "GuildForm", "GuildChangeName", "GuildInvite", "GuildRespondToInvite", "GuildChangeMember", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum GuildFormResultCode {
    eGFCInternalError = 0,
    eGFCGuildInErrorState = 1,
    eGFCNotOnline = 2,
    eGFCRestrictedName = 3,
    eGFCDuplicateName = 4,
    eGFCAlreadyInGuild = 5,
    eGFCWaitingForDatabase = 6,
    eGFCSuccess = 7,
  }
  
  public enum GuildChangeNameResultCode {
    eGCNRCInternalError = 0,
    eGCNRCGuildInErrorState = 1,
    eGCNRCNotOnline = 2,
    eGCNRCInvalidGuild = 3,
    eGCNRCNotInGuild = 4,
    eGCNRCRestrictedName = 5,
    eGCNRCDuplicateName = 6,
    eGCNRCNoPermission = 7,
    eGCNRCWaitingForDatabase = 8,
    eGCNRCSuccess = 9,
  }
  
  public enum GuildInviteResultCode {
    eGIRCInternalError = 0,
    eGIRCGuildInErrorState = 1,
    eGIRCInviterNotOnline = 2,
    eGIRCGuildFull = 3,
    eGIRCInvitedInGuild = 4,
    eGIRCInvitedInOtherGuild = 5,
    eGIRCInvitedUnkownPlayer = 6,
    eGIRCInviterNotInGuild = 7,
    eGIRCInviterNoPermission = 8,
    eGIRCSuccess = 9,
  }
  
  public enum GuildRespondToInviteCode {
    eGRICRejected = 0,
    eGRICAccepted = 1,
    eGRICAutoIgnored = 2,
  }
  
  public enum GuildRespondToInviteResultCode {
    eGRIRCInternalError = 0,
    eGRIRCGuildInErrorState = 1,
    eGRIRCNotOnline = 2,
    eGRIRCInvalidGuild = 3,
    eGRIRCAlreadyInGuild = 4,
    eGRIRCGuildFull = 5,
    eGRIRCNotInvited = 6,
    eGRIRCJoined = 7,
    eGRIRCRejected = 8,
  }
  
  public enum GuildMembership {
    eGMNone = 0,
    eGMMember = 1,
    eGMOfficer = 2,
    eGMLeader = 3,
  }
  
  public enum GuildChangeMemberResultCode {
    eGCMRCInternalError = 0,
    eGCMRCGuildInErrorState = 1,
    eGCMRCNotOnline = 2,
    eGCMRCInitiatorNotInGuild = 3,
    eGCMRCInitiatorNoPermission = 4,
    eGCMRCUnknownMember = 5,
    eGCMRCNoChange = 6,
    eGCMRCCantModifyLeader = 7,
    eGCMRCRequiresStaff = 8,
    eGCMRCRequiresLeader = 9,
    eGCMRCNoTransferLeadership = 10,
    eGCMRCSuccess = 11,
    eGCMRCSuccessGuildDissolved = 12,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GuildForm : pb::GeneratedMessage<GuildForm, GuildForm.Builder> {
    private GuildForm() { }
    private static readonly GuildForm defaultInstance = new GuildForm().MakeReadOnly();
    private static readonly string[] _guildFormFieldNames = new string[] { "guildName", "playerId" };
    private static readonly uint[] _guildFormFieldTags = new uint[] { 18, 8 };
    public static GuildForm DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildForm DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildForm ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildForm__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildForm, GuildForm.Builder> InternalFieldAccessors {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildForm__FieldAccessorTable; }
    }
    
    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private ulong playerId_;
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    public ulong PlayerId {
      get { return playerId_; }
    }
    
    public const int GuildNameFieldNumber = 2;
    private bool hasGuildName;
    private string guildName_ = "";
    public bool HasGuildName {
      get { return hasGuildName; }
    }
    public string GuildName {
      get { return guildName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerId) return false;
        if (!hasGuildName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _guildFormFieldNames;
      if (hasPlayerId) {
        output.WriteUInt64(1, field_names[1], PlayerId);
      }
      if (hasGuildName) {
        output.WriteString(2, field_names[0], GuildName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PlayerId);
      }
      if (hasGuildName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, GuildName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GuildForm ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildForm ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildForm ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildForm ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildForm ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildForm ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildForm ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildForm ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildForm ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildForm ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildForm MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildForm prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildForm, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildForm cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildForm result;
      
      private GuildForm PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildForm original = result;
          result = new GuildForm();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildForm MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GuildForm.Descriptor; }
      }
      
      public override GuildForm DefaultInstanceForType {
        get { return global::Gazillion.GuildForm.DefaultInstance; }
      }
      
      public override GuildForm BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildForm) {
          return MergeFrom((GuildForm) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildForm other) {
        if (other == global::Gazillion.GuildForm.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        if (other.HasGuildName) {
          GuildName = other.GuildName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildFormFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildFormFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerId = input.ReadUInt64(ref result.playerId_);
              break;
            }
            case 18: {
              result.hasGuildName = input.ReadString(ref result.guildName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      public ulong PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      public Builder SetPlayerId(ulong value) {
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = 0UL;
        return this;
      }
      
      public bool HasGuildName {
        get { return result.hasGuildName; }
      }
      public string GuildName {
        get { return result.GuildName; }
        set { SetGuildName(value); }
      }
      public Builder SetGuildName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildName = true;
        result.guildName_ = value;
        return this;
      }
      public Builder ClearGuildName() {
        PrepareBuilder();
        result.hasGuildName = false;
        result.guildName_ = "";
        return this;
      }
    }
    static GuildForm() {
      object.ReferenceEquals(global::Gazillion.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GuildFormResult : pb::GeneratedMessage<GuildFormResult, GuildFormResult.Builder> {
    private GuildFormResult() { }
    private static readonly GuildFormResult defaultInstance = new GuildFormResult().MakeReadOnly();
    private static readonly string[] _guildFormResultFieldNames = new string[] { "guildName", "resultCode" };
    private static readonly uint[] _guildFormResultFieldTags = new uint[] { 10, 16 };
    public static GuildFormResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildFormResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildFormResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildFormResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildFormResult, GuildFormResult.Builder> InternalFieldAccessors {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildFormResult__FieldAccessorTable; }
    }
    
    public const int GuildNameFieldNumber = 1;
    private bool hasGuildName;
    private string guildName_ = "";
    public bool HasGuildName {
      get { return hasGuildName; }
    }
    public string GuildName {
      get { return guildName_; }
    }
    
    public const int ResultCodeFieldNumber = 2;
    private bool hasResultCode;
    private global::Gazillion.GuildFormResultCode resultCode_ = global::Gazillion.GuildFormResultCode.eGFCInternalError;
    public bool HasResultCode {
      get { return hasResultCode; }
    }
    public global::Gazillion.GuildFormResultCode ResultCode {
      get { return resultCode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildName) return false;
        if (!hasResultCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _guildFormResultFieldNames;
      if (hasGuildName) {
        output.WriteString(1, field_names[0], GuildName);
      }
      if (hasResultCode) {
        output.WriteEnum(2, field_names[1], (int) ResultCode, ResultCode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGuildName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, GuildName);
      }
      if (hasResultCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) ResultCode);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GuildFormResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildFormResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildFormResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildFormResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildFormResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildFormResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildFormResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildFormResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildFormResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildFormResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildFormResult MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildFormResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildFormResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildFormResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildFormResult result;
      
      private GuildFormResult PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildFormResult original = result;
          result = new GuildFormResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildFormResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GuildFormResult.Descriptor; }
      }
      
      public override GuildFormResult DefaultInstanceForType {
        get { return global::Gazillion.GuildFormResult.DefaultInstance; }
      }
      
      public override GuildFormResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildFormResult) {
          return MergeFrom((GuildFormResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildFormResult other) {
        if (other == global::Gazillion.GuildFormResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildName) {
          GuildName = other.GuildName;
        }
        if (other.HasResultCode) {
          ResultCode = other.ResultCode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildFormResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildFormResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasGuildName = input.ReadString(ref result.guildName_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.resultCode_, out unknown)) {
                result.hasResultCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildName {
        get { return result.hasGuildName; }
      }
      public string GuildName {
        get { return result.GuildName; }
        set { SetGuildName(value); }
      }
      public Builder SetGuildName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildName = true;
        result.guildName_ = value;
        return this;
      }
      public Builder ClearGuildName() {
        PrepareBuilder();
        result.hasGuildName = false;
        result.guildName_ = "";
        return this;
      }
      
      public bool HasResultCode {
       get { return result.hasResultCode; }
      }
      public global::Gazillion.GuildFormResultCode ResultCode {
        get { return result.ResultCode; }
        set { SetResultCode(value); }
      }
      public Builder SetResultCode(global::Gazillion.GuildFormResultCode value) {
        PrepareBuilder();
        result.hasResultCode = true;
        result.resultCode_ = value;
        return this;
      }
      public Builder ClearResultCode() {
        PrepareBuilder();
        result.hasResultCode = false;
        result.resultCode_ = global::Gazillion.GuildFormResultCode.eGFCInternalError;
        return this;
      }
    }
    static GuildFormResult() {
      object.ReferenceEquals(global::Gazillion.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GuildDisbanded : pb::GeneratedMessage<GuildDisbanded, GuildDisbanded.Builder> {
    private GuildDisbanded() { }
    private static readonly GuildDisbanded defaultInstance = new GuildDisbanded().MakeReadOnly();
    private static readonly string[] _guildDisbandedFieldNames = new string[] { "disbandingPlayerName", "guildId" };
    private static readonly uint[] _guildDisbandedFieldTags = new uint[] { 18, 8 };
    public static GuildDisbanded DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildDisbanded DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildDisbanded ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildDisbanded__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildDisbanded, GuildDisbanded.Builder> InternalFieldAccessors {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildDisbanded__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int DisbandingPlayerNameFieldNumber = 2;
    private bool hasDisbandingPlayerName;
    private string disbandingPlayerName_ = "";
    public bool HasDisbandingPlayerName {
      get { return hasDisbandingPlayerName; }
    }
    public string DisbandingPlayerName {
      get { return disbandingPlayerName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasDisbandingPlayerName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _guildDisbandedFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[1], GuildId);
      }
      if (hasDisbandingPlayerName) {
        output.WriteString(2, field_names[0], DisbandingPlayerName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGuildId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
      }
      if (hasDisbandingPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, DisbandingPlayerName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GuildDisbanded ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildDisbanded ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildDisbanded ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildDisbanded ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildDisbanded ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildDisbanded ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildDisbanded ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildDisbanded ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildDisbanded ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildDisbanded ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildDisbanded MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildDisbanded prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildDisbanded, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildDisbanded cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildDisbanded result;
      
      private GuildDisbanded PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildDisbanded original = result;
          result = new GuildDisbanded();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildDisbanded MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GuildDisbanded.Descriptor; }
      }
      
      public override GuildDisbanded DefaultInstanceForType {
        get { return global::Gazillion.GuildDisbanded.DefaultInstance; }
      }
      
      public override GuildDisbanded BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildDisbanded) {
          return MergeFrom((GuildDisbanded) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildDisbanded other) {
        if (other == global::Gazillion.GuildDisbanded.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasDisbandingPlayerName) {
          DisbandingPlayerName = other.DisbandingPlayerName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildDisbandedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildDisbandedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 18: {
              result.hasDisbandingPlayerName = input.ReadString(ref result.disbandingPlayerName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasDisbandingPlayerName {
        get { return result.hasDisbandingPlayerName; }
      }
      public string DisbandingPlayerName {
        get { return result.DisbandingPlayerName; }
        set { SetDisbandingPlayerName(value); }
      }
      public Builder SetDisbandingPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDisbandingPlayerName = true;
        result.disbandingPlayerName_ = value;
        return this;
      }
      public Builder ClearDisbandingPlayerName() {
        PrepareBuilder();
        result.hasDisbandingPlayerName = false;
        result.disbandingPlayerName_ = "";
        return this;
      }
    }
    static GuildDisbanded() {
      object.ReferenceEquals(global::Gazillion.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GuildChangeName : pb::GeneratedMessage<GuildChangeName, GuildChangeName.Builder> {
    private GuildChangeName() { }
    private static readonly GuildChangeName defaultInstance = new GuildChangeName().MakeReadOnly();
    private static readonly string[] _guildChangeNameFieldNames = new string[] { "guildName", "playerId" };
    private static readonly uint[] _guildChangeNameFieldTags = new uint[] { 18, 8 };
    public static GuildChangeName DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildChangeName DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildChangeName ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildChangeName__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildChangeName, GuildChangeName.Builder> InternalFieldAccessors {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildChangeName__FieldAccessorTable; }
    }
    
    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private ulong playerId_;
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    public ulong PlayerId {
      get { return playerId_; }
    }
    
    public const int GuildNameFieldNumber = 2;
    private bool hasGuildName;
    private string guildName_ = "";
    public bool HasGuildName {
      get { return hasGuildName; }
    }
    public string GuildName {
      get { return guildName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerId) return false;
        if (!hasGuildName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _guildChangeNameFieldNames;
      if (hasPlayerId) {
        output.WriteUInt64(1, field_names[1], PlayerId);
      }
      if (hasGuildName) {
        output.WriteString(2, field_names[0], GuildName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PlayerId);
      }
      if (hasGuildName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, GuildName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GuildChangeName ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildChangeName ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildChangeName ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildChangeName ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildChangeName ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildChangeName ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildChangeName ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildChangeName ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildChangeName ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildChangeName ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildChangeName MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildChangeName prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildChangeName, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildChangeName cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildChangeName result;
      
      private GuildChangeName PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildChangeName original = result;
          result = new GuildChangeName();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildChangeName MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GuildChangeName.Descriptor; }
      }
      
      public override GuildChangeName DefaultInstanceForType {
        get { return global::Gazillion.GuildChangeName.DefaultInstance; }
      }
      
      public override GuildChangeName BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildChangeName) {
          return MergeFrom((GuildChangeName) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildChangeName other) {
        if (other == global::Gazillion.GuildChangeName.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        if (other.HasGuildName) {
          GuildName = other.GuildName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildChangeNameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildChangeNameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerId = input.ReadUInt64(ref result.playerId_);
              break;
            }
            case 18: {
              result.hasGuildName = input.ReadString(ref result.guildName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      public ulong PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      public Builder SetPlayerId(ulong value) {
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = 0UL;
        return this;
      }
      
      public bool HasGuildName {
        get { return result.hasGuildName; }
      }
      public string GuildName {
        get { return result.GuildName; }
        set { SetGuildName(value); }
      }
      public Builder SetGuildName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildName = true;
        result.guildName_ = value;
        return this;
      }
      public Builder ClearGuildName() {
        PrepareBuilder();
        result.hasGuildName = false;
        result.guildName_ = "";
        return this;
      }
    }
    static GuildChangeName() {
      object.ReferenceEquals(global::Gazillion.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GuildChangeNameResult : pb::GeneratedMessage<GuildChangeNameResult, GuildChangeNameResult.Builder> {
    private GuildChangeNameResult() { }
    private static readonly GuildChangeNameResult defaultInstance = new GuildChangeNameResult().MakeReadOnly();
    private static readonly string[] _guildChangeNameResultFieldNames = new string[] { "resultCode", "submittedName" };
    private static readonly uint[] _guildChangeNameResultFieldTags = new uint[] { 16, 10 };
    public static GuildChangeNameResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildChangeNameResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildChangeNameResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildChangeNameResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildChangeNameResult, GuildChangeNameResult.Builder> InternalFieldAccessors {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildChangeNameResult__FieldAccessorTable; }
    }
    
    public const int SubmittedNameFieldNumber = 1;
    private bool hasSubmittedName;
    private string submittedName_ = "";
    public bool HasSubmittedName {
      get { return hasSubmittedName; }
    }
    public string SubmittedName {
      get { return submittedName_; }
    }
    
    public const int ResultCodeFieldNumber = 2;
    private bool hasResultCode;
    private global::Gazillion.GuildChangeNameResultCode resultCode_ = global::Gazillion.GuildChangeNameResultCode.eGCNRCInternalError;
    public bool HasResultCode {
      get { return hasResultCode; }
    }
    public global::Gazillion.GuildChangeNameResultCode ResultCode {
      get { return resultCode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSubmittedName) return false;
        if (!hasResultCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _guildChangeNameResultFieldNames;
      if (hasSubmittedName) {
        output.WriteString(1, field_names[1], SubmittedName);
      }
      if (hasResultCode) {
        output.WriteEnum(2, field_names[0], (int) ResultCode, ResultCode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSubmittedName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, SubmittedName);
      }
      if (hasResultCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) ResultCode);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GuildChangeNameResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildChangeNameResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildChangeNameResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildChangeNameResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildChangeNameResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildChangeNameResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildChangeNameResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildChangeNameResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildChangeNameResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildChangeNameResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildChangeNameResult MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildChangeNameResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildChangeNameResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildChangeNameResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildChangeNameResult result;
      
      private GuildChangeNameResult PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildChangeNameResult original = result;
          result = new GuildChangeNameResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildChangeNameResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GuildChangeNameResult.Descriptor; }
      }
      
      public override GuildChangeNameResult DefaultInstanceForType {
        get { return global::Gazillion.GuildChangeNameResult.DefaultInstance; }
      }
      
      public override GuildChangeNameResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildChangeNameResult) {
          return MergeFrom((GuildChangeNameResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildChangeNameResult other) {
        if (other == global::Gazillion.GuildChangeNameResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSubmittedName) {
          SubmittedName = other.SubmittedName;
        }
        if (other.HasResultCode) {
          ResultCode = other.ResultCode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildChangeNameResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildChangeNameResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSubmittedName = input.ReadString(ref result.submittedName_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.resultCode_, out unknown)) {
                result.hasResultCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSubmittedName {
        get { return result.hasSubmittedName; }
      }
      public string SubmittedName {
        get { return result.SubmittedName; }
        set { SetSubmittedName(value); }
      }
      public Builder SetSubmittedName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSubmittedName = true;
        result.submittedName_ = value;
        return this;
      }
      public Builder ClearSubmittedName() {
        PrepareBuilder();
        result.hasSubmittedName = false;
        result.submittedName_ = "";
        return this;
      }
      
      public bool HasResultCode {
       get { return result.hasResultCode; }
      }
      public global::Gazillion.GuildChangeNameResultCode ResultCode {
        get { return result.ResultCode; }
        set { SetResultCode(value); }
      }
      public Builder SetResultCode(global::Gazillion.GuildChangeNameResultCode value) {
        PrepareBuilder();
        result.hasResultCode = true;
        result.resultCode_ = value;
        return this;
      }
      public Builder ClearResultCode() {
        PrepareBuilder();
        result.hasResultCode = false;
        result.resultCode_ = global::Gazillion.GuildChangeNameResultCode.eGCNRCInternalError;
        return this;
      }
    }
    static GuildChangeNameResult() {
      object.ReferenceEquals(global::Gazillion.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GuildNameChanged : pb::GeneratedMessage<GuildNameChanged, GuildNameChanged.Builder> {
    private GuildNameChanged() { }
    private static readonly GuildNameChanged defaultInstance = new GuildNameChanged().MakeReadOnly();
    private static readonly string[] _guildNameChangedFieldNames = new string[] { "changedByPlayerName", "guildId", "newGuildName" };
    private static readonly uint[] _guildNameChangedFieldTags = new uint[] { 26, 8, 18 };
    public static GuildNameChanged DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildNameChanged DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildNameChanged ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildNameChanged__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildNameChanged, GuildNameChanged.Builder> InternalFieldAccessors {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildNameChanged__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int NewGuildNameFieldNumber = 2;
    private bool hasNewGuildName;
    private string newGuildName_ = "";
    public bool HasNewGuildName {
      get { return hasNewGuildName; }
    }
    public string NewGuildName {
      get { return newGuildName_; }
    }
    
    public const int ChangedByPlayerNameFieldNumber = 3;
    private bool hasChangedByPlayerName;
    private string changedByPlayerName_ = "";
    public bool HasChangedByPlayerName {
      get { return hasChangedByPlayerName; }
    }
    public string ChangedByPlayerName {
      get { return changedByPlayerName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasNewGuildName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _guildNameChangedFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[1], GuildId);
      }
      if (hasNewGuildName) {
        output.WriteString(2, field_names[2], NewGuildName);
      }
      if (hasChangedByPlayerName) {
        output.WriteString(3, field_names[0], ChangedByPlayerName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGuildId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
      }
      if (hasNewGuildName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, NewGuildName);
      }
      if (hasChangedByPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, ChangedByPlayerName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GuildNameChanged ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildNameChanged ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildNameChanged ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildNameChanged ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildNameChanged ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildNameChanged ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildNameChanged ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildNameChanged ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildNameChanged ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildNameChanged ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildNameChanged MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildNameChanged prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildNameChanged, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildNameChanged cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildNameChanged result;
      
      private GuildNameChanged PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildNameChanged original = result;
          result = new GuildNameChanged();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildNameChanged MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GuildNameChanged.Descriptor; }
      }
      
      public override GuildNameChanged DefaultInstanceForType {
        get { return global::Gazillion.GuildNameChanged.DefaultInstance; }
      }
      
      public override GuildNameChanged BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildNameChanged) {
          return MergeFrom((GuildNameChanged) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildNameChanged other) {
        if (other == global::Gazillion.GuildNameChanged.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasNewGuildName) {
          NewGuildName = other.NewGuildName;
        }
        if (other.HasChangedByPlayerName) {
          ChangedByPlayerName = other.ChangedByPlayerName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildNameChangedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildNameChangedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 18: {
              result.hasNewGuildName = input.ReadString(ref result.newGuildName_);
              break;
            }
            case 26: {
              result.hasChangedByPlayerName = input.ReadString(ref result.changedByPlayerName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasNewGuildName {
        get { return result.hasNewGuildName; }
      }
      public string NewGuildName {
        get { return result.NewGuildName; }
        set { SetNewGuildName(value); }
      }
      public Builder SetNewGuildName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewGuildName = true;
        result.newGuildName_ = value;
        return this;
      }
      public Builder ClearNewGuildName() {
        PrepareBuilder();
        result.hasNewGuildName = false;
        result.newGuildName_ = "";
        return this;
      }
      
      public bool HasChangedByPlayerName {
        get { return result.hasChangedByPlayerName; }
      }
      public string ChangedByPlayerName {
        get { return result.ChangedByPlayerName; }
        set { SetChangedByPlayerName(value); }
      }
      public Builder SetChangedByPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChangedByPlayerName = true;
        result.changedByPlayerName_ = value;
        return this;
      }
      public Builder ClearChangedByPlayerName() {
        PrepareBuilder();
        result.hasChangedByPlayerName = false;
        result.changedByPlayerName_ = "";
        return this;
      }
    }
    static GuildNameChanged() {
      object.ReferenceEquals(global::Gazillion.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GuildInvite : pb::GeneratedMessage<GuildInvite, GuildInvite.Builder> {
    private GuildInvite() { }
    private static readonly GuildInvite defaultInstance = new GuildInvite().MakeReadOnly();
    private static readonly string[] _guildInviteFieldNames = new string[] { "invitedByPlayerId", "toInvitePlayerName" };
    private static readonly uint[] _guildInviteFieldTags = new uint[] { 16, 10 };
    public static GuildInvite DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildInvite DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildInvite ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildInvite__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildInvite, GuildInvite.Builder> InternalFieldAccessors {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildInvite__FieldAccessorTable; }
    }
    
    public const int ToInvitePlayerNameFieldNumber = 1;
    private bool hasToInvitePlayerName;
    private string toInvitePlayerName_ = "";
    public bool HasToInvitePlayerName {
      get { return hasToInvitePlayerName; }
    }
    public string ToInvitePlayerName {
      get { return toInvitePlayerName_; }
    }
    
    public const int InvitedByPlayerIdFieldNumber = 2;
    private bool hasInvitedByPlayerId;
    private ulong invitedByPlayerId_;
    public bool HasInvitedByPlayerId {
      get { return hasInvitedByPlayerId; }
    }
    public ulong InvitedByPlayerId {
      get { return invitedByPlayerId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasToInvitePlayerName) return false;
        if (!hasInvitedByPlayerId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _guildInviteFieldNames;
      if (hasToInvitePlayerName) {
        output.WriteString(1, field_names[1], ToInvitePlayerName);
      }
      if (hasInvitedByPlayerId) {
        output.WriteUInt64(2, field_names[0], InvitedByPlayerId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasToInvitePlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, ToInvitePlayerName);
      }
      if (hasInvitedByPlayerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, InvitedByPlayerId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GuildInvite ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildInvite ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildInvite ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildInvite ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildInvite ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildInvite ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildInvite ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildInvite ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildInvite ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildInvite ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildInvite MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildInvite prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildInvite, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildInvite cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildInvite result;
      
      private GuildInvite PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildInvite original = result;
          result = new GuildInvite();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildInvite MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GuildInvite.Descriptor; }
      }
      
      public override GuildInvite DefaultInstanceForType {
        get { return global::Gazillion.GuildInvite.DefaultInstance; }
      }
      
      public override GuildInvite BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildInvite) {
          return MergeFrom((GuildInvite) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildInvite other) {
        if (other == global::Gazillion.GuildInvite.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasToInvitePlayerName) {
          ToInvitePlayerName = other.ToInvitePlayerName;
        }
        if (other.HasInvitedByPlayerId) {
          InvitedByPlayerId = other.InvitedByPlayerId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildInviteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildInviteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasToInvitePlayerName = input.ReadString(ref result.toInvitePlayerName_);
              break;
            }
            case 16: {
              result.hasInvitedByPlayerId = input.ReadUInt64(ref result.invitedByPlayerId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasToInvitePlayerName {
        get { return result.hasToInvitePlayerName; }
      }
      public string ToInvitePlayerName {
        get { return result.ToInvitePlayerName; }
        set { SetToInvitePlayerName(value); }
      }
      public Builder SetToInvitePlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToInvitePlayerName = true;
        result.toInvitePlayerName_ = value;
        return this;
      }
      public Builder ClearToInvitePlayerName() {
        PrepareBuilder();
        result.hasToInvitePlayerName = false;
        result.toInvitePlayerName_ = "";
        return this;
      }
      
      public bool HasInvitedByPlayerId {
        get { return result.hasInvitedByPlayerId; }
      }
      public ulong InvitedByPlayerId {
        get { return result.InvitedByPlayerId; }
        set { SetInvitedByPlayerId(value); }
      }
      public Builder SetInvitedByPlayerId(ulong value) {
        PrepareBuilder();
        result.hasInvitedByPlayerId = true;
        result.invitedByPlayerId_ = value;
        return this;
      }
      public Builder ClearInvitedByPlayerId() {
        PrepareBuilder();
        result.hasInvitedByPlayerId = false;
        result.invitedByPlayerId_ = 0UL;
        return this;
      }
    }
    static GuildInvite() {
      object.ReferenceEquals(global::Gazillion.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GuildInviteResult : pb::GeneratedMessage<GuildInviteResult, GuildInviteResult.Builder> {
    private GuildInviteResult() { }
    private static readonly GuildInviteResult defaultInstance = new GuildInviteResult().MakeReadOnly();
    private static readonly string[] _guildInviteResultFieldNames = new string[] { "invite", "resultCode" };
    private static readonly uint[] _guildInviteResultFieldTags = new uint[] { 10, 16 };
    public static GuildInviteResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildInviteResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildInviteResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildInviteResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildInviteResult, GuildInviteResult.Builder> InternalFieldAccessors {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildInviteResult__FieldAccessorTable; }
    }
    
    public const int InviteFieldNumber = 1;
    private bool hasInvite;
    private global::Gazillion.GuildInvite invite_;
    public bool HasInvite {
      get { return hasInvite; }
    }
    public global::Gazillion.GuildInvite Invite {
      get { return invite_ ?? global::Gazillion.GuildInvite.DefaultInstance; }
    }
    
    public const int ResultCodeFieldNumber = 2;
    private bool hasResultCode;
    private global::Gazillion.GuildInviteResultCode resultCode_ = global::Gazillion.GuildInviteResultCode.eGIRCInternalError;
    public bool HasResultCode {
      get { return hasResultCode; }
    }
    public global::Gazillion.GuildInviteResultCode ResultCode {
      get { return resultCode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasInvite) return false;
        if (!hasResultCode) return false;
        if (!Invite.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _guildInviteResultFieldNames;
      if (hasInvite) {
        output.WriteMessage(1, field_names[0], Invite);
      }
      if (hasResultCode) {
        output.WriteEnum(2, field_names[1], (int) ResultCode, ResultCode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasInvite) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Invite);
      }
      if (hasResultCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) ResultCode);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GuildInviteResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildInviteResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildInviteResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildInviteResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildInviteResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildInviteResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildInviteResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildInviteResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildInviteResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildInviteResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildInviteResult MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildInviteResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildInviteResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildInviteResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildInviteResult result;
      
      private GuildInviteResult PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildInviteResult original = result;
          result = new GuildInviteResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildInviteResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GuildInviteResult.Descriptor; }
      }
      
      public override GuildInviteResult DefaultInstanceForType {
        get { return global::Gazillion.GuildInviteResult.DefaultInstance; }
      }
      
      public override GuildInviteResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildInviteResult) {
          return MergeFrom((GuildInviteResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildInviteResult other) {
        if (other == global::Gazillion.GuildInviteResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasInvite) {
          MergeInvite(other.Invite);
        }
        if (other.HasResultCode) {
          ResultCode = other.ResultCode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildInviteResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildInviteResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.GuildInvite.Builder subBuilder = global::Gazillion.GuildInvite.CreateBuilder();
              if (result.hasInvite) {
                subBuilder.MergeFrom(Invite);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Invite = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.resultCode_, out unknown)) {
                result.hasResultCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasInvite {
       get { return result.hasInvite; }
      }
      public global::Gazillion.GuildInvite Invite {
        get { return result.Invite; }
        set { SetInvite(value); }
      }
      public Builder SetInvite(global::Gazillion.GuildInvite value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvite = true;
        result.invite_ = value;
        return this;
      }
      public Builder SetInvite(global::Gazillion.GuildInvite.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasInvite = true;
        result.invite_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInvite(global::Gazillion.GuildInvite value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasInvite &&
            result.invite_ != global::Gazillion.GuildInvite.DefaultInstance) {
            result.invite_ = global::Gazillion.GuildInvite.CreateBuilder(result.invite_).MergeFrom(value).BuildPartial();
        } else {
          result.invite_ = value;
        }
        result.hasInvite = true;
        return this;
      }
      public Builder ClearInvite() {
        PrepareBuilder();
        result.hasInvite = false;
        result.invite_ = null;
        return this;
      }
      
      public bool HasResultCode {
       get { return result.hasResultCode; }
      }
      public global::Gazillion.GuildInviteResultCode ResultCode {
        get { return result.ResultCode; }
        set { SetResultCode(value); }
      }
      public Builder SetResultCode(global::Gazillion.GuildInviteResultCode value) {
        PrepareBuilder();
        result.hasResultCode = true;
        result.resultCode_ = value;
        return this;
      }
      public Builder ClearResultCode() {
        PrepareBuilder();
        result.hasResultCode = false;
        result.resultCode_ = global::Gazillion.GuildInviteResultCode.eGIRCInternalError;
        return this;
      }
    }
    static GuildInviteResult() {
      object.ReferenceEquals(global::Gazillion.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GuildInvitedToJoin : pb::GeneratedMessage<GuildInvitedToJoin, GuildInvitedToJoin.Builder> {
    private GuildInvitedToJoin() { }
    private static readonly GuildInvitedToJoin defaultInstance = new GuildInvitedToJoin().MakeReadOnly();
    private static readonly string[] _guildInvitedToJoinFieldNames = new string[] { "guildId", "guildName", "invitedByPlayerName" };
    private static readonly uint[] _guildInvitedToJoinFieldTags = new uint[] { 8, 18, 26 };
    public static GuildInvitedToJoin DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildInvitedToJoin DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildInvitedToJoin ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildInvitedToJoin__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildInvitedToJoin, GuildInvitedToJoin.Builder> InternalFieldAccessors {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildInvitedToJoin__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int GuildNameFieldNumber = 2;
    private bool hasGuildName;
    private string guildName_ = "";
    public bool HasGuildName {
      get { return hasGuildName; }
    }
    public string GuildName {
      get { return guildName_; }
    }
    
    public const int InvitedByPlayerNameFieldNumber = 3;
    private bool hasInvitedByPlayerName;
    private string invitedByPlayerName_ = "";
    public bool HasInvitedByPlayerName {
      get { return hasInvitedByPlayerName; }
    }
    public string InvitedByPlayerName {
      get { return invitedByPlayerName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasGuildName) return false;
        if (!hasInvitedByPlayerName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _guildInvitedToJoinFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasGuildName) {
        output.WriteString(2, field_names[1], GuildName);
      }
      if (hasInvitedByPlayerName) {
        output.WriteString(3, field_names[2], InvitedByPlayerName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGuildId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
      }
      if (hasGuildName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, GuildName);
      }
      if (hasInvitedByPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, InvitedByPlayerName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GuildInvitedToJoin ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildInvitedToJoin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildInvitedToJoin ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildInvitedToJoin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildInvitedToJoin ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildInvitedToJoin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildInvitedToJoin ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildInvitedToJoin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildInvitedToJoin ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildInvitedToJoin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildInvitedToJoin MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildInvitedToJoin prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildInvitedToJoin, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildInvitedToJoin cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildInvitedToJoin result;
      
      private GuildInvitedToJoin PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildInvitedToJoin original = result;
          result = new GuildInvitedToJoin();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildInvitedToJoin MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GuildInvitedToJoin.Descriptor; }
      }
      
      public override GuildInvitedToJoin DefaultInstanceForType {
        get { return global::Gazillion.GuildInvitedToJoin.DefaultInstance; }
      }
      
      public override GuildInvitedToJoin BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildInvitedToJoin) {
          return MergeFrom((GuildInvitedToJoin) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildInvitedToJoin other) {
        if (other == global::Gazillion.GuildInvitedToJoin.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasGuildName) {
          GuildName = other.GuildName;
        }
        if (other.HasInvitedByPlayerName) {
          InvitedByPlayerName = other.InvitedByPlayerName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildInvitedToJoinFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildInvitedToJoinFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 18: {
              result.hasGuildName = input.ReadString(ref result.guildName_);
              break;
            }
            case 26: {
              result.hasInvitedByPlayerName = input.ReadString(ref result.invitedByPlayerName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasGuildName {
        get { return result.hasGuildName; }
      }
      public string GuildName {
        get { return result.GuildName; }
        set { SetGuildName(value); }
      }
      public Builder SetGuildName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildName = true;
        result.guildName_ = value;
        return this;
      }
      public Builder ClearGuildName() {
        PrepareBuilder();
        result.hasGuildName = false;
        result.guildName_ = "";
        return this;
      }
      
      public bool HasInvitedByPlayerName {
        get { return result.hasInvitedByPlayerName; }
      }
      public string InvitedByPlayerName {
        get { return result.InvitedByPlayerName; }
        set { SetInvitedByPlayerName(value); }
      }
      public Builder SetInvitedByPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvitedByPlayerName = true;
        result.invitedByPlayerName_ = value;
        return this;
      }
      public Builder ClearInvitedByPlayerName() {
        PrepareBuilder();
        result.hasInvitedByPlayerName = false;
        result.invitedByPlayerName_ = "";
        return this;
      }
    }
    static GuildInvitedToJoin() {
      object.ReferenceEquals(global::Gazillion.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GuildRespondToInvite : pb::GeneratedMessage<GuildRespondToInvite, GuildRespondToInvite.Builder> {
    private GuildRespondToInvite() { }
    private static readonly GuildRespondToInvite defaultInstance = new GuildRespondToInvite().MakeReadOnly();
    private static readonly string[] _guildRespondToInviteFieldNames = new string[] { "guildId", "playerId", "respondCode" };
    private static readonly uint[] _guildRespondToInviteFieldTags = new uint[] { 16, 8, 24 };
    public static GuildRespondToInvite DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildRespondToInvite DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildRespondToInvite ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildRespondToInvite__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildRespondToInvite, GuildRespondToInvite.Builder> InternalFieldAccessors {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildRespondToInvite__FieldAccessorTable; }
    }
    
    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private ulong playerId_;
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    public ulong PlayerId {
      get { return playerId_; }
    }
    
    public const int GuildIdFieldNumber = 2;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int RespondCodeFieldNumber = 3;
    private bool hasRespondCode;
    private global::Gazillion.GuildRespondToInviteCode respondCode_ = global::Gazillion.GuildRespondToInviteCode.eGRICRejected;
    public bool HasRespondCode {
      get { return hasRespondCode; }
    }
    public global::Gazillion.GuildRespondToInviteCode RespondCode {
      get { return respondCode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerId) return false;
        if (!hasGuildId) return false;
        if (!hasRespondCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _guildRespondToInviteFieldNames;
      if (hasPlayerId) {
        output.WriteUInt64(1, field_names[1], PlayerId);
      }
      if (hasGuildId) {
        output.WriteUInt64(2, field_names[0], GuildId);
      }
      if (hasRespondCode) {
        output.WriteEnum(3, field_names[2], (int) RespondCode, RespondCode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PlayerId);
      }
      if (hasGuildId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, GuildId);
      }
      if (hasRespondCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) RespondCode);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GuildRespondToInvite ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildRespondToInvite ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildRespondToInvite ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildRespondToInvite ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildRespondToInvite ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildRespondToInvite ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildRespondToInvite ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildRespondToInvite ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildRespondToInvite ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildRespondToInvite ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildRespondToInvite MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildRespondToInvite prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildRespondToInvite, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildRespondToInvite cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildRespondToInvite result;
      
      private GuildRespondToInvite PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildRespondToInvite original = result;
          result = new GuildRespondToInvite();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildRespondToInvite MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GuildRespondToInvite.Descriptor; }
      }
      
      public override GuildRespondToInvite DefaultInstanceForType {
        get { return global::Gazillion.GuildRespondToInvite.DefaultInstance; }
      }
      
      public override GuildRespondToInvite BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildRespondToInvite) {
          return MergeFrom((GuildRespondToInvite) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildRespondToInvite other) {
        if (other == global::Gazillion.GuildRespondToInvite.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasRespondCode) {
          RespondCode = other.RespondCode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildRespondToInviteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildRespondToInviteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerId = input.ReadUInt64(ref result.playerId_);
              break;
            }
            case 16: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.respondCode_, out unknown)) {
                result.hasRespondCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      public ulong PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      public Builder SetPlayerId(ulong value) {
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = 0UL;
        return this;
      }
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasRespondCode {
       get { return result.hasRespondCode; }
      }
      public global::Gazillion.GuildRespondToInviteCode RespondCode {
        get { return result.RespondCode; }
        set { SetRespondCode(value); }
      }
      public Builder SetRespondCode(global::Gazillion.GuildRespondToInviteCode value) {
        PrepareBuilder();
        result.hasRespondCode = true;
        result.respondCode_ = value;
        return this;
      }
      public Builder ClearRespondCode() {
        PrepareBuilder();
        result.hasRespondCode = false;
        result.respondCode_ = global::Gazillion.GuildRespondToInviteCode.eGRICRejected;
        return this;
      }
    }
    static GuildRespondToInvite() {
      object.ReferenceEquals(global::Gazillion.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GuildRespondToInviteResult : pb::GeneratedMessage<GuildRespondToInviteResult, GuildRespondToInviteResult.Builder> {
    private GuildRespondToInviteResult() { }
    private static readonly GuildRespondToInviteResult defaultInstance = new GuildRespondToInviteResult().MakeReadOnly();
    private static readonly string[] _guildRespondToInviteResultFieldNames = new string[] { "guildName", "resultCode" };
    private static readonly uint[] _guildRespondToInviteResultFieldTags = new uint[] { 18, 8 };
    public static GuildRespondToInviteResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildRespondToInviteResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildRespondToInviteResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildRespondToInviteResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildRespondToInviteResult, GuildRespondToInviteResult.Builder> InternalFieldAccessors {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildRespondToInviteResult__FieldAccessorTable; }
    }
    
    public const int ResultCodeFieldNumber = 1;
    private bool hasResultCode;
    private global::Gazillion.GuildRespondToInviteResultCode resultCode_ = global::Gazillion.GuildRespondToInviteResultCode.eGRIRCInternalError;
    public bool HasResultCode {
      get { return hasResultCode; }
    }
    public global::Gazillion.GuildRespondToInviteResultCode ResultCode {
      get { return resultCode_; }
    }
    
    public const int GuildNameFieldNumber = 2;
    private bool hasGuildName;
    private string guildName_ = "";
    public bool HasGuildName {
      get { return hasGuildName; }
    }
    public string GuildName {
      get { return guildName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasResultCode) return false;
        if (!hasGuildName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _guildRespondToInviteResultFieldNames;
      if (hasResultCode) {
        output.WriteEnum(1, field_names[1], (int) ResultCode, ResultCode);
      }
      if (hasGuildName) {
        output.WriteString(2, field_names[0], GuildName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResultCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) ResultCode);
      }
      if (hasGuildName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, GuildName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GuildRespondToInviteResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildRespondToInviteResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildRespondToInviteResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildRespondToInviteResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildRespondToInviteResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildRespondToInviteResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildRespondToInviteResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildRespondToInviteResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildRespondToInviteResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildRespondToInviteResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildRespondToInviteResult MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildRespondToInviteResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildRespondToInviteResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildRespondToInviteResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildRespondToInviteResult result;
      
      private GuildRespondToInviteResult PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildRespondToInviteResult original = result;
          result = new GuildRespondToInviteResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildRespondToInviteResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GuildRespondToInviteResult.Descriptor; }
      }
      
      public override GuildRespondToInviteResult DefaultInstanceForType {
        get { return global::Gazillion.GuildRespondToInviteResult.DefaultInstance; }
      }
      
      public override GuildRespondToInviteResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildRespondToInviteResult) {
          return MergeFrom((GuildRespondToInviteResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildRespondToInviteResult other) {
        if (other == global::Gazillion.GuildRespondToInviteResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResultCode) {
          ResultCode = other.ResultCode;
        }
        if (other.HasGuildName) {
          GuildName = other.GuildName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildRespondToInviteResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildRespondToInviteResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.resultCode_, out unknown)) {
                result.hasResultCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasGuildName = input.ReadString(ref result.guildName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasResultCode {
       get { return result.hasResultCode; }
      }
      public global::Gazillion.GuildRespondToInviteResultCode ResultCode {
        get { return result.ResultCode; }
        set { SetResultCode(value); }
      }
      public Builder SetResultCode(global::Gazillion.GuildRespondToInviteResultCode value) {
        PrepareBuilder();
        result.hasResultCode = true;
        result.resultCode_ = value;
        return this;
      }
      public Builder ClearResultCode() {
        PrepareBuilder();
        result.hasResultCode = false;
        result.resultCode_ = global::Gazillion.GuildRespondToInviteResultCode.eGRIRCInternalError;
        return this;
      }
      
      public bool HasGuildName {
        get { return result.hasGuildName; }
      }
      public string GuildName {
        get { return result.GuildName; }
        set { SetGuildName(value); }
      }
      public Builder SetGuildName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildName = true;
        result.guildName_ = value;
        return this;
      }
      public Builder ClearGuildName() {
        PrepareBuilder();
        result.hasGuildName = false;
        result.guildName_ = "";
        return this;
      }
    }
    static GuildRespondToInviteResult() {
      object.ReferenceEquals(global::Gazillion.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GuildMemberInfo : pb::GeneratedMessage<GuildMemberInfo, GuildMemberInfo.Builder> {
    private GuildMemberInfo() { }
    private static readonly GuildMemberInfo defaultInstance = new GuildMemberInfo().MakeReadOnly();
    private static readonly string[] _guildMemberInfoFieldNames = new string[] { "membership", "playerId", "playerName" };
    private static readonly uint[] _guildMemberInfoFieldTags = new uint[] { 24, 8, 18 };
    public static GuildMemberInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildMemberInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildMemberInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildMemberInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildMemberInfo, GuildMemberInfo.Builder> InternalFieldAccessors {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildMemberInfo__FieldAccessorTable; }
    }
    
    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private ulong playerId_;
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    public ulong PlayerId {
      get { return playerId_; }
    }
    
    public const int PlayerNameFieldNumber = 2;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
    }
    
    public const int MembershipFieldNumber = 3;
    private bool hasMembership;
    private global::Gazillion.GuildMembership membership_ = global::Gazillion.GuildMembership.eGMNone;
    public bool HasMembership {
      get { return hasMembership; }
    }
    public global::Gazillion.GuildMembership Membership {
      get { return membership_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerId) return false;
        if (!hasPlayerName) return false;
        if (!hasMembership) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _guildMemberInfoFieldNames;
      if (hasPlayerId) {
        output.WriteUInt64(1, field_names[1], PlayerId);
      }
      if (hasPlayerName) {
        output.WriteString(2, field_names[2], PlayerName);
      }
      if (hasMembership) {
        output.WriteEnum(3, field_names[0], (int) Membership, Membership);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PlayerId);
      }
      if (hasPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, PlayerName);
      }
      if (hasMembership) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Membership);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GuildMemberInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildMemberInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildMemberInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildMemberInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildMemberInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildMemberInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildMemberInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildMemberInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildMemberInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildMemberInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildMemberInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildMemberInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildMemberInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildMemberInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildMemberInfo result;
      
      private GuildMemberInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildMemberInfo original = result;
          result = new GuildMemberInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildMemberInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GuildMemberInfo.Descriptor; }
      }
      
      public override GuildMemberInfo DefaultInstanceForType {
        get { return global::Gazillion.GuildMemberInfo.DefaultInstance; }
      }
      
      public override GuildMemberInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildMemberInfo) {
          return MergeFrom((GuildMemberInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildMemberInfo other) {
        if (other == global::Gazillion.GuildMemberInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        if (other.HasMembership) {
          Membership = other.Membership;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildMemberInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildMemberInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerId = input.ReadUInt64(ref result.playerId_);
              break;
            }
            case 18: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.membership_, out unknown)) {
                result.hasMembership = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      public ulong PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      public Builder SetPlayerId(ulong value) {
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = 0UL;
        return this;
      }
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
      
      public bool HasMembership {
       get { return result.hasMembership; }
      }
      public global::Gazillion.GuildMembership Membership {
        get { return result.Membership; }
        set { SetMembership(value); }
      }
      public Builder SetMembership(global::Gazillion.GuildMembership value) {
        PrepareBuilder();
        result.hasMembership = true;
        result.membership_ = value;
        return this;
      }
      public Builder ClearMembership() {
        PrepareBuilder();
        result.hasMembership = false;
        result.membership_ = global::Gazillion.GuildMembership.eGMNone;
        return this;
      }
    }
    static GuildMemberInfo() {
      object.ReferenceEquals(global::Gazillion.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GuildChangeMember : pb::GeneratedMessage<GuildChangeMember, GuildChangeMember.Builder> {
    private GuildChangeMember() { }
    private static readonly GuildChangeMember defaultInstance = new GuildChangeMember().MakeReadOnly();
    private static readonly string[] _guildChangeMemberFieldNames = new string[] { "sourcePlayerId", "targetNewMembership", "targetPlayerName" };
    private static readonly uint[] _guildChangeMemberFieldTags = new uint[] { 8, 24, 18 };
    public static GuildChangeMember DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildChangeMember DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildChangeMember ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildChangeMember__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildChangeMember, GuildChangeMember.Builder> InternalFieldAccessors {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildChangeMember__FieldAccessorTable; }
    }
    
    public const int SourcePlayerIdFieldNumber = 1;
    private bool hasSourcePlayerId;
    private ulong sourcePlayerId_;
    public bool HasSourcePlayerId {
      get { return hasSourcePlayerId; }
    }
    public ulong SourcePlayerId {
      get { return sourcePlayerId_; }
    }
    
    public const int TargetPlayerNameFieldNumber = 2;
    private bool hasTargetPlayerName;
    private string targetPlayerName_ = "";
    public bool HasTargetPlayerName {
      get { return hasTargetPlayerName; }
    }
    public string TargetPlayerName {
      get { return targetPlayerName_; }
    }
    
    public const int TargetNewMembershipFieldNumber = 3;
    private bool hasTargetNewMembership;
    private global::Gazillion.GuildMembership targetNewMembership_ = global::Gazillion.GuildMembership.eGMNone;
    public bool HasTargetNewMembership {
      get { return hasTargetNewMembership; }
    }
    public global::Gazillion.GuildMembership TargetNewMembership {
      get { return targetNewMembership_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSourcePlayerId) return false;
        if (!hasTargetPlayerName) return false;
        if (!hasTargetNewMembership) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _guildChangeMemberFieldNames;
      if (hasSourcePlayerId) {
        output.WriteUInt64(1, field_names[0], SourcePlayerId);
      }
      if (hasTargetPlayerName) {
        output.WriteString(2, field_names[2], TargetPlayerName);
      }
      if (hasTargetNewMembership) {
        output.WriteEnum(3, field_names[1], (int) TargetNewMembership, TargetNewMembership);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSourcePlayerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, SourcePlayerId);
      }
      if (hasTargetPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, TargetPlayerName);
      }
      if (hasTargetNewMembership) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) TargetNewMembership);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GuildChangeMember ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildChangeMember ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildChangeMember ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildChangeMember ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildChangeMember ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildChangeMember ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildChangeMember ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildChangeMember ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildChangeMember ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildChangeMember ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildChangeMember MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildChangeMember prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildChangeMember, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildChangeMember cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildChangeMember result;
      
      private GuildChangeMember PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildChangeMember original = result;
          result = new GuildChangeMember();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildChangeMember MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GuildChangeMember.Descriptor; }
      }
      
      public override GuildChangeMember DefaultInstanceForType {
        get { return global::Gazillion.GuildChangeMember.DefaultInstance; }
      }
      
      public override GuildChangeMember BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildChangeMember) {
          return MergeFrom((GuildChangeMember) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildChangeMember other) {
        if (other == global::Gazillion.GuildChangeMember.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSourcePlayerId) {
          SourcePlayerId = other.SourcePlayerId;
        }
        if (other.HasTargetPlayerName) {
          TargetPlayerName = other.TargetPlayerName;
        }
        if (other.HasTargetNewMembership) {
          TargetNewMembership = other.TargetNewMembership;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildChangeMemberFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildChangeMemberFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSourcePlayerId = input.ReadUInt64(ref result.sourcePlayerId_);
              break;
            }
            case 18: {
              result.hasTargetPlayerName = input.ReadString(ref result.targetPlayerName_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.targetNewMembership_, out unknown)) {
                result.hasTargetNewMembership = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSourcePlayerId {
        get { return result.hasSourcePlayerId; }
      }
      public ulong SourcePlayerId {
        get { return result.SourcePlayerId; }
        set { SetSourcePlayerId(value); }
      }
      public Builder SetSourcePlayerId(ulong value) {
        PrepareBuilder();
        result.hasSourcePlayerId = true;
        result.sourcePlayerId_ = value;
        return this;
      }
      public Builder ClearSourcePlayerId() {
        PrepareBuilder();
        result.hasSourcePlayerId = false;
        result.sourcePlayerId_ = 0UL;
        return this;
      }
      
      public bool HasTargetPlayerName {
        get { return result.hasTargetPlayerName; }
      }
      public string TargetPlayerName {
        get { return result.TargetPlayerName; }
        set { SetTargetPlayerName(value); }
      }
      public Builder SetTargetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPlayerName = true;
        result.targetPlayerName_ = value;
        return this;
      }
      public Builder ClearTargetPlayerName() {
        PrepareBuilder();
        result.hasTargetPlayerName = false;
        result.targetPlayerName_ = "";
        return this;
      }
      
      public bool HasTargetNewMembership {
       get { return result.hasTargetNewMembership; }
      }
      public global::Gazillion.GuildMembership TargetNewMembership {
        get { return result.TargetNewMembership; }
        set { SetTargetNewMembership(value); }
      }
      public Builder SetTargetNewMembership(global::Gazillion.GuildMembership value) {
        PrepareBuilder();
        result.hasTargetNewMembership = true;
        result.targetNewMembership_ = value;
        return this;
      }
      public Builder ClearTargetNewMembership() {
        PrepareBuilder();
        result.hasTargetNewMembership = false;
        result.targetNewMembership_ = global::Gazillion.GuildMembership.eGMNone;
        return this;
      }
    }
    static GuildChangeMember() {
      object.ReferenceEquals(global::Gazillion.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GuildChangeMemberResult : pb::GeneratedMessage<GuildChangeMemberResult, GuildChangeMemberResult.Builder> {
    private GuildChangeMemberResult() { }
    private static readonly GuildChangeMemberResult defaultInstance = new GuildChangeMemberResult().MakeReadOnly();
    private static readonly string[] _guildChangeMemberResultFieldNames = new string[] { "resultCode", "targetPlayerName" };
    private static readonly uint[] _guildChangeMemberResultFieldTags = new uint[] { 16, 10 };
    public static GuildChangeMemberResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildChangeMemberResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildChangeMemberResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildChangeMemberResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildChangeMemberResult, GuildChangeMemberResult.Builder> InternalFieldAccessors {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildChangeMemberResult__FieldAccessorTable; }
    }
    
    public const int TargetPlayerNameFieldNumber = 1;
    private bool hasTargetPlayerName;
    private string targetPlayerName_ = "";
    public bool HasTargetPlayerName {
      get { return hasTargetPlayerName; }
    }
    public string TargetPlayerName {
      get { return targetPlayerName_; }
    }
    
    public const int ResultCodeFieldNumber = 2;
    private bool hasResultCode;
    private global::Gazillion.GuildChangeMemberResultCode resultCode_ = global::Gazillion.GuildChangeMemberResultCode.eGCMRCInternalError;
    public bool HasResultCode {
      get { return hasResultCode; }
    }
    public global::Gazillion.GuildChangeMemberResultCode ResultCode {
      get { return resultCode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetPlayerName) return false;
        if (!hasResultCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _guildChangeMemberResultFieldNames;
      if (hasTargetPlayerName) {
        output.WriteString(1, field_names[1], TargetPlayerName);
      }
      if (hasResultCode) {
        output.WriteEnum(2, field_names[0], (int) ResultCode, ResultCode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, TargetPlayerName);
      }
      if (hasResultCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) ResultCode);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GuildChangeMemberResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildChangeMemberResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildChangeMemberResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildChangeMemberResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildChangeMemberResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildChangeMemberResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildChangeMemberResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildChangeMemberResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildChangeMemberResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildChangeMemberResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildChangeMemberResult MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildChangeMemberResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildChangeMemberResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildChangeMemberResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildChangeMemberResult result;
      
      private GuildChangeMemberResult PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildChangeMemberResult original = result;
          result = new GuildChangeMemberResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildChangeMemberResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GuildChangeMemberResult.Descriptor; }
      }
      
      public override GuildChangeMemberResult DefaultInstanceForType {
        get { return global::Gazillion.GuildChangeMemberResult.DefaultInstance; }
      }
      
      public override GuildChangeMemberResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildChangeMemberResult) {
          return MergeFrom((GuildChangeMemberResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildChangeMemberResult other) {
        if (other == global::Gazillion.GuildChangeMemberResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetPlayerName) {
          TargetPlayerName = other.TargetPlayerName;
        }
        if (other.HasResultCode) {
          ResultCode = other.ResultCode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildChangeMemberResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildChangeMemberResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasTargetPlayerName = input.ReadString(ref result.targetPlayerName_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.resultCode_, out unknown)) {
                result.hasResultCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetPlayerName {
        get { return result.hasTargetPlayerName; }
      }
      public string TargetPlayerName {
        get { return result.TargetPlayerName; }
        set { SetTargetPlayerName(value); }
      }
      public Builder SetTargetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPlayerName = true;
        result.targetPlayerName_ = value;
        return this;
      }
      public Builder ClearTargetPlayerName() {
        PrepareBuilder();
        result.hasTargetPlayerName = false;
        result.targetPlayerName_ = "";
        return this;
      }
      
      public bool HasResultCode {
       get { return result.hasResultCode; }
      }
      public global::Gazillion.GuildChangeMemberResultCode ResultCode {
        get { return result.ResultCode; }
        set { SetResultCode(value); }
      }
      public Builder SetResultCode(global::Gazillion.GuildChangeMemberResultCode value) {
        PrepareBuilder();
        result.hasResultCode = true;
        result.resultCode_ = value;
        return this;
      }
      public Builder ClearResultCode() {
        PrepareBuilder();
        result.hasResultCode = false;
        result.resultCode_ = global::Gazillion.GuildChangeMemberResultCode.eGCMRCInternalError;
        return this;
      }
    }
    static GuildChangeMemberResult() {
      object.ReferenceEquals(global::Gazillion.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GuildMembersInfoChanged : pb::GeneratedMessage<GuildMembersInfoChanged, GuildMembersInfoChanged.Builder> {
    private GuildMembersInfoChanged() { }
    private static readonly GuildMembersInfoChanged defaultInstance = new GuildMembersInfoChanged().MakeReadOnly();
    private static readonly string[] _guildMembersInfoChangedFieldNames = new string[] { "guildId", "initiatingMemberName", "members", "newMember" };
    private static readonly uint[] _guildMembersInfoChangedFieldTags = new uint[] { 8, 26, 18, 32 };
    public static GuildMembersInfoChanged DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildMembersInfoChanged DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildMembersInfoChanged ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildMembersInfoChanged__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildMembersInfoChanged, GuildMembersInfoChanged.Builder> InternalFieldAccessors {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildMembersInfoChanged__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int MembersFieldNumber = 2;
    private pbc::PopsicleList<global::Gazillion.GuildMemberInfo> members_ = new pbc::PopsicleList<global::Gazillion.GuildMemberInfo>();
    public scg::IList<global::Gazillion.GuildMemberInfo> MembersList {
      get { return members_; }
    }
    public int MembersCount {
      get { return members_.Count; }
    }
    public global::Gazillion.GuildMemberInfo GetMembers(int index) {
      return members_[index];
    }
    
    public const int InitiatingMemberNameFieldNumber = 3;
    private bool hasInitiatingMemberName;
    private string initiatingMemberName_ = "";
    public bool HasInitiatingMemberName {
      get { return hasInitiatingMemberName; }
    }
    public string InitiatingMemberName {
      get { return initiatingMemberName_; }
    }
    
    public const int NewMemberFieldNumber = 4;
    private bool hasNewMember;
    private bool newMember_;
    public bool HasNewMember {
      get { return hasNewMember; }
    }
    public bool NewMember {
      get { return newMember_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasInitiatingMemberName) return false;
        foreach (global::Gazillion.GuildMemberInfo element in MembersList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _guildMembersInfoChangedFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (members_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], members_);
      }
      if (hasInitiatingMemberName) {
        output.WriteString(3, field_names[1], InitiatingMemberName);
      }
      if (hasNewMember) {
        output.WriteBool(4, field_names[3], NewMember);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGuildId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
      }
      foreach (global::Gazillion.GuildMemberInfo element in MembersList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      if (hasInitiatingMemberName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, InitiatingMemberName);
      }
      if (hasNewMember) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, NewMember);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GuildMembersInfoChanged ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildMembersInfoChanged ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildMembersInfoChanged ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildMembersInfoChanged ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildMembersInfoChanged ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildMembersInfoChanged ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildMembersInfoChanged ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildMembersInfoChanged ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildMembersInfoChanged ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildMembersInfoChanged ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildMembersInfoChanged MakeReadOnly() {
      members_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildMembersInfoChanged prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildMembersInfoChanged, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildMembersInfoChanged cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildMembersInfoChanged result;
      
      private GuildMembersInfoChanged PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildMembersInfoChanged original = result;
          result = new GuildMembersInfoChanged();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildMembersInfoChanged MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GuildMembersInfoChanged.Descriptor; }
      }
      
      public override GuildMembersInfoChanged DefaultInstanceForType {
        get { return global::Gazillion.GuildMembersInfoChanged.DefaultInstance; }
      }
      
      public override GuildMembersInfoChanged BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildMembersInfoChanged) {
          return MergeFrom((GuildMembersInfoChanged) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildMembersInfoChanged other) {
        if (other == global::Gazillion.GuildMembersInfoChanged.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.members_.Count != 0) {
          result.members_.Add(other.members_);
        }
        if (other.HasInitiatingMemberName) {
          InitiatingMemberName = other.InitiatingMemberName;
        }
        if (other.HasNewMember) {
          NewMember = other.NewMember;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildMembersInfoChangedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildMembersInfoChangedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.members_, global::Gazillion.GuildMemberInfo.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              result.hasInitiatingMemberName = input.ReadString(ref result.initiatingMemberName_);
              break;
            }
            case 32: {
              result.hasNewMember = input.ReadBool(ref result.newMember_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.GuildMemberInfo> MembersList {
        get { return PrepareBuilder().members_; }
      }
      public int MembersCount {
        get { return result.MembersCount; }
      }
      public global::Gazillion.GuildMemberInfo GetMembers(int index) {
        return result.GetMembers(index);
      }
      public Builder SetMembers(int index, global::Gazillion.GuildMemberInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_[index] = value;
        return this;
      }
      public Builder SetMembers(int index, global::Gazillion.GuildMemberInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMembers(global::Gazillion.GuildMemberInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_.Add(value);
        return this;
      }
      public Builder AddMembers(global::Gazillion.GuildMemberInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMembers(scg::IEnumerable<global::Gazillion.GuildMemberInfo> values) {
        PrepareBuilder();
        result.members_.Add(values);
        return this;
      }
      public Builder ClearMembers() {
        PrepareBuilder();
        result.members_.Clear();
        return this;
      }
      
      public bool HasInitiatingMemberName {
        get { return result.hasInitiatingMemberName; }
      }
      public string InitiatingMemberName {
        get { return result.InitiatingMemberName; }
        set { SetInitiatingMemberName(value); }
      }
      public Builder SetInitiatingMemberName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInitiatingMemberName = true;
        result.initiatingMemberName_ = value;
        return this;
      }
      public Builder ClearInitiatingMemberName() {
        PrepareBuilder();
        result.hasInitiatingMemberName = false;
        result.initiatingMemberName_ = "";
        return this;
      }
      
      public bool HasNewMember {
        get { return result.hasNewMember; }
      }
      public bool NewMember {
        get { return result.NewMember; }
        set { SetNewMember(value); }
      }
      public Builder SetNewMember(bool value) {
        PrepareBuilder();
        result.hasNewMember = true;
        result.newMember_ = value;
        return this;
      }
      public Builder ClearNewMember() {
        PrepareBuilder();
        result.hasNewMember = false;
        result.newMember_ = false;
        return this;
      }
    }
    static GuildMembersInfoChanged() {
      object.ReferenceEquals(global::Gazillion.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GuildCompleteInfo : pb::GeneratedMessage<GuildCompleteInfo, GuildCompleteInfo.Builder> {
    private GuildCompleteInfo() { }
    private static readonly GuildCompleteInfo defaultInstance = new GuildCompleteInfo().MakeReadOnly();
    private static readonly string[] _guildCompleteInfoFieldNames = new string[] { "guildId", "guildName", "members" };
    private static readonly uint[] _guildCompleteInfoFieldTags = new uint[] { 8, 18, 26 };
    public static GuildCompleteInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildCompleteInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildCompleteInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildCompleteInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildCompleteInfo, GuildCompleteInfo.Builder> InternalFieldAccessors {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildCompleteInfo__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int GuildNameFieldNumber = 2;
    private bool hasGuildName;
    private string guildName_ = "";
    public bool HasGuildName {
      get { return hasGuildName; }
    }
    public string GuildName {
      get { return guildName_; }
    }
    
    public const int MembersFieldNumber = 3;
    private pbc::PopsicleList<global::Gazillion.GuildMemberInfo> members_ = new pbc::PopsicleList<global::Gazillion.GuildMemberInfo>();
    public scg::IList<global::Gazillion.GuildMemberInfo> MembersList {
      get { return members_; }
    }
    public int MembersCount {
      get { return members_.Count; }
    }
    public global::Gazillion.GuildMemberInfo GetMembers(int index) {
      return members_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasGuildName) return false;
        foreach (global::Gazillion.GuildMemberInfo element in MembersList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _guildCompleteInfoFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasGuildName) {
        output.WriteString(2, field_names[1], GuildName);
      }
      if (members_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], members_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGuildId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
      }
      if (hasGuildName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, GuildName);
      }
      foreach (global::Gazillion.GuildMemberInfo element in MembersList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GuildCompleteInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildCompleteInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildCompleteInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildCompleteInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildCompleteInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildCompleteInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildCompleteInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildCompleteInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildCompleteInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildCompleteInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildCompleteInfo MakeReadOnly() {
      members_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildCompleteInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildCompleteInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildCompleteInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildCompleteInfo result;
      
      private GuildCompleteInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildCompleteInfo original = result;
          result = new GuildCompleteInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildCompleteInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GuildCompleteInfo.Descriptor; }
      }
      
      public override GuildCompleteInfo DefaultInstanceForType {
        get { return global::Gazillion.GuildCompleteInfo.DefaultInstance; }
      }
      
      public override GuildCompleteInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildCompleteInfo) {
          return MergeFrom((GuildCompleteInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildCompleteInfo other) {
        if (other == global::Gazillion.GuildCompleteInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasGuildName) {
          GuildName = other.GuildName;
        }
        if (other.members_.Count != 0) {
          result.members_.Add(other.members_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildCompleteInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildCompleteInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 18: {
              result.hasGuildName = input.ReadString(ref result.guildName_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.members_, global::Gazillion.GuildMemberInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasGuildName {
        get { return result.hasGuildName; }
      }
      public string GuildName {
        get { return result.GuildName; }
        set { SetGuildName(value); }
      }
      public Builder SetGuildName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildName = true;
        result.guildName_ = value;
        return this;
      }
      public Builder ClearGuildName() {
        PrepareBuilder();
        result.hasGuildName = false;
        result.guildName_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.GuildMemberInfo> MembersList {
        get { return PrepareBuilder().members_; }
      }
      public int MembersCount {
        get { return result.MembersCount; }
      }
      public global::Gazillion.GuildMemberInfo GetMembers(int index) {
        return result.GetMembers(index);
      }
      public Builder SetMembers(int index, global::Gazillion.GuildMemberInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_[index] = value;
        return this;
      }
      public Builder SetMembers(int index, global::Gazillion.GuildMemberInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMembers(global::Gazillion.GuildMemberInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_.Add(value);
        return this;
      }
      public Builder AddMembers(global::Gazillion.GuildMemberInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMembers(scg::IEnumerable<global::Gazillion.GuildMemberInfo> values) {
        PrepareBuilder();
        result.members_.Add(values);
        return this;
      }
      public Builder ClearMembers() {
        PrepareBuilder();
        result.members_.Clear();
        return this;
      }
    }
    static GuildCompleteInfo() {
      object.ReferenceEquals(global::Gazillion.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GuildMessageSetToServer : pb::GeneratedMessage<GuildMessageSetToServer, GuildMessageSetToServer.Builder> {
    private GuildMessageSetToServer() { }
    private static readonly GuildMessageSetToServer defaultInstance = new GuildMessageSetToServer().MakeReadOnly();
    private static readonly string[] _guildMessageSetToServerFieldNames = new string[] { "guildCompleteInfo", "guildDisbanded", "guildMembersInfoChanged", "guildNameChanged" };
    private static readonly uint[] _guildMessageSetToServerFieldTags = new uint[] { 26, 34, 18, 10 };
    public static GuildMessageSetToServer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildMessageSetToServer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildMessageSetToServer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildMessageSetToServer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildMessageSetToServer, GuildMessageSetToServer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildMessageSetToServer__FieldAccessorTable; }
    }
    
    public const int GuildNameChangedFieldNumber = 1;
    private bool hasGuildNameChanged;
    private global::Gazillion.GuildNameChanged guildNameChanged_;
    public bool HasGuildNameChanged {
      get { return hasGuildNameChanged; }
    }
    public global::Gazillion.GuildNameChanged GuildNameChanged {
      get { return guildNameChanged_ ?? global::Gazillion.GuildNameChanged.DefaultInstance; }
    }
    
    public const int GuildMembersInfoChangedFieldNumber = 2;
    private bool hasGuildMembersInfoChanged;
    private global::Gazillion.GuildMembersInfoChanged guildMembersInfoChanged_;
    public bool HasGuildMembersInfoChanged {
      get { return hasGuildMembersInfoChanged; }
    }
    public global::Gazillion.GuildMembersInfoChanged GuildMembersInfoChanged {
      get { return guildMembersInfoChanged_ ?? global::Gazillion.GuildMembersInfoChanged.DefaultInstance; }
    }
    
    public const int GuildCompleteInfoFieldNumber = 3;
    private bool hasGuildCompleteInfo;
    private global::Gazillion.GuildCompleteInfo guildCompleteInfo_;
    public bool HasGuildCompleteInfo {
      get { return hasGuildCompleteInfo; }
    }
    public global::Gazillion.GuildCompleteInfo GuildCompleteInfo {
      get { return guildCompleteInfo_ ?? global::Gazillion.GuildCompleteInfo.DefaultInstance; }
    }
    
    public const int GuildDisbandedFieldNumber = 4;
    private bool hasGuildDisbanded;
    private global::Gazillion.GuildDisbanded guildDisbanded_;
    public bool HasGuildDisbanded {
      get { return hasGuildDisbanded; }
    }
    public global::Gazillion.GuildDisbanded GuildDisbanded {
      get { return guildDisbanded_ ?? global::Gazillion.GuildDisbanded.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasGuildNameChanged) {
          if (!GuildNameChanged.IsInitialized) return false;
        }
        if (HasGuildMembersInfoChanged) {
          if (!GuildMembersInfoChanged.IsInitialized) return false;
        }
        if (HasGuildCompleteInfo) {
          if (!GuildCompleteInfo.IsInitialized) return false;
        }
        if (HasGuildDisbanded) {
          if (!GuildDisbanded.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _guildMessageSetToServerFieldNames;
      if (hasGuildNameChanged) {
        output.WriteMessage(1, field_names[3], GuildNameChanged);
      }
      if (hasGuildMembersInfoChanged) {
        output.WriteMessage(2, field_names[2], GuildMembersInfoChanged);
      }
      if (hasGuildCompleteInfo) {
        output.WriteMessage(3, field_names[0], GuildCompleteInfo);
      }
      if (hasGuildDisbanded) {
        output.WriteMessage(4, field_names[1], GuildDisbanded);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGuildNameChanged) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, GuildNameChanged);
      }
      if (hasGuildMembersInfoChanged) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, GuildMembersInfoChanged);
      }
      if (hasGuildCompleteInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, GuildCompleteInfo);
      }
      if (hasGuildDisbanded) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, GuildDisbanded);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GuildMessageSetToServer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildMessageSetToServer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildMessageSetToServer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildMessageSetToServer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildMessageSetToServer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildMessageSetToServer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildMessageSetToServer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildMessageSetToServer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildMessageSetToServer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildMessageSetToServer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildMessageSetToServer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildMessageSetToServer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildMessageSetToServer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildMessageSetToServer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildMessageSetToServer result;
      
      private GuildMessageSetToServer PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildMessageSetToServer original = result;
          result = new GuildMessageSetToServer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildMessageSetToServer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GuildMessageSetToServer.Descriptor; }
      }
      
      public override GuildMessageSetToServer DefaultInstanceForType {
        get { return global::Gazillion.GuildMessageSetToServer.DefaultInstance; }
      }
      
      public override GuildMessageSetToServer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildMessageSetToServer) {
          return MergeFrom((GuildMessageSetToServer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildMessageSetToServer other) {
        if (other == global::Gazillion.GuildMessageSetToServer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildNameChanged) {
          MergeGuildNameChanged(other.GuildNameChanged);
        }
        if (other.HasGuildMembersInfoChanged) {
          MergeGuildMembersInfoChanged(other.GuildMembersInfoChanged);
        }
        if (other.HasGuildCompleteInfo) {
          MergeGuildCompleteInfo(other.GuildCompleteInfo);
        }
        if (other.HasGuildDisbanded) {
          MergeGuildDisbanded(other.GuildDisbanded);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildMessageSetToServerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildMessageSetToServerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.GuildNameChanged.Builder subBuilder = global::Gazillion.GuildNameChanged.CreateBuilder();
              if (result.hasGuildNameChanged) {
                subBuilder.MergeFrom(GuildNameChanged);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildNameChanged = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Gazillion.GuildMembersInfoChanged.Builder subBuilder = global::Gazillion.GuildMembersInfoChanged.CreateBuilder();
              if (result.hasGuildMembersInfoChanged) {
                subBuilder.MergeFrom(GuildMembersInfoChanged);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildMembersInfoChanged = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Gazillion.GuildCompleteInfo.Builder subBuilder = global::Gazillion.GuildCompleteInfo.CreateBuilder();
              if (result.hasGuildCompleteInfo) {
                subBuilder.MergeFrom(GuildCompleteInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildCompleteInfo = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Gazillion.GuildDisbanded.Builder subBuilder = global::Gazillion.GuildDisbanded.CreateBuilder();
              if (result.hasGuildDisbanded) {
                subBuilder.MergeFrom(GuildDisbanded);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildDisbanded = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildNameChanged {
       get { return result.hasGuildNameChanged; }
      }
      public global::Gazillion.GuildNameChanged GuildNameChanged {
        get { return result.GuildNameChanged; }
        set { SetGuildNameChanged(value); }
      }
      public Builder SetGuildNameChanged(global::Gazillion.GuildNameChanged value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildNameChanged = true;
        result.guildNameChanged_ = value;
        return this;
      }
      public Builder SetGuildNameChanged(global::Gazillion.GuildNameChanged.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildNameChanged = true;
        result.guildNameChanged_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildNameChanged(global::Gazillion.GuildNameChanged value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildNameChanged &&
            result.guildNameChanged_ != global::Gazillion.GuildNameChanged.DefaultInstance) {
            result.guildNameChanged_ = global::Gazillion.GuildNameChanged.CreateBuilder(result.guildNameChanged_).MergeFrom(value).BuildPartial();
        } else {
          result.guildNameChanged_ = value;
        }
        result.hasGuildNameChanged = true;
        return this;
      }
      public Builder ClearGuildNameChanged() {
        PrepareBuilder();
        result.hasGuildNameChanged = false;
        result.guildNameChanged_ = null;
        return this;
      }
      
      public bool HasGuildMembersInfoChanged {
       get { return result.hasGuildMembersInfoChanged; }
      }
      public global::Gazillion.GuildMembersInfoChanged GuildMembersInfoChanged {
        get { return result.GuildMembersInfoChanged; }
        set { SetGuildMembersInfoChanged(value); }
      }
      public Builder SetGuildMembersInfoChanged(global::Gazillion.GuildMembersInfoChanged value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildMembersInfoChanged = true;
        result.guildMembersInfoChanged_ = value;
        return this;
      }
      public Builder SetGuildMembersInfoChanged(global::Gazillion.GuildMembersInfoChanged.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildMembersInfoChanged = true;
        result.guildMembersInfoChanged_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildMembersInfoChanged(global::Gazillion.GuildMembersInfoChanged value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildMembersInfoChanged &&
            result.guildMembersInfoChanged_ != global::Gazillion.GuildMembersInfoChanged.DefaultInstance) {
            result.guildMembersInfoChanged_ = global::Gazillion.GuildMembersInfoChanged.CreateBuilder(result.guildMembersInfoChanged_).MergeFrom(value).BuildPartial();
        } else {
          result.guildMembersInfoChanged_ = value;
        }
        result.hasGuildMembersInfoChanged = true;
        return this;
      }
      public Builder ClearGuildMembersInfoChanged() {
        PrepareBuilder();
        result.hasGuildMembersInfoChanged = false;
        result.guildMembersInfoChanged_ = null;
        return this;
      }
      
      public bool HasGuildCompleteInfo {
       get { return result.hasGuildCompleteInfo; }
      }
      public global::Gazillion.GuildCompleteInfo GuildCompleteInfo {
        get { return result.GuildCompleteInfo; }
        set { SetGuildCompleteInfo(value); }
      }
      public Builder SetGuildCompleteInfo(global::Gazillion.GuildCompleteInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildCompleteInfo = true;
        result.guildCompleteInfo_ = value;
        return this;
      }
      public Builder SetGuildCompleteInfo(global::Gazillion.GuildCompleteInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildCompleteInfo = true;
        result.guildCompleteInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildCompleteInfo(global::Gazillion.GuildCompleteInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildCompleteInfo &&
            result.guildCompleteInfo_ != global::Gazillion.GuildCompleteInfo.DefaultInstance) {
            result.guildCompleteInfo_ = global::Gazillion.GuildCompleteInfo.CreateBuilder(result.guildCompleteInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.guildCompleteInfo_ = value;
        }
        result.hasGuildCompleteInfo = true;
        return this;
      }
      public Builder ClearGuildCompleteInfo() {
        PrepareBuilder();
        result.hasGuildCompleteInfo = false;
        result.guildCompleteInfo_ = null;
        return this;
      }
      
      public bool HasGuildDisbanded {
       get { return result.hasGuildDisbanded; }
      }
      public global::Gazillion.GuildDisbanded GuildDisbanded {
        get { return result.GuildDisbanded; }
        set { SetGuildDisbanded(value); }
      }
      public Builder SetGuildDisbanded(global::Gazillion.GuildDisbanded value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildDisbanded = true;
        result.guildDisbanded_ = value;
        return this;
      }
      public Builder SetGuildDisbanded(global::Gazillion.GuildDisbanded.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildDisbanded = true;
        result.guildDisbanded_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildDisbanded(global::Gazillion.GuildDisbanded value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildDisbanded &&
            result.guildDisbanded_ != global::Gazillion.GuildDisbanded.DefaultInstance) {
            result.guildDisbanded_ = global::Gazillion.GuildDisbanded.CreateBuilder(result.guildDisbanded_).MergeFrom(value).BuildPartial();
        } else {
          result.guildDisbanded_ = value;
        }
        result.hasGuildDisbanded = true;
        return this;
      }
      public Builder ClearGuildDisbanded() {
        PrepareBuilder();
        result.hasGuildDisbanded = false;
        result.guildDisbanded_ = null;
        return this;
      }
    }
    static GuildMessageSetToServer() {
      object.ReferenceEquals(global::Gazillion.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GuildMessageSetToClient : pb::GeneratedMessage<GuildMessageSetToClient, GuildMessageSetToClient.Builder> {
    private GuildMessageSetToClient() { }
    private static readonly GuildMessageSetToClient defaultInstance = new GuildMessageSetToClient().MakeReadOnly();
    private static readonly string[] _guildMessageSetToClientFieldNames = new string[] { "guildChangeMemberResult", "guildChangeNameResult", "guildCompleteInfo", "guildDisbanded", "guildFormResult", "guildInviteResult", "guildInvitedToJoin", "guildMembersInfoChanged", "guildNameChanged", "guildRespondToInviteResult" };
    private static readonly uint[] _guildMessageSetToClientFieldTags = new uint[] { 42, 18, 74, 82, 10, 26, 50, 66, 58, 34 };
    public static GuildMessageSetToClient DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildMessageSetToClient DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildMessageSetToClient ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildMessageSetToClient__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildMessageSetToClient, GuildMessageSetToClient.Builder> InternalFieldAccessors {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildMessageSetToClient__FieldAccessorTable; }
    }
    
    public const int GuildFormResultFieldNumber = 1;
    private bool hasGuildFormResult;
    private global::Gazillion.GuildFormResult guildFormResult_;
    public bool HasGuildFormResult {
      get { return hasGuildFormResult; }
    }
    public global::Gazillion.GuildFormResult GuildFormResult {
      get { return guildFormResult_ ?? global::Gazillion.GuildFormResult.DefaultInstance; }
    }
    
    public const int GuildChangeNameResultFieldNumber = 2;
    private bool hasGuildChangeNameResult;
    private global::Gazillion.GuildChangeNameResult guildChangeNameResult_;
    public bool HasGuildChangeNameResult {
      get { return hasGuildChangeNameResult; }
    }
    public global::Gazillion.GuildChangeNameResult GuildChangeNameResult {
      get { return guildChangeNameResult_ ?? global::Gazillion.GuildChangeNameResult.DefaultInstance; }
    }
    
    public const int GuildInviteResultFieldNumber = 3;
    private bool hasGuildInviteResult;
    private global::Gazillion.GuildInviteResult guildInviteResult_;
    public bool HasGuildInviteResult {
      get { return hasGuildInviteResult; }
    }
    public global::Gazillion.GuildInviteResult GuildInviteResult {
      get { return guildInviteResult_ ?? global::Gazillion.GuildInviteResult.DefaultInstance; }
    }
    
    public const int GuildRespondToInviteResultFieldNumber = 4;
    private bool hasGuildRespondToInviteResult;
    private global::Gazillion.GuildRespondToInviteResult guildRespondToInviteResult_;
    public bool HasGuildRespondToInviteResult {
      get { return hasGuildRespondToInviteResult; }
    }
    public global::Gazillion.GuildRespondToInviteResult GuildRespondToInviteResult {
      get { return guildRespondToInviteResult_ ?? global::Gazillion.GuildRespondToInviteResult.DefaultInstance; }
    }
    
    public const int GuildChangeMemberResultFieldNumber = 5;
    private bool hasGuildChangeMemberResult;
    private global::Gazillion.GuildChangeMemberResult guildChangeMemberResult_;
    public bool HasGuildChangeMemberResult {
      get { return hasGuildChangeMemberResult; }
    }
    public global::Gazillion.GuildChangeMemberResult GuildChangeMemberResult {
      get { return guildChangeMemberResult_ ?? global::Gazillion.GuildChangeMemberResult.DefaultInstance; }
    }
    
    public const int GuildInvitedToJoinFieldNumber = 6;
    private bool hasGuildInvitedToJoin;
    private global::Gazillion.GuildInvitedToJoin guildInvitedToJoin_;
    public bool HasGuildInvitedToJoin {
      get { return hasGuildInvitedToJoin; }
    }
    public global::Gazillion.GuildInvitedToJoin GuildInvitedToJoin {
      get { return guildInvitedToJoin_ ?? global::Gazillion.GuildInvitedToJoin.DefaultInstance; }
    }
    
    public const int GuildNameChangedFieldNumber = 7;
    private bool hasGuildNameChanged;
    private global::Gazillion.GuildNameChanged guildNameChanged_;
    public bool HasGuildNameChanged {
      get { return hasGuildNameChanged; }
    }
    public global::Gazillion.GuildNameChanged GuildNameChanged {
      get { return guildNameChanged_ ?? global::Gazillion.GuildNameChanged.DefaultInstance; }
    }
    
    public const int GuildMembersInfoChangedFieldNumber = 8;
    private bool hasGuildMembersInfoChanged;
    private global::Gazillion.GuildMembersInfoChanged guildMembersInfoChanged_;
    public bool HasGuildMembersInfoChanged {
      get { return hasGuildMembersInfoChanged; }
    }
    public global::Gazillion.GuildMembersInfoChanged GuildMembersInfoChanged {
      get { return guildMembersInfoChanged_ ?? global::Gazillion.GuildMembersInfoChanged.DefaultInstance; }
    }
    
    public const int GuildCompleteInfoFieldNumber = 9;
    private bool hasGuildCompleteInfo;
    private global::Gazillion.GuildCompleteInfo guildCompleteInfo_;
    public bool HasGuildCompleteInfo {
      get { return hasGuildCompleteInfo; }
    }
    public global::Gazillion.GuildCompleteInfo GuildCompleteInfo {
      get { return guildCompleteInfo_ ?? global::Gazillion.GuildCompleteInfo.DefaultInstance; }
    }
    
    public const int GuildDisbandedFieldNumber = 10;
    private bool hasGuildDisbanded;
    private global::Gazillion.GuildDisbanded guildDisbanded_;
    public bool HasGuildDisbanded {
      get { return hasGuildDisbanded; }
    }
    public global::Gazillion.GuildDisbanded GuildDisbanded {
      get { return guildDisbanded_ ?? global::Gazillion.GuildDisbanded.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasGuildFormResult) {
          if (!GuildFormResult.IsInitialized) return false;
        }
        if (HasGuildChangeNameResult) {
          if (!GuildChangeNameResult.IsInitialized) return false;
        }
        if (HasGuildInviteResult) {
          if (!GuildInviteResult.IsInitialized) return false;
        }
        if (HasGuildRespondToInviteResult) {
          if (!GuildRespondToInviteResult.IsInitialized) return false;
        }
        if (HasGuildChangeMemberResult) {
          if (!GuildChangeMemberResult.IsInitialized) return false;
        }
        if (HasGuildInvitedToJoin) {
          if (!GuildInvitedToJoin.IsInitialized) return false;
        }
        if (HasGuildNameChanged) {
          if (!GuildNameChanged.IsInitialized) return false;
        }
        if (HasGuildMembersInfoChanged) {
          if (!GuildMembersInfoChanged.IsInitialized) return false;
        }
        if (HasGuildCompleteInfo) {
          if (!GuildCompleteInfo.IsInitialized) return false;
        }
        if (HasGuildDisbanded) {
          if (!GuildDisbanded.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _guildMessageSetToClientFieldNames;
      if (hasGuildFormResult) {
        output.WriteMessage(1, field_names[4], GuildFormResult);
      }
      if (hasGuildChangeNameResult) {
        output.WriteMessage(2, field_names[1], GuildChangeNameResult);
      }
      if (hasGuildInviteResult) {
        output.WriteMessage(3, field_names[5], GuildInviteResult);
      }
      if (hasGuildRespondToInviteResult) {
        output.WriteMessage(4, field_names[9], GuildRespondToInviteResult);
      }
      if (hasGuildChangeMemberResult) {
        output.WriteMessage(5, field_names[0], GuildChangeMemberResult);
      }
      if (hasGuildInvitedToJoin) {
        output.WriteMessage(6, field_names[6], GuildInvitedToJoin);
      }
      if (hasGuildNameChanged) {
        output.WriteMessage(7, field_names[8], GuildNameChanged);
      }
      if (hasGuildMembersInfoChanged) {
        output.WriteMessage(8, field_names[7], GuildMembersInfoChanged);
      }
      if (hasGuildCompleteInfo) {
        output.WriteMessage(9, field_names[2], GuildCompleteInfo);
      }
      if (hasGuildDisbanded) {
        output.WriteMessage(10, field_names[3], GuildDisbanded);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGuildFormResult) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, GuildFormResult);
      }
      if (hasGuildChangeNameResult) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, GuildChangeNameResult);
      }
      if (hasGuildInviteResult) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, GuildInviteResult);
      }
      if (hasGuildRespondToInviteResult) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, GuildRespondToInviteResult);
      }
      if (hasGuildChangeMemberResult) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, GuildChangeMemberResult);
      }
      if (hasGuildInvitedToJoin) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, GuildInvitedToJoin);
      }
      if (hasGuildNameChanged) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, GuildNameChanged);
      }
      if (hasGuildMembersInfoChanged) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, GuildMembersInfoChanged);
      }
      if (hasGuildCompleteInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, GuildCompleteInfo);
      }
      if (hasGuildDisbanded) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, GuildDisbanded);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GuildMessageSetToClient ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildMessageSetToClient ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildMessageSetToClient ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildMessageSetToClient ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildMessageSetToClient ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildMessageSetToClient ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildMessageSetToClient ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildMessageSetToClient ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildMessageSetToClient ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildMessageSetToClient ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildMessageSetToClient MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildMessageSetToClient prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildMessageSetToClient, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildMessageSetToClient cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildMessageSetToClient result;
      
      private GuildMessageSetToClient PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildMessageSetToClient original = result;
          result = new GuildMessageSetToClient();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildMessageSetToClient MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GuildMessageSetToClient.Descriptor; }
      }
      
      public override GuildMessageSetToClient DefaultInstanceForType {
        get { return global::Gazillion.GuildMessageSetToClient.DefaultInstance; }
      }
      
      public override GuildMessageSetToClient BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildMessageSetToClient) {
          return MergeFrom((GuildMessageSetToClient) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildMessageSetToClient other) {
        if (other == global::Gazillion.GuildMessageSetToClient.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildFormResult) {
          MergeGuildFormResult(other.GuildFormResult);
        }
        if (other.HasGuildChangeNameResult) {
          MergeGuildChangeNameResult(other.GuildChangeNameResult);
        }
        if (other.HasGuildInviteResult) {
          MergeGuildInviteResult(other.GuildInviteResult);
        }
        if (other.HasGuildRespondToInviteResult) {
          MergeGuildRespondToInviteResult(other.GuildRespondToInviteResult);
        }
        if (other.HasGuildChangeMemberResult) {
          MergeGuildChangeMemberResult(other.GuildChangeMemberResult);
        }
        if (other.HasGuildInvitedToJoin) {
          MergeGuildInvitedToJoin(other.GuildInvitedToJoin);
        }
        if (other.HasGuildNameChanged) {
          MergeGuildNameChanged(other.GuildNameChanged);
        }
        if (other.HasGuildMembersInfoChanged) {
          MergeGuildMembersInfoChanged(other.GuildMembersInfoChanged);
        }
        if (other.HasGuildCompleteInfo) {
          MergeGuildCompleteInfo(other.GuildCompleteInfo);
        }
        if (other.HasGuildDisbanded) {
          MergeGuildDisbanded(other.GuildDisbanded);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildMessageSetToClientFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildMessageSetToClientFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.GuildFormResult.Builder subBuilder = global::Gazillion.GuildFormResult.CreateBuilder();
              if (result.hasGuildFormResult) {
                subBuilder.MergeFrom(GuildFormResult);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildFormResult = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Gazillion.GuildChangeNameResult.Builder subBuilder = global::Gazillion.GuildChangeNameResult.CreateBuilder();
              if (result.hasGuildChangeNameResult) {
                subBuilder.MergeFrom(GuildChangeNameResult);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildChangeNameResult = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Gazillion.GuildInviteResult.Builder subBuilder = global::Gazillion.GuildInviteResult.CreateBuilder();
              if (result.hasGuildInviteResult) {
                subBuilder.MergeFrom(GuildInviteResult);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildInviteResult = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Gazillion.GuildRespondToInviteResult.Builder subBuilder = global::Gazillion.GuildRespondToInviteResult.CreateBuilder();
              if (result.hasGuildRespondToInviteResult) {
                subBuilder.MergeFrom(GuildRespondToInviteResult);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildRespondToInviteResult = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::Gazillion.GuildChangeMemberResult.Builder subBuilder = global::Gazillion.GuildChangeMemberResult.CreateBuilder();
              if (result.hasGuildChangeMemberResult) {
                subBuilder.MergeFrom(GuildChangeMemberResult);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildChangeMemberResult = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::Gazillion.GuildInvitedToJoin.Builder subBuilder = global::Gazillion.GuildInvitedToJoin.CreateBuilder();
              if (result.hasGuildInvitedToJoin) {
                subBuilder.MergeFrom(GuildInvitedToJoin);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildInvitedToJoin = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::Gazillion.GuildNameChanged.Builder subBuilder = global::Gazillion.GuildNameChanged.CreateBuilder();
              if (result.hasGuildNameChanged) {
                subBuilder.MergeFrom(GuildNameChanged);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildNameChanged = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::Gazillion.GuildMembersInfoChanged.Builder subBuilder = global::Gazillion.GuildMembersInfoChanged.CreateBuilder();
              if (result.hasGuildMembersInfoChanged) {
                subBuilder.MergeFrom(GuildMembersInfoChanged);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildMembersInfoChanged = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::Gazillion.GuildCompleteInfo.Builder subBuilder = global::Gazillion.GuildCompleteInfo.CreateBuilder();
              if (result.hasGuildCompleteInfo) {
                subBuilder.MergeFrom(GuildCompleteInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildCompleteInfo = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::Gazillion.GuildDisbanded.Builder subBuilder = global::Gazillion.GuildDisbanded.CreateBuilder();
              if (result.hasGuildDisbanded) {
                subBuilder.MergeFrom(GuildDisbanded);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildDisbanded = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildFormResult {
       get { return result.hasGuildFormResult; }
      }
      public global::Gazillion.GuildFormResult GuildFormResult {
        get { return result.GuildFormResult; }
        set { SetGuildFormResult(value); }
      }
      public Builder SetGuildFormResult(global::Gazillion.GuildFormResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildFormResult = true;
        result.guildFormResult_ = value;
        return this;
      }
      public Builder SetGuildFormResult(global::Gazillion.GuildFormResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildFormResult = true;
        result.guildFormResult_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildFormResult(global::Gazillion.GuildFormResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildFormResult &&
            result.guildFormResult_ != global::Gazillion.GuildFormResult.DefaultInstance) {
            result.guildFormResult_ = global::Gazillion.GuildFormResult.CreateBuilder(result.guildFormResult_).MergeFrom(value).BuildPartial();
        } else {
          result.guildFormResult_ = value;
        }
        result.hasGuildFormResult = true;
        return this;
      }
      public Builder ClearGuildFormResult() {
        PrepareBuilder();
        result.hasGuildFormResult = false;
        result.guildFormResult_ = null;
        return this;
      }
      
      public bool HasGuildChangeNameResult {
       get { return result.hasGuildChangeNameResult; }
      }
      public global::Gazillion.GuildChangeNameResult GuildChangeNameResult {
        get { return result.GuildChangeNameResult; }
        set { SetGuildChangeNameResult(value); }
      }
      public Builder SetGuildChangeNameResult(global::Gazillion.GuildChangeNameResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildChangeNameResult = true;
        result.guildChangeNameResult_ = value;
        return this;
      }
      public Builder SetGuildChangeNameResult(global::Gazillion.GuildChangeNameResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildChangeNameResult = true;
        result.guildChangeNameResult_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildChangeNameResult(global::Gazillion.GuildChangeNameResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildChangeNameResult &&
            result.guildChangeNameResult_ != global::Gazillion.GuildChangeNameResult.DefaultInstance) {
            result.guildChangeNameResult_ = global::Gazillion.GuildChangeNameResult.CreateBuilder(result.guildChangeNameResult_).MergeFrom(value).BuildPartial();
        } else {
          result.guildChangeNameResult_ = value;
        }
        result.hasGuildChangeNameResult = true;
        return this;
      }
      public Builder ClearGuildChangeNameResult() {
        PrepareBuilder();
        result.hasGuildChangeNameResult = false;
        result.guildChangeNameResult_ = null;
        return this;
      }
      
      public bool HasGuildInviteResult {
       get { return result.hasGuildInviteResult; }
      }
      public global::Gazillion.GuildInviteResult GuildInviteResult {
        get { return result.GuildInviteResult; }
        set { SetGuildInviteResult(value); }
      }
      public Builder SetGuildInviteResult(global::Gazillion.GuildInviteResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildInviteResult = true;
        result.guildInviteResult_ = value;
        return this;
      }
      public Builder SetGuildInviteResult(global::Gazillion.GuildInviteResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildInviteResult = true;
        result.guildInviteResult_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildInviteResult(global::Gazillion.GuildInviteResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildInviteResult &&
            result.guildInviteResult_ != global::Gazillion.GuildInviteResult.DefaultInstance) {
            result.guildInviteResult_ = global::Gazillion.GuildInviteResult.CreateBuilder(result.guildInviteResult_).MergeFrom(value).BuildPartial();
        } else {
          result.guildInviteResult_ = value;
        }
        result.hasGuildInviteResult = true;
        return this;
      }
      public Builder ClearGuildInviteResult() {
        PrepareBuilder();
        result.hasGuildInviteResult = false;
        result.guildInviteResult_ = null;
        return this;
      }
      
      public bool HasGuildRespondToInviteResult {
       get { return result.hasGuildRespondToInviteResult; }
      }
      public global::Gazillion.GuildRespondToInviteResult GuildRespondToInviteResult {
        get { return result.GuildRespondToInviteResult; }
        set { SetGuildRespondToInviteResult(value); }
      }
      public Builder SetGuildRespondToInviteResult(global::Gazillion.GuildRespondToInviteResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildRespondToInviteResult = true;
        result.guildRespondToInviteResult_ = value;
        return this;
      }
      public Builder SetGuildRespondToInviteResult(global::Gazillion.GuildRespondToInviteResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildRespondToInviteResult = true;
        result.guildRespondToInviteResult_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildRespondToInviteResult(global::Gazillion.GuildRespondToInviteResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildRespondToInviteResult &&
            result.guildRespondToInviteResult_ != global::Gazillion.GuildRespondToInviteResult.DefaultInstance) {
            result.guildRespondToInviteResult_ = global::Gazillion.GuildRespondToInviteResult.CreateBuilder(result.guildRespondToInviteResult_).MergeFrom(value).BuildPartial();
        } else {
          result.guildRespondToInviteResult_ = value;
        }
        result.hasGuildRespondToInviteResult = true;
        return this;
      }
      public Builder ClearGuildRespondToInviteResult() {
        PrepareBuilder();
        result.hasGuildRespondToInviteResult = false;
        result.guildRespondToInviteResult_ = null;
        return this;
      }
      
      public bool HasGuildChangeMemberResult {
       get { return result.hasGuildChangeMemberResult; }
      }
      public global::Gazillion.GuildChangeMemberResult GuildChangeMemberResult {
        get { return result.GuildChangeMemberResult; }
        set { SetGuildChangeMemberResult(value); }
      }
      public Builder SetGuildChangeMemberResult(global::Gazillion.GuildChangeMemberResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildChangeMemberResult = true;
        result.guildChangeMemberResult_ = value;
        return this;
      }
      public Builder SetGuildChangeMemberResult(global::Gazillion.GuildChangeMemberResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildChangeMemberResult = true;
        result.guildChangeMemberResult_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildChangeMemberResult(global::Gazillion.GuildChangeMemberResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildChangeMemberResult &&
            result.guildChangeMemberResult_ != global::Gazillion.GuildChangeMemberResult.DefaultInstance) {
            result.guildChangeMemberResult_ = global::Gazillion.GuildChangeMemberResult.CreateBuilder(result.guildChangeMemberResult_).MergeFrom(value).BuildPartial();
        } else {
          result.guildChangeMemberResult_ = value;
        }
        result.hasGuildChangeMemberResult = true;
        return this;
      }
      public Builder ClearGuildChangeMemberResult() {
        PrepareBuilder();
        result.hasGuildChangeMemberResult = false;
        result.guildChangeMemberResult_ = null;
        return this;
      }
      
      public bool HasGuildInvitedToJoin {
       get { return result.hasGuildInvitedToJoin; }
      }
      public global::Gazillion.GuildInvitedToJoin GuildInvitedToJoin {
        get { return result.GuildInvitedToJoin; }
        set { SetGuildInvitedToJoin(value); }
      }
      public Builder SetGuildInvitedToJoin(global::Gazillion.GuildInvitedToJoin value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildInvitedToJoin = true;
        result.guildInvitedToJoin_ = value;
        return this;
      }
      public Builder SetGuildInvitedToJoin(global::Gazillion.GuildInvitedToJoin.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildInvitedToJoin = true;
        result.guildInvitedToJoin_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildInvitedToJoin(global::Gazillion.GuildInvitedToJoin value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildInvitedToJoin &&
            result.guildInvitedToJoin_ != global::Gazillion.GuildInvitedToJoin.DefaultInstance) {
            result.guildInvitedToJoin_ = global::Gazillion.GuildInvitedToJoin.CreateBuilder(result.guildInvitedToJoin_).MergeFrom(value).BuildPartial();
        } else {
          result.guildInvitedToJoin_ = value;
        }
        result.hasGuildInvitedToJoin = true;
        return this;
      }
      public Builder ClearGuildInvitedToJoin() {
        PrepareBuilder();
        result.hasGuildInvitedToJoin = false;
        result.guildInvitedToJoin_ = null;
        return this;
      }
      
      public bool HasGuildNameChanged {
       get { return result.hasGuildNameChanged; }
      }
      public global::Gazillion.GuildNameChanged GuildNameChanged {
        get { return result.GuildNameChanged; }
        set { SetGuildNameChanged(value); }
      }
      public Builder SetGuildNameChanged(global::Gazillion.GuildNameChanged value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildNameChanged = true;
        result.guildNameChanged_ = value;
        return this;
      }
      public Builder SetGuildNameChanged(global::Gazillion.GuildNameChanged.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildNameChanged = true;
        result.guildNameChanged_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildNameChanged(global::Gazillion.GuildNameChanged value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildNameChanged &&
            result.guildNameChanged_ != global::Gazillion.GuildNameChanged.DefaultInstance) {
            result.guildNameChanged_ = global::Gazillion.GuildNameChanged.CreateBuilder(result.guildNameChanged_).MergeFrom(value).BuildPartial();
        } else {
          result.guildNameChanged_ = value;
        }
        result.hasGuildNameChanged = true;
        return this;
      }
      public Builder ClearGuildNameChanged() {
        PrepareBuilder();
        result.hasGuildNameChanged = false;
        result.guildNameChanged_ = null;
        return this;
      }
      
      public bool HasGuildMembersInfoChanged {
       get { return result.hasGuildMembersInfoChanged; }
      }
      public global::Gazillion.GuildMembersInfoChanged GuildMembersInfoChanged {
        get { return result.GuildMembersInfoChanged; }
        set { SetGuildMembersInfoChanged(value); }
      }
      public Builder SetGuildMembersInfoChanged(global::Gazillion.GuildMembersInfoChanged value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildMembersInfoChanged = true;
        result.guildMembersInfoChanged_ = value;
        return this;
      }
      public Builder SetGuildMembersInfoChanged(global::Gazillion.GuildMembersInfoChanged.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildMembersInfoChanged = true;
        result.guildMembersInfoChanged_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildMembersInfoChanged(global::Gazillion.GuildMembersInfoChanged value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildMembersInfoChanged &&
            result.guildMembersInfoChanged_ != global::Gazillion.GuildMembersInfoChanged.DefaultInstance) {
            result.guildMembersInfoChanged_ = global::Gazillion.GuildMembersInfoChanged.CreateBuilder(result.guildMembersInfoChanged_).MergeFrom(value).BuildPartial();
        } else {
          result.guildMembersInfoChanged_ = value;
        }
        result.hasGuildMembersInfoChanged = true;
        return this;
      }
      public Builder ClearGuildMembersInfoChanged() {
        PrepareBuilder();
        result.hasGuildMembersInfoChanged = false;
        result.guildMembersInfoChanged_ = null;
        return this;
      }
      
      public bool HasGuildCompleteInfo {
       get { return result.hasGuildCompleteInfo; }
      }
      public global::Gazillion.GuildCompleteInfo GuildCompleteInfo {
        get { return result.GuildCompleteInfo; }
        set { SetGuildCompleteInfo(value); }
      }
      public Builder SetGuildCompleteInfo(global::Gazillion.GuildCompleteInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildCompleteInfo = true;
        result.guildCompleteInfo_ = value;
        return this;
      }
      public Builder SetGuildCompleteInfo(global::Gazillion.GuildCompleteInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildCompleteInfo = true;
        result.guildCompleteInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildCompleteInfo(global::Gazillion.GuildCompleteInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildCompleteInfo &&
            result.guildCompleteInfo_ != global::Gazillion.GuildCompleteInfo.DefaultInstance) {
            result.guildCompleteInfo_ = global::Gazillion.GuildCompleteInfo.CreateBuilder(result.guildCompleteInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.guildCompleteInfo_ = value;
        }
        result.hasGuildCompleteInfo = true;
        return this;
      }
      public Builder ClearGuildCompleteInfo() {
        PrepareBuilder();
        result.hasGuildCompleteInfo = false;
        result.guildCompleteInfo_ = null;
        return this;
      }
      
      public bool HasGuildDisbanded {
       get { return result.hasGuildDisbanded; }
      }
      public global::Gazillion.GuildDisbanded GuildDisbanded {
        get { return result.GuildDisbanded; }
        set { SetGuildDisbanded(value); }
      }
      public Builder SetGuildDisbanded(global::Gazillion.GuildDisbanded value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildDisbanded = true;
        result.guildDisbanded_ = value;
        return this;
      }
      public Builder SetGuildDisbanded(global::Gazillion.GuildDisbanded.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildDisbanded = true;
        result.guildDisbanded_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildDisbanded(global::Gazillion.GuildDisbanded value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildDisbanded &&
            result.guildDisbanded_ != global::Gazillion.GuildDisbanded.DefaultInstance) {
            result.guildDisbanded_ = global::Gazillion.GuildDisbanded.CreateBuilder(result.guildDisbanded_).MergeFrom(value).BuildPartial();
        } else {
          result.guildDisbanded_ = value;
        }
        result.hasGuildDisbanded = true;
        return this;
      }
      public Builder ClearGuildDisbanded() {
        PrepareBuilder();
        result.hasGuildDisbanded = false;
        result.guildDisbanded_ = null;
        return this;
      }
    }
    static GuildMessageSetToClient() {
      object.ReferenceEquals(global::Gazillion.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GuildMessageSetToPlayerManager : pb::GeneratedMessage<GuildMessageSetToPlayerManager, GuildMessageSetToPlayerManager.Builder> {
    private GuildMessageSetToPlayerManager() { }
    private static readonly GuildMessageSetToPlayerManager defaultInstance = new GuildMessageSetToPlayerManager().MakeReadOnly();
    private static readonly string[] _guildMessageSetToPlayerManagerFieldNames = new string[] { "guildChangeMember", "guildChangeName", "guildForm", "guildInvite", "guildRespondToInvite" };
    private static readonly uint[] _guildMessageSetToPlayerManagerFieldTags = new uint[] { 42, 18, 10, 26, 34 };
    public static GuildMessageSetToPlayerManager DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildMessageSetToPlayerManager DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildMessageSetToPlayerManager ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildMessageSetToPlayerManager__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildMessageSetToPlayerManager, GuildMessageSetToPlayerManager.Builder> InternalFieldAccessors {
      get { return global::Gazillion.Guild.internal__static_Gazillion_GuildMessageSetToPlayerManager__FieldAccessorTable; }
    }
    
    public const int GuildFormFieldNumber = 1;
    private bool hasGuildForm;
    private global::Gazillion.GuildForm guildForm_;
    public bool HasGuildForm {
      get { return hasGuildForm; }
    }
    public global::Gazillion.GuildForm GuildForm {
      get { return guildForm_ ?? global::Gazillion.GuildForm.DefaultInstance; }
    }
    
    public const int GuildChangeNameFieldNumber = 2;
    private bool hasGuildChangeName;
    private global::Gazillion.GuildChangeName guildChangeName_;
    public bool HasGuildChangeName {
      get { return hasGuildChangeName; }
    }
    public global::Gazillion.GuildChangeName GuildChangeName {
      get { return guildChangeName_ ?? global::Gazillion.GuildChangeName.DefaultInstance; }
    }
    
    public const int GuildInviteFieldNumber = 3;
    private bool hasGuildInvite;
    private global::Gazillion.GuildInvite guildInvite_;
    public bool HasGuildInvite {
      get { return hasGuildInvite; }
    }
    public global::Gazillion.GuildInvite GuildInvite {
      get { return guildInvite_ ?? global::Gazillion.GuildInvite.DefaultInstance; }
    }
    
    public const int GuildRespondToInviteFieldNumber = 4;
    private bool hasGuildRespondToInvite;
    private global::Gazillion.GuildRespondToInvite guildRespondToInvite_;
    public bool HasGuildRespondToInvite {
      get { return hasGuildRespondToInvite; }
    }
    public global::Gazillion.GuildRespondToInvite GuildRespondToInvite {
      get { return guildRespondToInvite_ ?? global::Gazillion.GuildRespondToInvite.DefaultInstance; }
    }
    
    public const int GuildChangeMemberFieldNumber = 5;
    private bool hasGuildChangeMember;
    private global::Gazillion.GuildChangeMember guildChangeMember_;
    public bool HasGuildChangeMember {
      get { return hasGuildChangeMember; }
    }
    public global::Gazillion.GuildChangeMember GuildChangeMember {
      get { return guildChangeMember_ ?? global::Gazillion.GuildChangeMember.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasGuildForm) {
          if (!GuildForm.IsInitialized) return false;
        }
        if (HasGuildChangeName) {
          if (!GuildChangeName.IsInitialized) return false;
        }
        if (HasGuildInvite) {
          if (!GuildInvite.IsInitialized) return false;
        }
        if (HasGuildRespondToInvite) {
          if (!GuildRespondToInvite.IsInitialized) return false;
        }
        if (HasGuildChangeMember) {
          if (!GuildChangeMember.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _guildMessageSetToPlayerManagerFieldNames;
      if (hasGuildForm) {
        output.WriteMessage(1, field_names[2], GuildForm);
      }
      if (hasGuildChangeName) {
        output.WriteMessage(2, field_names[1], GuildChangeName);
      }
      if (hasGuildInvite) {
        output.WriteMessage(3, field_names[3], GuildInvite);
      }
      if (hasGuildRespondToInvite) {
        output.WriteMessage(4, field_names[4], GuildRespondToInvite);
      }
      if (hasGuildChangeMember) {
        output.WriteMessage(5, field_names[0], GuildChangeMember);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGuildForm) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, GuildForm);
      }
      if (hasGuildChangeName) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, GuildChangeName);
      }
      if (hasGuildInvite) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, GuildInvite);
      }
      if (hasGuildRespondToInvite) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, GuildRespondToInvite);
      }
      if (hasGuildChangeMember) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, GuildChangeMember);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GuildMessageSetToPlayerManager ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildMessageSetToPlayerManager ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildMessageSetToPlayerManager ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildMessageSetToPlayerManager ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildMessageSetToPlayerManager ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildMessageSetToPlayerManager ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildMessageSetToPlayerManager ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildMessageSetToPlayerManager ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildMessageSetToPlayerManager ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildMessageSetToPlayerManager ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildMessageSetToPlayerManager MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildMessageSetToPlayerManager prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildMessageSetToPlayerManager, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildMessageSetToPlayerManager cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildMessageSetToPlayerManager result;
      
      private GuildMessageSetToPlayerManager PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildMessageSetToPlayerManager original = result;
          result = new GuildMessageSetToPlayerManager();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildMessageSetToPlayerManager MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GuildMessageSetToPlayerManager.Descriptor; }
      }
      
      public override GuildMessageSetToPlayerManager DefaultInstanceForType {
        get { return global::Gazillion.GuildMessageSetToPlayerManager.DefaultInstance; }
      }
      
      public override GuildMessageSetToPlayerManager BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildMessageSetToPlayerManager) {
          return MergeFrom((GuildMessageSetToPlayerManager) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildMessageSetToPlayerManager other) {
        if (other == global::Gazillion.GuildMessageSetToPlayerManager.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildForm) {
          MergeGuildForm(other.GuildForm);
        }
        if (other.HasGuildChangeName) {
          MergeGuildChangeName(other.GuildChangeName);
        }
        if (other.HasGuildInvite) {
          MergeGuildInvite(other.GuildInvite);
        }
        if (other.HasGuildRespondToInvite) {
          MergeGuildRespondToInvite(other.GuildRespondToInvite);
        }
        if (other.HasGuildChangeMember) {
          MergeGuildChangeMember(other.GuildChangeMember);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildMessageSetToPlayerManagerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildMessageSetToPlayerManagerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.GuildForm.Builder subBuilder = global::Gazillion.GuildForm.CreateBuilder();
              if (result.hasGuildForm) {
                subBuilder.MergeFrom(GuildForm);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildForm = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Gazillion.GuildChangeName.Builder subBuilder = global::Gazillion.GuildChangeName.CreateBuilder();
              if (result.hasGuildChangeName) {
                subBuilder.MergeFrom(GuildChangeName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildChangeName = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Gazillion.GuildInvite.Builder subBuilder = global::Gazillion.GuildInvite.CreateBuilder();
              if (result.hasGuildInvite) {
                subBuilder.MergeFrom(GuildInvite);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildInvite = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Gazillion.GuildRespondToInvite.Builder subBuilder = global::Gazillion.GuildRespondToInvite.CreateBuilder();
              if (result.hasGuildRespondToInvite) {
                subBuilder.MergeFrom(GuildRespondToInvite);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildRespondToInvite = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::Gazillion.GuildChangeMember.Builder subBuilder = global::Gazillion.GuildChangeMember.CreateBuilder();
              if (result.hasGuildChangeMember) {
                subBuilder.MergeFrom(GuildChangeMember);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildChangeMember = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildForm {
       get { return result.hasGuildForm; }
      }
      public global::Gazillion.GuildForm GuildForm {
        get { return result.GuildForm; }
        set { SetGuildForm(value); }
      }
      public Builder SetGuildForm(global::Gazillion.GuildForm value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildForm = true;
        result.guildForm_ = value;
        return this;
      }
      public Builder SetGuildForm(global::Gazillion.GuildForm.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildForm = true;
        result.guildForm_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildForm(global::Gazillion.GuildForm value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildForm &&
            result.guildForm_ != global::Gazillion.GuildForm.DefaultInstance) {
            result.guildForm_ = global::Gazillion.GuildForm.CreateBuilder(result.guildForm_).MergeFrom(value).BuildPartial();
        } else {
          result.guildForm_ = value;
        }
        result.hasGuildForm = true;
        return this;
      }
      public Builder ClearGuildForm() {
        PrepareBuilder();
        result.hasGuildForm = false;
        result.guildForm_ = null;
        return this;
      }
      
      public bool HasGuildChangeName {
       get { return result.hasGuildChangeName; }
      }
      public global::Gazillion.GuildChangeName GuildChangeName {
        get { return result.GuildChangeName; }
        set { SetGuildChangeName(value); }
      }
      public Builder SetGuildChangeName(global::Gazillion.GuildChangeName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildChangeName = true;
        result.guildChangeName_ = value;
        return this;
      }
      public Builder SetGuildChangeName(global::Gazillion.GuildChangeName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildChangeName = true;
        result.guildChangeName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildChangeName(global::Gazillion.GuildChangeName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildChangeName &&
            result.guildChangeName_ != global::Gazillion.GuildChangeName.DefaultInstance) {
            result.guildChangeName_ = global::Gazillion.GuildChangeName.CreateBuilder(result.guildChangeName_).MergeFrom(value).BuildPartial();
        } else {
          result.guildChangeName_ = value;
        }
        result.hasGuildChangeName = true;
        return this;
      }
      public Builder ClearGuildChangeName() {
        PrepareBuilder();
        result.hasGuildChangeName = false;
        result.guildChangeName_ = null;
        return this;
      }
      
      public bool HasGuildInvite {
       get { return result.hasGuildInvite; }
      }
      public global::Gazillion.GuildInvite GuildInvite {
        get { return result.GuildInvite; }
        set { SetGuildInvite(value); }
      }
      public Builder SetGuildInvite(global::Gazillion.GuildInvite value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildInvite = true;
        result.guildInvite_ = value;
        return this;
      }
      public Builder SetGuildInvite(global::Gazillion.GuildInvite.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildInvite = true;
        result.guildInvite_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildInvite(global::Gazillion.GuildInvite value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildInvite &&
            result.guildInvite_ != global::Gazillion.GuildInvite.DefaultInstance) {
            result.guildInvite_ = global::Gazillion.GuildInvite.CreateBuilder(result.guildInvite_).MergeFrom(value).BuildPartial();
        } else {
          result.guildInvite_ = value;
        }
        result.hasGuildInvite = true;
        return this;
      }
      public Builder ClearGuildInvite() {
        PrepareBuilder();
        result.hasGuildInvite = false;
        result.guildInvite_ = null;
        return this;
      }
      
      public bool HasGuildRespondToInvite {
       get { return result.hasGuildRespondToInvite; }
      }
      public global::Gazillion.GuildRespondToInvite GuildRespondToInvite {
        get { return result.GuildRespondToInvite; }
        set { SetGuildRespondToInvite(value); }
      }
      public Builder SetGuildRespondToInvite(global::Gazillion.GuildRespondToInvite value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildRespondToInvite = true;
        result.guildRespondToInvite_ = value;
        return this;
      }
      public Builder SetGuildRespondToInvite(global::Gazillion.GuildRespondToInvite.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildRespondToInvite = true;
        result.guildRespondToInvite_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildRespondToInvite(global::Gazillion.GuildRespondToInvite value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildRespondToInvite &&
            result.guildRespondToInvite_ != global::Gazillion.GuildRespondToInvite.DefaultInstance) {
            result.guildRespondToInvite_ = global::Gazillion.GuildRespondToInvite.CreateBuilder(result.guildRespondToInvite_).MergeFrom(value).BuildPartial();
        } else {
          result.guildRespondToInvite_ = value;
        }
        result.hasGuildRespondToInvite = true;
        return this;
      }
      public Builder ClearGuildRespondToInvite() {
        PrepareBuilder();
        result.hasGuildRespondToInvite = false;
        result.guildRespondToInvite_ = null;
        return this;
      }
      
      public bool HasGuildChangeMember {
       get { return result.hasGuildChangeMember; }
      }
      public global::Gazillion.GuildChangeMember GuildChangeMember {
        get { return result.GuildChangeMember; }
        set { SetGuildChangeMember(value); }
      }
      public Builder SetGuildChangeMember(global::Gazillion.GuildChangeMember value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildChangeMember = true;
        result.guildChangeMember_ = value;
        return this;
      }
      public Builder SetGuildChangeMember(global::Gazillion.GuildChangeMember.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildChangeMember = true;
        result.guildChangeMember_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildChangeMember(global::Gazillion.GuildChangeMember value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildChangeMember &&
            result.guildChangeMember_ != global::Gazillion.GuildChangeMember.DefaultInstance) {
            result.guildChangeMember_ = global::Gazillion.GuildChangeMember.CreateBuilder(result.guildChangeMember_).MergeFrom(value).BuildPartial();
        } else {
          result.guildChangeMember_ = value;
        }
        result.hasGuildChangeMember = true;
        return this;
      }
      public Builder ClearGuildChangeMember() {
        PrepareBuilder();
        result.hasGuildChangeMember = false;
        result.guildChangeMember_ = null;
        return this;
      }
    }
    static GuildMessageSetToPlayerManager() {
      object.ReferenceEquals(global::Gazillion.Guild.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
