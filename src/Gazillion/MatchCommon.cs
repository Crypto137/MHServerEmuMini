// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Gazillion {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MatchCommon {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Gazillion_MatchTeamDescription__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.MatchTeamDescription, global::Gazillion.MatchTeamDescription.Builder> internal__static_Gazillion_MatchTeamDescription__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_MatchGameDescription__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.MatchGameDescription, global::Gazillion.MatchGameDescription.Builder> internal__static_Gazillion_MatchGameDescription__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_MatchQueueDescription__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.MatchQueueDescription, global::Gazillion.MatchQueueDescription.Builder> internal__static_Gazillion_MatchQueueDescription__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_MatchTeamResultData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.MatchTeamResultData, global::Gazillion.MatchTeamResultData.Builder> internal__static_Gazillion_MatchTeamResultData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_MatchResultData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.MatchResultData, global::Gazillion.MatchResultData.Builder> internal__static_Gazillion_MatchResultData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_MatchPlayerStatisticsSummary__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.MatchPlayerStatisticsSummary, global::Gazillion.MatchPlayerStatisticsSummary.Builder> internal__static_Gazillion_MatchPlayerStatisticsSummary__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static MatchCommon() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFNYXRjaENvbW1vbi5wcm90bxIJR2F6aWxsaW9uIoQBChRNYXRjaFRlYW1E", 
            "ZXNjcmlwdGlvbhIsChF0ZWFtUHJvdG90eXBlR3VpZBgBIAIoBFIRdGVhbVBy", 
            "b3RvdHlwZUd1aWQSHgoKbWluUGxheWVycxgCIAIoDVIKbWluUGxheWVycxIe", 
            "CgptYXhQbGF5ZXJzGAMgAigNUgptYXhQbGF5ZXJzItkBChRNYXRjaEdhbWVE", 
            "ZXNjcmlwdGlvbhIuChJxdWV1ZVByb3RvdHlwZUd1aWQYASACKARSEnF1ZXVl", 
            "UHJvdG90eXBlR3VpZBIsChFnYW1lUHJvdG90eXBlR3VpZBgCIAIoBFIRZ2Ft", 
            "ZVByb3RvdHlwZUd1aWQSLAoRcmVnaW9uUHJvdG90eXBlSWQYAyACKARSEXJl", 
            "Z2lvblByb3RvdHlwZUlkEjUKBXRlYW1zGAQgAygLMh8uR2F6aWxsaW9uLk1h", 
            "dGNoVGVhbURlc2NyaXB0aW9uUgV0ZWFtcyLlAQoVTWF0Y2hRdWV1ZURlc2Ny", 
            "aXB0aW9uEi4KEnF1ZXVlUHJvdG90eXBlR3VpZBgBIAIoBFIScXVldWVQcm90", 
            "b3R5cGVHdWlkEkMKDWJhbGFuY2VNZXRob2QYAiACKA4yHS5HYXppbGxpb24u", 
            "TWF0Y2hCYWxhbmNlTWV0aG9kUg1iYWxhbmNlTWV0aG9kEiAKC3JlZ2lvbkxl", 
            "dmVsGAMgAigNUgtyZWdpb25MZXZlbBI1CgVnYW1lcxgEIAMoCzIfLkdhemls", 
            "bGlvbi5NYXRjaEdhbWVEZXNjcmlwdGlvblIFZ2FtZXMiaQoTTWF0Y2hUZWFt", 
            "UmVzdWx0RGF0YRIsChF0ZWFtUHJvdG90eXBlR3VpZBgBIAIoBFIRdGVhbVBy", 
            "b3RvdHlwZUd1aWQSJAoNY3JlZGl0V2l0aFdpbhgCIAIoCFINY3JlZGl0V2l0", 
            "aFdpbiJHCg9NYXRjaFJlc3VsdERhdGESNAoFdGVhbXMYASADKAsyHi5HYXpp", 
            "bGxpb24uTWF0Y2hUZWFtUmVzdWx0RGF0YVIFdGVhbXMi4AEKHE1hdGNoUGxh", 
            "eWVyU3RhdGlzdGljc1N1bW1hcnkSLgoScXVldWVQcm90b3R5cGVHdWlkGAEg", 
            "AigEUhJxdWV1ZVByb3RvdHlwZUd1aWQSLAoRZ2FtZVByb3RvdHlwZUd1aWQY", 
            "AiACKARSEWdhbWVQcm90b3R5cGVHdWlkEiAKC2dhbWVzUGxheWVkGAMgAigN", 
            "UgtnYW1lc1BsYXllZBIaCghnYW1lc1dvbhgEIAIoDVIIZ2FtZXNXb24SJAoN", 
            "cmF0aW5nU3VtbWFyeRgFIAIoDVINcmF0aW5nU3VtbWFyeSpiCgpNYXRjaFBo", 
            "YXNlEg4KCk1QX0NyZWF0ZWQQABISCg5NUF9Jbml0aWFsaXplZBABEg4KCk1Q", 
            "X1N0YXJ0ZWQQAhIPCgtNUF9GaW5pc2hlZBADEg8KC01QX1NodXRkb3duEAQq", 
            "NgoUTWF0Y2hQbGF5ZXJFdmVudFR5cGUSDQoJTVBFVF9MZWZ0EAASDwoLTVBF", 
            "VF9Kb2luZWQQASpLChJNYXRjaEJhbGFuY2VNZXRob2QSDAoITUJNX05vbmUQ", 
            "ABIUChBNQk1fUGxheWVyUmF0aW5nEAESEQoNTUJNX0ZpeGVkVGVhbRACKm4K", 
            "FU1hdGNoQ2hlYXRSZXF1ZXN0VHlwZRINCglNQ1JUX05vbmUQABIYChRNQ1JU", 
            "X0ZvcmNlTWF0Y2hTdGFydBABEhYKEk1DUlRfRm9yY2VNYXRjaEVuZBACEhQK", 
            "EE1DUlRfU3dpdGNoVGVhbXMQAypOChVNYXRjaENvbnRyb2xFdmVudFR5cGUS", 
            "DQoJTUNFVF9Ob25lEAASEwoPTUNFVF9Gb3JjZVN0YXJ0EAESEQoNTUNFVF9G", 
          "b3JjZUVuZBAC"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Gazillion_MatchTeamDescription__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Gazillion_MatchTeamDescription__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.MatchTeamDescription, global::Gazillion.MatchTeamDescription.Builder>(internal__static_Gazillion_MatchTeamDescription__Descriptor,
                new string[] { "TeamPrototypeGuid", "MinPlayers", "MaxPlayers", });
        internal__static_Gazillion_MatchGameDescription__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Gazillion_MatchGameDescription__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.MatchGameDescription, global::Gazillion.MatchGameDescription.Builder>(internal__static_Gazillion_MatchGameDescription__Descriptor,
                new string[] { "QueuePrototypeGuid", "GamePrototypeGuid", "RegionPrototypeId", "Teams", });
        internal__static_Gazillion_MatchQueueDescription__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Gazillion_MatchQueueDescription__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.MatchQueueDescription, global::Gazillion.MatchQueueDescription.Builder>(internal__static_Gazillion_MatchQueueDescription__Descriptor,
                new string[] { "QueuePrototypeGuid", "BalanceMethod", "RegionLevel", "Games", });
        internal__static_Gazillion_MatchTeamResultData__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Gazillion_MatchTeamResultData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.MatchTeamResultData, global::Gazillion.MatchTeamResultData.Builder>(internal__static_Gazillion_MatchTeamResultData__Descriptor,
                new string[] { "TeamPrototypeGuid", "CreditWithWin", });
        internal__static_Gazillion_MatchResultData__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Gazillion_MatchResultData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.MatchResultData, global::Gazillion.MatchResultData.Builder>(internal__static_Gazillion_MatchResultData__Descriptor,
                new string[] { "Teams", });
        internal__static_Gazillion_MatchPlayerStatisticsSummary__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Gazillion_MatchPlayerStatisticsSummary__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.MatchPlayerStatisticsSummary, global::Gazillion.MatchPlayerStatisticsSummary.Builder>(internal__static_Gazillion_MatchPlayerStatisticsSummary__Descriptor,
                new string[] { "QueuePrototypeGuid", "GamePrototypeGuid", "GamesPlayed", "GamesWon", "RatingSummary", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum MatchPhase {
    MP_Created = 0,
    MP_Initialized = 1,
    MP_Started = 2,
    MP_Finished = 3,
    MP_Shutdown = 4,
  }
  
  public enum MatchPlayerEventType {
    MPET_Left = 0,
    MPET_Joined = 1,
  }
  
  public enum MatchBalanceMethod {
    MBM_None = 0,
    MBM_PlayerRating = 1,
    MBM_FixedTeam = 2,
  }
  
  public enum MatchCheatRequestType {
    MCRT_None = 0,
    MCRT_ForceMatchStart = 1,
    MCRT_ForceMatchEnd = 2,
    MCRT_SwitchTeams = 3,
  }
  
  public enum MatchControlEventType {
    MCET_None = 0,
    MCET_ForceStart = 1,
    MCET_ForceEnd = 2,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MatchTeamDescription : pb::GeneratedMessage<MatchTeamDescription, MatchTeamDescription.Builder> {
    private MatchTeamDescription() { }
    private static readonly MatchTeamDescription defaultInstance = new MatchTeamDescription().MakeReadOnly();
    private static readonly string[] _matchTeamDescriptionFieldNames = new string[] { "maxPlayers", "minPlayers", "teamPrototypeGuid" };
    private static readonly uint[] _matchTeamDescriptionFieldTags = new uint[] { 24, 16, 8 };
    public static MatchTeamDescription DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MatchTeamDescription DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MatchTeamDescription ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.MatchCommon.internal__static_Gazillion_MatchTeamDescription__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MatchTeamDescription, MatchTeamDescription.Builder> InternalFieldAccessors {
      get { return global::Gazillion.MatchCommon.internal__static_Gazillion_MatchTeamDescription__FieldAccessorTable; }
    }
    
    public const int TeamPrototypeGuidFieldNumber = 1;
    private bool hasTeamPrototypeGuid;
    private ulong teamPrototypeGuid_;
    public bool HasTeamPrototypeGuid {
      get { return hasTeamPrototypeGuid; }
    }
    public ulong TeamPrototypeGuid {
      get { return teamPrototypeGuid_; }
    }
    
    public const int MinPlayersFieldNumber = 2;
    private bool hasMinPlayers;
    private uint minPlayers_;
    public bool HasMinPlayers {
      get { return hasMinPlayers; }
    }
    public uint MinPlayers {
      get { return minPlayers_; }
    }
    
    public const int MaxPlayersFieldNumber = 3;
    private bool hasMaxPlayers;
    private uint maxPlayers_;
    public bool HasMaxPlayers {
      get { return hasMaxPlayers; }
    }
    public uint MaxPlayers {
      get { return maxPlayers_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTeamPrototypeGuid) return false;
        if (!hasMinPlayers) return false;
        if (!hasMaxPlayers) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _matchTeamDescriptionFieldNames;
      if (hasTeamPrototypeGuid) {
        output.WriteUInt64(1, field_names[2], TeamPrototypeGuid);
      }
      if (hasMinPlayers) {
        output.WriteUInt32(2, field_names[1], MinPlayers);
      }
      if (hasMaxPlayers) {
        output.WriteUInt32(3, field_names[0], MaxPlayers);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTeamPrototypeGuid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TeamPrototypeGuid);
      }
      if (hasMinPlayers) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, MinPlayers);
      }
      if (hasMaxPlayers) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, MaxPlayers);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MatchTeamDescription ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MatchTeamDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MatchTeamDescription ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MatchTeamDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MatchTeamDescription ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MatchTeamDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MatchTeamDescription ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MatchTeamDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MatchTeamDescription ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MatchTeamDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MatchTeamDescription MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MatchTeamDescription prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MatchTeamDescription, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MatchTeamDescription cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MatchTeamDescription result;
      
      private MatchTeamDescription PrepareBuilder() {
        if (resultIsReadOnly) {
          MatchTeamDescription original = result;
          result = new MatchTeamDescription();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MatchTeamDescription MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.MatchTeamDescription.Descriptor; }
      }
      
      public override MatchTeamDescription DefaultInstanceForType {
        get { return global::Gazillion.MatchTeamDescription.DefaultInstance; }
      }
      
      public override MatchTeamDescription BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MatchTeamDescription) {
          return MergeFrom((MatchTeamDescription) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MatchTeamDescription other) {
        if (other == global::Gazillion.MatchTeamDescription.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTeamPrototypeGuid) {
          TeamPrototypeGuid = other.TeamPrototypeGuid;
        }
        if (other.HasMinPlayers) {
          MinPlayers = other.MinPlayers;
        }
        if (other.HasMaxPlayers) {
          MaxPlayers = other.MaxPlayers;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_matchTeamDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _matchTeamDescriptionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTeamPrototypeGuid = input.ReadUInt64(ref result.teamPrototypeGuid_);
              break;
            }
            case 16: {
              result.hasMinPlayers = input.ReadUInt32(ref result.minPlayers_);
              break;
            }
            case 24: {
              result.hasMaxPlayers = input.ReadUInt32(ref result.maxPlayers_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTeamPrototypeGuid {
        get { return result.hasTeamPrototypeGuid; }
      }
      public ulong TeamPrototypeGuid {
        get { return result.TeamPrototypeGuid; }
        set { SetTeamPrototypeGuid(value); }
      }
      public Builder SetTeamPrototypeGuid(ulong value) {
        PrepareBuilder();
        result.hasTeamPrototypeGuid = true;
        result.teamPrototypeGuid_ = value;
        return this;
      }
      public Builder ClearTeamPrototypeGuid() {
        PrepareBuilder();
        result.hasTeamPrototypeGuid = false;
        result.teamPrototypeGuid_ = 0UL;
        return this;
      }
      
      public bool HasMinPlayers {
        get { return result.hasMinPlayers; }
      }
      public uint MinPlayers {
        get { return result.MinPlayers; }
        set { SetMinPlayers(value); }
      }
      public Builder SetMinPlayers(uint value) {
        PrepareBuilder();
        result.hasMinPlayers = true;
        result.minPlayers_ = value;
        return this;
      }
      public Builder ClearMinPlayers() {
        PrepareBuilder();
        result.hasMinPlayers = false;
        result.minPlayers_ = 0;
        return this;
      }
      
      public bool HasMaxPlayers {
        get { return result.hasMaxPlayers; }
      }
      public uint MaxPlayers {
        get { return result.MaxPlayers; }
        set { SetMaxPlayers(value); }
      }
      public Builder SetMaxPlayers(uint value) {
        PrepareBuilder();
        result.hasMaxPlayers = true;
        result.maxPlayers_ = value;
        return this;
      }
      public Builder ClearMaxPlayers() {
        PrepareBuilder();
        result.hasMaxPlayers = false;
        result.maxPlayers_ = 0;
        return this;
      }
    }
    static MatchTeamDescription() {
      object.ReferenceEquals(global::Gazillion.MatchCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MatchGameDescription : pb::GeneratedMessage<MatchGameDescription, MatchGameDescription.Builder> {
    private MatchGameDescription() { }
    private static readonly MatchGameDescription defaultInstance = new MatchGameDescription().MakeReadOnly();
    private static readonly string[] _matchGameDescriptionFieldNames = new string[] { "gamePrototypeGuid", "queuePrototypeGuid", "regionPrototypeId", "teams" };
    private static readonly uint[] _matchGameDescriptionFieldTags = new uint[] { 16, 8, 24, 34 };
    public static MatchGameDescription DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MatchGameDescription DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MatchGameDescription ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.MatchCommon.internal__static_Gazillion_MatchGameDescription__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MatchGameDescription, MatchGameDescription.Builder> InternalFieldAccessors {
      get { return global::Gazillion.MatchCommon.internal__static_Gazillion_MatchGameDescription__FieldAccessorTable; }
    }
    
    public const int QueuePrototypeGuidFieldNumber = 1;
    private bool hasQueuePrototypeGuid;
    private ulong queuePrototypeGuid_;
    public bool HasQueuePrototypeGuid {
      get { return hasQueuePrototypeGuid; }
    }
    public ulong QueuePrototypeGuid {
      get { return queuePrototypeGuid_; }
    }
    
    public const int GamePrototypeGuidFieldNumber = 2;
    private bool hasGamePrototypeGuid;
    private ulong gamePrototypeGuid_;
    public bool HasGamePrototypeGuid {
      get { return hasGamePrototypeGuid; }
    }
    public ulong GamePrototypeGuid {
      get { return gamePrototypeGuid_; }
    }
    
    public const int RegionPrototypeIdFieldNumber = 3;
    private bool hasRegionPrototypeId;
    private ulong regionPrototypeId_;
    public bool HasRegionPrototypeId {
      get { return hasRegionPrototypeId; }
    }
    public ulong RegionPrototypeId {
      get { return regionPrototypeId_; }
    }
    
    public const int TeamsFieldNumber = 4;
    private pbc::PopsicleList<global::Gazillion.MatchTeamDescription> teams_ = new pbc::PopsicleList<global::Gazillion.MatchTeamDescription>();
    public scg::IList<global::Gazillion.MatchTeamDescription> TeamsList {
      get { return teams_; }
    }
    public int TeamsCount {
      get { return teams_.Count; }
    }
    public global::Gazillion.MatchTeamDescription GetTeams(int index) {
      return teams_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasQueuePrototypeGuid) return false;
        if (!hasGamePrototypeGuid) return false;
        if (!hasRegionPrototypeId) return false;
        foreach (global::Gazillion.MatchTeamDescription element in TeamsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _matchGameDescriptionFieldNames;
      if (hasQueuePrototypeGuid) {
        output.WriteUInt64(1, field_names[1], QueuePrototypeGuid);
      }
      if (hasGamePrototypeGuid) {
        output.WriteUInt64(2, field_names[0], GamePrototypeGuid);
      }
      if (hasRegionPrototypeId) {
        output.WriteUInt64(3, field_names[2], RegionPrototypeId);
      }
      if (teams_.Count > 0) {
        output.WriteMessageArray(4, field_names[3], teams_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasQueuePrototypeGuid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, QueuePrototypeGuid);
      }
      if (hasGamePrototypeGuid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, GamePrototypeGuid);
      }
      if (hasRegionPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, RegionPrototypeId);
      }
      foreach (global::Gazillion.MatchTeamDescription element in TeamsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MatchGameDescription ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MatchGameDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MatchGameDescription ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MatchGameDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MatchGameDescription ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MatchGameDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MatchGameDescription ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MatchGameDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MatchGameDescription ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MatchGameDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MatchGameDescription MakeReadOnly() {
      teams_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MatchGameDescription prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MatchGameDescription, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MatchGameDescription cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MatchGameDescription result;
      
      private MatchGameDescription PrepareBuilder() {
        if (resultIsReadOnly) {
          MatchGameDescription original = result;
          result = new MatchGameDescription();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MatchGameDescription MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.MatchGameDescription.Descriptor; }
      }
      
      public override MatchGameDescription DefaultInstanceForType {
        get { return global::Gazillion.MatchGameDescription.DefaultInstance; }
      }
      
      public override MatchGameDescription BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MatchGameDescription) {
          return MergeFrom((MatchGameDescription) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MatchGameDescription other) {
        if (other == global::Gazillion.MatchGameDescription.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasQueuePrototypeGuid) {
          QueuePrototypeGuid = other.QueuePrototypeGuid;
        }
        if (other.HasGamePrototypeGuid) {
          GamePrototypeGuid = other.GamePrototypeGuid;
        }
        if (other.HasRegionPrototypeId) {
          RegionPrototypeId = other.RegionPrototypeId;
        }
        if (other.teams_.Count != 0) {
          result.teams_.Add(other.teams_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_matchGameDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _matchGameDescriptionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasQueuePrototypeGuid = input.ReadUInt64(ref result.queuePrototypeGuid_);
              break;
            }
            case 16: {
              result.hasGamePrototypeGuid = input.ReadUInt64(ref result.gamePrototypeGuid_);
              break;
            }
            case 24: {
              result.hasRegionPrototypeId = input.ReadUInt64(ref result.regionPrototypeId_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.teams_, global::Gazillion.MatchTeamDescription.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasQueuePrototypeGuid {
        get { return result.hasQueuePrototypeGuid; }
      }
      public ulong QueuePrototypeGuid {
        get { return result.QueuePrototypeGuid; }
        set { SetQueuePrototypeGuid(value); }
      }
      public Builder SetQueuePrototypeGuid(ulong value) {
        PrepareBuilder();
        result.hasQueuePrototypeGuid = true;
        result.queuePrototypeGuid_ = value;
        return this;
      }
      public Builder ClearQueuePrototypeGuid() {
        PrepareBuilder();
        result.hasQueuePrototypeGuid = false;
        result.queuePrototypeGuid_ = 0UL;
        return this;
      }
      
      public bool HasGamePrototypeGuid {
        get { return result.hasGamePrototypeGuid; }
      }
      public ulong GamePrototypeGuid {
        get { return result.GamePrototypeGuid; }
        set { SetGamePrototypeGuid(value); }
      }
      public Builder SetGamePrototypeGuid(ulong value) {
        PrepareBuilder();
        result.hasGamePrototypeGuid = true;
        result.gamePrototypeGuid_ = value;
        return this;
      }
      public Builder ClearGamePrototypeGuid() {
        PrepareBuilder();
        result.hasGamePrototypeGuid = false;
        result.gamePrototypeGuid_ = 0UL;
        return this;
      }
      
      public bool HasRegionPrototypeId {
        get { return result.hasRegionPrototypeId; }
      }
      public ulong RegionPrototypeId {
        get { return result.RegionPrototypeId; }
        set { SetRegionPrototypeId(value); }
      }
      public Builder SetRegionPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasRegionPrototypeId = true;
        result.regionPrototypeId_ = value;
        return this;
      }
      public Builder ClearRegionPrototypeId() {
        PrepareBuilder();
        result.hasRegionPrototypeId = false;
        result.regionPrototypeId_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.MatchTeamDescription> TeamsList {
        get { return PrepareBuilder().teams_; }
      }
      public int TeamsCount {
        get { return result.TeamsCount; }
      }
      public global::Gazillion.MatchTeamDescription GetTeams(int index) {
        return result.GetTeams(index);
      }
      public Builder SetTeams(int index, global::Gazillion.MatchTeamDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.teams_[index] = value;
        return this;
      }
      public Builder SetTeams(int index, global::Gazillion.MatchTeamDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.teams_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTeams(global::Gazillion.MatchTeamDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.teams_.Add(value);
        return this;
      }
      public Builder AddTeams(global::Gazillion.MatchTeamDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.teams_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTeams(scg::IEnumerable<global::Gazillion.MatchTeamDescription> values) {
        PrepareBuilder();
        result.teams_.Add(values);
        return this;
      }
      public Builder ClearTeams() {
        PrepareBuilder();
        result.teams_.Clear();
        return this;
      }
    }
    static MatchGameDescription() {
      object.ReferenceEquals(global::Gazillion.MatchCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MatchQueueDescription : pb::GeneratedMessage<MatchQueueDescription, MatchQueueDescription.Builder> {
    private MatchQueueDescription() { }
    private static readonly MatchQueueDescription defaultInstance = new MatchQueueDescription().MakeReadOnly();
    private static readonly string[] _matchQueueDescriptionFieldNames = new string[] { "balanceMethod", "games", "queuePrototypeGuid", "regionLevel" };
    private static readonly uint[] _matchQueueDescriptionFieldTags = new uint[] { 16, 34, 8, 24 };
    public static MatchQueueDescription DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MatchQueueDescription DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MatchQueueDescription ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.MatchCommon.internal__static_Gazillion_MatchQueueDescription__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MatchQueueDescription, MatchQueueDescription.Builder> InternalFieldAccessors {
      get { return global::Gazillion.MatchCommon.internal__static_Gazillion_MatchQueueDescription__FieldAccessorTable; }
    }
    
    public const int QueuePrototypeGuidFieldNumber = 1;
    private bool hasQueuePrototypeGuid;
    private ulong queuePrototypeGuid_;
    public bool HasQueuePrototypeGuid {
      get { return hasQueuePrototypeGuid; }
    }
    public ulong QueuePrototypeGuid {
      get { return queuePrototypeGuid_; }
    }
    
    public const int BalanceMethodFieldNumber = 2;
    private bool hasBalanceMethod;
    private global::Gazillion.MatchBalanceMethod balanceMethod_ = global::Gazillion.MatchBalanceMethod.MBM_None;
    public bool HasBalanceMethod {
      get { return hasBalanceMethod; }
    }
    public global::Gazillion.MatchBalanceMethod BalanceMethod {
      get { return balanceMethod_; }
    }
    
    public const int RegionLevelFieldNumber = 3;
    private bool hasRegionLevel;
    private uint regionLevel_;
    public bool HasRegionLevel {
      get { return hasRegionLevel; }
    }
    public uint RegionLevel {
      get { return regionLevel_; }
    }
    
    public const int GamesFieldNumber = 4;
    private pbc::PopsicleList<global::Gazillion.MatchGameDescription> games_ = new pbc::PopsicleList<global::Gazillion.MatchGameDescription>();
    public scg::IList<global::Gazillion.MatchGameDescription> GamesList {
      get { return games_; }
    }
    public int GamesCount {
      get { return games_.Count; }
    }
    public global::Gazillion.MatchGameDescription GetGames(int index) {
      return games_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasQueuePrototypeGuid) return false;
        if (!hasBalanceMethod) return false;
        if (!hasRegionLevel) return false;
        foreach (global::Gazillion.MatchGameDescription element in GamesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _matchQueueDescriptionFieldNames;
      if (hasQueuePrototypeGuid) {
        output.WriteUInt64(1, field_names[2], QueuePrototypeGuid);
      }
      if (hasBalanceMethod) {
        output.WriteEnum(2, field_names[0], (int) BalanceMethod, BalanceMethod);
      }
      if (hasRegionLevel) {
        output.WriteUInt32(3, field_names[3], RegionLevel);
      }
      if (games_.Count > 0) {
        output.WriteMessageArray(4, field_names[1], games_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasQueuePrototypeGuid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, QueuePrototypeGuid);
      }
      if (hasBalanceMethod) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) BalanceMethod);
      }
      if (hasRegionLevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, RegionLevel);
      }
      foreach (global::Gazillion.MatchGameDescription element in GamesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MatchQueueDescription ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MatchQueueDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MatchQueueDescription ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MatchQueueDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MatchQueueDescription ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MatchQueueDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MatchQueueDescription ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MatchQueueDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MatchQueueDescription ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MatchQueueDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MatchQueueDescription MakeReadOnly() {
      games_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MatchQueueDescription prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MatchQueueDescription, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MatchQueueDescription cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MatchQueueDescription result;
      
      private MatchQueueDescription PrepareBuilder() {
        if (resultIsReadOnly) {
          MatchQueueDescription original = result;
          result = new MatchQueueDescription();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MatchQueueDescription MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.MatchQueueDescription.Descriptor; }
      }
      
      public override MatchQueueDescription DefaultInstanceForType {
        get { return global::Gazillion.MatchQueueDescription.DefaultInstance; }
      }
      
      public override MatchQueueDescription BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MatchQueueDescription) {
          return MergeFrom((MatchQueueDescription) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MatchQueueDescription other) {
        if (other == global::Gazillion.MatchQueueDescription.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasQueuePrototypeGuid) {
          QueuePrototypeGuid = other.QueuePrototypeGuid;
        }
        if (other.HasBalanceMethod) {
          BalanceMethod = other.BalanceMethod;
        }
        if (other.HasRegionLevel) {
          RegionLevel = other.RegionLevel;
        }
        if (other.games_.Count != 0) {
          result.games_.Add(other.games_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_matchQueueDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _matchQueueDescriptionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasQueuePrototypeGuid = input.ReadUInt64(ref result.queuePrototypeGuid_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.balanceMethod_, out unknown)) {
                result.hasBalanceMethod = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 24: {
              result.hasRegionLevel = input.ReadUInt32(ref result.regionLevel_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.games_, global::Gazillion.MatchGameDescription.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasQueuePrototypeGuid {
        get { return result.hasQueuePrototypeGuid; }
      }
      public ulong QueuePrototypeGuid {
        get { return result.QueuePrototypeGuid; }
        set { SetQueuePrototypeGuid(value); }
      }
      public Builder SetQueuePrototypeGuid(ulong value) {
        PrepareBuilder();
        result.hasQueuePrototypeGuid = true;
        result.queuePrototypeGuid_ = value;
        return this;
      }
      public Builder ClearQueuePrototypeGuid() {
        PrepareBuilder();
        result.hasQueuePrototypeGuid = false;
        result.queuePrototypeGuid_ = 0UL;
        return this;
      }
      
      public bool HasBalanceMethod {
       get { return result.hasBalanceMethod; }
      }
      public global::Gazillion.MatchBalanceMethod BalanceMethod {
        get { return result.BalanceMethod; }
        set { SetBalanceMethod(value); }
      }
      public Builder SetBalanceMethod(global::Gazillion.MatchBalanceMethod value) {
        PrepareBuilder();
        result.hasBalanceMethod = true;
        result.balanceMethod_ = value;
        return this;
      }
      public Builder ClearBalanceMethod() {
        PrepareBuilder();
        result.hasBalanceMethod = false;
        result.balanceMethod_ = global::Gazillion.MatchBalanceMethod.MBM_None;
        return this;
      }
      
      public bool HasRegionLevel {
        get { return result.hasRegionLevel; }
      }
      public uint RegionLevel {
        get { return result.RegionLevel; }
        set { SetRegionLevel(value); }
      }
      public Builder SetRegionLevel(uint value) {
        PrepareBuilder();
        result.hasRegionLevel = true;
        result.regionLevel_ = value;
        return this;
      }
      public Builder ClearRegionLevel() {
        PrepareBuilder();
        result.hasRegionLevel = false;
        result.regionLevel_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.MatchGameDescription> GamesList {
        get { return PrepareBuilder().games_; }
      }
      public int GamesCount {
        get { return result.GamesCount; }
      }
      public global::Gazillion.MatchGameDescription GetGames(int index) {
        return result.GetGames(index);
      }
      public Builder SetGames(int index, global::Gazillion.MatchGameDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.games_[index] = value;
        return this;
      }
      public Builder SetGames(int index, global::Gazillion.MatchGameDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.games_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGames(global::Gazillion.MatchGameDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.games_.Add(value);
        return this;
      }
      public Builder AddGames(global::Gazillion.MatchGameDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.games_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGames(scg::IEnumerable<global::Gazillion.MatchGameDescription> values) {
        PrepareBuilder();
        result.games_.Add(values);
        return this;
      }
      public Builder ClearGames() {
        PrepareBuilder();
        result.games_.Clear();
        return this;
      }
    }
    static MatchQueueDescription() {
      object.ReferenceEquals(global::Gazillion.MatchCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MatchTeamResultData : pb::GeneratedMessage<MatchTeamResultData, MatchTeamResultData.Builder> {
    private MatchTeamResultData() { }
    private static readonly MatchTeamResultData defaultInstance = new MatchTeamResultData().MakeReadOnly();
    private static readonly string[] _matchTeamResultDataFieldNames = new string[] { "creditWithWin", "teamPrototypeGuid" };
    private static readonly uint[] _matchTeamResultDataFieldTags = new uint[] { 16, 8 };
    public static MatchTeamResultData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MatchTeamResultData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MatchTeamResultData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.MatchCommon.internal__static_Gazillion_MatchTeamResultData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MatchTeamResultData, MatchTeamResultData.Builder> InternalFieldAccessors {
      get { return global::Gazillion.MatchCommon.internal__static_Gazillion_MatchTeamResultData__FieldAccessorTable; }
    }
    
    public const int TeamPrototypeGuidFieldNumber = 1;
    private bool hasTeamPrototypeGuid;
    private ulong teamPrototypeGuid_;
    public bool HasTeamPrototypeGuid {
      get { return hasTeamPrototypeGuid; }
    }
    public ulong TeamPrototypeGuid {
      get { return teamPrototypeGuid_; }
    }
    
    public const int CreditWithWinFieldNumber = 2;
    private bool hasCreditWithWin;
    private bool creditWithWin_;
    public bool HasCreditWithWin {
      get { return hasCreditWithWin; }
    }
    public bool CreditWithWin {
      get { return creditWithWin_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTeamPrototypeGuid) return false;
        if (!hasCreditWithWin) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _matchTeamResultDataFieldNames;
      if (hasTeamPrototypeGuid) {
        output.WriteUInt64(1, field_names[1], TeamPrototypeGuid);
      }
      if (hasCreditWithWin) {
        output.WriteBool(2, field_names[0], CreditWithWin);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTeamPrototypeGuid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TeamPrototypeGuid);
      }
      if (hasCreditWithWin) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, CreditWithWin);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MatchTeamResultData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MatchTeamResultData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MatchTeamResultData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MatchTeamResultData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MatchTeamResultData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MatchTeamResultData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MatchTeamResultData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MatchTeamResultData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MatchTeamResultData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MatchTeamResultData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MatchTeamResultData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MatchTeamResultData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MatchTeamResultData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MatchTeamResultData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MatchTeamResultData result;
      
      private MatchTeamResultData PrepareBuilder() {
        if (resultIsReadOnly) {
          MatchTeamResultData original = result;
          result = new MatchTeamResultData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MatchTeamResultData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.MatchTeamResultData.Descriptor; }
      }
      
      public override MatchTeamResultData DefaultInstanceForType {
        get { return global::Gazillion.MatchTeamResultData.DefaultInstance; }
      }
      
      public override MatchTeamResultData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MatchTeamResultData) {
          return MergeFrom((MatchTeamResultData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MatchTeamResultData other) {
        if (other == global::Gazillion.MatchTeamResultData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTeamPrototypeGuid) {
          TeamPrototypeGuid = other.TeamPrototypeGuid;
        }
        if (other.HasCreditWithWin) {
          CreditWithWin = other.CreditWithWin;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_matchTeamResultDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _matchTeamResultDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTeamPrototypeGuid = input.ReadUInt64(ref result.teamPrototypeGuid_);
              break;
            }
            case 16: {
              result.hasCreditWithWin = input.ReadBool(ref result.creditWithWin_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTeamPrototypeGuid {
        get { return result.hasTeamPrototypeGuid; }
      }
      public ulong TeamPrototypeGuid {
        get { return result.TeamPrototypeGuid; }
        set { SetTeamPrototypeGuid(value); }
      }
      public Builder SetTeamPrototypeGuid(ulong value) {
        PrepareBuilder();
        result.hasTeamPrototypeGuid = true;
        result.teamPrototypeGuid_ = value;
        return this;
      }
      public Builder ClearTeamPrototypeGuid() {
        PrepareBuilder();
        result.hasTeamPrototypeGuid = false;
        result.teamPrototypeGuid_ = 0UL;
        return this;
      }
      
      public bool HasCreditWithWin {
        get { return result.hasCreditWithWin; }
      }
      public bool CreditWithWin {
        get { return result.CreditWithWin; }
        set { SetCreditWithWin(value); }
      }
      public Builder SetCreditWithWin(bool value) {
        PrepareBuilder();
        result.hasCreditWithWin = true;
        result.creditWithWin_ = value;
        return this;
      }
      public Builder ClearCreditWithWin() {
        PrepareBuilder();
        result.hasCreditWithWin = false;
        result.creditWithWin_ = false;
        return this;
      }
    }
    static MatchTeamResultData() {
      object.ReferenceEquals(global::Gazillion.MatchCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MatchResultData : pb::GeneratedMessage<MatchResultData, MatchResultData.Builder> {
    private MatchResultData() { }
    private static readonly MatchResultData defaultInstance = new MatchResultData().MakeReadOnly();
    private static readonly string[] _matchResultDataFieldNames = new string[] { "teams" };
    private static readonly uint[] _matchResultDataFieldTags = new uint[] { 10 };
    public static MatchResultData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MatchResultData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MatchResultData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.MatchCommon.internal__static_Gazillion_MatchResultData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MatchResultData, MatchResultData.Builder> InternalFieldAccessors {
      get { return global::Gazillion.MatchCommon.internal__static_Gazillion_MatchResultData__FieldAccessorTable; }
    }
    
    public const int TeamsFieldNumber = 1;
    private pbc::PopsicleList<global::Gazillion.MatchTeamResultData> teams_ = new pbc::PopsicleList<global::Gazillion.MatchTeamResultData>();
    public scg::IList<global::Gazillion.MatchTeamResultData> TeamsList {
      get { return teams_; }
    }
    public int TeamsCount {
      get { return teams_.Count; }
    }
    public global::Gazillion.MatchTeamResultData GetTeams(int index) {
      return teams_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Gazillion.MatchTeamResultData element in TeamsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _matchResultDataFieldNames;
      if (teams_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], teams_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Gazillion.MatchTeamResultData element in TeamsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MatchResultData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MatchResultData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MatchResultData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MatchResultData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MatchResultData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MatchResultData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MatchResultData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MatchResultData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MatchResultData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MatchResultData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MatchResultData MakeReadOnly() {
      teams_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MatchResultData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MatchResultData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MatchResultData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MatchResultData result;
      
      private MatchResultData PrepareBuilder() {
        if (resultIsReadOnly) {
          MatchResultData original = result;
          result = new MatchResultData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MatchResultData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.MatchResultData.Descriptor; }
      }
      
      public override MatchResultData DefaultInstanceForType {
        get { return global::Gazillion.MatchResultData.DefaultInstance; }
      }
      
      public override MatchResultData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MatchResultData) {
          return MergeFrom((MatchResultData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MatchResultData other) {
        if (other == global::Gazillion.MatchResultData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.teams_.Count != 0) {
          result.teams_.Add(other.teams_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_matchResultDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _matchResultDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.teams_, global::Gazillion.MatchTeamResultData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Gazillion.MatchTeamResultData> TeamsList {
        get { return PrepareBuilder().teams_; }
      }
      public int TeamsCount {
        get { return result.TeamsCount; }
      }
      public global::Gazillion.MatchTeamResultData GetTeams(int index) {
        return result.GetTeams(index);
      }
      public Builder SetTeams(int index, global::Gazillion.MatchTeamResultData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.teams_[index] = value;
        return this;
      }
      public Builder SetTeams(int index, global::Gazillion.MatchTeamResultData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.teams_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTeams(global::Gazillion.MatchTeamResultData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.teams_.Add(value);
        return this;
      }
      public Builder AddTeams(global::Gazillion.MatchTeamResultData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.teams_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTeams(scg::IEnumerable<global::Gazillion.MatchTeamResultData> values) {
        PrepareBuilder();
        result.teams_.Add(values);
        return this;
      }
      public Builder ClearTeams() {
        PrepareBuilder();
        result.teams_.Clear();
        return this;
      }
    }
    static MatchResultData() {
      object.ReferenceEquals(global::Gazillion.MatchCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MatchPlayerStatisticsSummary : pb::GeneratedMessage<MatchPlayerStatisticsSummary, MatchPlayerStatisticsSummary.Builder> {
    private MatchPlayerStatisticsSummary() { }
    private static readonly MatchPlayerStatisticsSummary defaultInstance = new MatchPlayerStatisticsSummary().MakeReadOnly();
    private static readonly string[] _matchPlayerStatisticsSummaryFieldNames = new string[] { "gamePrototypeGuid", "gamesPlayed", "gamesWon", "queuePrototypeGuid", "ratingSummary" };
    private static readonly uint[] _matchPlayerStatisticsSummaryFieldTags = new uint[] { 16, 24, 32, 8, 40 };
    public static MatchPlayerStatisticsSummary DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MatchPlayerStatisticsSummary DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MatchPlayerStatisticsSummary ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.MatchCommon.internal__static_Gazillion_MatchPlayerStatisticsSummary__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MatchPlayerStatisticsSummary, MatchPlayerStatisticsSummary.Builder> InternalFieldAccessors {
      get { return global::Gazillion.MatchCommon.internal__static_Gazillion_MatchPlayerStatisticsSummary__FieldAccessorTable; }
    }
    
    public const int QueuePrototypeGuidFieldNumber = 1;
    private bool hasQueuePrototypeGuid;
    private ulong queuePrototypeGuid_;
    public bool HasQueuePrototypeGuid {
      get { return hasQueuePrototypeGuid; }
    }
    public ulong QueuePrototypeGuid {
      get { return queuePrototypeGuid_; }
    }
    
    public const int GamePrototypeGuidFieldNumber = 2;
    private bool hasGamePrototypeGuid;
    private ulong gamePrototypeGuid_;
    public bool HasGamePrototypeGuid {
      get { return hasGamePrototypeGuid; }
    }
    public ulong GamePrototypeGuid {
      get { return gamePrototypeGuid_; }
    }
    
    public const int GamesPlayedFieldNumber = 3;
    private bool hasGamesPlayed;
    private uint gamesPlayed_;
    public bool HasGamesPlayed {
      get { return hasGamesPlayed; }
    }
    public uint GamesPlayed {
      get { return gamesPlayed_; }
    }
    
    public const int GamesWonFieldNumber = 4;
    private bool hasGamesWon;
    private uint gamesWon_;
    public bool HasGamesWon {
      get { return hasGamesWon; }
    }
    public uint GamesWon {
      get { return gamesWon_; }
    }
    
    public const int RatingSummaryFieldNumber = 5;
    private bool hasRatingSummary;
    private uint ratingSummary_;
    public bool HasRatingSummary {
      get { return hasRatingSummary; }
    }
    public uint RatingSummary {
      get { return ratingSummary_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasQueuePrototypeGuid) return false;
        if (!hasGamePrototypeGuid) return false;
        if (!hasGamesPlayed) return false;
        if (!hasGamesWon) return false;
        if (!hasRatingSummary) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _matchPlayerStatisticsSummaryFieldNames;
      if (hasQueuePrototypeGuid) {
        output.WriteUInt64(1, field_names[3], QueuePrototypeGuid);
      }
      if (hasGamePrototypeGuid) {
        output.WriteUInt64(2, field_names[0], GamePrototypeGuid);
      }
      if (hasGamesPlayed) {
        output.WriteUInt32(3, field_names[1], GamesPlayed);
      }
      if (hasGamesWon) {
        output.WriteUInt32(4, field_names[2], GamesWon);
      }
      if (hasRatingSummary) {
        output.WriteUInt32(5, field_names[4], RatingSummary);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasQueuePrototypeGuid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, QueuePrototypeGuid);
      }
      if (hasGamePrototypeGuid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, GamePrototypeGuid);
      }
      if (hasGamesPlayed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, GamesPlayed);
      }
      if (hasGamesWon) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, GamesWon);
      }
      if (hasRatingSummary) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, RatingSummary);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MatchPlayerStatisticsSummary ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MatchPlayerStatisticsSummary ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MatchPlayerStatisticsSummary ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MatchPlayerStatisticsSummary ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MatchPlayerStatisticsSummary ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MatchPlayerStatisticsSummary ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MatchPlayerStatisticsSummary ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MatchPlayerStatisticsSummary ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MatchPlayerStatisticsSummary ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MatchPlayerStatisticsSummary ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MatchPlayerStatisticsSummary MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MatchPlayerStatisticsSummary prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MatchPlayerStatisticsSummary, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MatchPlayerStatisticsSummary cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MatchPlayerStatisticsSummary result;
      
      private MatchPlayerStatisticsSummary PrepareBuilder() {
        if (resultIsReadOnly) {
          MatchPlayerStatisticsSummary original = result;
          result = new MatchPlayerStatisticsSummary();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MatchPlayerStatisticsSummary MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.MatchPlayerStatisticsSummary.Descriptor; }
      }
      
      public override MatchPlayerStatisticsSummary DefaultInstanceForType {
        get { return global::Gazillion.MatchPlayerStatisticsSummary.DefaultInstance; }
      }
      
      public override MatchPlayerStatisticsSummary BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MatchPlayerStatisticsSummary) {
          return MergeFrom((MatchPlayerStatisticsSummary) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MatchPlayerStatisticsSummary other) {
        if (other == global::Gazillion.MatchPlayerStatisticsSummary.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasQueuePrototypeGuid) {
          QueuePrototypeGuid = other.QueuePrototypeGuid;
        }
        if (other.HasGamePrototypeGuid) {
          GamePrototypeGuid = other.GamePrototypeGuid;
        }
        if (other.HasGamesPlayed) {
          GamesPlayed = other.GamesPlayed;
        }
        if (other.HasGamesWon) {
          GamesWon = other.GamesWon;
        }
        if (other.HasRatingSummary) {
          RatingSummary = other.RatingSummary;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_matchPlayerStatisticsSummaryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _matchPlayerStatisticsSummaryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasQueuePrototypeGuid = input.ReadUInt64(ref result.queuePrototypeGuid_);
              break;
            }
            case 16: {
              result.hasGamePrototypeGuid = input.ReadUInt64(ref result.gamePrototypeGuid_);
              break;
            }
            case 24: {
              result.hasGamesPlayed = input.ReadUInt32(ref result.gamesPlayed_);
              break;
            }
            case 32: {
              result.hasGamesWon = input.ReadUInt32(ref result.gamesWon_);
              break;
            }
            case 40: {
              result.hasRatingSummary = input.ReadUInt32(ref result.ratingSummary_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasQueuePrototypeGuid {
        get { return result.hasQueuePrototypeGuid; }
      }
      public ulong QueuePrototypeGuid {
        get { return result.QueuePrototypeGuid; }
        set { SetQueuePrototypeGuid(value); }
      }
      public Builder SetQueuePrototypeGuid(ulong value) {
        PrepareBuilder();
        result.hasQueuePrototypeGuid = true;
        result.queuePrototypeGuid_ = value;
        return this;
      }
      public Builder ClearQueuePrototypeGuid() {
        PrepareBuilder();
        result.hasQueuePrototypeGuid = false;
        result.queuePrototypeGuid_ = 0UL;
        return this;
      }
      
      public bool HasGamePrototypeGuid {
        get { return result.hasGamePrototypeGuid; }
      }
      public ulong GamePrototypeGuid {
        get { return result.GamePrototypeGuid; }
        set { SetGamePrototypeGuid(value); }
      }
      public Builder SetGamePrototypeGuid(ulong value) {
        PrepareBuilder();
        result.hasGamePrototypeGuid = true;
        result.gamePrototypeGuid_ = value;
        return this;
      }
      public Builder ClearGamePrototypeGuid() {
        PrepareBuilder();
        result.hasGamePrototypeGuid = false;
        result.gamePrototypeGuid_ = 0UL;
        return this;
      }
      
      public bool HasGamesPlayed {
        get { return result.hasGamesPlayed; }
      }
      public uint GamesPlayed {
        get { return result.GamesPlayed; }
        set { SetGamesPlayed(value); }
      }
      public Builder SetGamesPlayed(uint value) {
        PrepareBuilder();
        result.hasGamesPlayed = true;
        result.gamesPlayed_ = value;
        return this;
      }
      public Builder ClearGamesPlayed() {
        PrepareBuilder();
        result.hasGamesPlayed = false;
        result.gamesPlayed_ = 0;
        return this;
      }
      
      public bool HasGamesWon {
        get { return result.hasGamesWon; }
      }
      public uint GamesWon {
        get { return result.GamesWon; }
        set { SetGamesWon(value); }
      }
      public Builder SetGamesWon(uint value) {
        PrepareBuilder();
        result.hasGamesWon = true;
        result.gamesWon_ = value;
        return this;
      }
      public Builder ClearGamesWon() {
        PrepareBuilder();
        result.hasGamesWon = false;
        result.gamesWon_ = 0;
        return this;
      }
      
      public bool HasRatingSummary {
        get { return result.hasRatingSummary; }
      }
      public uint RatingSummary {
        get { return result.RatingSummary; }
        set { SetRatingSummary(value); }
      }
      public Builder SetRatingSummary(uint value) {
        PrepareBuilder();
        result.hasRatingSummary = true;
        result.ratingSummary_ = value;
        return this;
      }
      public Builder ClearRatingSummary() {
        PrepareBuilder();
        result.hasRatingSummary = false;
        result.ratingSummary_ = 0;
        return this;
      }
    }
    static MatchPlayerStatisticsSummary() {
      object.ReferenceEquals(global::Gazillion.MatchCommon.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
