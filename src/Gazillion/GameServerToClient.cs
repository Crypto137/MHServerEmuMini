// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Gazillion {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class GameServerToClient {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageReadyAndLoggedIn__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReadyAndLoggedIn, global::Gazillion.NetMessageReadyAndLoggedIn.Builder> internal__static_Gazillion_NetMessageReadyAndLoggedIn__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageReadyForTimeSync__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReadyForTimeSync, global::Gazillion.NetMessageReadyForTimeSync.Builder> internal__static_Gazillion_NetMessageReadyForTimeSync__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLocalPlayer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLocalPlayer, global::Gazillion.NetMessageLocalPlayer.Builder> internal__static_Gazillion_NetMessageLocalPlayer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityCreate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityCreate, global::Gazillion.NetMessageEntityCreate.Builder> internal__static_Gazillion_NetMessageEntityCreate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityDestroy__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityDestroy, global::Gazillion.NetMessageEntityDestroy.Builder> internal__static_Gazillion_NetMessageEntityDestroy__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageInventoryMove__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryMove, global::Gazillion.NetMessageInventoryMove.Builder> internal__static_Gazillion_NetMessageInventoryMove__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageInventoryExit__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryExit, global::Gazillion.NetMessageInventoryExit.Builder> internal__static_Gazillion_NetMessageInventoryExit__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageInventoryUnlock__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryUnlock, global::Gazillion.NetMessageInventoryUnlock.Builder> internal__static_Gazillion_NetMessageInventoryUnlock__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePermaBuffUnlock__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePermaBuffUnlock, global::Gazillion.NetMessagePermaBuffUnlock.Builder> internal__static_Gazillion_NetMessagePermaBuffUnlock__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityKill__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityKill, global::Gazillion.NetMessageEntityKill.Builder> internal__static_Gazillion_NetMessageEntityKill__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageQueueFullscreenMovie__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageQueueFullscreenMovie, global::Gazillion.NetMessageQueueFullscreenMovie.Builder> internal__static_Gazillion_NetMessageQueueFullscreenMovie__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageQueueLoadingScreen__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageQueueLoadingScreen, global::Gazillion.NetMessageQueueLoadingScreen.Builder> internal__static_Gazillion_NetMessageQueueLoadingScreen__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDequeueLoadingScreen__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDequeueLoadingScreen, global::Gazillion.NetMessageDequeueLoadingScreen.Builder> internal__static_Gazillion_NetMessageDequeueLoadingScreen__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRegionChange__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionChange, global::Gazillion.NetMessageRegionChange.Builder> internal__static_Gazillion_NetMessageRegionChange__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityPosition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPosition, global::Gazillion.NetMessageEntityPosition.Builder> internal__static_Gazillion_NetMessageEntityPosition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLocomotionStateUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLocomotionStateUpdate, global::Gazillion.NetMessageLocomotionStateUpdate.Builder> internal__static_Gazillion_NetMessageLocomotionStateUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageInterestPolicies__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInterestPolicies, global::Gazillion.NetMessageInterestPolicies.Builder> internal__static_Gazillion_NetMessageInterestPolicies__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUnableToChangeRegion__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnableToChangeRegion, global::Gazillion.NetMessageUnableToChangeRegion.Builder> internal__static_Gazillion_NetMessageUnableToChangeRegion__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetStructAreaConnection__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructAreaConnection, global::Gazillion.NetStructAreaConnection.Builder> internal__static_Gazillion_NetStructAreaConnection__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAddArea__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAddArea, global::Gazillion.NetMessageAddArea.Builder> internal__static_Gazillion_NetMessageAddArea__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRemoveArea__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRemoveArea, global::Gazillion.NetMessageRemoveArea.Builder> internal__static_Gazillion_NetMessageRemoveArea__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetStructReservedSpawn__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructReservedSpawn, global::Gazillion.NetStructReservedSpawn.Builder> internal__static_Gazillion_NetStructReservedSpawn__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCellCreate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCellCreate, global::Gazillion.NetMessageCellCreate.Builder> internal__static_Gazillion_NetMessageCellCreate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCellDestroy__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCellDestroy, global::Gazillion.NetMessageCellDestroy.Builder> internal__static_Gazillion_NetMessageCellDestroy__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEnvironmentUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEnvironmentUpdate, global::Gazillion.NetMessageEnvironmentUpdate.Builder> internal__static_Gazillion_NetMessageEnvironmentUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDebugSpawnMapVisualization__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDebugSpawnMapVisualization, global::Gazillion.NetMessageDebugSpawnMapVisualization.Builder> internal__static_Gazillion_NetMessageDebugSpawnMapVisualization__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageChangeAOIPolicies__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChangeAOIPolicies, global::Gazillion.NetMessageChangeAOIPolicies.Builder> internal__static_Gazillion_NetMessageChangeAOIPolicies__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateEnd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageFullInWorldHierarchyUpdateEnd, global::Gazillion.NetMessageFullInWorldHierarchyUpdateEnd.Builder> internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateEnd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateBegin__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageFullInWorldHierarchyUpdateBegin, global::Gazillion.NetMessageFullInWorldHierarchyUpdateBegin.Builder> internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateBegin__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAdminCommandResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAdminCommandResponse, global::Gazillion.NetMessageAdminCommandResponse.Builder> internal__static_Gazillion_NetMessageAdminCommandResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageActivatePowerFailed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageActivatePowerFailed, global::Gazillion.NetMessageActivatePowerFailed.Builder> internal__static_Gazillion_NetMessageActivatePowerFailed__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCancelPower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCancelPower, global::Gazillion.NetMessageCancelPower.Builder> internal__static_Gazillion_NetMessageCancelPower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageContinuousPowerUpdateToClient__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageContinuousPowerUpdateToClient, global::Gazillion.NetMessageContinuousPowerUpdateToClient.Builder> internal__static_Gazillion_NetMessageContinuousPowerUpdateToClient__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageActivatePower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageActivatePower, global::Gazillion.NetMessageActivatePower.Builder> internal__static_Gazillion_NetMessageActivatePower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePreActivatePower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePreActivatePower, global::Gazillion.NetMessagePreActivatePower.Builder> internal__static_Gazillion_NetMessagePreActivatePower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePowerResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerResult, global::Gazillion.NetMessagePowerResult.Builder> internal__static_Gazillion_NetMessagePowerResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePowerBounce__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerBounce, global::Gazillion.NetMessagePowerBounce.Builder> internal__static_Gazillion_NetMessagePowerBounce__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePowerWeaponMissing__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerWeaponMissing, global::Gazillion.NetMessagePowerWeaponMissing.Builder> internal__static_Gazillion_NetMessagePowerWeaponMissing__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageOnPreInteractPowerEnd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnPreInteractPowerEnd, global::Gazillion.NetMessageOnPreInteractPowerEnd.Builder> internal__static_Gazillion_NetMessageOnPreInteractPowerEnd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRegionPrimitiveBox__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionPrimitiveBox, global::Gazillion.NetMessageRegionPrimitiveBox.Builder> internal__static_Gazillion_NetMessageRegionPrimitiveBox__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRegionPrimitiveTriangle__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionPrimitiveTriangle, global::Gazillion.NetMessageRegionPrimitiveTriangle.Builder> internal__static_Gazillion_NetMessageRegionPrimitiveTriangle__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRegionPrimitiveSphere__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionPrimitiveSphere, global::Gazillion.NetMessageRegionPrimitiveSphere.Builder> internal__static_Gazillion_NetMessageRegionPrimitiveSphere__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRegionPrimitiveLine__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionPrimitiveLine, global::Gazillion.NetMessageRegionPrimitiveLine.Builder> internal__static_Gazillion_NetMessageRegionPrimitiveLine__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMarkFirstGameFrame__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMarkFirstGameFrame, global::Gazillion.NetMessageMarkFirstGameFrame.Builder> internal__static_Gazillion_NetMessageMarkFirstGameFrame__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBeginExitGame__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBeginExitGame, global::Gazillion.NetMessageBeginExitGame.Builder> internal__static_Gazillion_NetMessageBeginExitGame__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSystemMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSystemMessage, global::Gazillion.NetMessageSystemMessage.Builder> internal__static_Gazillion_NetMessageSystemMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAIDebugUIUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAIDebugUIUpdate, global::Gazillion.NetMessageAIDebugUIUpdate.Builder> internal__static_Gazillion_NetMessageAIDebugUIUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePropertiesDebugUIUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePropertiesDebugUIUpdate, global::Gazillion.NetMessagePropertiesDebugUIUpdate.Builder> internal__static_Gazillion_NetMessagePropertiesDebugUIUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageConditionsDebugUIUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageConditionsDebugUIUpdate, global::Gazillion.NetMessageConditionsDebugUIUpdate.Builder> internal__static_Gazillion_NetMessageConditionsDebugUIUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePowersDebugUIUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowersDebugUIUpdate, global::Gazillion.NetMessagePowersDebugUIUpdate.Builder> internal__static_Gazillion_NetMessagePowersDebugUIUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMissionDebugUIUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionDebugUIUpdate, global::Gazillion.NetMessageMissionDebugUIUpdate.Builder> internal__static_Gazillion_NetMessageMissionDebugUIUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDebugEntityPosition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDebugEntityPosition, global::Gazillion.NetMessageDebugEntityPosition.Builder> internal__static_Gazillion_NetMessageDebugEntityPosition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePingResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePingResponse, global::Gazillion.NetMessagePingResponse.Builder> internal__static_Gazillion_NetMessagePingResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityEnterGameWorld__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityEnterGameWorld, global::Gazillion.NetMessageEntityEnterGameWorld.Builder> internal__static_Gazillion_NetMessageEntityEnterGameWorld__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTeleportAckRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTeleportAckRequest, global::Gazillion.NetMessageTeleportAckRequest.Builder> internal__static_Gazillion_NetMessageTeleportAckRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageServerVersion__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageServerVersion, global::Gazillion.NetMessageServerVersion.Builder> internal__static_Gazillion_NetMessageServerVersion__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetStructAffixSpec__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructAffixSpec, global::Gazillion.NetStructAffixSpec.Builder> internal__static_Gazillion_NetStructAffixSpec__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetStructItemSpec__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructItemSpec, global::Gazillion.NetStructItemSpec.Builder> internal__static_Gazillion_NetStructItemSpec__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetStructItemSpecEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructItemSpecEntry, global::Gazillion.NetStructItemSpecEntry.Builder> internal__static_Gazillion_NetStructItemSpecEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMissionUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionUpdate, global::Gazillion.NetMessageMissionUpdate.Builder> internal__static_Gazillion_NetMessageMissionUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMissionObjectiveUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionObjectiveUpdate, global::Gazillion.NetMessageMissionObjectiveUpdate.Builder> internal__static_Gazillion_NetMessageMissionObjectiveUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCurrentAvatarChanged__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCurrentAvatarChanged, global::Gazillion.NetMessageCurrentAvatarChanged.Builder> internal__static_Gazillion_NetMessageCurrentAvatarChanged__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageNewAvatarAcquired__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageNewAvatarAcquired, global::Gazillion.NetMessageNewAvatarAcquired.Builder> internal__static_Gazillion_NetMessageNewAvatarAcquired__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetStructPrefetchEntityPower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructPrefetchEntityPower, global::Gazillion.NetStructPrefetchEntityPower.Builder> internal__static_Gazillion_NetStructPrefetchEntityPower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetStructPrefetchCell__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructPrefetchCell, global::Gazillion.NetStructPrefetchCell.Builder> internal__static_Gazillion_NetStructPrefetchCell__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePrefetchAssets__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePrefetchAssets, global::Gazillion.NetMessagePrefetchAssets.Builder> internal__static_Gazillion_NetMessagePrefetchAssets__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePrefetchRegionsForDownload__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePrefetchRegionsForDownload, global::Gazillion.NetMessagePrefetchRegionsForDownload.Builder> internal__static_Gazillion_NetMessagePrefetchRegionsForDownload__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageQueryIsRegionAvailable__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageQueryIsRegionAvailable, global::Gazillion.NetMessageQueryIsRegionAvailable.Builder> internal__static_Gazillion_NetMessageQueryIsRegionAvailable__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageShowOverheadText__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShowOverheadText, global::Gazillion.NetMessageShowOverheadText.Builder> internal__static_Gazillion_NetMessageShowOverheadText__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAIToggleState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAIToggleState, global::Gazillion.NetMessageAIToggleState.Builder> internal__static_Gazillion_NetMessageAIToggleState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDamageToggleState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDamageToggleState, global::Gazillion.NetMessageDamageToggleState.Builder> internal__static_Gazillion_NetMessageDamageToggleState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetStructMatchQueueEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructMatchQueueEntry, global::Gazillion.NetStructMatchQueueEntry.Builder> internal__static_Gazillion_NetStructMatchQueueEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMatchQueueListResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchQueueListResponse, global::Gazillion.NetMessageMatchQueueListResponse.Builder> internal__static_Gazillion_NetMessageMatchQueueListResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMatchQueueResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchQueueResponse, global::Gazillion.NetMessageMatchQueueResponse.Builder> internal__static_Gazillion_NetMessageMatchQueueResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMatchInviteNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchInviteNotification, global::Gazillion.NetMessageMatchInviteNotification.Builder> internal__static_Gazillion_NetMessageMatchInviteNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMatchStatsResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchStatsResponse, global::Gazillion.NetMessageMatchStatsResponse.Builder> internal__static_Gazillion_NetMessageMatchStatsResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMatchTeamRosterNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchTeamRosterNotification, global::Gazillion.NetMessageMatchTeamRosterNotification.Builder> internal__static_Gazillion_NetMessageMatchTeamRosterNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMatchTeamSizeNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchTeamSizeNotification, global::Gazillion.NetMessageMatchTeamSizeNotification.Builder> internal__static_Gazillion_NetMessageMatchTeamSizeNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageChatFromGameSystem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChatFromGameSystem, global::Gazillion.NetMessageChatFromGameSystem.Builder> internal__static_Gazillion_NetMessageChatFromGameSystem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageChatError__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChatError, global::Gazillion.NetMessageChatError.Builder> internal__static_Gazillion_NetMessageChatError__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCatalogItems__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCatalogItems, global::Gazillion.NetMessageCatalogItems.Builder> internal__static_Gazillion_NetMessageCatalogItems__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGetCurrencyBalanceResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGetCurrencyBalanceResponse, global::Gazillion.NetMessageGetCurrencyBalanceResponse.Builder> internal__static_Gazillion_NetMessageGetCurrencyBalanceResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBuyItemFromCatalogResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBuyItemFromCatalogResponse, global::Gazillion.NetMessageBuyItemFromCatalogResponse.Builder> internal__static_Gazillion_NetMessageBuyItemFromCatalogResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityPreviewerNewTarget__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerNewTarget, global::Gazillion.NetMessageEntityPreviewerNewTarget.Builder> internal__static_Gazillion_NetMessageEntityPreviewerNewTarget__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageServerNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageServerNotification, global::Gazillion.NetMessageServerNotification.Builder> internal__static_Gazillion_NetMessageServerNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRemoteMissionNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRemoteMissionNotification, global::Gazillion.NetMessageRemoteMissionNotification.Builder> internal__static_Gazillion_NetMessageRemoteMissionNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUINotificationMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUINotificationMessage, global::Gazillion.NetMessageUINotificationMessage.Builder> internal__static_Gazillion_NetMessageUINotificationMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStartPvPTimer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartPvPTimer, global::Gazillion.NetMessageStartPvPTimer.Builder> internal__static_Gazillion_NetMessageStartPvPTimer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetDifficultyThresholds__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetDifficultyThresholds, global::Gazillion.NetMessageSetDifficultyThresholds.Builder> internal__static_Gazillion_NetMessageSetDifficultyThresholds__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetTimerText__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetTimerText, global::Gazillion.NetMessageSetTimerText.Builder> internal__static_Gazillion_NetMessageSetTimerText__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetModeText__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetModeText, global::Gazillion.NetMessageSetModeText.Builder> internal__static_Gazillion_NetMessageSetModeText__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetExtraText__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetExtraText, global::Gazillion.NetMessageSetExtraText.Builder> internal__static_Gazillion_NetMessageSetExtraText__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBannerMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBannerMessage, global::Gazillion.NetMessageBannerMessage.Builder> internal__static_Gazillion_NetMessageBannerMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAIAggroNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAIAggroNotification, global::Gazillion.NetMessageAIAggroNotification.Builder> internal__static_Gazillion_NetMessageAIAggroNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStoryNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStoryNotification, global::Gazillion.NetMessageStoryNotification.Builder> internal__static_Gazillion_NetMessageStoryNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSyncTimeReply__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSyncTimeReply, global::Gazillion.NetMessageSyncTimeReply.Builder> internal__static_Gazillion_NetMessageSyncTimeReply__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSelectStartingAvatarForNewPlayer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSelectStartingAvatarForNewPlayer, global::Gazillion.NetMessageSelectStartingAvatarForNewPlayer.Builder> internal__static_Gazillion_NetMessageSelectStartingAvatarForNewPlayer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageShowKioskStartScreen__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShowKioskStartScreen, global::Gazillion.NetMessageShowKioskStartScreen.Builder> internal__static_Gazillion_NetMessageShowKioskStartScreen__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageInventoryFull__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryFull, global::Gazillion.NetMessageInventoryFull.Builder> internal__static_Gazillion_NetMessageInventoryFull__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUnloadPackagesStart__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnloadPackagesStart, global::Gazillion.NetMessageUnloadPackagesStart.Builder> internal__static_Gazillion_NetMessageUnloadPackagesStart__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUnloadPackagesEnd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnloadPackagesEnd, global::Gazillion.NetMessageUnloadPackagesEnd.Builder> internal__static_Gazillion_NetMessageUnloadPackagesEnd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageForceDisconnect__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageForceDisconnect, global::Gazillion.NetMessageForceDisconnect.Builder> internal__static_Gazillion_NetMessageForceDisconnect__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLevelUp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLevelUp, global::Gazillion.NetMessageLevelUp.Builder> internal__static_Gazillion_NetMessageLevelUp__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageVendorLevelUp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorLevelUp, global::Gazillion.NetMessageVendorLevelUp.Builder> internal__static_Gazillion_NetMessageVendorLevelUp__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageVendorRefresh__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRefresh, global::Gazillion.NetMessageVendorRefresh.Builder> internal__static_Gazillion_NetMessageVendorRefresh__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCraftingFinished__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCraftingFinished, global::Gazillion.NetMessageCraftingFinished.Builder> internal__static_Gazillion_NetMessageCraftingFinished__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCraftingFailed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCraftingFailed, global::Gazillion.NetMessageCraftingFailed.Builder> internal__static_Gazillion_NetMessageCraftingFailed__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageWaypointUnlocked__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageWaypointUnlocked, global::Gazillion.NetMessageWaypointUnlocked.Builder> internal__static_Gazillion_NetMessageWaypointUnlocked__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageReplicationArchive__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReplicationArchive, global::Gazillion.NetMessageReplicationArchive.Builder> internal__static_Gazillion_NetMessageReplicationArchive__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePvPScoreScoreUpdateEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvPScoreScoreUpdateEntry, global::Gazillion.NetMessagePvPScoreScoreUpdateEntry.Builder> internal__static_Gazillion_NetMessagePvPScoreScoreUpdateEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePvPScorePlayerNewId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvPScorePlayerNewId, global::Gazillion.NetMessagePvPScorePlayerNewId.Builder> internal__static_Gazillion_NetMessagePvPScorePlayerNewId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePvPScorePlayerTeamChange__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvPScorePlayerTeamChange, global::Gazillion.NetMessagePvPScorePlayerTeamChange.Builder> internal__static_Gazillion_NetMessagePvPScorePlayerTeamChange__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePvPScorePlayerUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvPScorePlayerUpdate, global::Gazillion.NetMessagePvPScorePlayerUpdate.Builder> internal__static_Gazillion_NetMessagePvPScorePlayerUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTransitionUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTransitionUpdate, global::Gazillion.NetMessageTransitionUpdate.Builder> internal__static_Gazillion_NetMessageTransitionUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAvatarNameChange__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAvatarNameChange, global::Gazillion.NetMessageAvatarNameChange.Builder> internal__static_Gazillion_NetMessageAvatarNameChange__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMissionInteractRepeat__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionInteractRepeat, global::Gazillion.NetMessageMissionInteractRepeat.Builder> internal__static_Gazillion_NetMessageMissionInteractRepeat__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMissionInteractRelease__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionInteractRelease, global::Gazillion.NetMessageMissionInteractRelease.Builder> internal__static_Gazillion_NetMessageMissionInteractRelease__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageOnAddCondition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnAddCondition, global::Gazillion.NetMessageOnAddCondition.Builder> internal__static_Gazillion_NetMessageOnAddCondition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageOnRemoveCondition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnRemoveCondition, global::Gazillion.NetMessageOnRemoveCondition.Builder> internal__static_Gazillion_NetMessageOnRemoveCondition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageHotkeyAssign__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageHotkeyAssign, global::Gazillion.NetMessageHotkeyAssign.Builder> internal__static_Gazillion_NetMessageHotkeyAssign__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageHotkeyUnassign__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageHotkeyUnassign, global::Gazillion.NetMessageHotkeyUnassign.Builder> internal__static_Gazillion_NetMessageHotkeyUnassign__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAbilityAssign__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAbilityAssign, global::Gazillion.NetMessageAbilityAssign.Builder> internal__static_Gazillion_NetMessageAbilityAssign__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAbilityUnassign__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAbilityUnassign, global::Gazillion.NetMessageAbilityUnassign.Builder> internal__static_Gazillion_NetMessageAbilityUnassign__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAbilitySwap__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAbilitySwap, global::Gazillion.NetMessageAbilitySwap.Builder> internal__static_Gazillion_NetMessageAbilitySwap__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePowerCollectionAssignPower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerCollectionAssignPower, global::Gazillion.NetMessagePowerCollectionAssignPower.Builder> internal__static_Gazillion_NetMessagePowerCollectionAssignPower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAssignPowerCollection__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAssignPowerCollection, global::Gazillion.NetMessageAssignPowerCollection.Builder> internal__static_Gazillion_NetMessageAssignPowerCollection__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePowerCollectionUnassignPower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerCollectionUnassignPower, global::Gazillion.NetMessagePowerCollectionUnassignPower.Builder> internal__static_Gazillion_NetMessagePowerCollectionUnassignPower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageOnWaypointUpdated__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnWaypointUpdated, global::Gazillion.NetMessageOnWaypointUpdated.Builder> internal__static_Gazillion_NetMessageOnWaypointUpdated__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageInternalReportPlayerLoadError__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInternalReportPlayerLoadError, global::Gazillion.NetMessageInternalReportPlayerLoadError.Builder> internal__static_Gazillion_NetMessageInternalReportPlayerLoadError__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_MessageReportEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.MessageReportEntry, global::Gazillion.MessageReportEntry.Builder> internal__static_Gazillion_MessageReportEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMessageReport__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMessageReport, global::Gazillion.NetMessageMessageReport.Builder> internal__static_Gazillion_NetMessageMessageReport__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUpdateMiniMap__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUpdateMiniMap, global::Gazillion.NetMessageUpdateMiniMap.Builder> internal__static_Gazillion_NetMessageUpdateMiniMap__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMoveToAlternateLandingSpot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMoveToAlternateLandingSpot, global::Gazillion.NetMessageMoveToAlternateLandingSpot.Builder> internal__static_Gazillion_NetMessageMoveToAlternateLandingSpot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageConsoleMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageConsoleMessage, global::Gazillion.NetMessageConsoleMessage.Builder> internal__static_Gazillion_NetMessageConsoleMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAvatarOnKilledInfoOverride__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAvatarOnKilledInfoOverride, global::Gazillion.NetMessageAvatarOnKilledInfoOverride.Builder> internal__static_Gazillion_NetMessageAvatarOnKilledInfoOverride__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageOnResurrect__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnResurrect, global::Gazillion.NetMessageOnResurrect.Builder> internal__static_Gazillion_NetMessageOnResurrect__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageOnResurrectRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnResurrectRequest, global::Gazillion.NetMessageOnResurrectRequest.Builder> internal__static_Gazillion_NetMessageOnResurrectRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageOnResurrectDecline__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnResurrectDecline, global::Gazillion.NetMessageOnResurrectDecline.Builder> internal__static_Gazillion_NetMessageOnResurrectDecline__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageReloadPackagesStart__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReloadPackagesStart, global::Gazillion.NetMessageReloadPackagesStart.Builder> internal__static_Gazillion_NetMessageReloadPackagesStart__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePlayStoryBanter__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayStoryBanter, global::Gazillion.NetMessagePlayStoryBanter.Builder> internal__static_Gazillion_NetMessagePlayStoryBanter__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePlayKismetSeq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayKismetSeq, global::Gazillion.NetMessagePlayKismetSeq.Builder> internal__static_Gazillion_NetMessagePlayKismetSeq__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGracefulDisconnectAck__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGracefulDisconnectAck, global::Gazillion.NetMessageGracefulDisconnectAck.Builder> internal__static_Gazillion_NetMessageGracefulDisconnectAck__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLiveTuningUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLiveTuningUpdate, global::Gazillion.NetMessageLiveTuningUpdate.Builder> internal__static_Gazillion_NetMessageLiveTuningUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUpdateSituationalTarget__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUpdateSituationalTarget, global::Gazillion.NetMessageUpdateSituationalTarget.Builder> internal__static_Gazillion_NetMessageUpdateSituationalTarget__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageConfirmStartNewGame__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageConfirmStartNewGame, global::Gazillion.NetMessageConfirmStartNewGame.Builder> internal__static_Gazillion_NetMessageConfirmStartNewGame__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageModifyCommunityMemberFailure__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageModifyCommunityMemberFailure, global::Gazillion.NetMessageModifyCommunityMemberFailure.Builder> internal__static_Gazillion_NetMessageModifyCommunityMemberFailure__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageModifyCommunityMember__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageModifyCommunityMember, global::Gazillion.NetMessageModifyCommunityMember.Builder> internal__static_Gazillion_NetMessageModifyCommunityMember__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageReceiveCommunityNotify__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReceiveCommunityNotify, global::Gazillion.NetMessageReceiveCommunityNotify.Builder> internal__static_Gazillion_NetMessageReceiveCommunityNotify__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageItemBindingChanged__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageItemBindingChanged, global::Gazillion.NetMessageItemBindingChanged.Builder> internal__static_Gazillion_NetMessageItemBindingChanged__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageItemsHeldForRecovery__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageItemsHeldForRecovery, global::Gazillion.NetMessageItemsHeldForRecovery.Builder> internal__static_Gazillion_NetMessageItemsHeldForRecovery__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageItemRecovered__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageItemRecovered, global::Gazillion.NetMessageItemRecovered.Builder> internal__static_Gazillion_NetMessageItemRecovered__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSwitchToPendingNewAvatarFailed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSwitchToPendingNewAvatarFailed, global::Gazillion.NetMessageSwitchToPendingNewAvatarFailed.Builder> internal__static_Gazillion_NetMessageSwitchToPendingNewAvatarFailed__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGuildMessageToClient__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGuildMessageToClient, global::Gazillion.NetMessageGuildMessageToClient.Builder> internal__static_Gazillion_NetMessageGuildMessageToClient__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityGuildInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityGuildInfo, global::Gazillion.NetMessageEntityGuildInfo.Builder> internal__static_Gazillion_NetMessageEntityGuildInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLeaveGuild__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaveGuild, global::Gazillion.NetMessageLeaveGuild.Builder> internal__static_Gazillion_NetMessageLeaveGuild__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGuildSystemMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGuildSystemMessage, global::Gazillion.NetMessageGuildSystemMessage.Builder> internal__static_Gazillion_NetMessageGuildSystemMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRegionDifficultyChange__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionDifficultyChange, global::Gazillion.NetMessageRegionDifficultyChange.Builder> internal__static_Gazillion_NetMessageRegionDifficultyChange__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMetaGameWaveUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMetaGameWaveUpdate, global::Gazillion.NetMessageMetaGameWaveUpdate.Builder> internal__static_Gazillion_NetMessageMetaGameWaveUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePvEInstanceCrystalUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvEInstanceCrystalUpdate, global::Gazillion.NetMessagePvEInstanceCrystalUpdate.Builder> internal__static_Gazillion_NetMessagePvEInstanceCrystalUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePvEInstanceDeathUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvEInstanceDeathUpdate, global::Gazillion.NetMessagePvEInstanceDeathUpdate.Builder> internal__static_Gazillion_NetMessagePvEInstanceDeathUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageShowTutorialTip__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShowTutorialTip, global::Gazillion.NetMessageShowTutorialTip.Builder> internal__static_Gazillion_NetMessageShowTutorialTip__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static GameServerToClient() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhHYW1lU2VydmVyVG9DbGllbnQucHJvdG8SCUdhemlsbGlvbhoVR2F6aWxs", 
            "aW9uQ29tbW9uLnByb3RvGhRDb21tb25NZXNzYWdlcy5wcm90bxoQQ2hhdENv", 
            "bW1vbi5wcm90bxoRTWF0Y2hDb21tb24ucHJvdG8aE0JpbGxpbmdDb21tb24u", 
            "cHJvdG8aC0d1aWxkLnByb3RvIhwKGk5ldE1lc3NhZ2VSZWFkeUFuZExvZ2dl", 
            "ZEluIhwKGk5ldE1lc3NhZ2VSZWFkeUZvclRpbWVTeW5jIkkKFU5ldE1lc3Nh", 
            "Z2VMb2NhbFBsYXllchIwChNsb2NhbFBsYXllckVudGl0eUlkGAEgAigEUhNs", 
            "b2NhbFBsYXllckVudGl0eUlkIs8HChZOZXRNZXNzYWdlRW50aXR5Q3JlYXRl", 
            "EiAKC3Byb3RvdHlwZUlkGAEgAigEUgtwcm90b3R5cGVJZBIaCghpZEVudGl0", 
            "eRgCIAIoBFIIaWRFbnRpdHkSIAoLYXJjaGl2ZURhdGEYAyACKAxSC2FyY2hp", 
            "dmVEYXRhEioKEGludGVyZXN0UG9saWNpZXMYBCACKA1SEGludGVyZXN0UG9s", 
            "aWNpZXMSEgoEZGJJZBgFIAIoBFIEZGJJZBI2Cghwb3NpdGlvbhgGIAEoCzIa", 
            "LkdhemlsbGlvbi5OZXRTdHJ1Y3RQb2ludDNSCHBvc2l0aW9uEjwKC29yaWVu", 
            "dGF0aW9uGAcgASgLMhouR2F6aWxsaW9uLk5ldFN0cnVjdFBvaW50M1ILb3Jp", 
            "ZW50YXRpb24STQoPbG9jb21vdGlvblN0YXRlGAggASgLMiMuR2F6aWxsaW9u", 
            "Lk5ldFN0cnVjdExvY29tb3Rpb25TdGF0ZVIPbG9jb21vdGlvblN0YXRlEjgK", 
            "F2ludkxvY0NvbnRhaW5lckVudGl0eUlkGAkgASgEUhdpbnZMb2NDb250YWlu", 
            "ZXJFbnRpdHlJZBI+ChppbnZMb2NJbnZlbnRvcnlQcm90b3R5cGVJZBgKIAEo", 
            "BFIaaW52TG9jSW52ZW50b3J5UHJvdG90eXBlSWQSHgoKaW52TG9jU2xvdBgL", 
            "IAEoDVIKaW52TG9jU2xvdBIkCg1pc05ld09uU2VydmVyGAwgASgIUg1pc05l", 
            "d09uU2VydmVyEiYKDnNvdXJjZUVudGl0eUlkGA0gASgEUg5zb3VyY2VFbnRp", 
            "dHlJZBJCCg5zb3VyY2VQb3NpdGlvbhgOIAEoCzIaLkdhemlsbGlvbi5OZXRT", 
            "dHJ1Y3RQb2ludDNSDnNvdXJjZVBvc2l0aW9uEhYKBmNlbGxJZBgPIAEoDVIG", 
            "Y2VsbElkEhYKBmFyZWFJZBgQIAEoDVIGYXJlYUlkEjYKFmluaXRDb25kaXRp", 
            "b25Db21wb25lbnQYESABKAhSFmluaXRDb25kaXRpb25Db21wb25lbnQSPgoa", 
            "b3ZlcnJpZGVTbmFwVG9GbG9vck9uU3Bhd24YEiABKAhSGm92ZXJyaWRlU25h", 
            "cFRvRmxvb3JPblNwYXduEjIKFGlzQ2xpZW50RW50aXR5SGlkZGVuGBMgASgI", 
            "UhRpc0NsaWVudEVudGl0eUhpZGRlbhJICh9zdGFydEZ1bGxJbldvcmxkSGll", 
            "cmFyY2h5VXBkYXRlGBQgASgIUh9zdGFydEZ1bGxJbldvcmxkSGllcmFyY2h5", 
            "VXBkYXRlIt0CChdOZXRNZXNzYWdlRW50aXR5RGVzdHJveRIaCghpZEVudGl0", 
            "eRgBIAIoBFIIaWRFbnRpdHkSIAoLcHJvdG90eXBlSWQYAiABKARSC3Byb3Rv", 
            "dHlwZUlkEhYKBmNlbGxJZBgDIAEoDVIGY2VsbElkEhYKBmFyZWFJZBgEIAEo", 
            "DVIGYXJlYUlkEhoKCHJlZ2lvbklkGAUgASgEUghyZWdpb25JZBI2Cghwb3Np", 
            "dGlvbhgGIAEoCzIaLkdhemlsbGlvbi5OZXRTdHJ1Y3RQb2ludDNSCHBvc2l0", 
            "aW9uEiQKDW93bmVyRW50aXR5SWQYByABKARSDW93bmVyRW50aXR5SWQSKgoQ", 
            "b3duZXJQcm90b3R5cGVJZBgIIAEoBFIQb3duZXJQcm90b3R5cGVJZBIuChJl", 
            "bnRpdHlTZXJ2ZXJTdHJpbmcYCSABKAlSEmVudGl0eVNlcnZlclN0cmluZyLX", 
            "AgoXTmV0TWVzc2FnZUludmVudG9yeU1vdmUSGgoIZW50aXR5SWQYASACKARS", 
            "CGVudGl0eUlkEjgKF2ludkxvY0NvbnRhaW5lckVudGl0eUlkGAIgAigEUhdp", 
            "bnZMb2NDb250YWluZXJFbnRpdHlJZBI+ChppbnZMb2NJbnZlbnRvcnlQcm90", 
            "b3R5cGVJZBgDIAIoBFIaaW52TG9jSW52ZW50b3J5UHJvdG90eXBlSWQSHgoK", 
            "aW52TG9jU2xvdBgEIAIoDVIKaW52TG9jU2xvdBI4ChdyZXF1aXJlZE5vT3du", 
            "ZXJPbkNsaWVudBgFIAEoCFIXcmVxdWlyZWROb093bmVyT25DbGllbnQSIgoM", 
            "ZW50aXR5RGF0YUlkGAYgASgEUgxlbnRpdHlEYXRhSWQSKAoPZGVzdE93bmVy", 
            "RGF0YUlkGAcgASgEUg9kZXN0T3duZXJEYXRhSWQiWQoXTmV0TWVzc2FnZUlu", 
            "dmVudG9yeUV4aXQSGgoIZW50aXR5SWQYASACKARSCGVudGl0eUlkEiIKDGVu", 
            "dGl0eURhdGFJZBgCIAEoBFIMZW50aXR5RGF0YUlkIjsKGU5ldE1lc3NhZ2VJ", 
            "bnZlbnRvcnlVbmxvY2sSHgoKaW52UHJvdG9JZBgBIAIoBFIKaW52UHJvdG9J", 
            "ZCJHChlOZXRNZXNzYWdlUGVybWFCdWZmVW5sb2NrEioKEHBlcm1hQnVmZlBy", 
            "b3RvSWQYASACKARSEHBlcm1hQnVmZlByb3RvSWQieAoUTmV0TWVzc2FnZUVu", 
            "dGl0eUtpbGwSGgoIaWRFbnRpdHkYASACKARSCGlkRW50aXR5EiYKDmlkS2ls", 
            "bGVyRW50aXR5GAIgAigEUg5pZEtpbGxlckVudGl0eRIcCglraWxsRmxhZ3MY", 
            "AyACKA1SCWtpbGxGbGFncyJMCh5OZXRNZXNzYWdlUXVldWVGdWxsc2NyZWVu", 
            "TW92aWUSKgoQbW92aWVQcm90b3R5cGVJZBgBIAEoBFIQbW92aWVQcm90b3R5", 
            "cGVJZCJMChxOZXRNZXNzYWdlUXVldWVMb2FkaW5nU2NyZWVuEiwKEXJlZ2lv", 
            "blByb3RvdHlwZUlkGAEgASgEUhFyZWdpb25Qcm90b3R5cGVJZCIgCh5OZXRN", 
            "ZXNzYWdlRGVxdWV1ZUxvYWRpbmdTY3JlZW4igAQKFk5ldE1lc3NhZ2VSZWdp", 
            "b25DaGFuZ2USGgoIcmVnaW9uSWQYASACKARSCHJlZ2lvbklkEiIKDHNlcnZl", 
            "ckdhbWVJZBgCIAIoBFIMc2VydmVyR2FtZUlkEjAKE2NsZWFyaW5nQWxsSW50", 
            "ZXJlc3QYAyACKAhSE2NsZWFyaW5nQWxsSW50ZXJlc3QSLAoRZW50aXRpZXN0", 
            "b2Rlc3Ryb3kYBCADKARSEWVudGl0aWVzdG9kZXN0cm95EiwKEXJlZ2lvblBy", 
            "b3RvdHlwZUlkGAUgASgEUhFyZWdpb25Qcm90b3R5cGVJZBIqChByZWdpb25S", 
            "YW5kb21TZWVkGAYgASgFUhByZWdpb25SYW5kb21TZWVkEiAKC2FyY2hpdmVE", 
            "YXRhGAcgASgMUgthcmNoaXZlRGF0YRI4CglyZWdpb25NaW4YCCABKAsyGi5H", 
            "YXppbGxpb24uTmV0U3RydWN0UG9pbnQzUglyZWdpb25NaW4SOAoJcmVnaW9u", 
            "TWF4GAkgASgLMhouR2F6aWxsaW9uLk5ldFN0cnVjdFBvaW50M1IJcmVnaW9u", 
            "TWF4ElYKEmNyZWF0ZVJlZ2lvblBhcmFtcxgKIAEoCzImLkdhemlsbGlvbi5O", 
            "ZXRTdHJ1Y3RDcmVhdGVSZWdpb25QYXJhbXNSEmNyZWF0ZVJlZ2lvblBhcmFt", 
            "cyKgAgoYTmV0TWVzc2FnZUVudGl0eVBvc2l0aW9uEhoKCGlkRW50aXR5GAEg", 
            "AigEUghpZEVudGl0eRIUCgVmbGFncxgCIAIoDVIFZmxhZ3MSNgoIcG9zaXRp", 
            "b24YAyABKAsyGi5HYXppbGxpb24uTmV0U3RydWN0UG9pbnQzUghwb3NpdGlv", 
            "bhI8CgtvcmllbnRhdGlvbhgEIAEoCzIaLkdhemlsbGlvbi5OZXRTdHJ1Y3RQ", 
            "b2ludDNSC29yaWVudGF0aW9uEhYKBmNlbGxJZBgFIAEoDVIGY2VsbElkEhYK", 
            "BmFyZWFJZBgGIAEoDVIGYXJlYUlkEiwKEWVudGl0eVByb3RvdHlwZUlkGAcg", 
            "ASgEUhFlbnRpdHlQcm90b3R5cGVJZCKwAgofTmV0TWVzc2FnZUxvY29tb3Rp", 
            "b25TdGF0ZVVwZGF0ZRIaCghpZEVudGl0eRgBIAIoBFIIaWRFbnRpdHkSTQoP", 
            "bG9jb21vdGlvbnN0YXRlGAIgAigLMiMuR2F6aWxsaW9uLk5ldFN0cnVjdExv", 
            "Y29tb3Rpb25TdGF0ZVIPbG9jb21vdGlvbnN0YXRlEjYKCHBvc2l0aW9uGAMg", 
            "AigLMhouR2F6aWxsaW9uLk5ldFN0cnVjdFBvaW50M1IIcG9zaXRpb24SPAoL", 
            "b3JpZW50YXRpb24YBCACKAsyGi5HYXppbGxpb24uTmV0U3RydWN0UG9pbnQz", 
            "UgtvcmllbnRhdGlvbhIsChFlbnRpdHlQcm90b3R5cGVJZBgFIAEoBFIRZW50", 
            "aXR5UHJvdG90eXBlSWQiogEKGk5ldE1lc3NhZ2VJbnRlcmVzdFBvbGljaWVz", 
            "EhoKCGlkRW50aXR5GAEgAigEUghpZEVudGl0eRIgCgtuZXdQb2xpY2llcxgC", 
            "IAIoDVILbmV3UG9saWNpZXMSIgoMcHJldlBvbGljaWVzGAMgAigNUgxwcmV2", 
            "UG9saWNpZXMSIgoMZW50aXR5RGF0YUlkGAQgASgEUgxlbnRpdHlEYXRhSWQi", 
            "YwoeTmV0TWVzc2FnZVVuYWJsZVRvQ2hhbmdlUmVnaW9uEkEKDGNoYW5nZUZh", 
            "aWxlZBgBIAIoCzIdLkdhemlsbGlvbi5DaGFuZ2VSZWdpb25GYWlsZWRSDGNo", 
            "YW5nZUZhaWxlZCJyChdOZXRTdHJ1Y3RBcmVhQ29ubmVjdGlvbhIWCgZhcmVh", 
            "SWQYASACKA1SBmFyZWFJZBI/Cgxjb25uZWN0UG9pbnQYAiACKAsyGy5HYXpp", 
            "bGxpb24uTmV0U3RydWN0SVBvaW50MlIMY29ubmVjdFBvaW50IrMBChFOZXRN", 
            "ZXNzYWdlQWRkQXJlYRIWCgZhcmVhSWQYASACKA1SBmFyZWFJZBIoCg9hcmVh", 
            "UHJvdG90eXBlSWQYAiACKARSD2FyZWFQcm90b3R5cGVJZBI6CgphcmVhT3Jp", 
            "Z2luGAMgAigLMhouR2F6aWxsaW9uLk5ldFN0cnVjdFBvaW50M1IKYXJlYU9y", 
            "aWdpbhIgCgtpc1N0YXJ0QXJlYRgEIAEoCFILaXNTdGFydEFyZWEiLgoUTmV0", 
            "TWVzc2FnZVJlbW92ZUFyZWESFgoGYXJlYUlkGAEgAigNUgZhcmVhSWQiPgoW", 
            "TmV0U3RydWN0UmVzZXJ2ZWRTcGF3bhIUCgVhc3NldBgBIAIoBFIFYXNzZXQS", 
            "DgoCaWQYAiACKA1SAmlkIosDChROZXRNZXNzYWdlQ2VsbENyZWF0ZRIWCgZh", 
            "cmVhSWQYASACKA1SBmFyZWFJZBIWCgZjZWxsSWQYAiACKA1SBmNlbGxJZBIo", 
            "Cg9jZWxsUHJvdG90eXBlSWQYAyACKARSD2NlbGxQcm90b3R5cGVJZBJCCg5w", 
            "b3NpdGlvbkluQXJlYRgEIAIoCzIaLkdhemlsbGlvbi5OZXRTdHJ1Y3RQb2lu", 
            "dDNSDnBvc2l0aW9uSW5BcmVhEhQKBWRlcHRoGAUgAigNUgVkZXB0aBImCg5j", 
            "ZWxsUmFuZG9tU2VlZBgGIAIoBVIOY2VsbFJhbmRvbVNlZWQSQQoKZW5jb3Vu", 
            "dGVycxgHIAMoCzIhLkdhemlsbGlvbi5OZXRTdHJ1Y3RSZXNlcnZlZFNwYXdu", 
            "UgplbmNvdW50ZXJzEiAKC2J1ZmZlcndpZHRoGAggAigFUgtidWZmZXJ3aWR0", 
            "aBIyChRvdmVycmlkZUxvY2F0aW9uTmFtZRgJIAIoBFIUb3ZlcnJpZGVMb2Nh", 
            "dGlvbk5hbWUiRwoVTmV0TWVzc2FnZUNlbGxEZXN0cm95EhYKBmFyZWFJZBgB", 
            "IAIoDVIGYXJlYUlkEhYKBmNlbGxJZBgCIAIoDVIGY2VsbElkIjMKG05ldE1l", 
            "c3NhZ2VFbnZpcm9ubWVudFVwZGF0ZRIUCgVmbGFncxgBIAIoDVIFZmxhZ3Mi", 
            "qgEKJE5ldE1lc3NhZ2VEZWJ1Z1NwYXduTWFwVmlzdWFsaXphdGlvbhIcCgl2", 
            "aXN1YWxpemUYASACKAhSCXZpc3VhbGl6ZRIWCgZhcmVhaWQYAiACKA1SBmFy", 
            "ZWFpZBIYCgdib3VuZHN4GAMgAigNUgdib3VuZHN4EhgKB2JvdW5kc3kYBCAC", 
            "KA1SB2JvdW5kc3kSGAoHbWFwZGF0YRgFIAEoDFIHbWFwZGF0YSK3AQobTmV0", 
            "TWVzc2FnZUNoYW5nZUFPSVBvbGljaWVzEhoKCGlkRW50aXR5GAEgAigEUghp", 
            "ZEVudGl0eRIoCg9jdXJyZW50cG9saWNpZXMYAiACKA1SD2N1cnJlbnRwb2xp", 
            "Y2llcxIkCg1leGl0R2FtZVdvcmxkGAMgASgIUg1leGl0R2FtZVdvcmxkEiwK", 
            "EWVudGl0eVByb3RvdHlwZUlkGAQgASgEUhFlbnRpdHlQcm90b3R5cGVJZCJF", 
            "CidOZXRNZXNzYWdlRnVsbEluV29ybGRIaWVyYXJjaHlVcGRhdGVFbmQSGgoI", 
            "aWRFbnRpdHkYASACKARSCGlkRW50aXR5IkcKKU5ldE1lc3NhZ2VGdWxsSW5X", 
            "b3JsZEhpZXJhcmNoeVVwZGF0ZUJlZ2luEhoKCGlkRW50aXR5GAEgAigEUghp", 
            "ZEVudGl0eSI8Ch5OZXRNZXNzYWdlQWRtaW5Db21tYW5kUmVzcG9uc2USGgoI", 
            "cmVzcG9uc2UYASACKAlSCHJlc3BvbnNlImMKHU5ldE1lc3NhZ2VBY3RpdmF0", 
            "ZVBvd2VyRmFpbGVkEhYKBnJlYXNvbhgBIAIoDVIGcmVhc29uEioKEHBvd2Vy", 
            "UHJvdG90eXBlSWQYAiACKARSEHBvd2VyUHJvdG90eXBlSWQigwEKFU5ldE1l", 
            "c3NhZ2VDYW5jZWxQb3dlchIYCgdpZEFnZW50GAEgAigEUgdpZEFnZW50EioK", 
            "EHBvd2VyUHJvdG90eXBlSWQYAiACKARSEHBvd2VyUHJvdG90eXBlSWQSJAoN", 
            "ZW5kUG93ZXJGbGFncxgDIAIoDVINZW5kUG93ZXJGbGFncyLdAQonTmV0TWVz", 
            "c2FnZUNvbnRpbnVvdXNQb3dlclVwZGF0ZVRvQ2xpZW50EhoKCGlkQXZhdGFy", 
            "GAEgAigEUghpZEF2YXRhchIqChBwb3dlclByb3RvdHlwZUlkGAIgAigEUhBw", 
            "b3dlclByb3RvdHlwZUlkEiYKDmlkVGFyZ2V0RW50aXR5GAMgASgEUg5pZFRh", 
            "cmdldEVudGl0eRJCCg50YXJnZXRQb3NpdGlvbhgEIAEoCzIaLkdhemlsbGlv", 
            "bi5OZXRTdHJ1Y3RQb2ludDNSDnRhcmdldFBvc2l0aW9uIt0DChdOZXRNZXNz", 
            "YWdlQWN0aXZhdGVQb3dlchIiCgxpZFVzZXJFbnRpdHkYASACKARSDGlkVXNl", 
            "ckVudGl0eRIqChBwb3dlclByb3RvdHlwZUlkGAIgAigEUhBwb3dlclByb3Rv", 
            "dHlwZUlkEjYKFnBhcmVudFBvd2VyUHJvdG90eXBlSWQYAyACKARSFnBhcmVu", 
            "dFBvd2VyUHJvdG90eXBlSWQSJgoOaWRUYXJnZXRFbnRpdHkYBCACKARSDmlk", 
            "VGFyZ2V0RW50aXR5EkIKDnRhcmdldFBvc2l0aW9uGAUgAigLMhouR2F6aWxs", 
            "aW9uLk5ldFN0cnVjdFBvaW50M1IOdGFyZ2V0UG9zaXRpb24SPgoMdXNlclBv", 
            "c2l0aW9uGAYgAigLMhouR2F6aWxsaW9uLk5ldFN0cnVjdFBvaW50M1IMdXNl", 
            "clBvc2l0aW9uEigKD21vdmVUaW1lU2Vjb25kcxgHIAEoAlIPbW92ZVRpbWVT", 
            "ZWNvbmRzEjYKFnZhcmlhYmxlQWN0aXZhdGlvblRpbWUYCCABKAJSFnZhcmlh", 
            "YmxlQWN0aXZhdGlvblRpbWUSLAoRbWlzc2lsZVJhbmRvbVNlZWQYCSABKA1S", 
            "EW1pc3NpbGVSYW5kb21TZWVkItgBChpOZXRNZXNzYWdlUHJlQWN0aXZhdGVQ", 
            "b3dlchIiCgxpZFVzZXJFbnRpdHkYASACKARSDGlkVXNlckVudGl0eRIqChBw", 
            "b3dlclByb3RvdHlwZUlkGAIgAigEUhBwb3dlclByb3RvdHlwZUlkEiYKDmlk", 
            "VGFyZ2V0RW50aXR5GAMgAigEUg5pZFRhcmdldEVudGl0eRJCCg50YXJnZXRQ", 
            "b3NpdGlvbhgEIAIoCzIaLkdhemlsbGlvbi5OZXRTdHJ1Y3RQb2ludDNSDnRh", 
            "cmdldFBvc2l0aW9uItkGChVOZXRNZXNzYWdlUG93ZXJSZXN1bHQSJgoOaWRU", 
            "YXJnZXRFbnRpdHkYASACKARSDmlkVGFyZ2V0RW50aXR5Ei4KEmlkUG93ZXJP", 
            "d25lckVudGl0eRgCIAIoBFISaWRQb3dlck93bmVyRW50aXR5EjQKFWlkVWx0", 
            "aW1hdGVPd25lckVudGl0eRgDIAIoBFIVaWRVbHRpbWF0ZU93bmVyRW50aXR5", 
            "EioKEHBvd2VyUHJvdG90eXBlSWQYBCACKARSEHBvd2VyUHJvdG90eXBlSWQS", 
            "KAoPZGVsaXZlcnlEZWxheU1TGAUgAigEUg9kZWxpdmVyeURlbGF5TVMSFAoF", 
            "ZmxhZ3MYBiACKARSBWZsYWdzEkAKCnByb3BlcnRpZXMYByACKAsyIC5HYXpp", 
            "bGxpb24uTmV0U3RydWN0UHJvcGVydHlMaXN0Ugpwcm9wZXJ0aWVzEkoKEnBv", 
            "d2VyT3duZXJQb3NpdGlvbhgIIAIoCzIaLkdhemlsbGlvbi5OZXRTdHJ1Y3RQ", 
            "b2ludDNSEnBvd2VyT3duZXJQb3NpdGlvbhIxChJ0cmFuc2ZlclRvRW50aXR5", 
            "SWQYCSABKAQ6ATBSEnRyYW5zZmVyVG9FbnRpdHlJZBI7Chd0YXJnZXRFbnRp", 
            "dHlQcm90b3R5cGVJZBgKIAEoBDoBMFIXdGFyZ2V0RW50aXR5UHJvdG90eXBl", 
            "SWQSQwobcG93ZXJPd25lckVudGl0eVByb3RvdHlwZUlkGAsgASgEOgEwUhtw", 
            "b3dlck93bmVyRW50aXR5UHJvdG90eXBlSWQSSQoedWx0aW1hdGVPd25lckVu", 
            "dGl0eVByb3RvdHlwZUlkGAwgASgEOgEwUh51bHRpbWF0ZU93bmVyRW50aXR5", 
            "UHJvdG90eXBlSWQSQwobcG93ZXJPd25lclJlZ2lvblByb3RvdHlwZUlkGA0g", 
            "ASgEOgEwUhtwb3dlck93bmVyUmVnaW9uUHJvdG90eXBlSWQSQwobdHJhbnNm", 
            "ZXJUb0VudGl0eVByb3RvdHlwZUlkGA4gASgEOgEwUht0cmFuc2ZlclRvRW50", 
            "aXR5UHJvdG90eXBlSWQSLgoSdGFyZ2V0U2VydmVyU3RyaW5nGA8gASgJUhJ0", 
            "YXJnZXRTZXJ2ZXJTdHJpbmcigwMKFU5ldE1lc3NhZ2VQb3dlckJvdW5jZRIg", 
            "CgtpZFBvd2VyVXNlchgBIAIoBFILaWRQb3dlclVzZXISIgoMaWRMYXN0VGFy", 
            "Z2V0GAIgAigEUgxpZExhc3RUYXJnZXQSSgoSbGFzdFRhcmdldFBvc2l0aW9u", 
            "GAMgAigLMhouR2F6aWxsaW9uLk5ldFN0cnVjdFBvaW50M1ISbGFzdFRhcmdl", 
            "dFBvc2l0aW9uEiAKC2lkTmV3VGFyZ2V0GAQgAigEUgtpZE5ld1RhcmdldBIq", 
            "ChBwb3dlclByb3RvdHlwZUlkGAUgAigEUhBwb3dlclByb3RvdHlwZUlkEjAK", 
            "E3VzZXJPcmlnaW5hbEFzc2V0SWQYBiACKARSE3VzZXJPcmlnaW5hbEFzc2V0", 
            "SWQSLgoSdXNlckN1cnJlbnRBc3NldElkGAcgAigEUhJ1c2VyQ3VycmVudEFz", 
            "c2V0SWQSKAoPcHJvamVjdGlsZVNwZWVkGAggAigCUg9wcm9qZWN0aWxlU3Bl", 
            "ZWQiXgocTmV0TWVzc2FnZVBvd2VyV2VhcG9uTWlzc2luZxIYCgdpZE93bmVy", 
            "GAEgAigEUgdpZE93bmVyEiQKDXdlYXBvbk1pc3NpbmcYAiACKAhSDXdlYXBv", 
            "bk1pc3NpbmciSQofTmV0TWVzc2FnZU9uUHJlSW50ZXJhY3RQb3dlckVuZBIm", 
            "Cg5pZFRhcmdldEVudGl0eRgBIAIoBFIOaWRUYXJnZXRFbnRpdHki/wEKHE5l", 
            "dE1lc3NhZ2VSZWdpb25QcmltaXRpdmVCb3gSMgoGY2VudGVyGAEgAigLMhou", 
            "R2F6aWxsaW9uLk5ldFN0cnVjdFBvaW50M1IGY2VudGVyEi4KBHNpemUYAiAC", 
            "KAsyGi5HYXppbGxpb24uTmV0U3RydWN0UG9pbnQzUgRzaXplEjEKBWNvbG9y", 
            "GAMgAigLMhsuR2F6aWxsaW9uLk5ldFN0cnVjdElQb2ludDNSBWNvbG9yEjYK", 
            "FmxpZmV0aW1lSW5NaWxsaXNlY29uZHMYBCACKARSFmxpZmV0aW1lSW5NaWxs", 
            "aXNlY29uZHMSEAoDYWRkGAUgAigIUgNhZGQivAIKIU5ldE1lc3NhZ2VSZWdp", 
            "b25QcmltaXRpdmVUcmlhbmdsZRIyCgZwb2ludDAYASACKAsyGi5HYXppbGxp", 
            "b24uTmV0U3RydWN0UG9pbnQzUgZwb2ludDASMgoGcG9pbnQxGAIgAigLMhou", 
            "R2F6aWxsaW9uLk5ldFN0cnVjdFBvaW50M1IGcG9pbnQxEjIKBnBvaW50MhgD", 
            "IAIoCzIaLkdhemlsbGlvbi5OZXRTdHJ1Y3RQb2ludDNSBnBvaW50MhIxCgVj", 
            "b2xvchgEIAIoCzIbLkdhemlsbGlvbi5OZXRTdHJ1Y3RJUG9pbnQzUgVjb2xv", 
            "chI2ChZsaWZldGltZUluTWlsbGlzZWNvbmRzGAUgAigEUhZsaWZldGltZUlu", 
            "TWlsbGlzZWNvbmRzEhAKA2FkZBgGIAIoCFIDYWRkIuoBCh9OZXRNZXNzYWdl", 
            "UmVnaW9uUHJpbWl0aXZlU3BoZXJlEjIKBmNlbnRlchgBIAIoCzIaLkdhemls", 
            "bGlvbi5OZXRTdHJ1Y3RQb2ludDNSBmNlbnRlchIWCgZyYWRpdXMYAiACKAJS", 
            "BnJhZGl1cxIxCgVjb2xvchgDIAIoCzIbLkdhemlsbGlvbi5OZXRTdHJ1Y3RJ", 
            "UG9pbnQzUgVjb2xvchI2ChZsaWZldGltZUluTWlsbGlzZWNvbmRzGAQgAigE", 
            "UhZsaWZldGltZUluTWlsbGlzZWNvbmRzEhAKA2FkZBgFIAIoCFIDYWRkIvwB", 
            "Ch1OZXRNZXNzYWdlUmVnaW9uUHJpbWl0aXZlTGluZRIwCgVzdGFydBgBIAIo", 
            "CzIaLkdhemlsbGlvbi5OZXRTdHJ1Y3RQb2ludDNSBXN0YXJ0EiwKA2VuZBgC", 
            "IAIoCzIaLkdhemlsbGlvbi5OZXRTdHJ1Y3RQb2ludDNSA2VuZBIxCgVjb2xv", 
            "chgDIAIoCzIbLkdhemlsbGlvbi5OZXRTdHJ1Y3RJUG9pbnQzUgVjb2xvchI2", 
            "ChZsaWZldGltZUluTWlsbGlzZWNvbmRzGAQgAigEUhZsaWZldGltZUluTWls", 
            "bGlzZWNvbmRzEhAKA2FkZBgFIAIoCFIDYWRkIoYBChxOZXRNZXNzYWdlTWFy", 
            "a0ZpcnN0R2FtZUZyYW1lEjQKFWN1cnJlbnRzZXJ2ZXJnYW1ldGltZRgBIAIo", 
            "BFIVY3VycmVudHNlcnZlcmdhbWV0aW1lEjAKE2N1cnJlbnRzZXJ2ZXJnYW1l", 
            "aWQYAiACKARSE2N1cnJlbnRzZXJ2ZXJnYW1laWQiGQoXTmV0TWVzc2FnZUJl", 
            "Z2luRXhpdEdhbWUiNwoXTmV0TWVzc2FnZVN5c3RlbU1lc3NhZ2USHAoJbWVz", 
            "c2FnZUlkGAEgAigFUgltZXNzYWdlSWQi6QEKGU5ldE1lc3NhZ2VBSURlYnVn", 
            "VUlVcGRhdGUSIAoLaWRUYXJnZXROUEMYASACKARSC2lkVGFyZ2V0TlBDEiwK", 
            "EWN1cnJlbnRBY3Rpb25OYW1lGAIgAigJUhFjdXJyZW50QWN0aW9uTmFtZRIu", 
            "ChJwcmV2aW91c0FjdGlvbk5hbWUYAyACKAlSEnByZXZpb3VzQWN0aW9uTmFt", 
            "ZRIkCg1zZW5zb3J5SW5wdXRzGAQgAygJUg1zZW5zb3J5SW5wdXRzEiYKDnBy", 
            "b3BlcnR5U3RyaW5nGAUgAigJUg5wcm9wZXJ0eVN0cmluZyJzCiFOZXRNZXNz", 
            "YWdlUHJvcGVydGllc0RlYnVnVUlVcGRhdGUSJgoOaWRUYXJnZXRFbnRpdHkY", 
            "ASACKARSDmlkVGFyZ2V0RW50aXR5EiYKDnByb3BlcnR5U3RyaW5nGAIgAigJ", 
            "Ug5wcm9wZXJ0eVN0cmluZyJ3CiFOZXRNZXNzYWdlQ29uZGl0aW9uc0RlYnVn", 
            "VUlVcGRhdGUSJgoOaWRUYXJnZXRFbnRpdHkYASACKARSDmlkVGFyZ2V0RW50", 
            "aXR5EioKEGNvbmRpdGlvbnNTdHJpbmcYAiACKAlSEGNvbmRpdGlvbnNTdHJp", 
            "bmciuwQKHU5ldE1lc3NhZ2VQb3dlcnNEZWJ1Z1VJVXBkYXRlEiQKDWRlYnVn", 
            "RW50aXR5SWQYASACKARSDWRlYnVnRW50aXR5SWQSJAoNYWN0aXZlUG93ZXJJ", 
            "ZBgCIAIoBFINYWN0aXZlUG93ZXJJZBIuChJwZW5kaW5nQWN0aW9uU3RhdGUY", 
            "AyACKAVSEnBlbmRpbmdBY3Rpb25TdGF0ZRImCg5wZW5kaW5nUG93ZXJJZBgE", 
            "IAIoBFIOcGVuZGluZ1Bvd2VySWQSKAoPcGVuZGluZ1RhcmdldElkGAUgAigE", 
            "Ug9wZW5kaW5nVGFyZ2V0SWQSUAoVcGVuZGluZ1RhcmdldFBvc2l0aW9uGAYg", 
            "AigLMhouR2F6aWxsaW9uLk5ldFN0cnVjdFBvaW50M1IVcGVuZGluZ1Rhcmdl", 
            "dFBvc2l0aW9uEiwKEWNvbnRpbnVvdXNQb3dlcklkGAcgAigEUhFjb250aW51", 
            "b3VzUG93ZXJJZBIuChJjb250aW51b3VzVGFyZ2V0SWQYCCACKARSEmNvbnRp", 
            "bnVvdXNUYXJnZXRJZBJWChhjb250aW51b3VzVGFyZ2V0UG9zaXRpb24YCSAC", 
            "KAsyGi5HYXppbGxpb24uTmV0U3RydWN0UG9pbnQzUhhjb250aW51b3VzVGFy", 
            "Z2V0UG9zaXRpb24SRAodYWN0aXZlUG93ZXJMYXN0QWN0aXZhdGlvblRpbWUY", 
            "CiACKARSHWFjdGl2ZVBvd2VyTGFzdEFjdGl2YXRpb25UaW1lIkgKHk5ldE1l", 
            "c3NhZ2VNaXNzaW9uRGVidWdVSVVwZGF0ZRImCg5taXNzaW9uU3RyaW5ncxgB", 
            "IAMoCVIObWlzc2lvblN0cmluZ3MicwodTmV0TWVzc2FnZURlYnVnRW50aXR5", 
            "UG9zaXRpb24SGgoIZW50aXR5SWQYASACKARSCGVudGl0eUlkEjYKCHBvc2l0", 
            "aW9uGAIgAigLMhouR2F6aWxsaW9uLk5ldFN0cnVjdFBvaW50M1IIcG9zaXRp", 
            "b24itAQKFk5ldE1lc3NhZ2VQaW5nUmVzcG9uc2USJAoNZGlzcGxheU91dHB1", 
            "dBgBIAIoCFINZGlzcGxheU91dHB1dBI0ChVyZXF1ZXN0U2VudENsaWVudFRp", 
            "bWUYAiACKARSFXJlcXVlc3RTZW50Q2xpZW50VGltZRIwChNyZXF1ZXN0U2Vu", 
            "dEdhbWVUaW1lGAMgASgEUhNyZXF1ZXN0U2VudEdhbWVUaW1lEj4KGnJlcXVl", 
            "c3ROZXRSZWNlaXZlZEdhbWVUaW1lGAQgASgEUhpyZXF1ZXN0TmV0UmVjZWl2", 
            "ZWRHYW1lVGltZRIqChByZXNwb25zZVNlbmRUaW1lGAUgASgEUhByZXNwb25z", 
            "ZVNlbmRUaW1lEkIKHHJlc3BvbnNlTmV0UmVjZWl2ZUNsaWVudFRpbWUYBiAB", 
            "KARSHHJlc3BvbnNlTmV0UmVjZWl2ZUNsaWVudFRpbWUSPgoacmVzcG9uc2VO", 
            "ZXRSZWNlaXZlR2FtZVRpbWUYByABKARSGnJlc3BvbnNlTmV0UmVjZWl2ZUdh", 
            "bWVUaW1lEkQKHXNlcnZlclRpbWVTaW5jZUxhc3RHYW1lVXBkYXRlGAggASgE", 
            "Uh1zZXJ2ZXJUaW1lU2luY2VMYXN0R2FtZVVwZGF0ZRJWCiZyZXNwb25zZUxh", 
            "dGVuY3lCdWZmZXJSZWNlaXZlQ2xpZW50VGltZRgJIAEoBFImcmVzcG9uc2VM", 
            "YXRlbmN5QnVmZmVyUmVjZWl2ZUNsaWVudFRpbWUi4wIKHk5ldE1lc3NhZ2VF", 
            "bnRpdHlFbnRlckdhbWVXb3JsZBIaCghlbnRpdHlJZBgBIAIoBFIIZW50aXR5", 
            "SWQSNgoIcG9zaXRpb24YAiACKAsyGi5HYXppbGxpb24uTmV0U3RydWN0UG9p", 
            "bnQzUghwb3NpdGlvbhI8CgtvcmllbnRhdGlvbhgDIAEoCzIaLkdhemlsbGlv", 
            "bi5OZXRTdHJ1Y3RQb2ludDNSC29yaWVudGF0aW9uEk0KD2xvY29tb3Rpb25T", 
            "dGF0ZRgEIAEoCzIjLkdhemlsbGlvbi5OZXRTdHJ1Y3RMb2NvbW90aW9uU3Rh", 
            "dGVSD2xvY29tb3Rpb25TdGF0ZRIsChFlbnRpdHlQcm90b3R5cGVJZBgFIAEo", 
            "BFIRZW50aXR5UHJvdG90eXBlSWQSMgoUaXNDbGllbnRFbnRpdHlIaWRkZW4Y", 
            "BiABKAhSFGlzQ2xpZW50RW50aXR5SGlkZGVuIjYKHE5ldE1lc3NhZ2VUZWxl", 
            "cG9ydEFja1JlcXVlc3QSFgoGYWNrc2VxGAEgAigNUgZhY2tzZXEiMwoXTmV0", 
            "TWVzc2FnZVNlcnZlclZlcnNpb24SGAoHdmVyc2lvbhgBIAIoCVIHdmVyc2lv", 
            "biJ0ChJOZXRTdHJ1Y3RBZmZpeFNwZWMSJAoNYWZmaXhQcm90b1JlZhgBIAIo", 
            "BFINYWZmaXhQcm90b1JlZhIkCg1zY29wZVByb3RvUmVmGAIgAigEUg1zY29w", 
            "ZVByb3RvUmVmEhIKBHNlZWQYAyACKAVSBHNlZWQi9gEKEU5ldFN0cnVjdEl0", 
            "ZW1TcGVjEiIKDGl0ZW1Qcm90b1JlZhgBIAIoBFIMaXRlbVByb3RvUmVmEhwK", 
            "CWl0ZW1MZXZlbBgCIAIoDVIJaXRlbUxldmVsEiYKDnJhcml0eVByb3RvUmVm", 
            "GAMgAigEUg5yYXJpdHlQcm90b1JlZhISCgRzZWVkGAQgAigNUgRzZWVkEiQK", 
            "DWNyZWRpdHNBbW91bnQYBSABKA1SDWNyZWRpdHNBbW91bnQSPQoKYWZmaXhT", 
            "cGVjcxgGIAMoCzIdLkdhemlsbGlvbi5OZXRTdHJ1Y3RBZmZpeFNwZWNSCmFm", 
            "Zml4U3BlY3MiZAoWTmV0U3RydWN0SXRlbVNwZWNFbnRyeRIQCgNrZXkYASAC", 
            "KARSA2tleRI4CghpdGVtU3BlYxgCIAIoCzIcLkdhemlsbGlvbi5OZXRTdHJ1", 
            "Y3RJdGVtU3BlY1IIaXRlbVNwZWMiqgQKF05ldE1lc3NhZ2VNaXNzaW9uVXBk", 
            "YXRlEi4KEm1pc3Npb25Qcm90b3R5cGVJZBgBIAIoBFISbWlzc2lvblByb3Rv", 
            "dHlwZUlkEiIKDG1pc3Npb25TdGF0ZRgCIAEoDVIMbWlzc2lvblN0YXRlEjYK", 
            "Fm1pc3Npb25TdGF0ZUV4cGlyZVRpbWUYAyABKARSFm1pc3Npb25TdGF0ZUV4", 
            "cGlyZVRpbWUSHAoJeHBBd2FyZGVkGAQgASgNUgl4cEF3YXJkZWQSJgoOY3Jl", 
            "ZGl0c0F3YXJkZWQYBSABKA1SDmNyZWRpdHNBd2FyZGVkEi4KEnBvd2VyUG9p", 
            "bnRzQXdhcmRlZBgGIAEoDVIScG93ZXJQb2ludHNBd2FyZGVkEi4KEmhlYWx0", 
            "aEJvbnVzQXdhcmRlZBgHIAEoDVISaGVhbHRoQm9udXNBd2FyZGVkEjQKFWVu", 
            "ZHVyYW5jZUJvbnVzQXdhcmRlZBgIIAEoDVIVZW5kdXJhbmNlQm9udXNBd2Fy", 
            "ZGVkEiIKDHBhcnRpY2lwYW50cxgJIAMoBFIMcGFydGljaXBhbnRzEjcKBWl0", 
            "ZW1zGAogAygLMiEuR2F6aWxsaW9uLk5ldFN0cnVjdEl0ZW1TcGVjRW50cnlS", 
            "BWl0ZW1zEhYKBmNyZWF0ZRgLIAEoCFIGY3JlYXRlEjIKFHN1cHByZXNzTm90", 
            "aWZpY2F0aW9uGAwgASgIUhRzdXBwcmVzc05vdGlmaWNhdGlvbiKiAwogTmV0", 
            "TWVzc2FnZU1pc3Npb25PYmplY3RpdmVVcGRhdGUSLgoSbWlzc2lvblByb3Rv", 
            "dHlwZUlkGAEgAigEUhJtaXNzaW9uUHJvdG90eXBlSWQSJgoOb2JqZWN0aXZl", 
            "SW5kZXgYAiACKA1SDm9iamVjdGl2ZUluZGV4EiYKDm9iamVjdGl2ZVN0YXRl", 
            "GAMgASgNUg5vYmplY3RpdmVTdGF0ZRI6ChhvYmplY3RpdmVTdGF0ZUV4cGly", 
            "ZVRpbWUYBCABKARSGG9iamVjdGl2ZVN0YXRlRXhwaXJlVGltZRImCg5jb21w", 
            "bGV0ZWRDb3VudBgFIAEoDVIOY29tcGxldGVkQ291bnQSHgoKdG90YWxDb3Vu", 
            "dBgGIAEoDVIKdG90YWxDb3VudBIuChJpbnRlcmFjdGVkRW50aXRpZXMYByAD", 
            "KARSEmludGVyYWN0ZWRFbnRpdGllcxIWCgZjcmVhdGUYCCABKAhSBmNyZWF0", 
            "ZRIyChRzdXBwcmVzc05vdGlmaWNhdGlvbhgJIAEoCFIUc3VwcHJlc3NOb3Rp", 
            "ZmljYXRpb24iUgoeTmV0TWVzc2FnZUN1cnJlbnRBdmF0YXJDaGFuZ2VkEjAK", 
            "E2xhc3RDdXJyZW50RW50aXR5SWQYASACKARSE2xhc3RDdXJyZW50RW50aXR5", 
            "SWQiPwobTmV0TWVzc2FnZU5ld0F2YXRhckFjcXVpcmVkEiAKC3Byb3RvdHlw", 
            "ZUlkGAEgAigEUgtwcm90b3R5cGVJZCJwChxOZXRTdHJ1Y3RQcmVmZXRjaEVu", 
            "dGl0eVBvd2VyEiQKDWVudGl0eUFzc2V0SWQYASACKARSDWVudGl0eUFzc2V0", 
            "SWQSKgoQcG93ZXJQcm90b3R5cGVJZBgCIAIoBFIQcG93ZXJQcm90b3R5cGVJ", 
            "ZCJZChVOZXRTdHJ1Y3RQcmVmZXRjaENlbGwSFgoGY2VsbElkGAEgAigNUgZj", 
            "ZWxsSWQSKAoPY2VsbFByb3RvdHlwZUlkGAIgAigEUg9jZWxsUHJvdG90eXBl", 
            "SWQijwIKGE5ldE1lc3NhZ2VQcmVmZXRjaEFzc2V0cxImCg5iYWNrZ3JvdW5k", 
            "bG9hZBgBIAIoCFIOYmFja2dyb3VuZGxvYWQSFgoGYXNzZXRzGAIgAygEUgZh", 
            "c3NldHMSHgoKcHJvdG90eXBlcxgDIAMoBFIKcHJvdG90eXBlcxI/CgZwb3dl", 
            "cnMYBCADKAsyJy5HYXppbGxpb24uTmV0U3RydWN0UHJlZmV0Y2hFbnRpdHlQ", 
            "b3dlclIGcG93ZXJzEjYKBWNlbGxzGAUgAygLMiAuR2F6aWxsaW9uLk5ldFN0", 
            "cnVjdFByZWZldGNoQ2VsbFIFY2VsbHMSGgoIcmVnaW9uSWQYBiABKARSCHJl", 
            "Z2lvbklkIkYKJE5ldE1lc3NhZ2VQcmVmZXRjaFJlZ2lvbnNGb3JEb3dubG9h", 
            "ZBIeCgpwcm90b3R5cGVzGAEgAygEUgpwcm90b3R5cGVzIkwKIE5ldE1lc3Nh", 
            "Z2VRdWVyeUlzUmVnaW9uQXZhaWxhYmxlEigKD3JlZ2lvblByb3RvdHlwZRgB", 
            "IAIoBFIPcmVnaW9uUHJvdG90eXBlImoKGk5ldE1lc3NhZ2VTaG93T3Zlcmhl", 
            "YWRUZXh0EhgKB2lkQWdlbnQYASACKARSB2lkQWdlbnQSFgoGaWRUZXh0GAIg", 
            "AigEUgZpZFRleHQSGgoIZHVyYXRpb24YAyACKAJSCGR1cmF0aW9uIi8KF05l", 
            "dE1lc3NhZ2VBSVRvZ2dsZVN0YXRlEhQKBXN0YXRlGAEgAigIUgVzdGF0ZSIz", 
            "ChtOZXRNZXNzYWdlRGFtYWdlVG9nZ2xlU3RhdGUSFAoFc3RhdGUYASACKAhS", 
            "BXN0YXRlIowBChhOZXRTdHJ1Y3RNYXRjaFF1ZXVlRW50cnkSHgoKcXVldWVJ", 
            "bmRleBgBIAIoDVIKcXVldWVJbmRleBIqChBxdWV1ZVByb3RvdHlwZUlkGAIg", 
            "AigEUhBxdWV1ZVByb3RvdHlwZUlkEiQKDWNhblF1ZXVlUGFydHkYAyACKAhS", 
            "DWNhblF1ZXVlUGFydHkiWwogTmV0TWVzc2FnZU1hdGNoUXVldWVMaXN0UmVz", 
            "cG9uc2USNwoEbGlzdBgBIAMoCzIjLkdhemlsbGlvbi5OZXRTdHJ1Y3RNYXRj", 
            "aFF1ZXVlRW50cnlSBGxpc3QiagocTmV0TWVzc2FnZU1hdGNoUXVldWVSZXNw", 
            "b25zZRIeCgpxdWV1ZUluZGV4GAEgAigNUgpxdWV1ZUluZGV4EioKEHF1ZXVl", 
            "UHJvdG90eXBlSWQYAiACKARSEHF1ZXVlUHJvdG90eXBlSWQikQEKIU5ldE1l", 
            "c3NhZ2VNYXRjaEludml0ZU5vdGlmaWNhdGlvbhIeCgpxdWV1ZUluZGV4GAEg", 
            "AigNUgpxdWV1ZUluZGV4EioKEHF1ZXVlUHJvdG90eXBlSWQYAiACKARSEHF1", 
            "ZXVlUHJvdG90eXBlSWQSIAoLbWF0Y2hOdW1iZXIYAyACKARSC21hdGNoTnVt", 
            "YmVyIrUBChxOZXRNZXNzYWdlTWF0Y2hTdGF0c1Jlc3BvbnNlEiwKEXN0YXRS", 
            "ZXF1ZXN0TnVtYmVyGAEgAigNUhFzdGF0UmVxdWVzdE51bWJlchIgCgtwbGF5", 
            "ZXJGb3VuZBgCIAIoCFILcGxheWVyRm91bmQSRQoJc3VtbWFyaWVzGAMgAygL", 
            "MicuR2F6aWxsaW9uLk1hdGNoUGxheWVyU3RhdGlzdGljc1N1bW1hcnlSCXN1", 
            "bW1hcmllcyKjAQolTmV0TWVzc2FnZU1hdGNoVGVhbVJvc3Rlck5vdGlmaWNh", 
            "dGlvbhIqChBtZXRhR2FtZUVudGl0eUlkGAEgAigEUhBtZXRhR2FtZUVudGl0", 
            "eUlkEigKD3RlYW1Qcm90b3R5cGVJZBgCIAIoBFIPdGVhbVByb3RvdHlwZUlk", 
            "EiQKDXBsYXllckRiR3VpZHMYAyADKARSDXBsYXllckRiR3VpZHMibQojTmV0", 
            "TWVzc2FnZU1hdGNoVGVhbVNpemVOb3RpZmljYXRpb24SKgoQbWV0YUdhbWVF", 
            "bnRpdHlJZBgBIAIoBFIQbWV0YUdhbWVFbnRpdHlJZBIaCgh0ZWFtU2l6ZRgC", 
            "IAIoDVIIdGVhbVNpemUingEKHE5ldE1lc3NhZ2VDaGF0RnJvbUdhbWVTeXN0", 
            "ZW0SLAoEdHlwZRgBIAIoDjIYLkdhemlsbGlvbi5DaGF0Um9vbVR5cGVzUgR0", 
            "eXBlEiYKDnNvdXJjZVN0cmluZ0lkGAIgAigEUg5zb3VyY2VTdHJpbmdJZBIo", 
            "Cg9tZXNzYWdlU3RyaW5nSWQYAyACKARSD21lc3NhZ2VTdHJpbmdJZCJXChNO", 
            "ZXRNZXNzYWdlQ2hhdEVycm9yEkAKDGVycm9yTWVzc2FnZRgBIAIoDjIcLkdh", 
            "emlsbGlvbi5DaGF0RXJyb3JNZXNzYWdlc1IMZXJyb3JNZXNzYWdlIqwBChZO", 
            "ZXRNZXNzYWdlQ2F0YWxvZ0l0ZW1zEhwKCXRpbWVzdGFtcBgBIAEoA1IJdGlt", 
            "ZXN0YW1wEj0KB2VudHJpZXMYAiADKAsyIy5HYXppbGxpb24uTWFydmVsSGVy", 
            "b2VzQ2F0YWxvZ0VudHJ5UgdlbnRyaWVzEjUKBHVybHMYAyADKAsyIS5HYXpp", 
            "bGxpb24uTUhMb2NhbGl6ZWRDYXRhbG9nVXJsc1IEdXJscyJQCiROZXRNZXNz", 
            "YWdlR2V0Q3VycmVuY3lCYWxhbmNlUmVzcG9uc2USKAoPY3VycmVuY3lCYWxh", 
            "bmNlGAEgAigDUg9jdXJyZW5jeUJhbGFuY2UiyAIKJE5ldE1lc3NhZ2VCdXlJ", 
            "dGVtRnJvbUNhdGFsb2dSZXNwb25zZRIeCgpkaWRTdWNjZWVkGAEgAigIUgpk", 
            "aWRTdWNjZWVkEjYKFmN1cnJlbnRDdXJyZW5jeUJhbGFuY2UYAiACKANSFmN1", 
            "cnJlbnRDdXJyZW5jeUJhbGFuY2USIgoMZXJyb3JtZXNzYWdlGAMgASgJUgxl", 
            "cnJvcm1lc3NhZ2USQAoJZXJyb3Jjb2RlGAQgAigOMiIuR2F6aWxsaW9uLkJ1", 
            "eUl0ZW1SZXN1bHRFcnJvckNvZGVzUgllcnJvcmNvZGUSFAoFc2t1SWQYBSAC", 
            "KANSBXNrdUlkEiQKDWlzV2ViUHVyY2hhc2UYBiABKAhSDWlzV2ViUHVyY2hh", 
            "c2USJgoOcHJvdG90b3R5cGVJZHMYByADKARSDnByb3RvdG90eXBlSWRzIkAK", 
            "Ik5ldE1lc3NhZ2VFbnRpdHlQcmV2aWV3ZXJOZXdUYXJnZXQSGgoIZW50aXR5", 
            "SWQYASACKARSCGVudGl0eUlkIkQKHE5ldE1lc3NhZ2VTZXJ2ZXJOb3RpZmlj", 
            "YXRpb24SJAoNc2VydmVyTWVzc2FnZRgBIAIoCVINc2VydmVyTWVzc2FnZSLj", 
            "AQojTmV0TWVzc2FnZVJlbW90ZU1pc3Npb25Ob3RpZmljYXRpb24SLAoRZW50", 
            "aXR5UHJvdG90eXBlSWQYASACKARSEWVudGl0eVByb3RvdHlwZUlkEi4KEmRp", 
            "YWxvZ1RleHRTdHJpbmdJZBgCIAIoBFISZGlhbG9nVGV4dFN0cmluZ0lkEi4K", 
            "Em1pc3Npb25Qcm90b3R5cGVJZBgDIAIoBFISbWlzc2lvblByb3RvdHlwZUlk", 
            "Ei4KEmljb25QYXRoT3ZlcnJpZGVJZBgEIAIoBFISaWNvblBhdGhPdmVycmlk", 
            "ZUlkIk8KH05ldE1lc3NhZ2VVSU5vdGlmaWNhdGlvbk1lc3NhZ2USLAoRdWlO", 
            "b3RpZmljYXRpb25SZWYYASACKARSEXVpTm90aWZpY2F0aW9uUmVmIssBChdO", 
            "ZXRNZXNzYWdlU3RhcnRQdlBUaW1lchIcCglzdGFydFRpbWUYASACKA1SCXN0", 
            "YXJ0VGltZRIYCgdlbmRUaW1lGAIgAigNUgdlbmRUaW1lEiYKDmxvd1RpbWVX", 
            "YXJuaW5nGAMgAigNUg5sb3dUaW1lV2FybmluZxIwChNjcml0aWNhbFRpbWVX", 
            "YXJuaW5nGAQgAigNUhNjcml0aWNhbFRpbWVXYXJuaW5nEh4KCm1ldGFHYW1l", 
            "SWQYBSACKARSCm1ldGFHYW1lSWQiewohTmV0TWVzc2FnZVNldERpZmZpY3Vs", 
            "dHlUaHJlc2hvbGRzEioKEHdhcm5pbmdUaHJlc2hvbGQYASACKA1SEHdhcm5p", 
            "bmdUaHJlc2hvbGQSKgoQZmFpbHVyZVRocmVzaG9sZBgCIAIoDVIQZmFpbHVy", 
            "ZVRocmVzaG9sZCJOChZOZXRNZXNzYWdlU2V0VGltZXJUZXh0EiAKC3RpbWVy", 
            "VGV4dElkGAEgAigEUgt0aW1lclRleHRJZBISCgRhcmcxGAMgASgDUgRhcmcx", 
            "InEKFU5ldE1lc3NhZ2VTZXRNb2RlVGV4dBIeCgptb2RlVGV4dElkGAEgAigE", 
            "Ugptb2RlVGV4dElkEhgKB21vZGVSZWYYAiACKARSB21vZGVSZWYSHgoKbWV0", 
            "YUdhbWVJZBgDIAIoBFIKbWV0YUdhbWVJZCI6ChZOZXRNZXNzYWdlU2V0RXh0", 
            "cmFUZXh0EiAKC2V4dHJhVGV4dElkGAEgAigEUgtleHRyYVRleHRJZCLbAQoX", 
            "TmV0TWVzc2FnZUJhbm5lck1lc3NhZ2USHgoKYmFubmVyVGV4dBgBIAIoBFIK", 
            "YmFubmVyVGV4dBIcCglmb250Q29sb3IYAiACKARSCWZvbnRDb2xvchIaCghm", 
            "b250U2l6ZRgDIAIoDVIIZm9udFNpemUSIgoMdGltZVRvTGl2ZU1TGAQgAigN", 
            "Ugx0aW1lVG9MaXZlTVMSIgoMbWVzc2FnZVN0eWxlGAUgAigNUgxtZXNzYWdl", 
            "U3R5bGUSHgoKZG9Ob3RRdWV1ZRgGIAIoCFIKZG9Ob3RRdWV1ZSJ9Ch1OZXRN", 
            "ZXNzYWdlQUlBZ2dyb05vdGlmaWNhdGlvbhIqChBiYW5uZXJNZXNzYWdlUmVm", 
            "GAEgAigEUhBiYW5uZXJNZXNzYWdlUmVmEhQKBWFpUmVmGAIgAigEUgVhaVJl", 
            "ZhIaCghwbGF5ZXJJZBgDIAIoBFIIcGxheWVySWQisQEKG05ldE1lc3NhZ2VT", 
            "dG9yeU5vdGlmaWNhdGlvbhIwChNkaXNwbGF5VGV4dFN0cmluZ0lkGAEgAigE", 
            "UhNkaXNwbGF5VGV4dFN0cmluZ0lkEjwKGXNwZWFraW5nRW50aXR5UHJvdG90", 
            "eXBlSWQYAiACKARSGXNwZWFraW5nRW50aXR5UHJvdG90eXBlSWQSIgoMdGlt", 
            "ZVRvTGl2ZU1TGAMgAigNUgx0aW1lVG9MaXZlTVMi3wMKF05ldE1lc3NhZ2VT", 
            "eW5jVGltZVJlcGx5Ei4KEmdhbWVUaW1lQ2xpZW50U2VudBgBIAIoA1ISZ2Ft", 
            "ZVRpbWVDbGllbnRTZW50EjYKFmdhbWVUaW1lU2VydmVyUmVjZWl2ZWQYAiAC", 
            "KANSFmdhbWVUaW1lU2VydmVyUmVjZWl2ZWQSLgoSZ2FtZVRpbWVTZXJ2ZXJT", 
            "ZW50GAMgAigDUhJnYW1lVGltZVNlcnZlclNlbnQSLgoSZGF0ZVRpbWVDbGll", 
            "bnRTZW50GAQgAigDUhJkYXRlVGltZUNsaWVudFNlbnQSNgoWZGF0ZVRpbWVT", 
            "ZXJ2ZXJSZWNlaXZlZBgFIAIoA1IWZGF0ZVRpbWVTZXJ2ZXJSZWNlaXZlZBIu", 
            "ChJkYXRlVGltZVNlcnZlclNlbnQYBiACKANSEmRhdGVUaW1lU2VydmVyU2Vu", 
            "dBIcCglkaWFsYXRpb24YByACKAJSCWRpYWxhdGlvbhI6ChhnYW1ldGltZURp", 
            "YWxhdGlvblN0YXJ0ZWQYCCACKANSGGdhbWV0aW1lRGlhbGF0aW9uU3RhcnRl", 
            "ZBI6ChhkYXRldGltZURpYWxhdGlvblN0YXJ0ZWQYCSACKANSGGRhdGV0aW1l", 
            "RGlhbGF0aW9uU3RhcnRlZCIsCipOZXRNZXNzYWdlU2VsZWN0U3RhcnRpbmdB", 
            "dmF0YXJGb3JOZXdQbGF5ZXIiIAoeTmV0TWVzc2FnZVNob3dLaW9za1N0YXJ0", 
            "U2NyZWVuIk0KF05ldE1lc3NhZ2VJbnZlbnRvcnlGdWxsEhoKCHBsYXllcklE", 
            "GAEgAigEUghwbGF5ZXJJRBIWCgZpdGVtSUQYAiACKARSBml0ZW1JRCIfCh1O", 
            "ZXRNZXNzYWdlVW5sb2FkUGFja2FnZXNTdGFydCIdChtOZXRNZXNzYWdlVW5s", 
            "b2FkUGFja2FnZXNFbmQiVQoZTmV0TWVzc2FnZUZvcmNlRGlzY29ubmVjdBI4", 
            "CgZyZWFzb24YASACKA4yIC5HYXppbGxpb24uRm9yY2VEaXNjb25uZWN0UmVh", 
            "c29uUgZyZWFzb24iLwoRTmV0TWVzc2FnZUxldmVsVXASGgoIZW50aXR5SUQY", 
            "ASACKARSCGVudGl0eUlEImMKF05ldE1lc3NhZ2VWZW5kb3JMZXZlbFVwEiwK", 
            "EXZlbmRvclR5cGVQcm90b0lkGAEgAigEUhF2ZW5kb3JUeXBlUHJvdG9JZBIa", 
            "Cgh2ZW5kb3JJRBgCIAIoBFIIdmVuZG9ySUQiRwoXTmV0TWVzc2FnZVZlbmRv", 
            "clJlZnJlc2gSLAoRdmVuZG9yVHlwZVByb3RvSWQYASACKARSEXZlbmRvclR5", 
            "cGVQcm90b0lkIkIKGk5ldE1lc3NhZ2VDcmFmdGluZ0ZpbmlzaGVkEiQKDXJl", 
            "Y2lwZVByb3RvSWQYASACKARSDXJlY2lwZVByb3RvSWQiQAoYTmV0TWVzc2Fn", 
            "ZUNyYWZ0aW5nRmFpbGVkEiQKDXJlY2lwZVByb3RvSWQYASACKARSDXJlY2lw", 
            "ZVByb3RvSWQiTgoaTmV0TWVzc2FnZVdheXBvaW50VW5sb2NrZWQSMAoTd2F5", 
            "cG9pbnRQcm90b3R5cGVJRBgBIAIoBFITd2F5cG9pbnRQcm90b3R5cGVJRCK1", 
            "AQocTmV0TWVzc2FnZVJlcGxpY2F0aW9uQXJjaGl2ZRIkCg1yZXBsaWNhdGlv", 
            "bklkGAEgAigEUg1yZXBsaWNhdGlvbklkEisKD2FyY2hpdmVEYXRhVHlwZRgC", 
            "IAEoDToBMFIPYXJjaGl2ZURhdGFUeXBlEiAKC2FyY2hpdmVEYXRhGAMgAigM", 
            "UgthcmNoaXZlRGF0YRIgCgtkZWJ1Z3N0cmluZxgEIAEoCVILZGVidWdzdHJp", 
            "bmciVgoiTmV0TWVzc2FnZVB2UFNjb3JlU2NvcmVVcGRhdGVFbnRyeRIaCghj", 
            "YXRlZ29yeRgBIAIoDVIIY2F0ZWdvcnkSFAoFdmFsdWUYAiACKAVSBXZhbHVl", 
            "IqcBCh1OZXRNZXNzYWdlUHZQU2NvcmVQbGF5ZXJOZXdJZBIgCgtwdnBFbnRp", 
            "dHlJZBgBIAIoBFILcHZwRW50aXR5SWQSIgoMcGxheWVyRGJHdWlkGAIgAigE", 
            "UgxwbGF5ZXJEYkd1aWQSHgoKcGxheWVyTmFtZRgDIAIoCVIKcGxheWVyTmFt", 
            "ZRIgCgt0ZWFtUHJvdG9JZBgEIAIoBFILdGVhbVByb3RvSWQijAEKIk5ldE1l", 
            "c3NhZ2VQdlBTY29yZVBsYXllclRlYW1DaGFuZ2USIAoLcHZwRW50aXR5SWQY", 
            "ASACKARSC3B2cEVudGl0eUlkEiIKDHBsYXllckRiR3VpZBgCIAIoBFIMcGxh", 
            "eWVyRGJHdWlkEiAKC3RlYW1Qcm90b0lkGAMgAigEUgt0ZWFtUHJvdG9JZCKv", 
            "AQoeTmV0TWVzc2FnZVB2UFNjb3JlUGxheWVyVXBkYXRlEiAKC3B2cEVudGl0", 
            "eUlkGAEgAigEUgtwdnBFbnRpdHlJZBIiCgxwbGF5ZXJEYkd1aWQYAiACKARS", 
            "DHBsYXllckRiR3VpZBJHCgd1cGRhdGVzGAMgAygLMi0uR2F6aWxsaW9uLk5l", 
            "dE1lc3NhZ2VQdlBTY29yZVNjb3JlVXBkYXRlRW50cnlSB3VwZGF0ZXMiOAoa", 
            "TmV0TWVzc2FnZVRyYW5zaXRpb25VcGRhdGUSGgoIaWRFbnRpdHkYASACKARS", 
            "CGlkRW50aXR5IjgKGk5ldE1lc3NhZ2VBdmF0YXJOYW1lQ2hhbmdlEhoKCGlk", 
            "RW50aXR5GAEgAigEUghpZEVudGl0eSJ5Ch9OZXRNZXNzYWdlTWlzc2lvbklu", 
            "dGVyYWN0UmVwZWF0EiYKDnRhcmdldEVudGl0eUlkGAEgAigEUg50YXJnZXRF", 
            "bnRpdHlJZBIuChJtaXNzaW9uUHJvdG90eXBlSWQYAiACKARSEm1pc3Npb25Q", 
            "cm90b3R5cGVJZCIiCiBOZXRNZXNzYWdlTWlzc2lvbkludGVyYWN0UmVsZWFz", 
            "ZSKuAQoYTmV0TWVzc2FnZU9uQWRkQ29uZGl0aW9uEhoKCGlkRW50aXR5GAEg", 
            "AigEUghpZEVudGl0eRIQCgNrZXkYAiACKARSA2tleRIuChJlbnRpdHlTZXJ2", 
            "ZXJTdHJpbmcYAyABKAlSEmVudGl0eVNlcnZlclN0cmluZxI0ChVjb25kaXRp", 
            "b25TZXJ2ZXJTdHJpbmcYBCABKAlSFWNvbmRpdGlvblNlcnZlclN0cmluZyJL", 
            "ChtOZXRNZXNzYWdlT25SZW1vdmVDb25kaXRpb24SGgoIaWRFbnRpdHkYASAC", 
            "KARSCGlkRW50aXR5EhAKA2tleRgCIAIoBFIDa2V5IpoBChZOZXRNZXNzYWdl", 
            "SG90a2V5QXNzaWduEhoKCGF2YXRhcklkGAEgAigEUghhdmF0YXJJZBImCg5h", 
            "YmlsaXR5UHJvdG9JZBgCIAIoBFIOYWJpbGl0eVByb3RvSWQSEgoEc2xvdBgD", 
            "IAIoBVIEc2xvdBIoCg9kZXN0aW5hdGlvblNsb3QYBCACKAVSD2Rlc3RpbmF0", 
            "aW9uU2xvdCJKChhOZXRNZXNzYWdlSG90a2V5VW5hc3NpZ24SGgoIYXZhdGFy", 
            "SWQYASACKARSCGF2YXRhcklkEhIKBHNsb3QYAiACKAVSBHNsb3QicQoXTmV0", 
            "TWVzc2FnZUFiaWxpdHlBc3NpZ24SGgoIYXZhdGFySWQYASACKARSCGF2YXRh", 
            "cklkEiYKDmFiaWxpdHlQcm90b0lkGAIgAigEUg5hYmlsaXR5UHJvdG9JZBIS", 
            "CgRzbG90GAMgAigFUgRzbG90IksKGU5ldE1lc3NhZ2VBYmlsaXR5VW5hc3Np", 
            "Z24SGgoIYXZhdGFySWQYASACKARSCGF2YXRhcklkEhIKBHNsb3QYAiACKAVS", 
            "BHNsb3QiXwoVTmV0TWVzc2FnZUFiaWxpdHlTd2FwEhoKCGF2YXRhcklkGAEg", 
            "AigEUghhdmF0YXJJZBIUCgVzbG90QRgCIAIoBVIFc2xvdEESFAoFc2xvdEIY", 
            "AyACKAVSBXNsb3RCIrYCCiROZXRNZXNzYWdlUG93ZXJDb2xsZWN0aW9uQXNz", 
            "aWduUG93ZXISGgoIZW50aXR5SWQYASACKARSCGVudGl0eUlkEiIKDHBvd2Vy", 
            "UHJvdG9JZBgCIAIoBFIMcG93ZXJQcm90b0lkEiYKDnRhcmdldGVudGl0eWlk", 
            "GAQgAigEUg50YXJnZXRlbnRpdHlpZBIcCglwb3dlclJhbmsYBSACKAVSCXBv", 
            "d2VyUmFuaxImCg5jaGFyYWN0ZXJMZXZlbBgGIAIoBVIOY2hhcmFjdGVyTGV2", 
            "ZWwSHAoJaXRlbUxldmVsGAcgAigFUglpdGVtTGV2ZWwSQgoccG93ZXJDb2xs", 
            "ZWN0aW9uSXNkdXBsaWNhdGluZxgIIAIoCFIccG93ZXJDb2xsZWN0aW9uSXNk", 
            "dXBsaWNhdGluZyJoCh9OZXRNZXNzYWdlQXNzaWduUG93ZXJDb2xsZWN0aW9u", 
            "EkUKBXBvd2VyGAEgAygLMi8uR2F6aWxsaW9uLk5ldE1lc3NhZ2VQb3dlckNv", 
            "bGxlY3Rpb25Bc3NpZ25Qb3dlclIFcG93ZXIikAEKJk5ldE1lc3NhZ2VQb3dl", 
            "ckNvbGxlY3Rpb25VbmFzc2lnblBvd2VyEhoKCGVudGl0eUlkGAEgAigEUghl", 
            "bnRpdHlJZBIiCgxwb3dlclByb3RvSWQYAiACKARSDHBvd2VyUHJvdG9JZBIm", 
            "Cg50YXJnZXRlbnRpdHlpZBgDIAIoBFIOdGFyZ2V0ZW50aXR5aWQiOQobTmV0", 
            "TWVzc2FnZU9uV2F5cG9pbnRVcGRhdGVkEhoKCGlkUGxheWVyGAEgAigEUghp", 
            "ZFBsYXllciJNCidOZXRNZXNzYWdlSW50ZXJuYWxSZXBvcnRQbGF5ZXJMb2Fk", 
            "RXJyb3ISIgoMc2VydmVyUmVwb3J0GAEgAigJUgxzZXJ2ZXJSZXBvcnQidgoS", 
            "TWVzc2FnZVJlcG9ydEVudHJ5EiAKC21lc3NhZ2VOYW1lGAEgAigJUgttZXNz", 
            "YWdlTmFtZRIeCgp0b3RhbENvdW50GAIgAigEUgp0b3RhbENvdW50Eh4KCnRv", 
            "dGFsQnl0ZXMYAyACKARSCnRvdGFsQnl0ZXMioAEKF05ldE1lc3NhZ2VNZXNz", 
            "YWdlUmVwb3J0EjcKB3JlcG9ydHMYASADKAsyHS5HYXppbGxpb24uTWVzc2Fn", 
            "ZVJlcG9ydEVudHJ5UgdyZXBvcnRzEiIKDHJlcG9ydFNvdXJjZRgCIAIoDVIM", 
            "cmVwb3J0U291cmNlEigKD3JlcG9ydERpcmVjdGlvbhgDIAIoDVIPcmVwb3J0", 
            "RGlyZWN0aW9uIjsKF05ldE1lc3NhZ2VVcGRhdGVNaW5pTWFwEiAKC2FyY2hp", 
            "dmVEYXRhGAEgAigMUgthcmNoaXZlRGF0YSLCAQokTmV0TWVzc2FnZU1vdmVU", 
            "b0FsdGVybmF0ZUxhbmRpbmdTcG90EhoKCGlkRW50aXR5GAEgAigEUghpZEVu", 
            "dGl0eRJECg9sYW5kaW5nUG9zaXRpb24YAiACKAsyGi5HYXppbGxpb24uTmV0", 
            "U3RydWN0UG9pbnQzUg9sYW5kaW5nUG9zaXRpb24SOAoXbGFuZGluZ1Bvd2Vy", 
            "cHJvdG90eXBlSWQYAyACKARSF2xhbmRpbmdQb3dlcnByb3RvdHlwZUlkIjwK", 
            "GE5ldE1lc3NhZ2VDb25zb2xlTWVzc2FnZRIgCgttZXNzYWdlVGV4dBgBIAIo", 
            "CVILbWVzc2FnZVRleHQigAEKJE5ldE1lc3NhZ2VBdmF0YXJPbktpbGxlZElu", 
            "Zm9PdmVycmlkZRIaCghyZWdpb25JZBgBIAIoBFIIcmVnaW9uSWQSPAoZYXZh", 
            "dGFyT25LaWxsZWRJbmZvUHJvdG9JZBgCIAIoBFIZYXZhdGFyT25LaWxsZWRJ", 
            "bmZvUHJvdG9JZCIzChVOZXRNZXNzYWdlT25SZXN1cnJlY3QSGgoIdGFyZ2V0", 
            "SWQYASACKARSCHRhcmdldElkImAKHE5ldE1lc3NhZ2VPblJlc3VycmVjdFJl", 
            "cXVlc3QSGgoIdGFyZ2V0SWQYASACKARSCHRhcmdldElkEiQKDXJlc3VycmVj", 
            "dG9ySWQYAiACKARSDXJlc3VycmVjdG9ySWQiOgocTmV0TWVzc2FnZU9uUmVz", 
            "dXJyZWN0RGVjbGluZRIaCgh0YXJnZXRJZBgBIAIoBFIIdGFyZ2V0SWQiHwod", 
            "TmV0TWVzc2FnZVJlbG9hZFBhY2thZ2VzU3RhcnQiQQoZTmV0TWVzc2FnZVBs", 
            "YXlTdG9yeUJhbnRlchIkCg1iYW50ZXJBc3NldElkGAEgAigEUg1iYW50ZXJB", 
            "c3NldElkIk0KF05ldE1lc3NhZ2VQbGF5S2lzbWV0U2VxEjIKFGtpc21ldFNl", 
            "cVByb3RvdHlwZUlkGAEgAigEUhRraXNtZXRTZXFQcm90b3R5cGVJZCIhCh9O", 
            "ZXRNZXNzYWdlR3JhY2VmdWxEaXNjb25uZWN0QWNrIu0BChpOZXRNZXNzYWdl", 
            "TGl2ZVR1bmluZ1VwZGF0ZRJiChRnbG9iYWxUdW5pbmdTZXR0aW5ncxgBIAMo", 
            "CzIuLkdhemlsbGlvbi5OZXRTdHJ1Y3RMaXZlVHVuaW5nU2V0dGluZ0VudW1W", 
            "YWx1ZVIUZ2xvYmFsVHVuaW5nU2V0dGluZ3MSawoWcGVyUG93ZXJUdW5pbmdT", 
            "ZXR0aW5ncxgCIAMoCzIzLkdhemlsbGlvbi5OZXRTdHJ1Y3RMaXZlVHVuaW5n", 
            "U2V0dGluZ1Byb3RvRW51bVZhbHVlUhZwZXJQb3dlclR1bmluZ1NldHRpbmdz", 
            "ItEBCiFOZXRNZXNzYWdlVXBkYXRlU2l0dWF0aW9uYWxUYXJnZXQSIgoMcG93", 
            "ZXJPd25lcklkGAEgAigEUgxwb3dlck93bmVySWQSOAoXc2l0dWF0aW9uYWxQ", 
            "b3dlclByb3RvSWQYAiACKARSF3NpdHVhdGlvbmFsUG93ZXJQcm90b0lkEjAK", 
            "E3NpdHVhdGlvbmFsVGFyZ2V0SWQYAyACKARSE3NpdHVhdGlvbmFsVGFyZ2V0", 
            "SWQSHAoJYWRkVGFyZ2V0GAQgAigIUglhZGRUYXJnZXQiHwodTmV0TWVzc2Fn", 
            "ZUNvbmZpcm1TdGFydE5ld0dhbWUi/QEKJk5ldE1lc3NhZ2VNb2RpZnlDb21t", 
            "dW5pdHlNZW1iZXJGYWlsdXJlEi4KEm1lbWJlclRvTW9kaWZ5TmFtZRgBIAIo", 
            "CVISbWVtYmVyVG9Nb2RpZnlOYW1lEkcKC2ZhaWx1cmVDb2RlGAIgAigOMiUu", 
            "R2F6aWxsaW9uLkNvbW11bml0eU1vZGlmeUZhaWx1cmVDb2RlUgtmYWlsdXJl", 
            "Q29kZRIaCghjaXJjbGVJZBgDIAIoBFIIY2lyY2xlSWQSPgoJb3BlcmF0aW9u", 
            "GAQgAigOMiAuR2F6aWxsaW9uLk1vZGlmeUNpcmNsZU9wZXJhdGlvblIJb3Bl", 
            "cmF0aW9uIrYBCh9OZXRNZXNzYWdlTW9kaWZ5Q29tbXVuaXR5TWVtYmVyEkEK", 
            "CWJyb2FkY2FzdBgBIAIoCzIjLkdhemlsbGlvbi5Db21tdW5pdHlNZW1iZXJC", 
            "cm9hZGNhc3RSCWJyb2FkY2FzdBIeCgpwbGF5ZXJOYW1lGAIgASgJUgpwbGF5", 
            "ZXJOYW1lEjAKE3N5c3RlbUNpcmNsZXNCaXRTZXQYAyABKARSE3N5c3RlbUNp", 
            "cmNsZXNCaXRTZXQiVgogTmV0TWVzc2FnZVJlY2VpdmVDb21tdW5pdHlOb3Rp", 
            "ZnkSMgoGbm90aWZ5GAEgAigLMhouR2F6aWxsaW9uLkNvbW11bml0eU5vdGlm", 
            "eVIGbm90aWZ5IoABChxOZXRNZXNzYWdlSXRlbUJpbmRpbmdDaGFuZ2VkEhYK", 
            "Bml0ZW1JZBgBIAIoBFIGaXRlbUlkEiIKDGFjY291bnRCb3VuZBgCIAIoCFIM", 
            "YWNjb3VudEJvdW5kEiQKDWF2YXRhclByb3RvSWQYAyACKARSDWF2YXRhclBy", 
            "b3RvSWQiOgoeTmV0TWVzc2FnZUl0ZW1zSGVsZEZvclJlY292ZXJ5EhgKB2l0", 
            "ZW1JZHMYASADKARSB2l0ZW1JZHMiMQoXTmV0TWVzc2FnZUl0ZW1SZWNvdmVy", 
            "ZWQSFgoGaXRlbUlkGAEgAigEUgZpdGVtSWQicAooTmV0TWVzc2FnZVN3aXRj", 
            "aFRvUGVuZGluZ05ld0F2YXRhckZhaWxlZBIaCgh0YXJnZXRJZBgBIAIoBFII", 
            "dGFyZ2V0SWQSKAoPaW52YWxpZExvY2F0aW9uGAIgAigIUg9pbnZhbGlkTG9j", 
            "YXRpb24iYAoeTmV0TWVzc2FnZUd1aWxkTWVzc2FnZVRvQ2xpZW50Ej4KCG1l", 
            "c3NhZ2VzGAEgAigLMiIuR2F6aWxsaW9uLkd1aWxkTWVzc2FnZVNldFRvQ2xp", 
            "ZW50UghtZXNzYWdlcyLvAQoZTmV0TWVzc2FnZUVudGl0eUd1aWxkSW5mbxIa", 
            "CghlbnRpdHlJZBgBIAIoBFIIZW50aXR5SWQSGAoHZ3VpbGRJZBgCIAIoBFIH", 
            "Z3VpbGRJZBIcCglndWlsZE5hbWUYAyACKAlSCWd1aWxkTmFtZRJECg9ndWls", 
            "ZE1lbWJlcnNoaXAYBCACKA4yGi5HYXppbGxpb24uR3VpbGRNZW1iZXJzaGlw", 
            "Ug9ndWlsZE1lbWJlcnNoaXASOAoXZGVidWdFbnRpdHlTZXJ2ZXJTdHJpbmcY", 
            "BSABKAlSF2RlYnVnRW50aXR5U2VydmVyU3RyaW5nIpkBChROZXRNZXNzYWdl", 
            "TGVhdmVHdWlsZBIYCgdndWlsZElkGAEgAigEUgdndWlsZElkEjMKBnJlYXNv", 
            "bhgCIAIoDjIbLkdhemlsbGlvbi5HdWlsZExlYXZlUmVhc29uUgZyZWFzb24S", 
            "MgoUaW5pdGlhdGluZ1BsYXllck5hbWUYAyACKAlSFGluaXRpYXRpbmdQbGF5", 
            "ZXJOYW1lIk8KHE5ldE1lc3NhZ2VHdWlsZFN5c3RlbU1lc3NhZ2USLwoEY29k", 
            "ZRgBIAIoDjIbLkdhemlsbGlvbi5HdWlsZE1lc3NhZ2VDb2RlUgRjb2RlIkwK", 
            "IE5ldE1lc3NhZ2VSZWdpb25EaWZmaWN1bHR5Q2hhbmdlEigKD2RpZmZpY3Vs", 
            "dHlJbmRleBgBIAIoBFIPZGlmZmljdWx0eUluZGV4Io4BChxOZXRNZXNzYWdl", 
            "TWV0YUdhbWVXYXZlVXBkYXRlEioKEGN1cnJlbnRXYXZlQ291bnQYASACKARS", 
            "EGN1cnJlbnRXYXZlQ291bnQSIgoMbWF4V2F2ZUNvdW50GAIgAigEUgxtYXhX", 
            "YXZlQ291bnQSHgoKbWV0YUdhbWVJZBgDIAIoBFIKbWV0YUdhbWVJZCKgAQoi", 
            "TmV0TWVzc2FnZVB2RUluc3RhbmNlQ3J5c3RhbFVwZGF0ZRIwChNjdXJyZW50", 
            "Q3J5c3RhbENvdW50GAEgAigEUhNjdXJyZW50Q3J5c3RhbENvdW50EigKD21h", 
            "eENyeXN0YWxDb3VudBgCIAIoBFIPbWF4Q3J5c3RhbENvdW50Eh4KCm1ldGFH", 
            "YW1lSWQYAyACKARSCm1ldGFHYW1lSWQicAogTmV0TWVzc2FnZVB2RUluc3Rh", 
            "bmNlRGVhdGhVcGRhdGUSLAoRY3VycmVudERlYXRoQ291bnQYASACKARSEWN1", 
            "cnJlbnREZWF0aENvdW50Eh4KCm1ldGFHYW1lSWQYAiACKARSCm1ldGFHYW1l", 
            "SWQiPwoZTmV0TWVzc2FnZVNob3dUdXRvcmlhbFRpcBIiCgx0aXBEYXRhUmVm", 
            "SWQYASACKARSDHRpcERhdGFSZWZJZCqNAQoVRm9yY2VEaXNjb25uZWN0UmVh", 
            "c29uEh4KGmVGRFJfRXJyb3JMb2FkaW5nQ2hhcmFjdGVyEAESGQoVZUZEUl9D", 
            "aGVja3BvaW50RmFpbGVkEAISHQoZZUZEUl9VbmFibGVUb0NyZWF0ZVJlZ2lv", 
            "bhADEhoKFmVGRFJfRnVsZmlsbG1lbnRGYWlsZWQQBCpJChpDb21tdW5pdHlN", 
            "b2RpZnlGYWlsdXJlQ29kZRIRCg1lQ01GQ19UaW1lb3V0EAESGAoUZUNNRkNf", 
            "Tm9PbmxpbmVQbGF5ZXIQAioyChBHdWlsZExlYXZlUmVhc29uEg0KCWVHTFJf", 
            "TGVmdBABEg8KC2VHTFJfS2lja2VkEAIq+wEKEEd1aWxkTWVzc2FnZUNvZGUS", 
            "DQoJZUdNQ19Ob25lEAESFwoTZUdNQ19HdWlsZE5hbWVEaXJ0eRACEhUKEWVH", 
            "TUNfU2VydmljZXNEb3duEAMSIwofZUdNQ19HdWlsZE5hbWVJbnZhbGlkQ2hh", 
            "cmFjdGVycxAEEhoKFmVHTUNfR3VpbGROYW1lVG9vU2hvcnQQBRIZChVlR01D", 
            "X0d1aWxkTmFtZVRvb0xvbmcQBhIbChdlR01DX0d1aWxkTmFtZUlkZW50aWNh", 
            "bBAHEhgKFGVHTUNfR3VpbGROb3RJbkd1aWxkEAgSFQoRZUdNQ19HdWlsZHNM", 
          "b2NrZWQQCQ=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Gazillion_NetMessageReadyAndLoggedIn__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Gazillion_NetMessageReadyAndLoggedIn__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReadyAndLoggedIn, global::Gazillion.NetMessageReadyAndLoggedIn.Builder>(internal__static_Gazillion_NetMessageReadyAndLoggedIn__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageReadyForTimeSync__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Gazillion_NetMessageReadyForTimeSync__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReadyForTimeSync, global::Gazillion.NetMessageReadyForTimeSync.Builder>(internal__static_Gazillion_NetMessageReadyForTimeSync__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageLocalPlayer__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Gazillion_NetMessageLocalPlayer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLocalPlayer, global::Gazillion.NetMessageLocalPlayer.Builder>(internal__static_Gazillion_NetMessageLocalPlayer__Descriptor,
                new string[] { "LocalPlayerEntityId", });
        internal__static_Gazillion_NetMessageEntityCreate__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Gazillion_NetMessageEntityCreate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityCreate, global::Gazillion.NetMessageEntityCreate.Builder>(internal__static_Gazillion_NetMessageEntityCreate__Descriptor,
                new string[] { "PrototypeId", "IdEntity", "ArchiveData", "InterestPolicies", "DbId", "Position", "Orientation", "LocomotionState", "InvLocContainerEntityId", "InvLocInventoryPrototypeId", "InvLocSlot", "IsNewOnServer", "SourceEntityId", "SourcePosition", "CellId", "AreaId", "InitConditionComponent", "OverrideSnapToFloorOnSpawn", "IsClientEntityHidden", "StartFullInWorldHierarchyUpdate", });
        internal__static_Gazillion_NetMessageEntityDestroy__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Gazillion_NetMessageEntityDestroy__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityDestroy, global::Gazillion.NetMessageEntityDestroy.Builder>(internal__static_Gazillion_NetMessageEntityDestroy__Descriptor,
                new string[] { "IdEntity", "PrototypeId", "CellId", "AreaId", "RegionId", "Position", "OwnerEntityId", "OwnerPrototypeId", "EntityServerString", });
        internal__static_Gazillion_NetMessageInventoryMove__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Gazillion_NetMessageInventoryMove__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryMove, global::Gazillion.NetMessageInventoryMove.Builder>(internal__static_Gazillion_NetMessageInventoryMove__Descriptor,
                new string[] { "EntityId", "InvLocContainerEntityId", "InvLocInventoryPrototypeId", "InvLocSlot", "RequiredNoOwnerOnClient", "EntityDataId", "DestOwnerDataId", });
        internal__static_Gazillion_NetMessageInventoryExit__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Gazillion_NetMessageInventoryExit__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryExit, global::Gazillion.NetMessageInventoryExit.Builder>(internal__static_Gazillion_NetMessageInventoryExit__Descriptor,
                new string[] { "EntityId", "EntityDataId", });
        internal__static_Gazillion_NetMessageInventoryUnlock__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Gazillion_NetMessageInventoryUnlock__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryUnlock, global::Gazillion.NetMessageInventoryUnlock.Builder>(internal__static_Gazillion_NetMessageInventoryUnlock__Descriptor,
                new string[] { "InvProtoId", });
        internal__static_Gazillion_NetMessagePermaBuffUnlock__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Gazillion_NetMessagePermaBuffUnlock__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePermaBuffUnlock, global::Gazillion.NetMessagePermaBuffUnlock.Builder>(internal__static_Gazillion_NetMessagePermaBuffUnlock__Descriptor,
                new string[] { "PermaBuffProtoId", });
        internal__static_Gazillion_NetMessageEntityKill__Descriptor = Descriptor.MessageTypes[9];
        internal__static_Gazillion_NetMessageEntityKill__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityKill, global::Gazillion.NetMessageEntityKill.Builder>(internal__static_Gazillion_NetMessageEntityKill__Descriptor,
                new string[] { "IdEntity", "IdKillerEntity", "KillFlags", });
        internal__static_Gazillion_NetMessageQueueFullscreenMovie__Descriptor = Descriptor.MessageTypes[10];
        internal__static_Gazillion_NetMessageQueueFullscreenMovie__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageQueueFullscreenMovie, global::Gazillion.NetMessageQueueFullscreenMovie.Builder>(internal__static_Gazillion_NetMessageQueueFullscreenMovie__Descriptor,
                new string[] { "MoviePrototypeId", });
        internal__static_Gazillion_NetMessageQueueLoadingScreen__Descriptor = Descriptor.MessageTypes[11];
        internal__static_Gazillion_NetMessageQueueLoadingScreen__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageQueueLoadingScreen, global::Gazillion.NetMessageQueueLoadingScreen.Builder>(internal__static_Gazillion_NetMessageQueueLoadingScreen__Descriptor,
                new string[] { "RegionPrototypeId", });
        internal__static_Gazillion_NetMessageDequeueLoadingScreen__Descriptor = Descriptor.MessageTypes[12];
        internal__static_Gazillion_NetMessageDequeueLoadingScreen__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDequeueLoadingScreen, global::Gazillion.NetMessageDequeueLoadingScreen.Builder>(internal__static_Gazillion_NetMessageDequeueLoadingScreen__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageRegionChange__Descriptor = Descriptor.MessageTypes[13];
        internal__static_Gazillion_NetMessageRegionChange__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionChange, global::Gazillion.NetMessageRegionChange.Builder>(internal__static_Gazillion_NetMessageRegionChange__Descriptor,
                new string[] { "RegionId", "ServerGameId", "ClearingAllInterest", "Entitiestodestroy", "RegionPrototypeId", "RegionRandomSeed", "ArchiveData", "RegionMin", "RegionMax", "CreateRegionParams", });
        internal__static_Gazillion_NetMessageEntityPosition__Descriptor = Descriptor.MessageTypes[14];
        internal__static_Gazillion_NetMessageEntityPosition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPosition, global::Gazillion.NetMessageEntityPosition.Builder>(internal__static_Gazillion_NetMessageEntityPosition__Descriptor,
                new string[] { "IdEntity", "Flags", "Position", "Orientation", "CellId", "AreaId", "EntityPrototypeId", });
        internal__static_Gazillion_NetMessageLocomotionStateUpdate__Descriptor = Descriptor.MessageTypes[15];
        internal__static_Gazillion_NetMessageLocomotionStateUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLocomotionStateUpdate, global::Gazillion.NetMessageLocomotionStateUpdate.Builder>(internal__static_Gazillion_NetMessageLocomotionStateUpdate__Descriptor,
                new string[] { "IdEntity", "Locomotionstate", "Position", "Orientation", "EntityPrototypeId", });
        internal__static_Gazillion_NetMessageInterestPolicies__Descriptor = Descriptor.MessageTypes[16];
        internal__static_Gazillion_NetMessageInterestPolicies__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInterestPolicies, global::Gazillion.NetMessageInterestPolicies.Builder>(internal__static_Gazillion_NetMessageInterestPolicies__Descriptor,
                new string[] { "IdEntity", "NewPolicies", "PrevPolicies", "EntityDataId", });
        internal__static_Gazillion_NetMessageUnableToChangeRegion__Descriptor = Descriptor.MessageTypes[17];
        internal__static_Gazillion_NetMessageUnableToChangeRegion__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnableToChangeRegion, global::Gazillion.NetMessageUnableToChangeRegion.Builder>(internal__static_Gazillion_NetMessageUnableToChangeRegion__Descriptor,
                new string[] { "ChangeFailed", });
        internal__static_Gazillion_NetStructAreaConnection__Descriptor = Descriptor.MessageTypes[18];
        internal__static_Gazillion_NetStructAreaConnection__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructAreaConnection, global::Gazillion.NetStructAreaConnection.Builder>(internal__static_Gazillion_NetStructAreaConnection__Descriptor,
                new string[] { "AreaId", "ConnectPoint", });
        internal__static_Gazillion_NetMessageAddArea__Descriptor = Descriptor.MessageTypes[19];
        internal__static_Gazillion_NetMessageAddArea__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAddArea, global::Gazillion.NetMessageAddArea.Builder>(internal__static_Gazillion_NetMessageAddArea__Descriptor,
                new string[] { "AreaId", "AreaPrototypeId", "AreaOrigin", "IsStartArea", });
        internal__static_Gazillion_NetMessageRemoveArea__Descriptor = Descriptor.MessageTypes[20];
        internal__static_Gazillion_NetMessageRemoveArea__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRemoveArea, global::Gazillion.NetMessageRemoveArea.Builder>(internal__static_Gazillion_NetMessageRemoveArea__Descriptor,
                new string[] { "AreaId", });
        internal__static_Gazillion_NetStructReservedSpawn__Descriptor = Descriptor.MessageTypes[21];
        internal__static_Gazillion_NetStructReservedSpawn__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructReservedSpawn, global::Gazillion.NetStructReservedSpawn.Builder>(internal__static_Gazillion_NetStructReservedSpawn__Descriptor,
                new string[] { "Asset", "Id", });
        internal__static_Gazillion_NetMessageCellCreate__Descriptor = Descriptor.MessageTypes[22];
        internal__static_Gazillion_NetMessageCellCreate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCellCreate, global::Gazillion.NetMessageCellCreate.Builder>(internal__static_Gazillion_NetMessageCellCreate__Descriptor,
                new string[] { "AreaId", "CellId", "CellPrototypeId", "PositionInArea", "Depth", "CellRandomSeed", "Encounters", "Bufferwidth", "OverrideLocationName", });
        internal__static_Gazillion_NetMessageCellDestroy__Descriptor = Descriptor.MessageTypes[23];
        internal__static_Gazillion_NetMessageCellDestroy__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCellDestroy, global::Gazillion.NetMessageCellDestroy.Builder>(internal__static_Gazillion_NetMessageCellDestroy__Descriptor,
                new string[] { "AreaId", "CellId", });
        internal__static_Gazillion_NetMessageEnvironmentUpdate__Descriptor = Descriptor.MessageTypes[24];
        internal__static_Gazillion_NetMessageEnvironmentUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEnvironmentUpdate, global::Gazillion.NetMessageEnvironmentUpdate.Builder>(internal__static_Gazillion_NetMessageEnvironmentUpdate__Descriptor,
                new string[] { "Flags", });
        internal__static_Gazillion_NetMessageDebugSpawnMapVisualization__Descriptor = Descriptor.MessageTypes[25];
        internal__static_Gazillion_NetMessageDebugSpawnMapVisualization__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDebugSpawnMapVisualization, global::Gazillion.NetMessageDebugSpawnMapVisualization.Builder>(internal__static_Gazillion_NetMessageDebugSpawnMapVisualization__Descriptor,
                new string[] { "Visualize", "Areaid", "Boundsx", "Boundsy", "Mapdata", });
        internal__static_Gazillion_NetMessageChangeAOIPolicies__Descriptor = Descriptor.MessageTypes[26];
        internal__static_Gazillion_NetMessageChangeAOIPolicies__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChangeAOIPolicies, global::Gazillion.NetMessageChangeAOIPolicies.Builder>(internal__static_Gazillion_NetMessageChangeAOIPolicies__Descriptor,
                new string[] { "IdEntity", "Currentpolicies", "ExitGameWorld", "EntityPrototypeId", });
        internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateEnd__Descriptor = Descriptor.MessageTypes[27];
        internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateEnd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageFullInWorldHierarchyUpdateEnd, global::Gazillion.NetMessageFullInWorldHierarchyUpdateEnd.Builder>(internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateEnd__Descriptor,
                new string[] { "IdEntity", });
        internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateBegin__Descriptor = Descriptor.MessageTypes[28];
        internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateBegin__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageFullInWorldHierarchyUpdateBegin, global::Gazillion.NetMessageFullInWorldHierarchyUpdateBegin.Builder>(internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateBegin__Descriptor,
                new string[] { "IdEntity", });
        internal__static_Gazillion_NetMessageAdminCommandResponse__Descriptor = Descriptor.MessageTypes[29];
        internal__static_Gazillion_NetMessageAdminCommandResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAdminCommandResponse, global::Gazillion.NetMessageAdminCommandResponse.Builder>(internal__static_Gazillion_NetMessageAdminCommandResponse__Descriptor,
                new string[] { "Response", });
        internal__static_Gazillion_NetMessageActivatePowerFailed__Descriptor = Descriptor.MessageTypes[30];
        internal__static_Gazillion_NetMessageActivatePowerFailed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageActivatePowerFailed, global::Gazillion.NetMessageActivatePowerFailed.Builder>(internal__static_Gazillion_NetMessageActivatePowerFailed__Descriptor,
                new string[] { "Reason", "PowerPrototypeId", });
        internal__static_Gazillion_NetMessageCancelPower__Descriptor = Descriptor.MessageTypes[31];
        internal__static_Gazillion_NetMessageCancelPower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCancelPower, global::Gazillion.NetMessageCancelPower.Builder>(internal__static_Gazillion_NetMessageCancelPower__Descriptor,
                new string[] { "IdAgent", "PowerPrototypeId", "EndPowerFlags", });
        internal__static_Gazillion_NetMessageContinuousPowerUpdateToClient__Descriptor = Descriptor.MessageTypes[32];
        internal__static_Gazillion_NetMessageContinuousPowerUpdateToClient__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageContinuousPowerUpdateToClient, global::Gazillion.NetMessageContinuousPowerUpdateToClient.Builder>(internal__static_Gazillion_NetMessageContinuousPowerUpdateToClient__Descriptor,
                new string[] { "IdAvatar", "PowerPrototypeId", "IdTargetEntity", "TargetPosition", });
        internal__static_Gazillion_NetMessageActivatePower__Descriptor = Descriptor.MessageTypes[33];
        internal__static_Gazillion_NetMessageActivatePower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageActivatePower, global::Gazillion.NetMessageActivatePower.Builder>(internal__static_Gazillion_NetMessageActivatePower__Descriptor,
                new string[] { "IdUserEntity", "PowerPrototypeId", "ParentPowerPrototypeId", "IdTargetEntity", "TargetPosition", "UserPosition", "MoveTimeSeconds", "VariableActivationTime", "MissileRandomSeed", });
        internal__static_Gazillion_NetMessagePreActivatePower__Descriptor = Descriptor.MessageTypes[34];
        internal__static_Gazillion_NetMessagePreActivatePower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePreActivatePower, global::Gazillion.NetMessagePreActivatePower.Builder>(internal__static_Gazillion_NetMessagePreActivatePower__Descriptor,
                new string[] { "IdUserEntity", "PowerPrototypeId", "IdTargetEntity", "TargetPosition", });
        internal__static_Gazillion_NetMessagePowerResult__Descriptor = Descriptor.MessageTypes[35];
        internal__static_Gazillion_NetMessagePowerResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerResult, global::Gazillion.NetMessagePowerResult.Builder>(internal__static_Gazillion_NetMessagePowerResult__Descriptor,
                new string[] { "IdTargetEntity", "IdPowerOwnerEntity", "IdUltimateOwnerEntity", "PowerPrototypeId", "DeliveryDelayMS", "Flags", "Properties", "PowerOwnerPosition", "TransferToEntityId", "TargetEntityPrototypeId", "PowerOwnerEntityPrototypeId", "UltimateOwnerEntityPrototypeId", "PowerOwnerRegionPrototypeId", "TransferToEntityPrototypeId", "TargetServerString", });
        internal__static_Gazillion_NetMessagePowerBounce__Descriptor = Descriptor.MessageTypes[36];
        internal__static_Gazillion_NetMessagePowerBounce__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerBounce, global::Gazillion.NetMessagePowerBounce.Builder>(internal__static_Gazillion_NetMessagePowerBounce__Descriptor,
                new string[] { "IdPowerUser", "IdLastTarget", "LastTargetPosition", "IdNewTarget", "PowerPrototypeId", "UserOriginalAssetId", "UserCurrentAssetId", "ProjectileSpeed", });
        internal__static_Gazillion_NetMessagePowerWeaponMissing__Descriptor = Descriptor.MessageTypes[37];
        internal__static_Gazillion_NetMessagePowerWeaponMissing__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerWeaponMissing, global::Gazillion.NetMessagePowerWeaponMissing.Builder>(internal__static_Gazillion_NetMessagePowerWeaponMissing__Descriptor,
                new string[] { "IdOwner", "WeaponMissing", });
        internal__static_Gazillion_NetMessageOnPreInteractPowerEnd__Descriptor = Descriptor.MessageTypes[38];
        internal__static_Gazillion_NetMessageOnPreInteractPowerEnd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnPreInteractPowerEnd, global::Gazillion.NetMessageOnPreInteractPowerEnd.Builder>(internal__static_Gazillion_NetMessageOnPreInteractPowerEnd__Descriptor,
                new string[] { "IdTargetEntity", });
        internal__static_Gazillion_NetMessageRegionPrimitiveBox__Descriptor = Descriptor.MessageTypes[39];
        internal__static_Gazillion_NetMessageRegionPrimitiveBox__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionPrimitiveBox, global::Gazillion.NetMessageRegionPrimitiveBox.Builder>(internal__static_Gazillion_NetMessageRegionPrimitiveBox__Descriptor,
                new string[] { "Center", "Size", "Color", "LifetimeInMilliseconds", "Add", });
        internal__static_Gazillion_NetMessageRegionPrimitiveTriangle__Descriptor = Descriptor.MessageTypes[40];
        internal__static_Gazillion_NetMessageRegionPrimitiveTriangle__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionPrimitiveTriangle, global::Gazillion.NetMessageRegionPrimitiveTriangle.Builder>(internal__static_Gazillion_NetMessageRegionPrimitiveTriangle__Descriptor,
                new string[] { "Point0", "Point1", "Point2", "Color", "LifetimeInMilliseconds", "Add", });
        internal__static_Gazillion_NetMessageRegionPrimitiveSphere__Descriptor = Descriptor.MessageTypes[41];
        internal__static_Gazillion_NetMessageRegionPrimitiveSphere__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionPrimitiveSphere, global::Gazillion.NetMessageRegionPrimitiveSphere.Builder>(internal__static_Gazillion_NetMessageRegionPrimitiveSphere__Descriptor,
                new string[] { "Center", "Radius", "Color", "LifetimeInMilliseconds", "Add", });
        internal__static_Gazillion_NetMessageRegionPrimitiveLine__Descriptor = Descriptor.MessageTypes[42];
        internal__static_Gazillion_NetMessageRegionPrimitiveLine__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionPrimitiveLine, global::Gazillion.NetMessageRegionPrimitiveLine.Builder>(internal__static_Gazillion_NetMessageRegionPrimitiveLine__Descriptor,
                new string[] { "Start", "End", "Color", "LifetimeInMilliseconds", "Add", });
        internal__static_Gazillion_NetMessageMarkFirstGameFrame__Descriptor = Descriptor.MessageTypes[43];
        internal__static_Gazillion_NetMessageMarkFirstGameFrame__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMarkFirstGameFrame, global::Gazillion.NetMessageMarkFirstGameFrame.Builder>(internal__static_Gazillion_NetMessageMarkFirstGameFrame__Descriptor,
                new string[] { "Currentservergametime", "Currentservergameid", });
        internal__static_Gazillion_NetMessageBeginExitGame__Descriptor = Descriptor.MessageTypes[44];
        internal__static_Gazillion_NetMessageBeginExitGame__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBeginExitGame, global::Gazillion.NetMessageBeginExitGame.Builder>(internal__static_Gazillion_NetMessageBeginExitGame__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageSystemMessage__Descriptor = Descriptor.MessageTypes[45];
        internal__static_Gazillion_NetMessageSystemMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSystemMessage, global::Gazillion.NetMessageSystemMessage.Builder>(internal__static_Gazillion_NetMessageSystemMessage__Descriptor,
                new string[] { "MessageId", });
        internal__static_Gazillion_NetMessageAIDebugUIUpdate__Descriptor = Descriptor.MessageTypes[46];
        internal__static_Gazillion_NetMessageAIDebugUIUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAIDebugUIUpdate, global::Gazillion.NetMessageAIDebugUIUpdate.Builder>(internal__static_Gazillion_NetMessageAIDebugUIUpdate__Descriptor,
                new string[] { "IdTargetNPC", "CurrentActionName", "PreviousActionName", "SensoryInputs", "PropertyString", });
        internal__static_Gazillion_NetMessagePropertiesDebugUIUpdate__Descriptor = Descriptor.MessageTypes[47];
        internal__static_Gazillion_NetMessagePropertiesDebugUIUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePropertiesDebugUIUpdate, global::Gazillion.NetMessagePropertiesDebugUIUpdate.Builder>(internal__static_Gazillion_NetMessagePropertiesDebugUIUpdate__Descriptor,
                new string[] { "IdTargetEntity", "PropertyString", });
        internal__static_Gazillion_NetMessageConditionsDebugUIUpdate__Descriptor = Descriptor.MessageTypes[48];
        internal__static_Gazillion_NetMessageConditionsDebugUIUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageConditionsDebugUIUpdate, global::Gazillion.NetMessageConditionsDebugUIUpdate.Builder>(internal__static_Gazillion_NetMessageConditionsDebugUIUpdate__Descriptor,
                new string[] { "IdTargetEntity", "ConditionsString", });
        internal__static_Gazillion_NetMessagePowersDebugUIUpdate__Descriptor = Descriptor.MessageTypes[49];
        internal__static_Gazillion_NetMessagePowersDebugUIUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowersDebugUIUpdate, global::Gazillion.NetMessagePowersDebugUIUpdate.Builder>(internal__static_Gazillion_NetMessagePowersDebugUIUpdate__Descriptor,
                new string[] { "DebugEntityId", "ActivePowerId", "PendingActionState", "PendingPowerId", "PendingTargetId", "PendingTargetPosition", "ContinuousPowerId", "ContinuousTargetId", "ContinuousTargetPosition", "ActivePowerLastActivationTime", });
        internal__static_Gazillion_NetMessageMissionDebugUIUpdate__Descriptor = Descriptor.MessageTypes[50];
        internal__static_Gazillion_NetMessageMissionDebugUIUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionDebugUIUpdate, global::Gazillion.NetMessageMissionDebugUIUpdate.Builder>(internal__static_Gazillion_NetMessageMissionDebugUIUpdate__Descriptor,
                new string[] { "MissionStrings", });
        internal__static_Gazillion_NetMessageDebugEntityPosition__Descriptor = Descriptor.MessageTypes[51];
        internal__static_Gazillion_NetMessageDebugEntityPosition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDebugEntityPosition, global::Gazillion.NetMessageDebugEntityPosition.Builder>(internal__static_Gazillion_NetMessageDebugEntityPosition__Descriptor,
                new string[] { "EntityId", "Position", });
        internal__static_Gazillion_NetMessagePingResponse__Descriptor = Descriptor.MessageTypes[52];
        internal__static_Gazillion_NetMessagePingResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePingResponse, global::Gazillion.NetMessagePingResponse.Builder>(internal__static_Gazillion_NetMessagePingResponse__Descriptor,
                new string[] { "DisplayOutput", "RequestSentClientTime", "RequestSentGameTime", "RequestNetReceivedGameTime", "ResponseSendTime", "ResponseNetReceiveClientTime", "ResponseNetReceiveGameTime", "ServerTimeSinceLastGameUpdate", "ResponseLatencyBufferReceiveClientTime", });
        internal__static_Gazillion_NetMessageEntityEnterGameWorld__Descriptor = Descriptor.MessageTypes[53];
        internal__static_Gazillion_NetMessageEntityEnterGameWorld__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityEnterGameWorld, global::Gazillion.NetMessageEntityEnterGameWorld.Builder>(internal__static_Gazillion_NetMessageEntityEnterGameWorld__Descriptor,
                new string[] { "EntityId", "Position", "Orientation", "LocomotionState", "EntityPrototypeId", "IsClientEntityHidden", });
        internal__static_Gazillion_NetMessageTeleportAckRequest__Descriptor = Descriptor.MessageTypes[54];
        internal__static_Gazillion_NetMessageTeleportAckRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTeleportAckRequest, global::Gazillion.NetMessageTeleportAckRequest.Builder>(internal__static_Gazillion_NetMessageTeleportAckRequest__Descriptor,
                new string[] { "Ackseq", });
        internal__static_Gazillion_NetMessageServerVersion__Descriptor = Descriptor.MessageTypes[55];
        internal__static_Gazillion_NetMessageServerVersion__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageServerVersion, global::Gazillion.NetMessageServerVersion.Builder>(internal__static_Gazillion_NetMessageServerVersion__Descriptor,
                new string[] { "Version", });
        internal__static_Gazillion_NetStructAffixSpec__Descriptor = Descriptor.MessageTypes[56];
        internal__static_Gazillion_NetStructAffixSpec__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructAffixSpec, global::Gazillion.NetStructAffixSpec.Builder>(internal__static_Gazillion_NetStructAffixSpec__Descriptor,
                new string[] { "AffixProtoRef", "ScopeProtoRef", "Seed", });
        internal__static_Gazillion_NetStructItemSpec__Descriptor = Descriptor.MessageTypes[57];
        internal__static_Gazillion_NetStructItemSpec__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructItemSpec, global::Gazillion.NetStructItemSpec.Builder>(internal__static_Gazillion_NetStructItemSpec__Descriptor,
                new string[] { "ItemProtoRef", "ItemLevel", "RarityProtoRef", "Seed", "CreditsAmount", "AffixSpecs", });
        internal__static_Gazillion_NetStructItemSpecEntry__Descriptor = Descriptor.MessageTypes[58];
        internal__static_Gazillion_NetStructItemSpecEntry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructItemSpecEntry, global::Gazillion.NetStructItemSpecEntry.Builder>(internal__static_Gazillion_NetStructItemSpecEntry__Descriptor,
                new string[] { "Key", "ItemSpec", });
        internal__static_Gazillion_NetMessageMissionUpdate__Descriptor = Descriptor.MessageTypes[59];
        internal__static_Gazillion_NetMessageMissionUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionUpdate, global::Gazillion.NetMessageMissionUpdate.Builder>(internal__static_Gazillion_NetMessageMissionUpdate__Descriptor,
                new string[] { "MissionPrototypeId", "MissionState", "MissionStateExpireTime", "XpAwarded", "CreditsAwarded", "PowerPointsAwarded", "HealthBonusAwarded", "EnduranceBonusAwarded", "Participants", "Items", "Create", "SuppressNotification", });
        internal__static_Gazillion_NetMessageMissionObjectiveUpdate__Descriptor = Descriptor.MessageTypes[60];
        internal__static_Gazillion_NetMessageMissionObjectiveUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionObjectiveUpdate, global::Gazillion.NetMessageMissionObjectiveUpdate.Builder>(internal__static_Gazillion_NetMessageMissionObjectiveUpdate__Descriptor,
                new string[] { "MissionPrototypeId", "ObjectiveIndex", "ObjectiveState", "ObjectiveStateExpireTime", "CompletedCount", "TotalCount", "InteractedEntities", "Create", "SuppressNotification", });
        internal__static_Gazillion_NetMessageCurrentAvatarChanged__Descriptor = Descriptor.MessageTypes[61];
        internal__static_Gazillion_NetMessageCurrentAvatarChanged__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCurrentAvatarChanged, global::Gazillion.NetMessageCurrentAvatarChanged.Builder>(internal__static_Gazillion_NetMessageCurrentAvatarChanged__Descriptor,
                new string[] { "LastCurrentEntityId", });
        internal__static_Gazillion_NetMessageNewAvatarAcquired__Descriptor = Descriptor.MessageTypes[62];
        internal__static_Gazillion_NetMessageNewAvatarAcquired__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageNewAvatarAcquired, global::Gazillion.NetMessageNewAvatarAcquired.Builder>(internal__static_Gazillion_NetMessageNewAvatarAcquired__Descriptor,
                new string[] { "PrototypeId", });
        internal__static_Gazillion_NetStructPrefetchEntityPower__Descriptor = Descriptor.MessageTypes[63];
        internal__static_Gazillion_NetStructPrefetchEntityPower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructPrefetchEntityPower, global::Gazillion.NetStructPrefetchEntityPower.Builder>(internal__static_Gazillion_NetStructPrefetchEntityPower__Descriptor,
                new string[] { "EntityAssetId", "PowerPrototypeId", });
        internal__static_Gazillion_NetStructPrefetchCell__Descriptor = Descriptor.MessageTypes[64];
        internal__static_Gazillion_NetStructPrefetchCell__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructPrefetchCell, global::Gazillion.NetStructPrefetchCell.Builder>(internal__static_Gazillion_NetStructPrefetchCell__Descriptor,
                new string[] { "CellId", "CellPrototypeId", });
        internal__static_Gazillion_NetMessagePrefetchAssets__Descriptor = Descriptor.MessageTypes[65];
        internal__static_Gazillion_NetMessagePrefetchAssets__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePrefetchAssets, global::Gazillion.NetMessagePrefetchAssets.Builder>(internal__static_Gazillion_NetMessagePrefetchAssets__Descriptor,
                new string[] { "Backgroundload", "Assets", "Prototypes", "Powers", "Cells", "RegionId", });
        internal__static_Gazillion_NetMessagePrefetchRegionsForDownload__Descriptor = Descriptor.MessageTypes[66];
        internal__static_Gazillion_NetMessagePrefetchRegionsForDownload__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePrefetchRegionsForDownload, global::Gazillion.NetMessagePrefetchRegionsForDownload.Builder>(internal__static_Gazillion_NetMessagePrefetchRegionsForDownload__Descriptor,
                new string[] { "Prototypes", });
        internal__static_Gazillion_NetMessageQueryIsRegionAvailable__Descriptor = Descriptor.MessageTypes[67];
        internal__static_Gazillion_NetMessageQueryIsRegionAvailable__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageQueryIsRegionAvailable, global::Gazillion.NetMessageQueryIsRegionAvailable.Builder>(internal__static_Gazillion_NetMessageQueryIsRegionAvailable__Descriptor,
                new string[] { "RegionPrototype", });
        internal__static_Gazillion_NetMessageShowOverheadText__Descriptor = Descriptor.MessageTypes[68];
        internal__static_Gazillion_NetMessageShowOverheadText__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShowOverheadText, global::Gazillion.NetMessageShowOverheadText.Builder>(internal__static_Gazillion_NetMessageShowOverheadText__Descriptor,
                new string[] { "IdAgent", "IdText", "Duration", });
        internal__static_Gazillion_NetMessageAIToggleState__Descriptor = Descriptor.MessageTypes[69];
        internal__static_Gazillion_NetMessageAIToggleState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAIToggleState, global::Gazillion.NetMessageAIToggleState.Builder>(internal__static_Gazillion_NetMessageAIToggleState__Descriptor,
                new string[] { "State", });
        internal__static_Gazillion_NetMessageDamageToggleState__Descriptor = Descriptor.MessageTypes[70];
        internal__static_Gazillion_NetMessageDamageToggleState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDamageToggleState, global::Gazillion.NetMessageDamageToggleState.Builder>(internal__static_Gazillion_NetMessageDamageToggleState__Descriptor,
                new string[] { "State", });
        internal__static_Gazillion_NetStructMatchQueueEntry__Descriptor = Descriptor.MessageTypes[71];
        internal__static_Gazillion_NetStructMatchQueueEntry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructMatchQueueEntry, global::Gazillion.NetStructMatchQueueEntry.Builder>(internal__static_Gazillion_NetStructMatchQueueEntry__Descriptor,
                new string[] { "QueueIndex", "QueuePrototypeId", "CanQueueParty", });
        internal__static_Gazillion_NetMessageMatchQueueListResponse__Descriptor = Descriptor.MessageTypes[72];
        internal__static_Gazillion_NetMessageMatchQueueListResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchQueueListResponse, global::Gazillion.NetMessageMatchQueueListResponse.Builder>(internal__static_Gazillion_NetMessageMatchQueueListResponse__Descriptor,
                new string[] { "List", });
        internal__static_Gazillion_NetMessageMatchQueueResponse__Descriptor = Descriptor.MessageTypes[73];
        internal__static_Gazillion_NetMessageMatchQueueResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchQueueResponse, global::Gazillion.NetMessageMatchQueueResponse.Builder>(internal__static_Gazillion_NetMessageMatchQueueResponse__Descriptor,
                new string[] { "QueueIndex", "QueuePrototypeId", });
        internal__static_Gazillion_NetMessageMatchInviteNotification__Descriptor = Descriptor.MessageTypes[74];
        internal__static_Gazillion_NetMessageMatchInviteNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchInviteNotification, global::Gazillion.NetMessageMatchInviteNotification.Builder>(internal__static_Gazillion_NetMessageMatchInviteNotification__Descriptor,
                new string[] { "QueueIndex", "QueuePrototypeId", "MatchNumber", });
        internal__static_Gazillion_NetMessageMatchStatsResponse__Descriptor = Descriptor.MessageTypes[75];
        internal__static_Gazillion_NetMessageMatchStatsResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchStatsResponse, global::Gazillion.NetMessageMatchStatsResponse.Builder>(internal__static_Gazillion_NetMessageMatchStatsResponse__Descriptor,
                new string[] { "StatRequestNumber", "PlayerFound", "Summaries", });
        internal__static_Gazillion_NetMessageMatchTeamRosterNotification__Descriptor = Descriptor.MessageTypes[76];
        internal__static_Gazillion_NetMessageMatchTeamRosterNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchTeamRosterNotification, global::Gazillion.NetMessageMatchTeamRosterNotification.Builder>(internal__static_Gazillion_NetMessageMatchTeamRosterNotification__Descriptor,
                new string[] { "MetaGameEntityId", "TeamPrototypeId", "PlayerDbGuids", });
        internal__static_Gazillion_NetMessageMatchTeamSizeNotification__Descriptor = Descriptor.MessageTypes[77];
        internal__static_Gazillion_NetMessageMatchTeamSizeNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchTeamSizeNotification, global::Gazillion.NetMessageMatchTeamSizeNotification.Builder>(internal__static_Gazillion_NetMessageMatchTeamSizeNotification__Descriptor,
                new string[] { "MetaGameEntityId", "TeamSize", });
        internal__static_Gazillion_NetMessageChatFromGameSystem__Descriptor = Descriptor.MessageTypes[78];
        internal__static_Gazillion_NetMessageChatFromGameSystem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChatFromGameSystem, global::Gazillion.NetMessageChatFromGameSystem.Builder>(internal__static_Gazillion_NetMessageChatFromGameSystem__Descriptor,
                new string[] { "Type", "SourceStringId", "MessageStringId", });
        internal__static_Gazillion_NetMessageChatError__Descriptor = Descriptor.MessageTypes[79];
        internal__static_Gazillion_NetMessageChatError__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChatError, global::Gazillion.NetMessageChatError.Builder>(internal__static_Gazillion_NetMessageChatError__Descriptor,
                new string[] { "ErrorMessage", });
        internal__static_Gazillion_NetMessageCatalogItems__Descriptor = Descriptor.MessageTypes[80];
        internal__static_Gazillion_NetMessageCatalogItems__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCatalogItems, global::Gazillion.NetMessageCatalogItems.Builder>(internal__static_Gazillion_NetMessageCatalogItems__Descriptor,
                new string[] { "Timestamp", "Entries", "Urls", });
        internal__static_Gazillion_NetMessageGetCurrencyBalanceResponse__Descriptor = Descriptor.MessageTypes[81];
        internal__static_Gazillion_NetMessageGetCurrencyBalanceResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGetCurrencyBalanceResponse, global::Gazillion.NetMessageGetCurrencyBalanceResponse.Builder>(internal__static_Gazillion_NetMessageGetCurrencyBalanceResponse__Descriptor,
                new string[] { "CurrencyBalance", });
        internal__static_Gazillion_NetMessageBuyItemFromCatalogResponse__Descriptor = Descriptor.MessageTypes[82];
        internal__static_Gazillion_NetMessageBuyItemFromCatalogResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBuyItemFromCatalogResponse, global::Gazillion.NetMessageBuyItemFromCatalogResponse.Builder>(internal__static_Gazillion_NetMessageBuyItemFromCatalogResponse__Descriptor,
                new string[] { "DidSucceed", "CurrentCurrencyBalance", "Errormessage", "Errorcode", "SkuId", "IsWebPurchase", "ProtototypeIds", });
        internal__static_Gazillion_NetMessageEntityPreviewerNewTarget__Descriptor = Descriptor.MessageTypes[83];
        internal__static_Gazillion_NetMessageEntityPreviewerNewTarget__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerNewTarget, global::Gazillion.NetMessageEntityPreviewerNewTarget.Builder>(internal__static_Gazillion_NetMessageEntityPreviewerNewTarget__Descriptor,
                new string[] { "EntityId", });
        internal__static_Gazillion_NetMessageServerNotification__Descriptor = Descriptor.MessageTypes[84];
        internal__static_Gazillion_NetMessageServerNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageServerNotification, global::Gazillion.NetMessageServerNotification.Builder>(internal__static_Gazillion_NetMessageServerNotification__Descriptor,
                new string[] { "ServerMessage", });
        internal__static_Gazillion_NetMessageRemoteMissionNotification__Descriptor = Descriptor.MessageTypes[85];
        internal__static_Gazillion_NetMessageRemoteMissionNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRemoteMissionNotification, global::Gazillion.NetMessageRemoteMissionNotification.Builder>(internal__static_Gazillion_NetMessageRemoteMissionNotification__Descriptor,
                new string[] { "EntityPrototypeId", "DialogTextStringId", "MissionPrototypeId", "IconPathOverrideId", });
        internal__static_Gazillion_NetMessageUINotificationMessage__Descriptor = Descriptor.MessageTypes[86];
        internal__static_Gazillion_NetMessageUINotificationMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUINotificationMessage, global::Gazillion.NetMessageUINotificationMessage.Builder>(internal__static_Gazillion_NetMessageUINotificationMessage__Descriptor,
                new string[] { "UiNotificationRef", });
        internal__static_Gazillion_NetMessageStartPvPTimer__Descriptor = Descriptor.MessageTypes[87];
        internal__static_Gazillion_NetMessageStartPvPTimer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartPvPTimer, global::Gazillion.NetMessageStartPvPTimer.Builder>(internal__static_Gazillion_NetMessageStartPvPTimer__Descriptor,
                new string[] { "StartTime", "EndTime", "LowTimeWarning", "CriticalTimeWarning", "MetaGameId", });
        internal__static_Gazillion_NetMessageSetDifficultyThresholds__Descriptor = Descriptor.MessageTypes[88];
        internal__static_Gazillion_NetMessageSetDifficultyThresholds__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetDifficultyThresholds, global::Gazillion.NetMessageSetDifficultyThresholds.Builder>(internal__static_Gazillion_NetMessageSetDifficultyThresholds__Descriptor,
                new string[] { "WarningThreshold", "FailureThreshold", });
        internal__static_Gazillion_NetMessageSetTimerText__Descriptor = Descriptor.MessageTypes[89];
        internal__static_Gazillion_NetMessageSetTimerText__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetTimerText, global::Gazillion.NetMessageSetTimerText.Builder>(internal__static_Gazillion_NetMessageSetTimerText__Descriptor,
                new string[] { "TimerTextId", "Arg1", });
        internal__static_Gazillion_NetMessageSetModeText__Descriptor = Descriptor.MessageTypes[90];
        internal__static_Gazillion_NetMessageSetModeText__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetModeText, global::Gazillion.NetMessageSetModeText.Builder>(internal__static_Gazillion_NetMessageSetModeText__Descriptor,
                new string[] { "ModeTextId", "ModeRef", "MetaGameId", });
        internal__static_Gazillion_NetMessageSetExtraText__Descriptor = Descriptor.MessageTypes[91];
        internal__static_Gazillion_NetMessageSetExtraText__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetExtraText, global::Gazillion.NetMessageSetExtraText.Builder>(internal__static_Gazillion_NetMessageSetExtraText__Descriptor,
                new string[] { "ExtraTextId", });
        internal__static_Gazillion_NetMessageBannerMessage__Descriptor = Descriptor.MessageTypes[92];
        internal__static_Gazillion_NetMessageBannerMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBannerMessage, global::Gazillion.NetMessageBannerMessage.Builder>(internal__static_Gazillion_NetMessageBannerMessage__Descriptor,
                new string[] { "BannerText", "FontColor", "FontSize", "TimeToLiveMS", "MessageStyle", "DoNotQueue", });
        internal__static_Gazillion_NetMessageAIAggroNotification__Descriptor = Descriptor.MessageTypes[93];
        internal__static_Gazillion_NetMessageAIAggroNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAIAggroNotification, global::Gazillion.NetMessageAIAggroNotification.Builder>(internal__static_Gazillion_NetMessageAIAggroNotification__Descriptor,
                new string[] { "BannerMessageRef", "AiRef", "PlayerId", });
        internal__static_Gazillion_NetMessageStoryNotification__Descriptor = Descriptor.MessageTypes[94];
        internal__static_Gazillion_NetMessageStoryNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStoryNotification, global::Gazillion.NetMessageStoryNotification.Builder>(internal__static_Gazillion_NetMessageStoryNotification__Descriptor,
                new string[] { "DisplayTextStringId", "SpeakingEntityPrototypeId", "TimeToLiveMS", });
        internal__static_Gazillion_NetMessageSyncTimeReply__Descriptor = Descriptor.MessageTypes[95];
        internal__static_Gazillion_NetMessageSyncTimeReply__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSyncTimeReply, global::Gazillion.NetMessageSyncTimeReply.Builder>(internal__static_Gazillion_NetMessageSyncTimeReply__Descriptor,
                new string[] { "GameTimeClientSent", "GameTimeServerReceived", "GameTimeServerSent", "DateTimeClientSent", "DateTimeServerReceived", "DateTimeServerSent", "Dialation", "GametimeDialationStarted", "DatetimeDialationStarted", });
        internal__static_Gazillion_NetMessageSelectStartingAvatarForNewPlayer__Descriptor = Descriptor.MessageTypes[96];
        internal__static_Gazillion_NetMessageSelectStartingAvatarForNewPlayer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSelectStartingAvatarForNewPlayer, global::Gazillion.NetMessageSelectStartingAvatarForNewPlayer.Builder>(internal__static_Gazillion_NetMessageSelectStartingAvatarForNewPlayer__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageShowKioskStartScreen__Descriptor = Descriptor.MessageTypes[97];
        internal__static_Gazillion_NetMessageShowKioskStartScreen__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShowKioskStartScreen, global::Gazillion.NetMessageShowKioskStartScreen.Builder>(internal__static_Gazillion_NetMessageShowKioskStartScreen__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageInventoryFull__Descriptor = Descriptor.MessageTypes[98];
        internal__static_Gazillion_NetMessageInventoryFull__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryFull, global::Gazillion.NetMessageInventoryFull.Builder>(internal__static_Gazillion_NetMessageInventoryFull__Descriptor,
                new string[] { "PlayerID", "ItemID", });
        internal__static_Gazillion_NetMessageUnloadPackagesStart__Descriptor = Descriptor.MessageTypes[99];
        internal__static_Gazillion_NetMessageUnloadPackagesStart__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnloadPackagesStart, global::Gazillion.NetMessageUnloadPackagesStart.Builder>(internal__static_Gazillion_NetMessageUnloadPackagesStart__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageUnloadPackagesEnd__Descriptor = Descriptor.MessageTypes[100];
        internal__static_Gazillion_NetMessageUnloadPackagesEnd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnloadPackagesEnd, global::Gazillion.NetMessageUnloadPackagesEnd.Builder>(internal__static_Gazillion_NetMessageUnloadPackagesEnd__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageForceDisconnect__Descriptor = Descriptor.MessageTypes[101];
        internal__static_Gazillion_NetMessageForceDisconnect__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageForceDisconnect, global::Gazillion.NetMessageForceDisconnect.Builder>(internal__static_Gazillion_NetMessageForceDisconnect__Descriptor,
                new string[] { "Reason", });
        internal__static_Gazillion_NetMessageLevelUp__Descriptor = Descriptor.MessageTypes[102];
        internal__static_Gazillion_NetMessageLevelUp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLevelUp, global::Gazillion.NetMessageLevelUp.Builder>(internal__static_Gazillion_NetMessageLevelUp__Descriptor,
                new string[] { "EntityID", });
        internal__static_Gazillion_NetMessageVendorLevelUp__Descriptor = Descriptor.MessageTypes[103];
        internal__static_Gazillion_NetMessageVendorLevelUp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorLevelUp, global::Gazillion.NetMessageVendorLevelUp.Builder>(internal__static_Gazillion_NetMessageVendorLevelUp__Descriptor,
                new string[] { "VendorTypeProtoId", "VendorID", });
        internal__static_Gazillion_NetMessageVendorRefresh__Descriptor = Descriptor.MessageTypes[104];
        internal__static_Gazillion_NetMessageVendorRefresh__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRefresh, global::Gazillion.NetMessageVendorRefresh.Builder>(internal__static_Gazillion_NetMessageVendorRefresh__Descriptor,
                new string[] { "VendorTypeProtoId", });
        internal__static_Gazillion_NetMessageCraftingFinished__Descriptor = Descriptor.MessageTypes[105];
        internal__static_Gazillion_NetMessageCraftingFinished__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCraftingFinished, global::Gazillion.NetMessageCraftingFinished.Builder>(internal__static_Gazillion_NetMessageCraftingFinished__Descriptor,
                new string[] { "RecipeProtoId", });
        internal__static_Gazillion_NetMessageCraftingFailed__Descriptor = Descriptor.MessageTypes[106];
        internal__static_Gazillion_NetMessageCraftingFailed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCraftingFailed, global::Gazillion.NetMessageCraftingFailed.Builder>(internal__static_Gazillion_NetMessageCraftingFailed__Descriptor,
                new string[] { "RecipeProtoId", });
        internal__static_Gazillion_NetMessageWaypointUnlocked__Descriptor = Descriptor.MessageTypes[107];
        internal__static_Gazillion_NetMessageWaypointUnlocked__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageWaypointUnlocked, global::Gazillion.NetMessageWaypointUnlocked.Builder>(internal__static_Gazillion_NetMessageWaypointUnlocked__Descriptor,
                new string[] { "WaypointPrototypeID", });
        internal__static_Gazillion_NetMessageReplicationArchive__Descriptor = Descriptor.MessageTypes[108];
        internal__static_Gazillion_NetMessageReplicationArchive__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReplicationArchive, global::Gazillion.NetMessageReplicationArchive.Builder>(internal__static_Gazillion_NetMessageReplicationArchive__Descriptor,
                new string[] { "ReplicationId", "ArchiveDataType", "ArchiveData", "Debugstring", });
        internal__static_Gazillion_NetMessagePvPScoreScoreUpdateEntry__Descriptor = Descriptor.MessageTypes[109];
        internal__static_Gazillion_NetMessagePvPScoreScoreUpdateEntry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvPScoreScoreUpdateEntry, global::Gazillion.NetMessagePvPScoreScoreUpdateEntry.Builder>(internal__static_Gazillion_NetMessagePvPScoreScoreUpdateEntry__Descriptor,
                new string[] { "Category", "Value", });
        internal__static_Gazillion_NetMessagePvPScorePlayerNewId__Descriptor = Descriptor.MessageTypes[110];
        internal__static_Gazillion_NetMessagePvPScorePlayerNewId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvPScorePlayerNewId, global::Gazillion.NetMessagePvPScorePlayerNewId.Builder>(internal__static_Gazillion_NetMessagePvPScorePlayerNewId__Descriptor,
                new string[] { "PvpEntityId", "PlayerDbGuid", "PlayerName", "TeamProtoId", });
        internal__static_Gazillion_NetMessagePvPScorePlayerTeamChange__Descriptor = Descriptor.MessageTypes[111];
        internal__static_Gazillion_NetMessagePvPScorePlayerTeamChange__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvPScorePlayerTeamChange, global::Gazillion.NetMessagePvPScorePlayerTeamChange.Builder>(internal__static_Gazillion_NetMessagePvPScorePlayerTeamChange__Descriptor,
                new string[] { "PvpEntityId", "PlayerDbGuid", "TeamProtoId", });
        internal__static_Gazillion_NetMessagePvPScorePlayerUpdate__Descriptor = Descriptor.MessageTypes[112];
        internal__static_Gazillion_NetMessagePvPScorePlayerUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvPScorePlayerUpdate, global::Gazillion.NetMessagePvPScorePlayerUpdate.Builder>(internal__static_Gazillion_NetMessagePvPScorePlayerUpdate__Descriptor,
                new string[] { "PvpEntityId", "PlayerDbGuid", "Updates", });
        internal__static_Gazillion_NetMessageTransitionUpdate__Descriptor = Descriptor.MessageTypes[113];
        internal__static_Gazillion_NetMessageTransitionUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTransitionUpdate, global::Gazillion.NetMessageTransitionUpdate.Builder>(internal__static_Gazillion_NetMessageTransitionUpdate__Descriptor,
                new string[] { "IdEntity", });
        internal__static_Gazillion_NetMessageAvatarNameChange__Descriptor = Descriptor.MessageTypes[114];
        internal__static_Gazillion_NetMessageAvatarNameChange__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAvatarNameChange, global::Gazillion.NetMessageAvatarNameChange.Builder>(internal__static_Gazillion_NetMessageAvatarNameChange__Descriptor,
                new string[] { "IdEntity", });
        internal__static_Gazillion_NetMessageMissionInteractRepeat__Descriptor = Descriptor.MessageTypes[115];
        internal__static_Gazillion_NetMessageMissionInteractRepeat__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionInteractRepeat, global::Gazillion.NetMessageMissionInteractRepeat.Builder>(internal__static_Gazillion_NetMessageMissionInteractRepeat__Descriptor,
                new string[] { "TargetEntityId", "MissionPrototypeId", });
        internal__static_Gazillion_NetMessageMissionInteractRelease__Descriptor = Descriptor.MessageTypes[116];
        internal__static_Gazillion_NetMessageMissionInteractRelease__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionInteractRelease, global::Gazillion.NetMessageMissionInteractRelease.Builder>(internal__static_Gazillion_NetMessageMissionInteractRelease__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageOnAddCondition__Descriptor = Descriptor.MessageTypes[117];
        internal__static_Gazillion_NetMessageOnAddCondition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnAddCondition, global::Gazillion.NetMessageOnAddCondition.Builder>(internal__static_Gazillion_NetMessageOnAddCondition__Descriptor,
                new string[] { "IdEntity", "Key", "EntityServerString", "ConditionServerString", });
        internal__static_Gazillion_NetMessageOnRemoveCondition__Descriptor = Descriptor.MessageTypes[118];
        internal__static_Gazillion_NetMessageOnRemoveCondition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnRemoveCondition, global::Gazillion.NetMessageOnRemoveCondition.Builder>(internal__static_Gazillion_NetMessageOnRemoveCondition__Descriptor,
                new string[] { "IdEntity", "Key", });
        internal__static_Gazillion_NetMessageHotkeyAssign__Descriptor = Descriptor.MessageTypes[119];
        internal__static_Gazillion_NetMessageHotkeyAssign__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageHotkeyAssign, global::Gazillion.NetMessageHotkeyAssign.Builder>(internal__static_Gazillion_NetMessageHotkeyAssign__Descriptor,
                new string[] { "AvatarId", "AbilityProtoId", "Slot", "DestinationSlot", });
        internal__static_Gazillion_NetMessageHotkeyUnassign__Descriptor = Descriptor.MessageTypes[120];
        internal__static_Gazillion_NetMessageHotkeyUnassign__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageHotkeyUnassign, global::Gazillion.NetMessageHotkeyUnassign.Builder>(internal__static_Gazillion_NetMessageHotkeyUnassign__Descriptor,
                new string[] { "AvatarId", "Slot", });
        internal__static_Gazillion_NetMessageAbilityAssign__Descriptor = Descriptor.MessageTypes[121];
        internal__static_Gazillion_NetMessageAbilityAssign__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAbilityAssign, global::Gazillion.NetMessageAbilityAssign.Builder>(internal__static_Gazillion_NetMessageAbilityAssign__Descriptor,
                new string[] { "AvatarId", "AbilityProtoId", "Slot", });
        internal__static_Gazillion_NetMessageAbilityUnassign__Descriptor = Descriptor.MessageTypes[122];
        internal__static_Gazillion_NetMessageAbilityUnassign__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAbilityUnassign, global::Gazillion.NetMessageAbilityUnassign.Builder>(internal__static_Gazillion_NetMessageAbilityUnassign__Descriptor,
                new string[] { "AvatarId", "Slot", });
        internal__static_Gazillion_NetMessageAbilitySwap__Descriptor = Descriptor.MessageTypes[123];
        internal__static_Gazillion_NetMessageAbilitySwap__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAbilitySwap, global::Gazillion.NetMessageAbilitySwap.Builder>(internal__static_Gazillion_NetMessageAbilitySwap__Descriptor,
                new string[] { "AvatarId", "SlotA", "SlotB", });
        internal__static_Gazillion_NetMessagePowerCollectionAssignPower__Descriptor = Descriptor.MessageTypes[124];
        internal__static_Gazillion_NetMessagePowerCollectionAssignPower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerCollectionAssignPower, global::Gazillion.NetMessagePowerCollectionAssignPower.Builder>(internal__static_Gazillion_NetMessagePowerCollectionAssignPower__Descriptor,
                new string[] { "EntityId", "PowerProtoId", "Targetentityid", "PowerRank", "CharacterLevel", "ItemLevel", "PowerCollectionIsduplicating", });
        internal__static_Gazillion_NetMessageAssignPowerCollection__Descriptor = Descriptor.MessageTypes[125];
        internal__static_Gazillion_NetMessageAssignPowerCollection__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAssignPowerCollection, global::Gazillion.NetMessageAssignPowerCollection.Builder>(internal__static_Gazillion_NetMessageAssignPowerCollection__Descriptor,
                new string[] { "Power", });
        internal__static_Gazillion_NetMessagePowerCollectionUnassignPower__Descriptor = Descriptor.MessageTypes[126];
        internal__static_Gazillion_NetMessagePowerCollectionUnassignPower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerCollectionUnassignPower, global::Gazillion.NetMessagePowerCollectionUnassignPower.Builder>(internal__static_Gazillion_NetMessagePowerCollectionUnassignPower__Descriptor,
                new string[] { "EntityId", "PowerProtoId", "Targetentityid", });
        internal__static_Gazillion_NetMessageOnWaypointUpdated__Descriptor = Descriptor.MessageTypes[127];
        internal__static_Gazillion_NetMessageOnWaypointUpdated__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnWaypointUpdated, global::Gazillion.NetMessageOnWaypointUpdated.Builder>(internal__static_Gazillion_NetMessageOnWaypointUpdated__Descriptor,
                new string[] { "IdPlayer", });
        internal__static_Gazillion_NetMessageInternalReportPlayerLoadError__Descriptor = Descriptor.MessageTypes[128];
        internal__static_Gazillion_NetMessageInternalReportPlayerLoadError__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInternalReportPlayerLoadError, global::Gazillion.NetMessageInternalReportPlayerLoadError.Builder>(internal__static_Gazillion_NetMessageInternalReportPlayerLoadError__Descriptor,
                new string[] { "ServerReport", });
        internal__static_Gazillion_MessageReportEntry__Descriptor = Descriptor.MessageTypes[129];
        internal__static_Gazillion_MessageReportEntry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.MessageReportEntry, global::Gazillion.MessageReportEntry.Builder>(internal__static_Gazillion_MessageReportEntry__Descriptor,
                new string[] { "MessageName", "TotalCount", "TotalBytes", });
        internal__static_Gazillion_NetMessageMessageReport__Descriptor = Descriptor.MessageTypes[130];
        internal__static_Gazillion_NetMessageMessageReport__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMessageReport, global::Gazillion.NetMessageMessageReport.Builder>(internal__static_Gazillion_NetMessageMessageReport__Descriptor,
                new string[] { "Reports", "ReportSource", "ReportDirection", });
        internal__static_Gazillion_NetMessageUpdateMiniMap__Descriptor = Descriptor.MessageTypes[131];
        internal__static_Gazillion_NetMessageUpdateMiniMap__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUpdateMiniMap, global::Gazillion.NetMessageUpdateMiniMap.Builder>(internal__static_Gazillion_NetMessageUpdateMiniMap__Descriptor,
                new string[] { "ArchiveData", });
        internal__static_Gazillion_NetMessageMoveToAlternateLandingSpot__Descriptor = Descriptor.MessageTypes[132];
        internal__static_Gazillion_NetMessageMoveToAlternateLandingSpot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMoveToAlternateLandingSpot, global::Gazillion.NetMessageMoveToAlternateLandingSpot.Builder>(internal__static_Gazillion_NetMessageMoveToAlternateLandingSpot__Descriptor,
                new string[] { "IdEntity", "LandingPosition", "LandingPowerprototypeId", });
        internal__static_Gazillion_NetMessageConsoleMessage__Descriptor = Descriptor.MessageTypes[133];
        internal__static_Gazillion_NetMessageConsoleMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageConsoleMessage, global::Gazillion.NetMessageConsoleMessage.Builder>(internal__static_Gazillion_NetMessageConsoleMessage__Descriptor,
                new string[] { "MessageText", });
        internal__static_Gazillion_NetMessageAvatarOnKilledInfoOverride__Descriptor = Descriptor.MessageTypes[134];
        internal__static_Gazillion_NetMessageAvatarOnKilledInfoOverride__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAvatarOnKilledInfoOverride, global::Gazillion.NetMessageAvatarOnKilledInfoOverride.Builder>(internal__static_Gazillion_NetMessageAvatarOnKilledInfoOverride__Descriptor,
                new string[] { "RegionId", "AvatarOnKilledInfoProtoId", });
        internal__static_Gazillion_NetMessageOnResurrect__Descriptor = Descriptor.MessageTypes[135];
        internal__static_Gazillion_NetMessageOnResurrect__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnResurrect, global::Gazillion.NetMessageOnResurrect.Builder>(internal__static_Gazillion_NetMessageOnResurrect__Descriptor,
                new string[] { "TargetId", });
        internal__static_Gazillion_NetMessageOnResurrectRequest__Descriptor = Descriptor.MessageTypes[136];
        internal__static_Gazillion_NetMessageOnResurrectRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnResurrectRequest, global::Gazillion.NetMessageOnResurrectRequest.Builder>(internal__static_Gazillion_NetMessageOnResurrectRequest__Descriptor,
                new string[] { "TargetId", "ResurrectorId", });
        internal__static_Gazillion_NetMessageOnResurrectDecline__Descriptor = Descriptor.MessageTypes[137];
        internal__static_Gazillion_NetMessageOnResurrectDecline__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnResurrectDecline, global::Gazillion.NetMessageOnResurrectDecline.Builder>(internal__static_Gazillion_NetMessageOnResurrectDecline__Descriptor,
                new string[] { "TargetId", });
        internal__static_Gazillion_NetMessageReloadPackagesStart__Descriptor = Descriptor.MessageTypes[138];
        internal__static_Gazillion_NetMessageReloadPackagesStart__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReloadPackagesStart, global::Gazillion.NetMessageReloadPackagesStart.Builder>(internal__static_Gazillion_NetMessageReloadPackagesStart__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessagePlayStoryBanter__Descriptor = Descriptor.MessageTypes[139];
        internal__static_Gazillion_NetMessagePlayStoryBanter__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayStoryBanter, global::Gazillion.NetMessagePlayStoryBanter.Builder>(internal__static_Gazillion_NetMessagePlayStoryBanter__Descriptor,
                new string[] { "BanterAssetId", });
        internal__static_Gazillion_NetMessagePlayKismetSeq__Descriptor = Descriptor.MessageTypes[140];
        internal__static_Gazillion_NetMessagePlayKismetSeq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayKismetSeq, global::Gazillion.NetMessagePlayKismetSeq.Builder>(internal__static_Gazillion_NetMessagePlayKismetSeq__Descriptor,
                new string[] { "KismetSeqPrototypeId", });
        internal__static_Gazillion_NetMessageGracefulDisconnectAck__Descriptor = Descriptor.MessageTypes[141];
        internal__static_Gazillion_NetMessageGracefulDisconnectAck__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGracefulDisconnectAck, global::Gazillion.NetMessageGracefulDisconnectAck.Builder>(internal__static_Gazillion_NetMessageGracefulDisconnectAck__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageLiveTuningUpdate__Descriptor = Descriptor.MessageTypes[142];
        internal__static_Gazillion_NetMessageLiveTuningUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLiveTuningUpdate, global::Gazillion.NetMessageLiveTuningUpdate.Builder>(internal__static_Gazillion_NetMessageLiveTuningUpdate__Descriptor,
                new string[] { "GlobalTuningSettings", "PerPowerTuningSettings", });
        internal__static_Gazillion_NetMessageUpdateSituationalTarget__Descriptor = Descriptor.MessageTypes[143];
        internal__static_Gazillion_NetMessageUpdateSituationalTarget__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUpdateSituationalTarget, global::Gazillion.NetMessageUpdateSituationalTarget.Builder>(internal__static_Gazillion_NetMessageUpdateSituationalTarget__Descriptor,
                new string[] { "PowerOwnerId", "SituationalPowerProtoId", "SituationalTargetId", "AddTarget", });
        internal__static_Gazillion_NetMessageConfirmStartNewGame__Descriptor = Descriptor.MessageTypes[144];
        internal__static_Gazillion_NetMessageConfirmStartNewGame__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageConfirmStartNewGame, global::Gazillion.NetMessageConfirmStartNewGame.Builder>(internal__static_Gazillion_NetMessageConfirmStartNewGame__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageModifyCommunityMemberFailure__Descriptor = Descriptor.MessageTypes[145];
        internal__static_Gazillion_NetMessageModifyCommunityMemberFailure__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageModifyCommunityMemberFailure, global::Gazillion.NetMessageModifyCommunityMemberFailure.Builder>(internal__static_Gazillion_NetMessageModifyCommunityMemberFailure__Descriptor,
                new string[] { "MemberToModifyName", "FailureCode", "CircleId", "Operation", });
        internal__static_Gazillion_NetMessageModifyCommunityMember__Descriptor = Descriptor.MessageTypes[146];
        internal__static_Gazillion_NetMessageModifyCommunityMember__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageModifyCommunityMember, global::Gazillion.NetMessageModifyCommunityMember.Builder>(internal__static_Gazillion_NetMessageModifyCommunityMember__Descriptor,
                new string[] { "Broadcast", "PlayerName", "SystemCirclesBitSet", });
        internal__static_Gazillion_NetMessageReceiveCommunityNotify__Descriptor = Descriptor.MessageTypes[147];
        internal__static_Gazillion_NetMessageReceiveCommunityNotify__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReceiveCommunityNotify, global::Gazillion.NetMessageReceiveCommunityNotify.Builder>(internal__static_Gazillion_NetMessageReceiveCommunityNotify__Descriptor,
                new string[] { "Notify", });
        internal__static_Gazillion_NetMessageItemBindingChanged__Descriptor = Descriptor.MessageTypes[148];
        internal__static_Gazillion_NetMessageItemBindingChanged__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageItemBindingChanged, global::Gazillion.NetMessageItemBindingChanged.Builder>(internal__static_Gazillion_NetMessageItemBindingChanged__Descriptor,
                new string[] { "ItemId", "AccountBound", "AvatarProtoId", });
        internal__static_Gazillion_NetMessageItemsHeldForRecovery__Descriptor = Descriptor.MessageTypes[149];
        internal__static_Gazillion_NetMessageItemsHeldForRecovery__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageItemsHeldForRecovery, global::Gazillion.NetMessageItemsHeldForRecovery.Builder>(internal__static_Gazillion_NetMessageItemsHeldForRecovery__Descriptor,
                new string[] { "ItemIds", });
        internal__static_Gazillion_NetMessageItemRecovered__Descriptor = Descriptor.MessageTypes[150];
        internal__static_Gazillion_NetMessageItemRecovered__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageItemRecovered, global::Gazillion.NetMessageItemRecovered.Builder>(internal__static_Gazillion_NetMessageItemRecovered__Descriptor,
                new string[] { "ItemId", });
        internal__static_Gazillion_NetMessageSwitchToPendingNewAvatarFailed__Descriptor = Descriptor.MessageTypes[151];
        internal__static_Gazillion_NetMessageSwitchToPendingNewAvatarFailed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSwitchToPendingNewAvatarFailed, global::Gazillion.NetMessageSwitchToPendingNewAvatarFailed.Builder>(internal__static_Gazillion_NetMessageSwitchToPendingNewAvatarFailed__Descriptor,
                new string[] { "TargetId", "InvalidLocation", });
        internal__static_Gazillion_NetMessageGuildMessageToClient__Descriptor = Descriptor.MessageTypes[152];
        internal__static_Gazillion_NetMessageGuildMessageToClient__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGuildMessageToClient, global::Gazillion.NetMessageGuildMessageToClient.Builder>(internal__static_Gazillion_NetMessageGuildMessageToClient__Descriptor,
                new string[] { "Messages", });
        internal__static_Gazillion_NetMessageEntityGuildInfo__Descriptor = Descriptor.MessageTypes[153];
        internal__static_Gazillion_NetMessageEntityGuildInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityGuildInfo, global::Gazillion.NetMessageEntityGuildInfo.Builder>(internal__static_Gazillion_NetMessageEntityGuildInfo__Descriptor,
                new string[] { "EntityId", "GuildId", "GuildName", "GuildMembership", "DebugEntityServerString", });
        internal__static_Gazillion_NetMessageLeaveGuild__Descriptor = Descriptor.MessageTypes[154];
        internal__static_Gazillion_NetMessageLeaveGuild__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaveGuild, global::Gazillion.NetMessageLeaveGuild.Builder>(internal__static_Gazillion_NetMessageLeaveGuild__Descriptor,
                new string[] { "GuildId", "Reason", "InitiatingPlayerName", });
        internal__static_Gazillion_NetMessageGuildSystemMessage__Descriptor = Descriptor.MessageTypes[155];
        internal__static_Gazillion_NetMessageGuildSystemMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGuildSystemMessage, global::Gazillion.NetMessageGuildSystemMessage.Builder>(internal__static_Gazillion_NetMessageGuildSystemMessage__Descriptor,
                new string[] { "Code", });
        internal__static_Gazillion_NetMessageRegionDifficultyChange__Descriptor = Descriptor.MessageTypes[156];
        internal__static_Gazillion_NetMessageRegionDifficultyChange__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionDifficultyChange, global::Gazillion.NetMessageRegionDifficultyChange.Builder>(internal__static_Gazillion_NetMessageRegionDifficultyChange__Descriptor,
                new string[] { "DifficultyIndex", });
        internal__static_Gazillion_NetMessageMetaGameWaveUpdate__Descriptor = Descriptor.MessageTypes[157];
        internal__static_Gazillion_NetMessageMetaGameWaveUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMetaGameWaveUpdate, global::Gazillion.NetMessageMetaGameWaveUpdate.Builder>(internal__static_Gazillion_NetMessageMetaGameWaveUpdate__Descriptor,
                new string[] { "CurrentWaveCount", "MaxWaveCount", "MetaGameId", });
        internal__static_Gazillion_NetMessagePvEInstanceCrystalUpdate__Descriptor = Descriptor.MessageTypes[158];
        internal__static_Gazillion_NetMessagePvEInstanceCrystalUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvEInstanceCrystalUpdate, global::Gazillion.NetMessagePvEInstanceCrystalUpdate.Builder>(internal__static_Gazillion_NetMessagePvEInstanceCrystalUpdate__Descriptor,
                new string[] { "CurrentCrystalCount", "MaxCrystalCount", "MetaGameId", });
        internal__static_Gazillion_NetMessagePvEInstanceDeathUpdate__Descriptor = Descriptor.MessageTypes[159];
        internal__static_Gazillion_NetMessagePvEInstanceDeathUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvEInstanceDeathUpdate, global::Gazillion.NetMessagePvEInstanceDeathUpdate.Builder>(internal__static_Gazillion_NetMessagePvEInstanceDeathUpdate__Descriptor,
                new string[] { "CurrentDeathCount", "MetaGameId", });
        internal__static_Gazillion_NetMessageShowTutorialTip__Descriptor = Descriptor.MessageTypes[160];
        internal__static_Gazillion_NetMessageShowTutorialTip__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShowTutorialTip, global::Gazillion.NetMessageShowTutorialTip.Builder>(internal__static_Gazillion_NetMessageShowTutorialTip__Descriptor,
                new string[] { "TipDataRefId", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Gazillion.GazillionCommon.RegisterAllExtensions(registry);
        global::Gazillion.CommonMessages.RegisterAllExtensions(registry);
        global::Gazillion.ChatCommon.RegisterAllExtensions(registry);
        global::Gazillion.MatchCommon.RegisterAllExtensions(registry);
        global::Gazillion.BillingCommon.RegisterAllExtensions(registry);
        global::Gazillion.Guild.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Gazillion.GazillionCommon.Descriptor, 
          global::Gazillion.CommonMessages.Descriptor, 
          global::Gazillion.ChatCommon.Descriptor, 
          global::Gazillion.MatchCommon.Descriptor, 
          global::Gazillion.BillingCommon.Descriptor, 
          global::Gazillion.Guild.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum ForceDisconnectReason {
    eFDR_ErrorLoadingCharacter = 1,
    eFDR_CheckpointFailed = 2,
    eFDR_UnableToCreateRegion = 3,
    eFDR_FulfillmentFailed = 4,
  }
  
  public enum CommunityModifyFailureCode {
    eCMFC_Timeout = 1,
    eCMFC_NoOnlinePlayer = 2,
  }
  
  public enum GuildLeaveReason {
    eGLR_Left = 1,
    eGLR_Kicked = 2,
  }
  
  public enum GuildMessageCode {
    eGMC_None = 1,
    eGMC_GuildNameDirty = 2,
    eGMC_ServicesDown = 3,
    eGMC_GuildNameInvalidCharacters = 4,
    eGMC_GuildNameTooShort = 5,
    eGMC_GuildNameTooLong = 6,
    eGMC_GuildNameIdentical = 7,
    eGMC_GuildNotInGuild = 8,
    eGMC_GuildsLocked = 9,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageReadyAndLoggedIn : pb::GeneratedMessage<NetMessageReadyAndLoggedIn, NetMessageReadyAndLoggedIn.Builder> {
    private NetMessageReadyAndLoggedIn() { }
    private static readonly NetMessageReadyAndLoggedIn defaultInstance = new NetMessageReadyAndLoggedIn().MakeReadOnly();
    private static readonly string[] _netMessageReadyAndLoggedInFieldNames = new string[] {  };
    private static readonly uint[] _netMessageReadyAndLoggedInFieldTags = new uint[] {  };
    public static NetMessageReadyAndLoggedIn DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageReadyAndLoggedIn DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageReadyAndLoggedIn ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReadyAndLoggedIn__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageReadyAndLoggedIn, NetMessageReadyAndLoggedIn.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReadyAndLoggedIn__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageReadyAndLoggedInFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageReadyAndLoggedIn ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReadyAndLoggedIn ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyAndLoggedIn ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReadyAndLoggedIn ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyAndLoggedIn ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReadyAndLoggedIn ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyAndLoggedIn ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageReadyAndLoggedIn ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageReadyAndLoggedIn ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReadyAndLoggedIn ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageReadyAndLoggedIn MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageReadyAndLoggedIn prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageReadyAndLoggedIn, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageReadyAndLoggedIn cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageReadyAndLoggedIn result;
      
      private NetMessageReadyAndLoggedIn PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageReadyAndLoggedIn original = result;
          result = new NetMessageReadyAndLoggedIn();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageReadyAndLoggedIn MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageReadyAndLoggedIn.Descriptor; }
      }
      
      public override NetMessageReadyAndLoggedIn DefaultInstanceForType {
        get { return global::Gazillion.NetMessageReadyAndLoggedIn.DefaultInstance; }
      }
      
      public override NetMessageReadyAndLoggedIn BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageReadyAndLoggedIn) {
          return MergeFrom((NetMessageReadyAndLoggedIn) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageReadyAndLoggedIn other) {
        if (other == global::Gazillion.NetMessageReadyAndLoggedIn.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageReadyAndLoggedInFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageReadyAndLoggedInFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageReadyAndLoggedIn() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageReadyForTimeSync : pb::GeneratedMessage<NetMessageReadyForTimeSync, NetMessageReadyForTimeSync.Builder> {
    private NetMessageReadyForTimeSync() { }
    private static readonly NetMessageReadyForTimeSync defaultInstance = new NetMessageReadyForTimeSync().MakeReadOnly();
    private static readonly string[] _netMessageReadyForTimeSyncFieldNames = new string[] {  };
    private static readonly uint[] _netMessageReadyForTimeSyncFieldTags = new uint[] {  };
    public static NetMessageReadyForTimeSync DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageReadyForTimeSync DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageReadyForTimeSync ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReadyForTimeSync__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageReadyForTimeSync, NetMessageReadyForTimeSync.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReadyForTimeSync__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageReadyForTimeSyncFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageReadyForTimeSync ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReadyForTimeSync ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyForTimeSync ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReadyForTimeSync ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyForTimeSync ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReadyForTimeSync ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyForTimeSync ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageReadyForTimeSync ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageReadyForTimeSync ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReadyForTimeSync ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageReadyForTimeSync MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageReadyForTimeSync prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageReadyForTimeSync, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageReadyForTimeSync cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageReadyForTimeSync result;
      
      private NetMessageReadyForTimeSync PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageReadyForTimeSync original = result;
          result = new NetMessageReadyForTimeSync();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageReadyForTimeSync MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageReadyForTimeSync.Descriptor; }
      }
      
      public override NetMessageReadyForTimeSync DefaultInstanceForType {
        get { return global::Gazillion.NetMessageReadyForTimeSync.DefaultInstance; }
      }
      
      public override NetMessageReadyForTimeSync BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageReadyForTimeSync) {
          return MergeFrom((NetMessageReadyForTimeSync) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageReadyForTimeSync other) {
        if (other == global::Gazillion.NetMessageReadyForTimeSync.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageReadyForTimeSyncFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageReadyForTimeSyncFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageReadyForTimeSync() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLocalPlayer : pb::GeneratedMessage<NetMessageLocalPlayer, NetMessageLocalPlayer.Builder> {
    private NetMessageLocalPlayer() { }
    private static readonly NetMessageLocalPlayer defaultInstance = new NetMessageLocalPlayer().MakeReadOnly();
    private static readonly string[] _netMessageLocalPlayerFieldNames = new string[] { "localPlayerEntityId" };
    private static readonly uint[] _netMessageLocalPlayerFieldTags = new uint[] { 8 };
    public static NetMessageLocalPlayer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLocalPlayer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLocalPlayer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLocalPlayer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLocalPlayer, NetMessageLocalPlayer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLocalPlayer__FieldAccessorTable; }
    }
    
    public const int LocalPlayerEntityIdFieldNumber = 1;
    private bool hasLocalPlayerEntityId;
    private ulong localPlayerEntityId_;
    public bool HasLocalPlayerEntityId {
      get { return hasLocalPlayerEntityId; }
    }
    public ulong LocalPlayerEntityId {
      get { return localPlayerEntityId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLocalPlayerEntityId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLocalPlayerFieldNames;
      if (hasLocalPlayerEntityId) {
        output.WriteUInt64(1, field_names[0], LocalPlayerEntityId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLocalPlayerEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, LocalPlayerEntityId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLocalPlayer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLocalPlayer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLocalPlayer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLocalPlayer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLocalPlayer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLocalPlayer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLocalPlayer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLocalPlayer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLocalPlayer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLocalPlayer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLocalPlayer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLocalPlayer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLocalPlayer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLocalPlayer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLocalPlayer result;
      
      private NetMessageLocalPlayer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLocalPlayer original = result;
          result = new NetMessageLocalPlayer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLocalPlayer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLocalPlayer.Descriptor; }
      }
      
      public override NetMessageLocalPlayer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLocalPlayer.DefaultInstance; }
      }
      
      public override NetMessageLocalPlayer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLocalPlayer) {
          return MergeFrom((NetMessageLocalPlayer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLocalPlayer other) {
        if (other == global::Gazillion.NetMessageLocalPlayer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLocalPlayerEntityId) {
          LocalPlayerEntityId = other.LocalPlayerEntityId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLocalPlayerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLocalPlayerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLocalPlayerEntityId = input.ReadUInt64(ref result.localPlayerEntityId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLocalPlayerEntityId {
        get { return result.hasLocalPlayerEntityId; }
      }
      public ulong LocalPlayerEntityId {
        get { return result.LocalPlayerEntityId; }
        set { SetLocalPlayerEntityId(value); }
      }
      public Builder SetLocalPlayerEntityId(ulong value) {
        PrepareBuilder();
        result.hasLocalPlayerEntityId = true;
        result.localPlayerEntityId_ = value;
        return this;
      }
      public Builder ClearLocalPlayerEntityId() {
        PrepareBuilder();
        result.hasLocalPlayerEntityId = false;
        result.localPlayerEntityId_ = 0UL;
        return this;
      }
    }
    static NetMessageLocalPlayer() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityCreate : pb::GeneratedMessage<NetMessageEntityCreate, NetMessageEntityCreate.Builder> {
    private NetMessageEntityCreate() { }
    private static readonly NetMessageEntityCreate defaultInstance = new NetMessageEntityCreate().MakeReadOnly();
    private static readonly string[] _netMessageEntityCreateFieldNames = new string[] { "archiveData", "areaId", "cellId", "dbId", "idEntity", "initConditionComponent", "interestPolicies", "invLocContainerEntityId", "invLocInventoryPrototypeId", "invLocSlot", "isClientEntityHidden", "isNewOnServer", "locomotionState", "orientation", "overrideSnapToFloorOnSpawn", "position", "prototypeId", "sourceEntityId", "sourcePosition", "startFullInWorldHierarchyUpdate" };
    private static readonly uint[] _netMessageEntityCreateFieldTags = new uint[] { 26, 128, 120, 40, 16, 136, 32, 72, 80, 88, 152, 96, 66, 58, 144, 50, 8, 104, 114, 160 };
    public static NetMessageEntityCreate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityCreate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityCreate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityCreate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityCreate, NetMessageEntityCreate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityCreate__FieldAccessorTable; }
    }
    
    public const int PrototypeIdFieldNumber = 1;
    private bool hasPrototypeId;
    private ulong prototypeId_;
    public bool HasPrototypeId {
      get { return hasPrototypeId; }
    }
    public ulong PrototypeId {
      get { return prototypeId_; }
    }
    
    public const int IdEntityFieldNumber = 2;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int ArchiveDataFieldNumber = 3;
    private bool hasArchiveData;
    private pb::ByteString archiveData_ = pb::ByteString.Empty;
    public bool HasArchiveData {
      get { return hasArchiveData; }
    }
    public pb::ByteString ArchiveData {
      get { return archiveData_; }
    }
    
    public const int InterestPoliciesFieldNumber = 4;
    private bool hasInterestPolicies;
    private uint interestPolicies_;
    public bool HasInterestPolicies {
      get { return hasInterestPolicies; }
    }
    public uint InterestPolicies {
      get { return interestPolicies_; }
    }
    
    public const int DbIdFieldNumber = 5;
    private bool hasDbId;
    private ulong dbId_;
    public bool HasDbId {
      get { return hasDbId; }
    }
    public ulong DbId {
      get { return dbId_; }
    }
    
    public const int PositionFieldNumber = 6;
    private bool hasPosition;
    private global::Gazillion.NetStructPoint3 position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::Gazillion.NetStructPoint3 Position {
      get { return position_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int OrientationFieldNumber = 7;
    private bool hasOrientation;
    private global::Gazillion.NetStructPoint3 orientation_;
    public bool HasOrientation {
      get { return hasOrientation; }
    }
    public global::Gazillion.NetStructPoint3 Orientation {
      get { return orientation_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int LocomotionStateFieldNumber = 8;
    private bool hasLocomotionState;
    private global::Gazillion.NetStructLocomotionState locomotionState_;
    public bool HasLocomotionState {
      get { return hasLocomotionState; }
    }
    public global::Gazillion.NetStructLocomotionState LocomotionState {
      get { return locomotionState_ ?? global::Gazillion.NetStructLocomotionState.DefaultInstance; }
    }
    
    public const int InvLocContainerEntityIdFieldNumber = 9;
    private bool hasInvLocContainerEntityId;
    private ulong invLocContainerEntityId_;
    public bool HasInvLocContainerEntityId {
      get { return hasInvLocContainerEntityId; }
    }
    public ulong InvLocContainerEntityId {
      get { return invLocContainerEntityId_; }
    }
    
    public const int InvLocInventoryPrototypeIdFieldNumber = 10;
    private bool hasInvLocInventoryPrototypeId;
    private ulong invLocInventoryPrototypeId_;
    public bool HasInvLocInventoryPrototypeId {
      get { return hasInvLocInventoryPrototypeId; }
    }
    public ulong InvLocInventoryPrototypeId {
      get { return invLocInventoryPrototypeId_; }
    }
    
    public const int InvLocSlotFieldNumber = 11;
    private bool hasInvLocSlot;
    private uint invLocSlot_;
    public bool HasInvLocSlot {
      get { return hasInvLocSlot; }
    }
    public uint InvLocSlot {
      get { return invLocSlot_; }
    }
    
    public const int IsNewOnServerFieldNumber = 12;
    private bool hasIsNewOnServer;
    private bool isNewOnServer_;
    public bool HasIsNewOnServer {
      get { return hasIsNewOnServer; }
    }
    public bool IsNewOnServer {
      get { return isNewOnServer_; }
    }
    
    public const int SourceEntityIdFieldNumber = 13;
    private bool hasSourceEntityId;
    private ulong sourceEntityId_;
    public bool HasSourceEntityId {
      get { return hasSourceEntityId; }
    }
    public ulong SourceEntityId {
      get { return sourceEntityId_; }
    }
    
    public const int SourcePositionFieldNumber = 14;
    private bool hasSourcePosition;
    private global::Gazillion.NetStructPoint3 sourcePosition_;
    public bool HasSourcePosition {
      get { return hasSourcePosition; }
    }
    public global::Gazillion.NetStructPoint3 SourcePosition {
      get { return sourcePosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int CellIdFieldNumber = 15;
    private bool hasCellId;
    private uint cellId_;
    public bool HasCellId {
      get { return hasCellId; }
    }
    public uint CellId {
      get { return cellId_; }
    }
    
    public const int AreaIdFieldNumber = 16;
    private bool hasAreaId;
    private uint areaId_;
    public bool HasAreaId {
      get { return hasAreaId; }
    }
    public uint AreaId {
      get { return areaId_; }
    }
    
    public const int InitConditionComponentFieldNumber = 17;
    private bool hasInitConditionComponent;
    private bool initConditionComponent_;
    public bool HasInitConditionComponent {
      get { return hasInitConditionComponent; }
    }
    public bool InitConditionComponent {
      get { return initConditionComponent_; }
    }
    
    public const int OverrideSnapToFloorOnSpawnFieldNumber = 18;
    private bool hasOverrideSnapToFloorOnSpawn;
    private bool overrideSnapToFloorOnSpawn_;
    public bool HasOverrideSnapToFloorOnSpawn {
      get { return hasOverrideSnapToFloorOnSpawn; }
    }
    public bool OverrideSnapToFloorOnSpawn {
      get { return overrideSnapToFloorOnSpawn_; }
    }
    
    public const int IsClientEntityHiddenFieldNumber = 19;
    private bool hasIsClientEntityHidden;
    private bool isClientEntityHidden_;
    public bool HasIsClientEntityHidden {
      get { return hasIsClientEntityHidden; }
    }
    public bool IsClientEntityHidden {
      get { return isClientEntityHidden_; }
    }
    
    public const int StartFullInWorldHierarchyUpdateFieldNumber = 20;
    private bool hasStartFullInWorldHierarchyUpdate;
    private bool startFullInWorldHierarchyUpdate_;
    public bool HasStartFullInWorldHierarchyUpdate {
      get { return hasStartFullInWorldHierarchyUpdate; }
    }
    public bool StartFullInWorldHierarchyUpdate {
      get { return startFullInWorldHierarchyUpdate_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPrototypeId) return false;
        if (!hasIdEntity) return false;
        if (!hasArchiveData) return false;
        if (!hasInterestPolicies) return false;
        if (!hasDbId) return false;
        if (HasLocomotionState) {
          if (!LocomotionState.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityCreateFieldNames;
      if (hasPrototypeId) {
        output.WriteUInt64(1, field_names[16], PrototypeId);
      }
      if (hasIdEntity) {
        output.WriteUInt64(2, field_names[4], IdEntity);
      }
      if (hasArchiveData) {
        output.WriteBytes(3, field_names[0], ArchiveData);
      }
      if (hasInterestPolicies) {
        output.WriteUInt32(4, field_names[6], InterestPolicies);
      }
      if (hasDbId) {
        output.WriteUInt64(5, field_names[3], DbId);
      }
      if (hasPosition) {
        output.WriteMessage(6, field_names[15], Position);
      }
      if (hasOrientation) {
        output.WriteMessage(7, field_names[13], Orientation);
      }
      if (hasLocomotionState) {
        output.WriteMessage(8, field_names[12], LocomotionState);
      }
      if (hasInvLocContainerEntityId) {
        output.WriteUInt64(9, field_names[7], InvLocContainerEntityId);
      }
      if (hasInvLocInventoryPrototypeId) {
        output.WriteUInt64(10, field_names[8], InvLocInventoryPrototypeId);
      }
      if (hasInvLocSlot) {
        output.WriteUInt32(11, field_names[9], InvLocSlot);
      }
      if (hasIsNewOnServer) {
        output.WriteBool(12, field_names[11], IsNewOnServer);
      }
      if (hasSourceEntityId) {
        output.WriteUInt64(13, field_names[17], SourceEntityId);
      }
      if (hasSourcePosition) {
        output.WriteMessage(14, field_names[18], SourcePosition);
      }
      if (hasCellId) {
        output.WriteUInt32(15, field_names[2], CellId);
      }
      if (hasAreaId) {
        output.WriteUInt32(16, field_names[1], AreaId);
      }
      if (hasInitConditionComponent) {
        output.WriteBool(17, field_names[5], InitConditionComponent);
      }
      if (hasOverrideSnapToFloorOnSpawn) {
        output.WriteBool(18, field_names[14], OverrideSnapToFloorOnSpawn);
      }
      if (hasIsClientEntityHidden) {
        output.WriteBool(19, field_names[10], IsClientEntityHidden);
      }
      if (hasStartFullInWorldHierarchyUpdate) {
        output.WriteBool(20, field_names[19], StartFullInWorldHierarchyUpdate);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PrototypeId);
      }
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, IdEntity);
      }
      if (hasArchiveData) {
        size += pb::CodedOutputStream.ComputeBytesSize(3, ArchiveData);
      }
      if (hasInterestPolicies) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, InterestPolicies);
      }
      if (hasDbId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, DbId);
      }
      if (hasPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, Position);
      }
      if (hasOrientation) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, Orientation);
      }
      if (hasLocomotionState) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, LocomotionState);
      }
      if (hasInvLocContainerEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(9, InvLocContainerEntityId);
      }
      if (hasInvLocInventoryPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(10, InvLocInventoryPrototypeId);
      }
      if (hasInvLocSlot) {
        size += pb::CodedOutputStream.ComputeUInt32Size(11, InvLocSlot);
      }
      if (hasIsNewOnServer) {
        size += pb::CodedOutputStream.ComputeBoolSize(12, IsNewOnServer);
      }
      if (hasSourceEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(13, SourceEntityId);
      }
      if (hasSourcePosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(14, SourcePosition);
      }
      if (hasCellId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(15, CellId);
      }
      if (hasAreaId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(16, AreaId);
      }
      if (hasInitConditionComponent) {
        size += pb::CodedOutputStream.ComputeBoolSize(17, InitConditionComponent);
      }
      if (hasOverrideSnapToFloorOnSpawn) {
        size += pb::CodedOutputStream.ComputeBoolSize(18, OverrideSnapToFloorOnSpawn);
      }
      if (hasIsClientEntityHidden) {
        size += pb::CodedOutputStream.ComputeBoolSize(19, IsClientEntityHidden);
      }
      if (hasStartFullInWorldHierarchyUpdate) {
        size += pb::CodedOutputStream.ComputeBoolSize(20, StartFullInWorldHierarchyUpdate);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityCreate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityCreate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityCreate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityCreate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityCreate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityCreate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityCreate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityCreate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityCreate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityCreate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityCreate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityCreate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityCreate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityCreate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityCreate result;
      
      private NetMessageEntityCreate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityCreate original = result;
          result = new NetMessageEntityCreate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityCreate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityCreate.Descriptor; }
      }
      
      public override NetMessageEntityCreate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityCreate.DefaultInstance; }
      }
      
      public override NetMessageEntityCreate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityCreate) {
          return MergeFrom((NetMessageEntityCreate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityCreate other) {
        if (other == global::Gazillion.NetMessageEntityCreate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPrototypeId) {
          PrototypeId = other.PrototypeId;
        }
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasArchiveData) {
          ArchiveData = other.ArchiveData;
        }
        if (other.HasInterestPolicies) {
          InterestPolicies = other.InterestPolicies;
        }
        if (other.HasDbId) {
          DbId = other.DbId;
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasOrientation) {
          MergeOrientation(other.Orientation);
        }
        if (other.HasLocomotionState) {
          MergeLocomotionState(other.LocomotionState);
        }
        if (other.HasInvLocContainerEntityId) {
          InvLocContainerEntityId = other.InvLocContainerEntityId;
        }
        if (other.HasInvLocInventoryPrototypeId) {
          InvLocInventoryPrototypeId = other.InvLocInventoryPrototypeId;
        }
        if (other.HasInvLocSlot) {
          InvLocSlot = other.InvLocSlot;
        }
        if (other.HasIsNewOnServer) {
          IsNewOnServer = other.IsNewOnServer;
        }
        if (other.HasSourceEntityId) {
          SourceEntityId = other.SourceEntityId;
        }
        if (other.HasSourcePosition) {
          MergeSourcePosition(other.SourcePosition);
        }
        if (other.HasCellId) {
          CellId = other.CellId;
        }
        if (other.HasAreaId) {
          AreaId = other.AreaId;
        }
        if (other.HasInitConditionComponent) {
          InitConditionComponent = other.InitConditionComponent;
        }
        if (other.HasOverrideSnapToFloorOnSpawn) {
          OverrideSnapToFloorOnSpawn = other.OverrideSnapToFloorOnSpawn;
        }
        if (other.HasIsClientEntityHidden) {
          IsClientEntityHidden = other.IsClientEntityHidden;
        }
        if (other.HasStartFullInWorldHierarchyUpdate) {
          StartFullInWorldHierarchyUpdate = other.StartFullInWorldHierarchyUpdate;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityCreateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityCreateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPrototypeId = input.ReadUInt64(ref result.prototypeId_);
              break;
            }
            case 16: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 26: {
              result.hasArchiveData = input.ReadBytes(ref result.archiveData_);
              break;
            }
            case 32: {
              result.hasInterestPolicies = input.ReadUInt32(ref result.interestPolicies_);
              break;
            }
            case 40: {
              result.hasDbId = input.ReadUInt64(ref result.dbId_);
              break;
            }
            case 50: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasOrientation) {
                subBuilder.MergeFrom(Orientation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Orientation = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::Gazillion.NetStructLocomotionState.Builder subBuilder = global::Gazillion.NetStructLocomotionState.CreateBuilder();
              if (result.hasLocomotionState) {
                subBuilder.MergeFrom(LocomotionState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LocomotionState = subBuilder.BuildPartial();
              break;
            }
            case 72: {
              result.hasInvLocContainerEntityId = input.ReadUInt64(ref result.invLocContainerEntityId_);
              break;
            }
            case 80: {
              result.hasInvLocInventoryPrototypeId = input.ReadUInt64(ref result.invLocInventoryPrototypeId_);
              break;
            }
            case 88: {
              result.hasInvLocSlot = input.ReadUInt32(ref result.invLocSlot_);
              break;
            }
            case 96: {
              result.hasIsNewOnServer = input.ReadBool(ref result.isNewOnServer_);
              break;
            }
            case 104: {
              result.hasSourceEntityId = input.ReadUInt64(ref result.sourceEntityId_);
              break;
            }
            case 114: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasSourcePosition) {
                subBuilder.MergeFrom(SourcePosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SourcePosition = subBuilder.BuildPartial();
              break;
            }
            case 120: {
              result.hasCellId = input.ReadUInt32(ref result.cellId_);
              break;
            }
            case 128: {
              result.hasAreaId = input.ReadUInt32(ref result.areaId_);
              break;
            }
            case 136: {
              result.hasInitConditionComponent = input.ReadBool(ref result.initConditionComponent_);
              break;
            }
            case 144: {
              result.hasOverrideSnapToFloorOnSpawn = input.ReadBool(ref result.overrideSnapToFloorOnSpawn_);
              break;
            }
            case 152: {
              result.hasIsClientEntityHidden = input.ReadBool(ref result.isClientEntityHidden_);
              break;
            }
            case 160: {
              result.hasStartFullInWorldHierarchyUpdate = input.ReadBool(ref result.startFullInWorldHierarchyUpdate_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPrototypeId {
        get { return result.hasPrototypeId; }
      }
      public ulong PrototypeId {
        get { return result.PrototypeId; }
        set { SetPrototypeId(value); }
      }
      public Builder SetPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPrototypeId = true;
        result.prototypeId_ = value;
        return this;
      }
      public Builder ClearPrototypeId() {
        PrepareBuilder();
        result.hasPrototypeId = false;
        result.prototypeId_ = 0UL;
        return this;
      }
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasArchiveData {
        get { return result.hasArchiveData; }
      }
      public pb::ByteString ArchiveData {
        get { return result.ArchiveData; }
        set { SetArchiveData(value); }
      }
      public Builder SetArchiveData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasArchiveData = true;
        result.archiveData_ = value;
        return this;
      }
      public Builder ClearArchiveData() {
        PrepareBuilder();
        result.hasArchiveData = false;
        result.archiveData_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasInterestPolicies {
        get { return result.hasInterestPolicies; }
      }
      public uint InterestPolicies {
        get { return result.InterestPolicies; }
        set { SetInterestPolicies(value); }
      }
      public Builder SetInterestPolicies(uint value) {
        PrepareBuilder();
        result.hasInterestPolicies = true;
        result.interestPolicies_ = value;
        return this;
      }
      public Builder ClearInterestPolicies() {
        PrepareBuilder();
        result.hasInterestPolicies = false;
        result.interestPolicies_ = 0;
        return this;
      }
      
      public bool HasDbId {
        get { return result.hasDbId; }
      }
      public ulong DbId {
        get { return result.DbId; }
        set { SetDbId(value); }
      }
      public Builder SetDbId(ulong value) {
        PrepareBuilder();
        result.hasDbId = true;
        result.dbId_ = value;
        return this;
      }
      public Builder ClearDbId() {
        PrepareBuilder();
        result.hasDbId = false;
        result.dbId_ = 0UL;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::Gazillion.NetStructPoint3 Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.position_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasOrientation {
       get { return result.hasOrientation; }
      }
      public global::Gazillion.NetStructPoint3 Orientation {
        get { return result.Orientation; }
        set { SetOrientation(value); }
      }
      public Builder SetOrientation(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrientation = true;
        result.orientation_ = value;
        return this;
      }
      public Builder SetOrientation(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOrientation = true;
        result.orientation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOrientation(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOrientation &&
            result.orientation_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.orientation_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.orientation_).MergeFrom(value).BuildPartial();
        } else {
          result.orientation_ = value;
        }
        result.hasOrientation = true;
        return this;
      }
      public Builder ClearOrientation() {
        PrepareBuilder();
        result.hasOrientation = false;
        result.orientation_ = null;
        return this;
      }
      
      public bool HasLocomotionState {
       get { return result.hasLocomotionState; }
      }
      public global::Gazillion.NetStructLocomotionState LocomotionState {
        get { return result.LocomotionState; }
        set { SetLocomotionState(value); }
      }
      public Builder SetLocomotionState(global::Gazillion.NetStructLocomotionState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocomotionState = true;
        result.locomotionState_ = value;
        return this;
      }
      public Builder SetLocomotionState(global::Gazillion.NetStructLocomotionState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLocomotionState = true;
        result.locomotionState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLocomotionState(global::Gazillion.NetStructLocomotionState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLocomotionState &&
            result.locomotionState_ != global::Gazillion.NetStructLocomotionState.DefaultInstance) {
            result.locomotionState_ = global::Gazillion.NetStructLocomotionState.CreateBuilder(result.locomotionState_).MergeFrom(value).BuildPartial();
        } else {
          result.locomotionState_ = value;
        }
        result.hasLocomotionState = true;
        return this;
      }
      public Builder ClearLocomotionState() {
        PrepareBuilder();
        result.hasLocomotionState = false;
        result.locomotionState_ = null;
        return this;
      }
      
      public bool HasInvLocContainerEntityId {
        get { return result.hasInvLocContainerEntityId; }
      }
      public ulong InvLocContainerEntityId {
        get { return result.InvLocContainerEntityId; }
        set { SetInvLocContainerEntityId(value); }
      }
      public Builder SetInvLocContainerEntityId(ulong value) {
        PrepareBuilder();
        result.hasInvLocContainerEntityId = true;
        result.invLocContainerEntityId_ = value;
        return this;
      }
      public Builder ClearInvLocContainerEntityId() {
        PrepareBuilder();
        result.hasInvLocContainerEntityId = false;
        result.invLocContainerEntityId_ = 0UL;
        return this;
      }
      
      public bool HasInvLocInventoryPrototypeId {
        get { return result.hasInvLocInventoryPrototypeId; }
      }
      public ulong InvLocInventoryPrototypeId {
        get { return result.InvLocInventoryPrototypeId; }
        set { SetInvLocInventoryPrototypeId(value); }
      }
      public Builder SetInvLocInventoryPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasInvLocInventoryPrototypeId = true;
        result.invLocInventoryPrototypeId_ = value;
        return this;
      }
      public Builder ClearInvLocInventoryPrototypeId() {
        PrepareBuilder();
        result.hasInvLocInventoryPrototypeId = false;
        result.invLocInventoryPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasInvLocSlot {
        get { return result.hasInvLocSlot; }
      }
      public uint InvLocSlot {
        get { return result.InvLocSlot; }
        set { SetInvLocSlot(value); }
      }
      public Builder SetInvLocSlot(uint value) {
        PrepareBuilder();
        result.hasInvLocSlot = true;
        result.invLocSlot_ = value;
        return this;
      }
      public Builder ClearInvLocSlot() {
        PrepareBuilder();
        result.hasInvLocSlot = false;
        result.invLocSlot_ = 0;
        return this;
      }
      
      public bool HasIsNewOnServer {
        get { return result.hasIsNewOnServer; }
      }
      public bool IsNewOnServer {
        get { return result.IsNewOnServer; }
        set { SetIsNewOnServer(value); }
      }
      public Builder SetIsNewOnServer(bool value) {
        PrepareBuilder();
        result.hasIsNewOnServer = true;
        result.isNewOnServer_ = value;
        return this;
      }
      public Builder ClearIsNewOnServer() {
        PrepareBuilder();
        result.hasIsNewOnServer = false;
        result.isNewOnServer_ = false;
        return this;
      }
      
      public bool HasSourceEntityId {
        get { return result.hasSourceEntityId; }
      }
      public ulong SourceEntityId {
        get { return result.SourceEntityId; }
        set { SetSourceEntityId(value); }
      }
      public Builder SetSourceEntityId(ulong value) {
        PrepareBuilder();
        result.hasSourceEntityId = true;
        result.sourceEntityId_ = value;
        return this;
      }
      public Builder ClearSourceEntityId() {
        PrepareBuilder();
        result.hasSourceEntityId = false;
        result.sourceEntityId_ = 0UL;
        return this;
      }
      
      public bool HasSourcePosition {
       get { return result.hasSourcePosition; }
      }
      public global::Gazillion.NetStructPoint3 SourcePosition {
        get { return result.SourcePosition; }
        set { SetSourcePosition(value); }
      }
      public Builder SetSourcePosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSourcePosition = true;
        result.sourcePosition_ = value;
        return this;
      }
      public Builder SetSourcePosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSourcePosition = true;
        result.sourcePosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSourcePosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSourcePosition &&
            result.sourcePosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.sourcePosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.sourcePosition_).MergeFrom(value).BuildPartial();
        } else {
          result.sourcePosition_ = value;
        }
        result.hasSourcePosition = true;
        return this;
      }
      public Builder ClearSourcePosition() {
        PrepareBuilder();
        result.hasSourcePosition = false;
        result.sourcePosition_ = null;
        return this;
      }
      
      public bool HasCellId {
        get { return result.hasCellId; }
      }
      public uint CellId {
        get { return result.CellId; }
        set { SetCellId(value); }
      }
      public Builder SetCellId(uint value) {
        PrepareBuilder();
        result.hasCellId = true;
        result.cellId_ = value;
        return this;
      }
      public Builder ClearCellId() {
        PrepareBuilder();
        result.hasCellId = false;
        result.cellId_ = 0;
        return this;
      }
      
      public bool HasAreaId {
        get { return result.hasAreaId; }
      }
      public uint AreaId {
        get { return result.AreaId; }
        set { SetAreaId(value); }
      }
      public Builder SetAreaId(uint value) {
        PrepareBuilder();
        result.hasAreaId = true;
        result.areaId_ = value;
        return this;
      }
      public Builder ClearAreaId() {
        PrepareBuilder();
        result.hasAreaId = false;
        result.areaId_ = 0;
        return this;
      }
      
      public bool HasInitConditionComponent {
        get { return result.hasInitConditionComponent; }
      }
      public bool InitConditionComponent {
        get { return result.InitConditionComponent; }
        set { SetInitConditionComponent(value); }
      }
      public Builder SetInitConditionComponent(bool value) {
        PrepareBuilder();
        result.hasInitConditionComponent = true;
        result.initConditionComponent_ = value;
        return this;
      }
      public Builder ClearInitConditionComponent() {
        PrepareBuilder();
        result.hasInitConditionComponent = false;
        result.initConditionComponent_ = false;
        return this;
      }
      
      public bool HasOverrideSnapToFloorOnSpawn {
        get { return result.hasOverrideSnapToFloorOnSpawn; }
      }
      public bool OverrideSnapToFloorOnSpawn {
        get { return result.OverrideSnapToFloorOnSpawn; }
        set { SetOverrideSnapToFloorOnSpawn(value); }
      }
      public Builder SetOverrideSnapToFloorOnSpawn(bool value) {
        PrepareBuilder();
        result.hasOverrideSnapToFloorOnSpawn = true;
        result.overrideSnapToFloorOnSpawn_ = value;
        return this;
      }
      public Builder ClearOverrideSnapToFloorOnSpawn() {
        PrepareBuilder();
        result.hasOverrideSnapToFloorOnSpawn = false;
        result.overrideSnapToFloorOnSpawn_ = false;
        return this;
      }
      
      public bool HasIsClientEntityHidden {
        get { return result.hasIsClientEntityHidden; }
      }
      public bool IsClientEntityHidden {
        get { return result.IsClientEntityHidden; }
        set { SetIsClientEntityHidden(value); }
      }
      public Builder SetIsClientEntityHidden(bool value) {
        PrepareBuilder();
        result.hasIsClientEntityHidden = true;
        result.isClientEntityHidden_ = value;
        return this;
      }
      public Builder ClearIsClientEntityHidden() {
        PrepareBuilder();
        result.hasIsClientEntityHidden = false;
        result.isClientEntityHidden_ = false;
        return this;
      }
      
      public bool HasStartFullInWorldHierarchyUpdate {
        get { return result.hasStartFullInWorldHierarchyUpdate; }
      }
      public bool StartFullInWorldHierarchyUpdate {
        get { return result.StartFullInWorldHierarchyUpdate; }
        set { SetStartFullInWorldHierarchyUpdate(value); }
      }
      public Builder SetStartFullInWorldHierarchyUpdate(bool value) {
        PrepareBuilder();
        result.hasStartFullInWorldHierarchyUpdate = true;
        result.startFullInWorldHierarchyUpdate_ = value;
        return this;
      }
      public Builder ClearStartFullInWorldHierarchyUpdate() {
        PrepareBuilder();
        result.hasStartFullInWorldHierarchyUpdate = false;
        result.startFullInWorldHierarchyUpdate_ = false;
        return this;
      }
    }
    static NetMessageEntityCreate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityDestroy : pb::GeneratedMessage<NetMessageEntityDestroy, NetMessageEntityDestroy.Builder> {
    private NetMessageEntityDestroy() { }
    private static readonly NetMessageEntityDestroy defaultInstance = new NetMessageEntityDestroy().MakeReadOnly();
    private static readonly string[] _netMessageEntityDestroyFieldNames = new string[] { "areaId", "cellId", "entityServerString", "idEntity", "ownerEntityId", "ownerPrototypeId", "position", "prototypeId", "regionId" };
    private static readonly uint[] _netMessageEntityDestroyFieldTags = new uint[] { 32, 24, 74, 8, 56, 64, 50, 16, 40 };
    public static NetMessageEntityDestroy DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityDestroy DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityDestroy ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityDestroy__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityDestroy, NetMessageEntityDestroy.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityDestroy__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int PrototypeIdFieldNumber = 2;
    private bool hasPrototypeId;
    private ulong prototypeId_;
    public bool HasPrototypeId {
      get { return hasPrototypeId; }
    }
    public ulong PrototypeId {
      get { return prototypeId_; }
    }
    
    public const int CellIdFieldNumber = 3;
    private bool hasCellId;
    private uint cellId_;
    public bool HasCellId {
      get { return hasCellId; }
    }
    public uint CellId {
      get { return cellId_; }
    }
    
    public const int AreaIdFieldNumber = 4;
    private bool hasAreaId;
    private uint areaId_;
    public bool HasAreaId {
      get { return hasAreaId; }
    }
    public uint AreaId {
      get { return areaId_; }
    }
    
    public const int RegionIdFieldNumber = 5;
    private bool hasRegionId;
    private ulong regionId_;
    public bool HasRegionId {
      get { return hasRegionId; }
    }
    public ulong RegionId {
      get { return regionId_; }
    }
    
    public const int PositionFieldNumber = 6;
    private bool hasPosition;
    private global::Gazillion.NetStructPoint3 position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::Gazillion.NetStructPoint3 Position {
      get { return position_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int OwnerEntityIdFieldNumber = 7;
    private bool hasOwnerEntityId;
    private ulong ownerEntityId_;
    public bool HasOwnerEntityId {
      get { return hasOwnerEntityId; }
    }
    public ulong OwnerEntityId {
      get { return ownerEntityId_; }
    }
    
    public const int OwnerPrototypeIdFieldNumber = 8;
    private bool hasOwnerPrototypeId;
    private ulong ownerPrototypeId_;
    public bool HasOwnerPrototypeId {
      get { return hasOwnerPrototypeId; }
    }
    public ulong OwnerPrototypeId {
      get { return ownerPrototypeId_; }
    }
    
    public const int EntityServerStringFieldNumber = 9;
    private bool hasEntityServerString;
    private string entityServerString_ = "";
    public bool HasEntityServerString {
      get { return hasEntityServerString; }
    }
    public string EntityServerString {
      get { return entityServerString_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityDestroyFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[3], IdEntity);
      }
      if (hasPrototypeId) {
        output.WriteUInt64(2, field_names[7], PrototypeId);
      }
      if (hasCellId) {
        output.WriteUInt32(3, field_names[1], CellId);
      }
      if (hasAreaId) {
        output.WriteUInt32(4, field_names[0], AreaId);
      }
      if (hasRegionId) {
        output.WriteUInt64(5, field_names[8], RegionId);
      }
      if (hasPosition) {
        output.WriteMessage(6, field_names[6], Position);
      }
      if (hasOwnerEntityId) {
        output.WriteUInt64(7, field_names[4], OwnerEntityId);
      }
      if (hasOwnerPrototypeId) {
        output.WriteUInt64(8, field_names[5], OwnerPrototypeId);
      }
      if (hasEntityServerString) {
        output.WriteString(9, field_names[2], EntityServerString);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PrototypeId);
      }
      if (hasCellId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, CellId);
      }
      if (hasAreaId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, AreaId);
      }
      if (hasRegionId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, RegionId);
      }
      if (hasPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, Position);
      }
      if (hasOwnerEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(7, OwnerEntityId);
      }
      if (hasOwnerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(8, OwnerPrototypeId);
      }
      if (hasEntityServerString) {
        size += pb::CodedOutputStream.ComputeStringSize(9, EntityServerString);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityDestroy ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityDestroy ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityDestroy ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityDestroy ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityDestroy ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityDestroy ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityDestroy ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityDestroy ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityDestroy ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityDestroy ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityDestroy MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityDestroy prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityDestroy, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityDestroy cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityDestroy result;
      
      private NetMessageEntityDestroy PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityDestroy original = result;
          result = new NetMessageEntityDestroy();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityDestroy MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityDestroy.Descriptor; }
      }
      
      public override NetMessageEntityDestroy DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityDestroy.DefaultInstance; }
      }
      
      public override NetMessageEntityDestroy BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityDestroy) {
          return MergeFrom((NetMessageEntityDestroy) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityDestroy other) {
        if (other == global::Gazillion.NetMessageEntityDestroy.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasPrototypeId) {
          PrototypeId = other.PrototypeId;
        }
        if (other.HasCellId) {
          CellId = other.CellId;
        }
        if (other.HasAreaId) {
          AreaId = other.AreaId;
        }
        if (other.HasRegionId) {
          RegionId = other.RegionId;
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasOwnerEntityId) {
          OwnerEntityId = other.OwnerEntityId;
        }
        if (other.HasOwnerPrototypeId) {
          OwnerPrototypeId = other.OwnerPrototypeId;
        }
        if (other.HasEntityServerString) {
          EntityServerString = other.EntityServerString;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityDestroyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityDestroyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 16: {
              result.hasPrototypeId = input.ReadUInt64(ref result.prototypeId_);
              break;
            }
            case 24: {
              result.hasCellId = input.ReadUInt32(ref result.cellId_);
              break;
            }
            case 32: {
              result.hasAreaId = input.ReadUInt32(ref result.areaId_);
              break;
            }
            case 40: {
              result.hasRegionId = input.ReadUInt64(ref result.regionId_);
              break;
            }
            case 50: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 56: {
              result.hasOwnerEntityId = input.ReadUInt64(ref result.ownerEntityId_);
              break;
            }
            case 64: {
              result.hasOwnerPrototypeId = input.ReadUInt64(ref result.ownerPrototypeId_);
              break;
            }
            case 74: {
              result.hasEntityServerString = input.ReadString(ref result.entityServerString_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasPrototypeId {
        get { return result.hasPrototypeId; }
      }
      public ulong PrototypeId {
        get { return result.PrototypeId; }
        set { SetPrototypeId(value); }
      }
      public Builder SetPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPrototypeId = true;
        result.prototypeId_ = value;
        return this;
      }
      public Builder ClearPrototypeId() {
        PrepareBuilder();
        result.hasPrototypeId = false;
        result.prototypeId_ = 0UL;
        return this;
      }
      
      public bool HasCellId {
        get { return result.hasCellId; }
      }
      public uint CellId {
        get { return result.CellId; }
        set { SetCellId(value); }
      }
      public Builder SetCellId(uint value) {
        PrepareBuilder();
        result.hasCellId = true;
        result.cellId_ = value;
        return this;
      }
      public Builder ClearCellId() {
        PrepareBuilder();
        result.hasCellId = false;
        result.cellId_ = 0;
        return this;
      }
      
      public bool HasAreaId {
        get { return result.hasAreaId; }
      }
      public uint AreaId {
        get { return result.AreaId; }
        set { SetAreaId(value); }
      }
      public Builder SetAreaId(uint value) {
        PrepareBuilder();
        result.hasAreaId = true;
        result.areaId_ = value;
        return this;
      }
      public Builder ClearAreaId() {
        PrepareBuilder();
        result.hasAreaId = false;
        result.areaId_ = 0;
        return this;
      }
      
      public bool HasRegionId {
        get { return result.hasRegionId; }
      }
      public ulong RegionId {
        get { return result.RegionId; }
        set { SetRegionId(value); }
      }
      public Builder SetRegionId(ulong value) {
        PrepareBuilder();
        result.hasRegionId = true;
        result.regionId_ = value;
        return this;
      }
      public Builder ClearRegionId() {
        PrepareBuilder();
        result.hasRegionId = false;
        result.regionId_ = 0UL;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::Gazillion.NetStructPoint3 Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.position_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasOwnerEntityId {
        get { return result.hasOwnerEntityId; }
      }
      public ulong OwnerEntityId {
        get { return result.OwnerEntityId; }
        set { SetOwnerEntityId(value); }
      }
      public Builder SetOwnerEntityId(ulong value) {
        PrepareBuilder();
        result.hasOwnerEntityId = true;
        result.ownerEntityId_ = value;
        return this;
      }
      public Builder ClearOwnerEntityId() {
        PrepareBuilder();
        result.hasOwnerEntityId = false;
        result.ownerEntityId_ = 0UL;
        return this;
      }
      
      public bool HasOwnerPrototypeId {
        get { return result.hasOwnerPrototypeId; }
      }
      public ulong OwnerPrototypeId {
        get { return result.OwnerPrototypeId; }
        set { SetOwnerPrototypeId(value); }
      }
      public Builder SetOwnerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasOwnerPrototypeId = true;
        result.ownerPrototypeId_ = value;
        return this;
      }
      public Builder ClearOwnerPrototypeId() {
        PrepareBuilder();
        result.hasOwnerPrototypeId = false;
        result.ownerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasEntityServerString {
        get { return result.hasEntityServerString; }
      }
      public string EntityServerString {
        get { return result.EntityServerString; }
        set { SetEntityServerString(value); }
      }
      public Builder SetEntityServerString(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEntityServerString = true;
        result.entityServerString_ = value;
        return this;
      }
      public Builder ClearEntityServerString() {
        PrepareBuilder();
        result.hasEntityServerString = false;
        result.entityServerString_ = "";
        return this;
      }
    }
    static NetMessageEntityDestroy() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageInventoryMove : pb::GeneratedMessage<NetMessageInventoryMove, NetMessageInventoryMove.Builder> {
    private NetMessageInventoryMove() { }
    private static readonly NetMessageInventoryMove defaultInstance = new NetMessageInventoryMove().MakeReadOnly();
    private static readonly string[] _netMessageInventoryMoveFieldNames = new string[] { "destOwnerDataId", "entityDataId", "entityId", "invLocContainerEntityId", "invLocInventoryPrototypeId", "invLocSlot", "requiredNoOwnerOnClient" };
    private static readonly uint[] _netMessageInventoryMoveFieldTags = new uint[] { 56, 48, 8, 16, 24, 32, 40 };
    public static NetMessageInventoryMove DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageInventoryMove DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageInventoryMove ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInventoryMove__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageInventoryMove, NetMessageInventoryMove.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInventoryMove__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public const int InvLocContainerEntityIdFieldNumber = 2;
    private bool hasInvLocContainerEntityId;
    private ulong invLocContainerEntityId_;
    public bool HasInvLocContainerEntityId {
      get { return hasInvLocContainerEntityId; }
    }
    public ulong InvLocContainerEntityId {
      get { return invLocContainerEntityId_; }
    }
    
    public const int InvLocInventoryPrototypeIdFieldNumber = 3;
    private bool hasInvLocInventoryPrototypeId;
    private ulong invLocInventoryPrototypeId_;
    public bool HasInvLocInventoryPrototypeId {
      get { return hasInvLocInventoryPrototypeId; }
    }
    public ulong InvLocInventoryPrototypeId {
      get { return invLocInventoryPrototypeId_; }
    }
    
    public const int InvLocSlotFieldNumber = 4;
    private bool hasInvLocSlot;
    private uint invLocSlot_;
    public bool HasInvLocSlot {
      get { return hasInvLocSlot; }
    }
    public uint InvLocSlot {
      get { return invLocSlot_; }
    }
    
    public const int RequiredNoOwnerOnClientFieldNumber = 5;
    private bool hasRequiredNoOwnerOnClient;
    private bool requiredNoOwnerOnClient_;
    public bool HasRequiredNoOwnerOnClient {
      get { return hasRequiredNoOwnerOnClient; }
    }
    public bool RequiredNoOwnerOnClient {
      get { return requiredNoOwnerOnClient_; }
    }
    
    public const int EntityDataIdFieldNumber = 6;
    private bool hasEntityDataId;
    private ulong entityDataId_;
    public bool HasEntityDataId {
      get { return hasEntityDataId; }
    }
    public ulong EntityDataId {
      get { return entityDataId_; }
    }
    
    public const int DestOwnerDataIdFieldNumber = 7;
    private bool hasDestOwnerDataId;
    private ulong destOwnerDataId_;
    public bool HasDestOwnerDataId {
      get { return hasDestOwnerDataId; }
    }
    public ulong DestOwnerDataId {
      get { return destOwnerDataId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasInvLocContainerEntityId) return false;
        if (!hasInvLocInventoryPrototypeId) return false;
        if (!hasInvLocSlot) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageInventoryMoveFieldNames;
      if (hasEntityId) {
        output.WriteUInt64(1, field_names[2], EntityId);
      }
      if (hasInvLocContainerEntityId) {
        output.WriteUInt64(2, field_names[3], InvLocContainerEntityId);
      }
      if (hasInvLocInventoryPrototypeId) {
        output.WriteUInt64(3, field_names[4], InvLocInventoryPrototypeId);
      }
      if (hasInvLocSlot) {
        output.WriteUInt32(4, field_names[5], InvLocSlot);
      }
      if (hasRequiredNoOwnerOnClient) {
        output.WriteBool(5, field_names[6], RequiredNoOwnerOnClient);
      }
      if (hasEntityDataId) {
        output.WriteUInt64(6, field_names[1], EntityDataId);
      }
      if (hasDestOwnerDataId) {
        output.WriteUInt64(7, field_names[0], DestOwnerDataId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityId);
      }
      if (hasInvLocContainerEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, InvLocContainerEntityId);
      }
      if (hasInvLocInventoryPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, InvLocInventoryPrototypeId);
      }
      if (hasInvLocSlot) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, InvLocSlot);
      }
      if (hasRequiredNoOwnerOnClient) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, RequiredNoOwnerOnClient);
      }
      if (hasEntityDataId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(6, EntityDataId);
      }
      if (hasDestOwnerDataId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(7, DestOwnerDataId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageInventoryMove ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryMove ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryMove ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryMove ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryMove ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryMove ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryMove ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageInventoryMove ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageInventoryMove ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryMove ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageInventoryMove MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageInventoryMove prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageInventoryMove, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageInventoryMove cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageInventoryMove result;
      
      private NetMessageInventoryMove PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageInventoryMove original = result;
          result = new NetMessageInventoryMove();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageInventoryMove MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageInventoryMove.Descriptor; }
      }
      
      public override NetMessageInventoryMove DefaultInstanceForType {
        get { return global::Gazillion.NetMessageInventoryMove.DefaultInstance; }
      }
      
      public override NetMessageInventoryMove BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageInventoryMove) {
          return MergeFrom((NetMessageInventoryMove) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageInventoryMove other) {
        if (other == global::Gazillion.NetMessageInventoryMove.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasInvLocContainerEntityId) {
          InvLocContainerEntityId = other.InvLocContainerEntityId;
        }
        if (other.HasInvLocInventoryPrototypeId) {
          InvLocInventoryPrototypeId = other.InvLocInventoryPrototypeId;
        }
        if (other.HasInvLocSlot) {
          InvLocSlot = other.InvLocSlot;
        }
        if (other.HasRequiredNoOwnerOnClient) {
          RequiredNoOwnerOnClient = other.RequiredNoOwnerOnClient;
        }
        if (other.HasEntityDataId) {
          EntityDataId = other.EntityDataId;
        }
        if (other.HasDestOwnerDataId) {
          DestOwnerDataId = other.DestOwnerDataId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageInventoryMoveFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageInventoryMoveFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
            case 16: {
              result.hasInvLocContainerEntityId = input.ReadUInt64(ref result.invLocContainerEntityId_);
              break;
            }
            case 24: {
              result.hasInvLocInventoryPrototypeId = input.ReadUInt64(ref result.invLocInventoryPrototypeId_);
              break;
            }
            case 32: {
              result.hasInvLocSlot = input.ReadUInt32(ref result.invLocSlot_);
              break;
            }
            case 40: {
              result.hasRequiredNoOwnerOnClient = input.ReadBool(ref result.requiredNoOwnerOnClient_);
              break;
            }
            case 48: {
              result.hasEntityDataId = input.ReadUInt64(ref result.entityDataId_);
              break;
            }
            case 56: {
              result.hasDestOwnerDataId = input.ReadUInt64(ref result.destOwnerDataId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
      
      public bool HasInvLocContainerEntityId {
        get { return result.hasInvLocContainerEntityId; }
      }
      public ulong InvLocContainerEntityId {
        get { return result.InvLocContainerEntityId; }
        set { SetInvLocContainerEntityId(value); }
      }
      public Builder SetInvLocContainerEntityId(ulong value) {
        PrepareBuilder();
        result.hasInvLocContainerEntityId = true;
        result.invLocContainerEntityId_ = value;
        return this;
      }
      public Builder ClearInvLocContainerEntityId() {
        PrepareBuilder();
        result.hasInvLocContainerEntityId = false;
        result.invLocContainerEntityId_ = 0UL;
        return this;
      }
      
      public bool HasInvLocInventoryPrototypeId {
        get { return result.hasInvLocInventoryPrototypeId; }
      }
      public ulong InvLocInventoryPrototypeId {
        get { return result.InvLocInventoryPrototypeId; }
        set { SetInvLocInventoryPrototypeId(value); }
      }
      public Builder SetInvLocInventoryPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasInvLocInventoryPrototypeId = true;
        result.invLocInventoryPrototypeId_ = value;
        return this;
      }
      public Builder ClearInvLocInventoryPrototypeId() {
        PrepareBuilder();
        result.hasInvLocInventoryPrototypeId = false;
        result.invLocInventoryPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasInvLocSlot {
        get { return result.hasInvLocSlot; }
      }
      public uint InvLocSlot {
        get { return result.InvLocSlot; }
        set { SetInvLocSlot(value); }
      }
      public Builder SetInvLocSlot(uint value) {
        PrepareBuilder();
        result.hasInvLocSlot = true;
        result.invLocSlot_ = value;
        return this;
      }
      public Builder ClearInvLocSlot() {
        PrepareBuilder();
        result.hasInvLocSlot = false;
        result.invLocSlot_ = 0;
        return this;
      }
      
      public bool HasRequiredNoOwnerOnClient {
        get { return result.hasRequiredNoOwnerOnClient; }
      }
      public bool RequiredNoOwnerOnClient {
        get { return result.RequiredNoOwnerOnClient; }
        set { SetRequiredNoOwnerOnClient(value); }
      }
      public Builder SetRequiredNoOwnerOnClient(bool value) {
        PrepareBuilder();
        result.hasRequiredNoOwnerOnClient = true;
        result.requiredNoOwnerOnClient_ = value;
        return this;
      }
      public Builder ClearRequiredNoOwnerOnClient() {
        PrepareBuilder();
        result.hasRequiredNoOwnerOnClient = false;
        result.requiredNoOwnerOnClient_ = false;
        return this;
      }
      
      public bool HasEntityDataId {
        get { return result.hasEntityDataId; }
      }
      public ulong EntityDataId {
        get { return result.EntityDataId; }
        set { SetEntityDataId(value); }
      }
      public Builder SetEntityDataId(ulong value) {
        PrepareBuilder();
        result.hasEntityDataId = true;
        result.entityDataId_ = value;
        return this;
      }
      public Builder ClearEntityDataId() {
        PrepareBuilder();
        result.hasEntityDataId = false;
        result.entityDataId_ = 0UL;
        return this;
      }
      
      public bool HasDestOwnerDataId {
        get { return result.hasDestOwnerDataId; }
      }
      public ulong DestOwnerDataId {
        get { return result.DestOwnerDataId; }
        set { SetDestOwnerDataId(value); }
      }
      public Builder SetDestOwnerDataId(ulong value) {
        PrepareBuilder();
        result.hasDestOwnerDataId = true;
        result.destOwnerDataId_ = value;
        return this;
      }
      public Builder ClearDestOwnerDataId() {
        PrepareBuilder();
        result.hasDestOwnerDataId = false;
        result.destOwnerDataId_ = 0UL;
        return this;
      }
    }
    static NetMessageInventoryMove() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageInventoryExit : pb::GeneratedMessage<NetMessageInventoryExit, NetMessageInventoryExit.Builder> {
    private NetMessageInventoryExit() { }
    private static readonly NetMessageInventoryExit defaultInstance = new NetMessageInventoryExit().MakeReadOnly();
    private static readonly string[] _netMessageInventoryExitFieldNames = new string[] { "entityDataId", "entityId" };
    private static readonly uint[] _netMessageInventoryExitFieldTags = new uint[] { 16, 8 };
    public static NetMessageInventoryExit DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageInventoryExit DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageInventoryExit ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInventoryExit__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageInventoryExit, NetMessageInventoryExit.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInventoryExit__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public const int EntityDataIdFieldNumber = 2;
    private bool hasEntityDataId;
    private ulong entityDataId_;
    public bool HasEntityDataId {
      get { return hasEntityDataId; }
    }
    public ulong EntityDataId {
      get { return entityDataId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageInventoryExitFieldNames;
      if (hasEntityId) {
        output.WriteUInt64(1, field_names[1], EntityId);
      }
      if (hasEntityDataId) {
        output.WriteUInt64(2, field_names[0], EntityDataId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityId);
      }
      if (hasEntityDataId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, EntityDataId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageInventoryExit ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryExit ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryExit ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryExit ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryExit ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryExit ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryExit ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageInventoryExit ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageInventoryExit ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryExit ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageInventoryExit MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageInventoryExit prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageInventoryExit, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageInventoryExit cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageInventoryExit result;
      
      private NetMessageInventoryExit PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageInventoryExit original = result;
          result = new NetMessageInventoryExit();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageInventoryExit MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageInventoryExit.Descriptor; }
      }
      
      public override NetMessageInventoryExit DefaultInstanceForType {
        get { return global::Gazillion.NetMessageInventoryExit.DefaultInstance; }
      }
      
      public override NetMessageInventoryExit BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageInventoryExit) {
          return MergeFrom((NetMessageInventoryExit) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageInventoryExit other) {
        if (other == global::Gazillion.NetMessageInventoryExit.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasEntityDataId) {
          EntityDataId = other.EntityDataId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageInventoryExitFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageInventoryExitFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
            case 16: {
              result.hasEntityDataId = input.ReadUInt64(ref result.entityDataId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
      
      public bool HasEntityDataId {
        get { return result.hasEntityDataId; }
      }
      public ulong EntityDataId {
        get { return result.EntityDataId; }
        set { SetEntityDataId(value); }
      }
      public Builder SetEntityDataId(ulong value) {
        PrepareBuilder();
        result.hasEntityDataId = true;
        result.entityDataId_ = value;
        return this;
      }
      public Builder ClearEntityDataId() {
        PrepareBuilder();
        result.hasEntityDataId = false;
        result.entityDataId_ = 0UL;
        return this;
      }
    }
    static NetMessageInventoryExit() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageInventoryUnlock : pb::GeneratedMessage<NetMessageInventoryUnlock, NetMessageInventoryUnlock.Builder> {
    private NetMessageInventoryUnlock() { }
    private static readonly NetMessageInventoryUnlock defaultInstance = new NetMessageInventoryUnlock().MakeReadOnly();
    private static readonly string[] _netMessageInventoryUnlockFieldNames = new string[] { "invProtoId" };
    private static readonly uint[] _netMessageInventoryUnlockFieldTags = new uint[] { 8 };
    public static NetMessageInventoryUnlock DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageInventoryUnlock DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageInventoryUnlock ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInventoryUnlock__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageInventoryUnlock, NetMessageInventoryUnlock.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInventoryUnlock__FieldAccessorTable; }
    }
    
    public const int InvProtoIdFieldNumber = 1;
    private bool hasInvProtoId;
    private ulong invProtoId_;
    public bool HasInvProtoId {
      get { return hasInvProtoId; }
    }
    public ulong InvProtoId {
      get { return invProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasInvProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageInventoryUnlockFieldNames;
      if (hasInvProtoId) {
        output.WriteUInt64(1, field_names[0], InvProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasInvProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, InvProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageInventoryUnlock ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryUnlock ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryUnlock ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryUnlock ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryUnlock ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryUnlock ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryUnlock ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageInventoryUnlock ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageInventoryUnlock ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryUnlock ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageInventoryUnlock MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageInventoryUnlock prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageInventoryUnlock, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageInventoryUnlock cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageInventoryUnlock result;
      
      private NetMessageInventoryUnlock PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageInventoryUnlock original = result;
          result = new NetMessageInventoryUnlock();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageInventoryUnlock MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageInventoryUnlock.Descriptor; }
      }
      
      public override NetMessageInventoryUnlock DefaultInstanceForType {
        get { return global::Gazillion.NetMessageInventoryUnlock.DefaultInstance; }
      }
      
      public override NetMessageInventoryUnlock BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageInventoryUnlock) {
          return MergeFrom((NetMessageInventoryUnlock) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageInventoryUnlock other) {
        if (other == global::Gazillion.NetMessageInventoryUnlock.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasInvProtoId) {
          InvProtoId = other.InvProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageInventoryUnlockFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageInventoryUnlockFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasInvProtoId = input.ReadUInt64(ref result.invProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasInvProtoId {
        get { return result.hasInvProtoId; }
      }
      public ulong InvProtoId {
        get { return result.InvProtoId; }
        set { SetInvProtoId(value); }
      }
      public Builder SetInvProtoId(ulong value) {
        PrepareBuilder();
        result.hasInvProtoId = true;
        result.invProtoId_ = value;
        return this;
      }
      public Builder ClearInvProtoId() {
        PrepareBuilder();
        result.hasInvProtoId = false;
        result.invProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageInventoryUnlock() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePermaBuffUnlock : pb::GeneratedMessage<NetMessagePermaBuffUnlock, NetMessagePermaBuffUnlock.Builder> {
    private NetMessagePermaBuffUnlock() { }
    private static readonly NetMessagePermaBuffUnlock defaultInstance = new NetMessagePermaBuffUnlock().MakeReadOnly();
    private static readonly string[] _netMessagePermaBuffUnlockFieldNames = new string[] { "permaBuffProtoId" };
    private static readonly uint[] _netMessagePermaBuffUnlockFieldTags = new uint[] { 8 };
    public static NetMessagePermaBuffUnlock DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePermaBuffUnlock DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePermaBuffUnlock ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePermaBuffUnlock__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePermaBuffUnlock, NetMessagePermaBuffUnlock.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePermaBuffUnlock__FieldAccessorTable; }
    }
    
    public const int PermaBuffProtoIdFieldNumber = 1;
    private bool hasPermaBuffProtoId;
    private ulong permaBuffProtoId_;
    public bool HasPermaBuffProtoId {
      get { return hasPermaBuffProtoId; }
    }
    public ulong PermaBuffProtoId {
      get { return permaBuffProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPermaBuffProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePermaBuffUnlockFieldNames;
      if (hasPermaBuffProtoId) {
        output.WriteUInt64(1, field_names[0], PermaBuffProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPermaBuffProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PermaBuffProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePermaBuffUnlock ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePermaBuffUnlock ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePermaBuffUnlock ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePermaBuffUnlock ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePermaBuffUnlock ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePermaBuffUnlock ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePermaBuffUnlock ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePermaBuffUnlock ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePermaBuffUnlock ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePermaBuffUnlock ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePermaBuffUnlock MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePermaBuffUnlock prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePermaBuffUnlock, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePermaBuffUnlock cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePermaBuffUnlock result;
      
      private NetMessagePermaBuffUnlock PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePermaBuffUnlock original = result;
          result = new NetMessagePermaBuffUnlock();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePermaBuffUnlock MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePermaBuffUnlock.Descriptor; }
      }
      
      public override NetMessagePermaBuffUnlock DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePermaBuffUnlock.DefaultInstance; }
      }
      
      public override NetMessagePermaBuffUnlock BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePermaBuffUnlock) {
          return MergeFrom((NetMessagePermaBuffUnlock) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePermaBuffUnlock other) {
        if (other == global::Gazillion.NetMessagePermaBuffUnlock.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPermaBuffProtoId) {
          PermaBuffProtoId = other.PermaBuffProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePermaBuffUnlockFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePermaBuffUnlockFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPermaBuffProtoId = input.ReadUInt64(ref result.permaBuffProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPermaBuffProtoId {
        get { return result.hasPermaBuffProtoId; }
      }
      public ulong PermaBuffProtoId {
        get { return result.PermaBuffProtoId; }
        set { SetPermaBuffProtoId(value); }
      }
      public Builder SetPermaBuffProtoId(ulong value) {
        PrepareBuilder();
        result.hasPermaBuffProtoId = true;
        result.permaBuffProtoId_ = value;
        return this;
      }
      public Builder ClearPermaBuffProtoId() {
        PrepareBuilder();
        result.hasPermaBuffProtoId = false;
        result.permaBuffProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessagePermaBuffUnlock() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityKill : pb::GeneratedMessage<NetMessageEntityKill, NetMessageEntityKill.Builder> {
    private NetMessageEntityKill() { }
    private static readonly NetMessageEntityKill defaultInstance = new NetMessageEntityKill().MakeReadOnly();
    private static readonly string[] _netMessageEntityKillFieldNames = new string[] { "idEntity", "idKillerEntity", "killFlags" };
    private static readonly uint[] _netMessageEntityKillFieldTags = new uint[] { 8, 16, 24 };
    public static NetMessageEntityKill DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityKill DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityKill ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityKill__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityKill, NetMessageEntityKill.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityKill__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int IdKillerEntityFieldNumber = 2;
    private bool hasIdKillerEntity;
    private ulong idKillerEntity_;
    public bool HasIdKillerEntity {
      get { return hasIdKillerEntity; }
    }
    public ulong IdKillerEntity {
      get { return idKillerEntity_; }
    }
    
    public const int KillFlagsFieldNumber = 3;
    private bool hasKillFlags;
    private uint killFlags_;
    public bool HasKillFlags {
      get { return hasKillFlags; }
    }
    public uint KillFlags {
      get { return killFlags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        if (!hasIdKillerEntity) return false;
        if (!hasKillFlags) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityKillFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[0], IdEntity);
      }
      if (hasIdKillerEntity) {
        output.WriteUInt64(2, field_names[1], IdKillerEntity);
      }
      if (hasKillFlags) {
        output.WriteUInt32(3, field_names[2], KillFlags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasIdKillerEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, IdKillerEntity);
      }
      if (hasKillFlags) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, KillFlags);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityKill ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityKill ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityKill ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityKill ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityKill ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityKill ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityKill ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityKill ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityKill ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityKill ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityKill MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityKill prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityKill, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityKill cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityKill result;
      
      private NetMessageEntityKill PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityKill original = result;
          result = new NetMessageEntityKill();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityKill MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityKill.Descriptor; }
      }
      
      public override NetMessageEntityKill DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityKill.DefaultInstance; }
      }
      
      public override NetMessageEntityKill BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityKill) {
          return MergeFrom((NetMessageEntityKill) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityKill other) {
        if (other == global::Gazillion.NetMessageEntityKill.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasIdKillerEntity) {
          IdKillerEntity = other.IdKillerEntity;
        }
        if (other.HasKillFlags) {
          KillFlags = other.KillFlags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityKillFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityKillFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 16: {
              result.hasIdKillerEntity = input.ReadUInt64(ref result.idKillerEntity_);
              break;
            }
            case 24: {
              result.hasKillFlags = input.ReadUInt32(ref result.killFlags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasIdKillerEntity {
        get { return result.hasIdKillerEntity; }
      }
      public ulong IdKillerEntity {
        get { return result.IdKillerEntity; }
        set { SetIdKillerEntity(value); }
      }
      public Builder SetIdKillerEntity(ulong value) {
        PrepareBuilder();
        result.hasIdKillerEntity = true;
        result.idKillerEntity_ = value;
        return this;
      }
      public Builder ClearIdKillerEntity() {
        PrepareBuilder();
        result.hasIdKillerEntity = false;
        result.idKillerEntity_ = 0UL;
        return this;
      }
      
      public bool HasKillFlags {
        get { return result.hasKillFlags; }
      }
      public uint KillFlags {
        get { return result.KillFlags; }
        set { SetKillFlags(value); }
      }
      public Builder SetKillFlags(uint value) {
        PrepareBuilder();
        result.hasKillFlags = true;
        result.killFlags_ = value;
        return this;
      }
      public Builder ClearKillFlags() {
        PrepareBuilder();
        result.hasKillFlags = false;
        result.killFlags_ = 0;
        return this;
      }
    }
    static NetMessageEntityKill() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageQueueFullscreenMovie : pb::GeneratedMessage<NetMessageQueueFullscreenMovie, NetMessageQueueFullscreenMovie.Builder> {
    private NetMessageQueueFullscreenMovie() { }
    private static readonly NetMessageQueueFullscreenMovie defaultInstance = new NetMessageQueueFullscreenMovie().MakeReadOnly();
    private static readonly string[] _netMessageQueueFullscreenMovieFieldNames = new string[] { "moviePrototypeId" };
    private static readonly uint[] _netMessageQueueFullscreenMovieFieldTags = new uint[] { 8 };
    public static NetMessageQueueFullscreenMovie DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageQueueFullscreenMovie DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageQueueFullscreenMovie ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageQueueFullscreenMovie__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageQueueFullscreenMovie, NetMessageQueueFullscreenMovie.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageQueueFullscreenMovie__FieldAccessorTable; }
    }
    
    public const int MoviePrototypeIdFieldNumber = 1;
    private bool hasMoviePrototypeId;
    private ulong moviePrototypeId_;
    public bool HasMoviePrototypeId {
      get { return hasMoviePrototypeId; }
    }
    public ulong MoviePrototypeId {
      get { return moviePrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageQueueFullscreenMovieFieldNames;
      if (hasMoviePrototypeId) {
        output.WriteUInt64(1, field_names[0], MoviePrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMoviePrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MoviePrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageQueueFullscreenMovie ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageQueueFullscreenMovie ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageQueueFullscreenMovie ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageQueueFullscreenMovie ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageQueueFullscreenMovie ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageQueueFullscreenMovie ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageQueueFullscreenMovie ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageQueueFullscreenMovie ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageQueueFullscreenMovie ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageQueueFullscreenMovie ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageQueueFullscreenMovie MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageQueueFullscreenMovie prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageQueueFullscreenMovie, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageQueueFullscreenMovie cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageQueueFullscreenMovie result;
      
      private NetMessageQueueFullscreenMovie PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageQueueFullscreenMovie original = result;
          result = new NetMessageQueueFullscreenMovie();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageQueueFullscreenMovie MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageQueueFullscreenMovie.Descriptor; }
      }
      
      public override NetMessageQueueFullscreenMovie DefaultInstanceForType {
        get { return global::Gazillion.NetMessageQueueFullscreenMovie.DefaultInstance; }
      }
      
      public override NetMessageQueueFullscreenMovie BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageQueueFullscreenMovie) {
          return MergeFrom((NetMessageQueueFullscreenMovie) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageQueueFullscreenMovie other) {
        if (other == global::Gazillion.NetMessageQueueFullscreenMovie.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMoviePrototypeId) {
          MoviePrototypeId = other.MoviePrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageQueueFullscreenMovieFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageQueueFullscreenMovieFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMoviePrototypeId = input.ReadUInt64(ref result.moviePrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMoviePrototypeId {
        get { return result.hasMoviePrototypeId; }
      }
      public ulong MoviePrototypeId {
        get { return result.MoviePrototypeId; }
        set { SetMoviePrototypeId(value); }
      }
      public Builder SetMoviePrototypeId(ulong value) {
        PrepareBuilder();
        result.hasMoviePrototypeId = true;
        result.moviePrototypeId_ = value;
        return this;
      }
      public Builder ClearMoviePrototypeId() {
        PrepareBuilder();
        result.hasMoviePrototypeId = false;
        result.moviePrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageQueueFullscreenMovie() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageQueueLoadingScreen : pb::GeneratedMessage<NetMessageQueueLoadingScreen, NetMessageQueueLoadingScreen.Builder> {
    private NetMessageQueueLoadingScreen() { }
    private static readonly NetMessageQueueLoadingScreen defaultInstance = new NetMessageQueueLoadingScreen().MakeReadOnly();
    private static readonly string[] _netMessageQueueLoadingScreenFieldNames = new string[] { "regionPrototypeId" };
    private static readonly uint[] _netMessageQueueLoadingScreenFieldTags = new uint[] { 8 };
    public static NetMessageQueueLoadingScreen DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageQueueLoadingScreen DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageQueueLoadingScreen ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageQueueLoadingScreen__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageQueueLoadingScreen, NetMessageQueueLoadingScreen.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageQueueLoadingScreen__FieldAccessorTable; }
    }
    
    public const int RegionPrototypeIdFieldNumber = 1;
    private bool hasRegionPrototypeId;
    private ulong regionPrototypeId_;
    public bool HasRegionPrototypeId {
      get { return hasRegionPrototypeId; }
    }
    public ulong RegionPrototypeId {
      get { return regionPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageQueueLoadingScreenFieldNames;
      if (hasRegionPrototypeId) {
        output.WriteUInt64(1, field_names[0], RegionPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRegionPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, RegionPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageQueueLoadingScreen ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageQueueLoadingScreen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageQueueLoadingScreen ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageQueueLoadingScreen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageQueueLoadingScreen ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageQueueLoadingScreen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageQueueLoadingScreen ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageQueueLoadingScreen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageQueueLoadingScreen ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageQueueLoadingScreen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageQueueLoadingScreen MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageQueueLoadingScreen prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageQueueLoadingScreen, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageQueueLoadingScreen cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageQueueLoadingScreen result;
      
      private NetMessageQueueLoadingScreen PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageQueueLoadingScreen original = result;
          result = new NetMessageQueueLoadingScreen();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageQueueLoadingScreen MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageQueueLoadingScreen.Descriptor; }
      }
      
      public override NetMessageQueueLoadingScreen DefaultInstanceForType {
        get { return global::Gazillion.NetMessageQueueLoadingScreen.DefaultInstance; }
      }
      
      public override NetMessageQueueLoadingScreen BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageQueueLoadingScreen) {
          return MergeFrom((NetMessageQueueLoadingScreen) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageQueueLoadingScreen other) {
        if (other == global::Gazillion.NetMessageQueueLoadingScreen.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRegionPrototypeId) {
          RegionPrototypeId = other.RegionPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageQueueLoadingScreenFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageQueueLoadingScreenFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRegionPrototypeId = input.ReadUInt64(ref result.regionPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRegionPrototypeId {
        get { return result.hasRegionPrototypeId; }
      }
      public ulong RegionPrototypeId {
        get { return result.RegionPrototypeId; }
        set { SetRegionPrototypeId(value); }
      }
      public Builder SetRegionPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasRegionPrototypeId = true;
        result.regionPrototypeId_ = value;
        return this;
      }
      public Builder ClearRegionPrototypeId() {
        PrepareBuilder();
        result.hasRegionPrototypeId = false;
        result.regionPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageQueueLoadingScreen() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDequeueLoadingScreen : pb::GeneratedMessage<NetMessageDequeueLoadingScreen, NetMessageDequeueLoadingScreen.Builder> {
    private NetMessageDequeueLoadingScreen() { }
    private static readonly NetMessageDequeueLoadingScreen defaultInstance = new NetMessageDequeueLoadingScreen().MakeReadOnly();
    private static readonly string[] _netMessageDequeueLoadingScreenFieldNames = new string[] {  };
    private static readonly uint[] _netMessageDequeueLoadingScreenFieldTags = new uint[] {  };
    public static NetMessageDequeueLoadingScreen DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDequeueLoadingScreen DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDequeueLoadingScreen ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDequeueLoadingScreen__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDequeueLoadingScreen, NetMessageDequeueLoadingScreen.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDequeueLoadingScreen__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDequeueLoadingScreenFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDequeueLoadingScreen ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDequeueLoadingScreen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDequeueLoadingScreen ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDequeueLoadingScreen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDequeueLoadingScreen ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDequeueLoadingScreen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDequeueLoadingScreen ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDequeueLoadingScreen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDequeueLoadingScreen ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDequeueLoadingScreen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDequeueLoadingScreen MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDequeueLoadingScreen prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDequeueLoadingScreen, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDequeueLoadingScreen cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDequeueLoadingScreen result;
      
      private NetMessageDequeueLoadingScreen PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDequeueLoadingScreen original = result;
          result = new NetMessageDequeueLoadingScreen();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDequeueLoadingScreen MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDequeueLoadingScreen.Descriptor; }
      }
      
      public override NetMessageDequeueLoadingScreen DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDequeueLoadingScreen.DefaultInstance; }
      }
      
      public override NetMessageDequeueLoadingScreen BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDequeueLoadingScreen) {
          return MergeFrom((NetMessageDequeueLoadingScreen) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDequeueLoadingScreen other) {
        if (other == global::Gazillion.NetMessageDequeueLoadingScreen.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDequeueLoadingScreenFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDequeueLoadingScreenFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageDequeueLoadingScreen() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRegionChange : pb::GeneratedMessage<NetMessageRegionChange, NetMessageRegionChange.Builder> {
    private NetMessageRegionChange() { }
    private static readonly NetMessageRegionChange defaultInstance = new NetMessageRegionChange().MakeReadOnly();
    private static readonly string[] _netMessageRegionChangeFieldNames = new string[] { "archiveData", "clearingAllInterest", "createRegionParams", "entitiestodestroy", "regionId", "regionMax", "regionMin", "regionPrototypeId", "regionRandomSeed", "serverGameId" };
    private static readonly uint[] _netMessageRegionChangeFieldTags = new uint[] { 58, 24, 82, 32, 8, 74, 66, 40, 48, 16 };
    public static NetMessageRegionChange DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRegionChange DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRegionChange ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionChange__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRegionChange, NetMessageRegionChange.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionChange__FieldAccessorTable; }
    }
    
    public const int RegionIdFieldNumber = 1;
    private bool hasRegionId;
    private ulong regionId_;
    public bool HasRegionId {
      get { return hasRegionId; }
    }
    public ulong RegionId {
      get { return regionId_; }
    }
    
    public const int ServerGameIdFieldNumber = 2;
    private bool hasServerGameId;
    private ulong serverGameId_;
    public bool HasServerGameId {
      get { return hasServerGameId; }
    }
    public ulong ServerGameId {
      get { return serverGameId_; }
    }
    
    public const int ClearingAllInterestFieldNumber = 3;
    private bool hasClearingAllInterest;
    private bool clearingAllInterest_;
    public bool HasClearingAllInterest {
      get { return hasClearingAllInterest; }
    }
    public bool ClearingAllInterest {
      get { return clearingAllInterest_; }
    }
    
    public const int EntitiestodestroyFieldNumber = 4;
    private pbc::PopsicleList<ulong> entitiestodestroy_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> EntitiestodestroyList {
      get { return pbc::Lists.AsReadOnly(entitiestodestroy_); }
    }
    public int EntitiestodestroyCount {
      get { return entitiestodestroy_.Count; }
    }
    public ulong GetEntitiestodestroy(int index) {
      return entitiestodestroy_[index];
    }
    
    public const int RegionPrototypeIdFieldNumber = 5;
    private bool hasRegionPrototypeId;
    private ulong regionPrototypeId_;
    public bool HasRegionPrototypeId {
      get { return hasRegionPrototypeId; }
    }
    public ulong RegionPrototypeId {
      get { return regionPrototypeId_; }
    }
    
    public const int RegionRandomSeedFieldNumber = 6;
    private bool hasRegionRandomSeed;
    private int regionRandomSeed_;
    public bool HasRegionRandomSeed {
      get { return hasRegionRandomSeed; }
    }
    public int RegionRandomSeed {
      get { return regionRandomSeed_; }
    }
    
    public const int ArchiveDataFieldNumber = 7;
    private bool hasArchiveData;
    private pb::ByteString archiveData_ = pb::ByteString.Empty;
    public bool HasArchiveData {
      get { return hasArchiveData; }
    }
    public pb::ByteString ArchiveData {
      get { return archiveData_; }
    }
    
    public const int RegionMinFieldNumber = 8;
    private bool hasRegionMin;
    private global::Gazillion.NetStructPoint3 regionMin_;
    public bool HasRegionMin {
      get { return hasRegionMin; }
    }
    public global::Gazillion.NetStructPoint3 RegionMin {
      get { return regionMin_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int RegionMaxFieldNumber = 9;
    private bool hasRegionMax;
    private global::Gazillion.NetStructPoint3 regionMax_;
    public bool HasRegionMax {
      get { return hasRegionMax; }
    }
    public global::Gazillion.NetStructPoint3 RegionMax {
      get { return regionMax_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int CreateRegionParamsFieldNumber = 10;
    private bool hasCreateRegionParams;
    private global::Gazillion.NetStructCreateRegionParams createRegionParams_;
    public bool HasCreateRegionParams {
      get { return hasCreateRegionParams; }
    }
    public global::Gazillion.NetStructCreateRegionParams CreateRegionParams {
      get { return createRegionParams_ ?? global::Gazillion.NetStructCreateRegionParams.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRegionId) return false;
        if (!hasServerGameId) return false;
        if (!hasClearingAllInterest) return false;
        if (HasCreateRegionParams) {
          if (!CreateRegionParams.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRegionChangeFieldNames;
      if (hasRegionId) {
        output.WriteUInt64(1, field_names[4], RegionId);
      }
      if (hasServerGameId) {
        output.WriteUInt64(2, field_names[9], ServerGameId);
      }
      if (hasClearingAllInterest) {
        output.WriteBool(3, field_names[1], ClearingAllInterest);
      }
      if (entitiestodestroy_.Count > 0) {
        output.WriteUInt64Array(4, field_names[3], entitiestodestroy_);
      }
      if (hasRegionPrototypeId) {
        output.WriteUInt64(5, field_names[7], RegionPrototypeId);
      }
      if (hasRegionRandomSeed) {
        output.WriteInt32(6, field_names[8], RegionRandomSeed);
      }
      if (hasArchiveData) {
        output.WriteBytes(7, field_names[0], ArchiveData);
      }
      if (hasRegionMin) {
        output.WriteMessage(8, field_names[6], RegionMin);
      }
      if (hasRegionMax) {
        output.WriteMessage(9, field_names[5], RegionMax);
      }
      if (hasCreateRegionParams) {
        output.WriteMessage(10, field_names[2], CreateRegionParams);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRegionId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, RegionId);
      }
      if (hasServerGameId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ServerGameId);
      }
      if (hasClearingAllInterest) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, ClearingAllInterest);
      }
      {
        int dataSize = 0;
        foreach (ulong element in EntitiestodestroyList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * entitiestodestroy_.Count;
      }
      if (hasRegionPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, RegionPrototypeId);
      }
      if (hasRegionRandomSeed) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, RegionRandomSeed);
      }
      if (hasArchiveData) {
        size += pb::CodedOutputStream.ComputeBytesSize(7, ArchiveData);
      }
      if (hasRegionMin) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, RegionMin);
      }
      if (hasRegionMax) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, RegionMax);
      }
      if (hasCreateRegionParams) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, CreateRegionParams);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRegionChange ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionChange ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionChange ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionChange ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionChange ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionChange ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionChange ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRegionChange ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRegionChange ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionChange ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRegionChange MakeReadOnly() {
      entitiestodestroy_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRegionChange prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRegionChange, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRegionChange cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRegionChange result;
      
      private NetMessageRegionChange PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRegionChange original = result;
          result = new NetMessageRegionChange();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRegionChange MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRegionChange.Descriptor; }
      }
      
      public override NetMessageRegionChange DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRegionChange.DefaultInstance; }
      }
      
      public override NetMessageRegionChange BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRegionChange) {
          return MergeFrom((NetMessageRegionChange) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRegionChange other) {
        if (other == global::Gazillion.NetMessageRegionChange.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRegionId) {
          RegionId = other.RegionId;
        }
        if (other.HasServerGameId) {
          ServerGameId = other.ServerGameId;
        }
        if (other.HasClearingAllInterest) {
          ClearingAllInterest = other.ClearingAllInterest;
        }
        if (other.entitiestodestroy_.Count != 0) {
          result.entitiestodestroy_.Add(other.entitiestodestroy_);
        }
        if (other.HasRegionPrototypeId) {
          RegionPrototypeId = other.RegionPrototypeId;
        }
        if (other.HasRegionRandomSeed) {
          RegionRandomSeed = other.RegionRandomSeed;
        }
        if (other.HasArchiveData) {
          ArchiveData = other.ArchiveData;
        }
        if (other.HasRegionMin) {
          MergeRegionMin(other.RegionMin);
        }
        if (other.HasRegionMax) {
          MergeRegionMax(other.RegionMax);
        }
        if (other.HasCreateRegionParams) {
          MergeCreateRegionParams(other.CreateRegionParams);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRegionChangeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRegionChangeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRegionId = input.ReadUInt64(ref result.regionId_);
              break;
            }
            case 16: {
              result.hasServerGameId = input.ReadUInt64(ref result.serverGameId_);
              break;
            }
            case 24: {
              result.hasClearingAllInterest = input.ReadBool(ref result.clearingAllInterest_);
              break;
            }
            case 34:
            case 32: {
              input.ReadUInt64Array(tag, field_name, result.entitiestodestroy_);
              break;
            }
            case 40: {
              result.hasRegionPrototypeId = input.ReadUInt64(ref result.regionPrototypeId_);
              break;
            }
            case 48: {
              result.hasRegionRandomSeed = input.ReadInt32(ref result.regionRandomSeed_);
              break;
            }
            case 58: {
              result.hasArchiveData = input.ReadBytes(ref result.archiveData_);
              break;
            }
            case 66: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasRegionMin) {
                subBuilder.MergeFrom(RegionMin);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RegionMin = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasRegionMax) {
                subBuilder.MergeFrom(RegionMax);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RegionMax = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::Gazillion.NetStructCreateRegionParams.Builder subBuilder = global::Gazillion.NetStructCreateRegionParams.CreateBuilder();
              if (result.hasCreateRegionParams) {
                subBuilder.MergeFrom(CreateRegionParams);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CreateRegionParams = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRegionId {
        get { return result.hasRegionId; }
      }
      public ulong RegionId {
        get { return result.RegionId; }
        set { SetRegionId(value); }
      }
      public Builder SetRegionId(ulong value) {
        PrepareBuilder();
        result.hasRegionId = true;
        result.regionId_ = value;
        return this;
      }
      public Builder ClearRegionId() {
        PrepareBuilder();
        result.hasRegionId = false;
        result.regionId_ = 0UL;
        return this;
      }
      
      public bool HasServerGameId {
        get { return result.hasServerGameId; }
      }
      public ulong ServerGameId {
        get { return result.ServerGameId; }
        set { SetServerGameId(value); }
      }
      public Builder SetServerGameId(ulong value) {
        PrepareBuilder();
        result.hasServerGameId = true;
        result.serverGameId_ = value;
        return this;
      }
      public Builder ClearServerGameId() {
        PrepareBuilder();
        result.hasServerGameId = false;
        result.serverGameId_ = 0UL;
        return this;
      }
      
      public bool HasClearingAllInterest {
        get { return result.hasClearingAllInterest; }
      }
      public bool ClearingAllInterest {
        get { return result.ClearingAllInterest; }
        set { SetClearingAllInterest(value); }
      }
      public Builder SetClearingAllInterest(bool value) {
        PrepareBuilder();
        result.hasClearingAllInterest = true;
        result.clearingAllInterest_ = value;
        return this;
      }
      public Builder ClearClearingAllInterest() {
        PrepareBuilder();
        result.hasClearingAllInterest = false;
        result.clearingAllInterest_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> EntitiestodestroyList {
        get { return PrepareBuilder().entitiestodestroy_; }
      }
      public int EntitiestodestroyCount {
        get { return result.EntitiestodestroyCount; }
      }
      public ulong GetEntitiestodestroy(int index) {
        return result.GetEntitiestodestroy(index);
      }
      public Builder SetEntitiestodestroy(int index, ulong value) {
        PrepareBuilder();
        result.entitiestodestroy_[index] = value;
        return this;
      }
      public Builder AddEntitiestodestroy(ulong value) {
        PrepareBuilder();
        result.entitiestodestroy_.Add(value);
        return this;
      }
      public Builder AddRangeEntitiestodestroy(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.entitiestodestroy_.Add(values);
        return this;
      }
      public Builder ClearEntitiestodestroy() {
        PrepareBuilder();
        result.entitiestodestroy_.Clear();
        return this;
      }
      
      public bool HasRegionPrototypeId {
        get { return result.hasRegionPrototypeId; }
      }
      public ulong RegionPrototypeId {
        get { return result.RegionPrototypeId; }
        set { SetRegionPrototypeId(value); }
      }
      public Builder SetRegionPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasRegionPrototypeId = true;
        result.regionPrototypeId_ = value;
        return this;
      }
      public Builder ClearRegionPrototypeId() {
        PrepareBuilder();
        result.hasRegionPrototypeId = false;
        result.regionPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasRegionRandomSeed {
        get { return result.hasRegionRandomSeed; }
      }
      public int RegionRandomSeed {
        get { return result.RegionRandomSeed; }
        set { SetRegionRandomSeed(value); }
      }
      public Builder SetRegionRandomSeed(int value) {
        PrepareBuilder();
        result.hasRegionRandomSeed = true;
        result.regionRandomSeed_ = value;
        return this;
      }
      public Builder ClearRegionRandomSeed() {
        PrepareBuilder();
        result.hasRegionRandomSeed = false;
        result.regionRandomSeed_ = 0;
        return this;
      }
      
      public bool HasArchiveData {
        get { return result.hasArchiveData; }
      }
      public pb::ByteString ArchiveData {
        get { return result.ArchiveData; }
        set { SetArchiveData(value); }
      }
      public Builder SetArchiveData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasArchiveData = true;
        result.archiveData_ = value;
        return this;
      }
      public Builder ClearArchiveData() {
        PrepareBuilder();
        result.hasArchiveData = false;
        result.archiveData_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasRegionMin {
       get { return result.hasRegionMin; }
      }
      public global::Gazillion.NetStructPoint3 RegionMin {
        get { return result.RegionMin; }
        set { SetRegionMin(value); }
      }
      public Builder SetRegionMin(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRegionMin = true;
        result.regionMin_ = value;
        return this;
      }
      public Builder SetRegionMin(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRegionMin = true;
        result.regionMin_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRegionMin(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRegionMin &&
            result.regionMin_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.regionMin_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.regionMin_).MergeFrom(value).BuildPartial();
        } else {
          result.regionMin_ = value;
        }
        result.hasRegionMin = true;
        return this;
      }
      public Builder ClearRegionMin() {
        PrepareBuilder();
        result.hasRegionMin = false;
        result.regionMin_ = null;
        return this;
      }
      
      public bool HasRegionMax {
       get { return result.hasRegionMax; }
      }
      public global::Gazillion.NetStructPoint3 RegionMax {
        get { return result.RegionMax; }
        set { SetRegionMax(value); }
      }
      public Builder SetRegionMax(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRegionMax = true;
        result.regionMax_ = value;
        return this;
      }
      public Builder SetRegionMax(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRegionMax = true;
        result.regionMax_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRegionMax(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRegionMax &&
            result.regionMax_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.regionMax_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.regionMax_).MergeFrom(value).BuildPartial();
        } else {
          result.regionMax_ = value;
        }
        result.hasRegionMax = true;
        return this;
      }
      public Builder ClearRegionMax() {
        PrepareBuilder();
        result.hasRegionMax = false;
        result.regionMax_ = null;
        return this;
      }
      
      public bool HasCreateRegionParams {
       get { return result.hasCreateRegionParams; }
      }
      public global::Gazillion.NetStructCreateRegionParams CreateRegionParams {
        get { return result.CreateRegionParams; }
        set { SetCreateRegionParams(value); }
      }
      public Builder SetCreateRegionParams(global::Gazillion.NetStructCreateRegionParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCreateRegionParams = true;
        result.createRegionParams_ = value;
        return this;
      }
      public Builder SetCreateRegionParams(global::Gazillion.NetStructCreateRegionParams.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCreateRegionParams = true;
        result.createRegionParams_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCreateRegionParams(global::Gazillion.NetStructCreateRegionParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCreateRegionParams &&
            result.createRegionParams_ != global::Gazillion.NetStructCreateRegionParams.DefaultInstance) {
            result.createRegionParams_ = global::Gazillion.NetStructCreateRegionParams.CreateBuilder(result.createRegionParams_).MergeFrom(value).BuildPartial();
        } else {
          result.createRegionParams_ = value;
        }
        result.hasCreateRegionParams = true;
        return this;
      }
      public Builder ClearCreateRegionParams() {
        PrepareBuilder();
        result.hasCreateRegionParams = false;
        result.createRegionParams_ = null;
        return this;
      }
    }
    static NetMessageRegionChange() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityPosition : pb::GeneratedMessage<NetMessageEntityPosition, NetMessageEntityPosition.Builder> {
    private NetMessageEntityPosition() { }
    private static readonly NetMessageEntityPosition defaultInstance = new NetMessageEntityPosition().MakeReadOnly();
    private static readonly string[] _netMessageEntityPositionFieldNames = new string[] { "areaId", "cellId", "entityPrototypeId", "flags", "idEntity", "orientation", "position" };
    private static readonly uint[] _netMessageEntityPositionFieldTags = new uint[] { 48, 40, 56, 16, 8, 34, 26 };
    public static NetMessageEntityPosition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityPosition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityPosition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityPosition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityPosition, NetMessageEntityPosition.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityPosition__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int FlagsFieldNumber = 2;
    private bool hasFlags;
    private uint flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public uint Flags {
      get { return flags_; }
    }
    
    public const int PositionFieldNumber = 3;
    private bool hasPosition;
    private global::Gazillion.NetStructPoint3 position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::Gazillion.NetStructPoint3 Position {
      get { return position_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int OrientationFieldNumber = 4;
    private bool hasOrientation;
    private global::Gazillion.NetStructPoint3 orientation_;
    public bool HasOrientation {
      get { return hasOrientation; }
    }
    public global::Gazillion.NetStructPoint3 Orientation {
      get { return orientation_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int CellIdFieldNumber = 5;
    private bool hasCellId;
    private uint cellId_;
    public bool HasCellId {
      get { return hasCellId; }
    }
    public uint CellId {
      get { return cellId_; }
    }
    
    public const int AreaIdFieldNumber = 6;
    private bool hasAreaId;
    private uint areaId_;
    public bool HasAreaId {
      get { return hasAreaId; }
    }
    public uint AreaId {
      get { return areaId_; }
    }
    
    public const int EntityPrototypeIdFieldNumber = 7;
    private bool hasEntityPrototypeId;
    private ulong entityPrototypeId_;
    public bool HasEntityPrototypeId {
      get { return hasEntityPrototypeId; }
    }
    public ulong EntityPrototypeId {
      get { return entityPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        if (!hasFlags) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityPositionFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[4], IdEntity);
      }
      if (hasFlags) {
        output.WriteUInt32(2, field_names[3], Flags);
      }
      if (hasPosition) {
        output.WriteMessage(3, field_names[6], Position);
      }
      if (hasOrientation) {
        output.WriteMessage(4, field_names[5], Orientation);
      }
      if (hasCellId) {
        output.WriteUInt32(5, field_names[1], CellId);
      }
      if (hasAreaId) {
        output.WriteUInt32(6, field_names[0], AreaId);
      }
      if (hasEntityPrototypeId) {
        output.WriteUInt64(7, field_names[2], EntityPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasFlags) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Flags);
      }
      if (hasPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Position);
      }
      if (hasOrientation) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Orientation);
      }
      if (hasCellId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, CellId);
      }
      if (hasAreaId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, AreaId);
      }
      if (hasEntityPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(7, EntityPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityPosition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPosition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPosition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPosition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPosition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPosition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPosition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityPosition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityPosition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPosition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityPosition MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityPosition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityPosition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityPosition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityPosition result;
      
      private NetMessageEntityPosition PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityPosition original = result;
          result = new NetMessageEntityPosition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityPosition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityPosition.Descriptor; }
      }
      
      public override NetMessageEntityPosition DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityPosition.DefaultInstance; }
      }
      
      public override NetMessageEntityPosition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityPosition) {
          return MergeFrom((NetMessageEntityPosition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityPosition other) {
        if (other == global::Gazillion.NetMessageEntityPosition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasOrientation) {
          MergeOrientation(other.Orientation);
        }
        if (other.HasCellId) {
          CellId = other.CellId;
        }
        if (other.HasAreaId) {
          AreaId = other.AreaId;
        }
        if (other.HasEntityPrototypeId) {
          EntityPrototypeId = other.EntityPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityPositionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityPositionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 16: {
              result.hasFlags = input.ReadUInt32(ref result.flags_);
              break;
            }
            case 26: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasOrientation) {
                subBuilder.MergeFrom(Orientation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Orientation = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasCellId = input.ReadUInt32(ref result.cellId_);
              break;
            }
            case 48: {
              result.hasAreaId = input.ReadUInt32(ref result.areaId_);
              break;
            }
            case 56: {
              result.hasEntityPrototypeId = input.ReadUInt64(ref result.entityPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public uint Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(uint value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::Gazillion.NetStructPoint3 Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.position_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasOrientation {
       get { return result.hasOrientation; }
      }
      public global::Gazillion.NetStructPoint3 Orientation {
        get { return result.Orientation; }
        set { SetOrientation(value); }
      }
      public Builder SetOrientation(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrientation = true;
        result.orientation_ = value;
        return this;
      }
      public Builder SetOrientation(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOrientation = true;
        result.orientation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOrientation(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOrientation &&
            result.orientation_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.orientation_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.orientation_).MergeFrom(value).BuildPartial();
        } else {
          result.orientation_ = value;
        }
        result.hasOrientation = true;
        return this;
      }
      public Builder ClearOrientation() {
        PrepareBuilder();
        result.hasOrientation = false;
        result.orientation_ = null;
        return this;
      }
      
      public bool HasCellId {
        get { return result.hasCellId; }
      }
      public uint CellId {
        get { return result.CellId; }
        set { SetCellId(value); }
      }
      public Builder SetCellId(uint value) {
        PrepareBuilder();
        result.hasCellId = true;
        result.cellId_ = value;
        return this;
      }
      public Builder ClearCellId() {
        PrepareBuilder();
        result.hasCellId = false;
        result.cellId_ = 0;
        return this;
      }
      
      public bool HasAreaId {
        get { return result.hasAreaId; }
      }
      public uint AreaId {
        get { return result.AreaId; }
        set { SetAreaId(value); }
      }
      public Builder SetAreaId(uint value) {
        PrepareBuilder();
        result.hasAreaId = true;
        result.areaId_ = value;
        return this;
      }
      public Builder ClearAreaId() {
        PrepareBuilder();
        result.hasAreaId = false;
        result.areaId_ = 0;
        return this;
      }
      
      public bool HasEntityPrototypeId {
        get { return result.hasEntityPrototypeId; }
      }
      public ulong EntityPrototypeId {
        get { return result.EntityPrototypeId; }
        set { SetEntityPrototypeId(value); }
      }
      public Builder SetEntityPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasEntityPrototypeId = true;
        result.entityPrototypeId_ = value;
        return this;
      }
      public Builder ClearEntityPrototypeId() {
        PrepareBuilder();
        result.hasEntityPrototypeId = false;
        result.entityPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageEntityPosition() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLocomotionStateUpdate : pb::GeneratedMessage<NetMessageLocomotionStateUpdate, NetMessageLocomotionStateUpdate.Builder> {
    private NetMessageLocomotionStateUpdate() { }
    private static readonly NetMessageLocomotionStateUpdate defaultInstance = new NetMessageLocomotionStateUpdate().MakeReadOnly();
    private static readonly string[] _netMessageLocomotionStateUpdateFieldNames = new string[] { "entityPrototypeId", "idEntity", "locomotionstate", "orientation", "position" };
    private static readonly uint[] _netMessageLocomotionStateUpdateFieldTags = new uint[] { 40, 8, 18, 34, 26 };
    public static NetMessageLocomotionStateUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLocomotionStateUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLocomotionStateUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLocomotionStateUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLocomotionStateUpdate, NetMessageLocomotionStateUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLocomotionStateUpdate__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int LocomotionstateFieldNumber = 2;
    private bool hasLocomotionstate;
    private global::Gazillion.NetStructLocomotionState locomotionstate_;
    public bool HasLocomotionstate {
      get { return hasLocomotionstate; }
    }
    public global::Gazillion.NetStructLocomotionState Locomotionstate {
      get { return locomotionstate_ ?? global::Gazillion.NetStructLocomotionState.DefaultInstance; }
    }
    
    public const int PositionFieldNumber = 3;
    private bool hasPosition;
    private global::Gazillion.NetStructPoint3 position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::Gazillion.NetStructPoint3 Position {
      get { return position_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int OrientationFieldNumber = 4;
    private bool hasOrientation;
    private global::Gazillion.NetStructPoint3 orientation_;
    public bool HasOrientation {
      get { return hasOrientation; }
    }
    public global::Gazillion.NetStructPoint3 Orientation {
      get { return orientation_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int EntityPrototypeIdFieldNumber = 5;
    private bool hasEntityPrototypeId;
    private ulong entityPrototypeId_;
    public bool HasEntityPrototypeId {
      get { return hasEntityPrototypeId; }
    }
    public ulong EntityPrototypeId {
      get { return entityPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        if (!hasLocomotionstate) return false;
        if (!hasPosition) return false;
        if (!hasOrientation) return false;
        if (!Locomotionstate.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLocomotionStateUpdateFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[1], IdEntity);
      }
      if (hasLocomotionstate) {
        output.WriteMessage(2, field_names[2], Locomotionstate);
      }
      if (hasPosition) {
        output.WriteMessage(3, field_names[4], Position);
      }
      if (hasOrientation) {
        output.WriteMessage(4, field_names[3], Orientation);
      }
      if (hasEntityPrototypeId) {
        output.WriteUInt64(5, field_names[0], EntityPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasLocomotionstate) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Locomotionstate);
      }
      if (hasPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Position);
      }
      if (hasOrientation) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Orientation);
      }
      if (hasEntityPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, EntityPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLocomotionStateUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLocomotionStateUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLocomotionStateUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLocomotionStateUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLocomotionStateUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLocomotionStateUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLocomotionStateUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLocomotionStateUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLocomotionStateUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLocomotionStateUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLocomotionStateUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLocomotionStateUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLocomotionStateUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLocomotionStateUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLocomotionStateUpdate result;
      
      private NetMessageLocomotionStateUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLocomotionStateUpdate original = result;
          result = new NetMessageLocomotionStateUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLocomotionStateUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLocomotionStateUpdate.Descriptor; }
      }
      
      public override NetMessageLocomotionStateUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLocomotionStateUpdate.DefaultInstance; }
      }
      
      public override NetMessageLocomotionStateUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLocomotionStateUpdate) {
          return MergeFrom((NetMessageLocomotionStateUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLocomotionStateUpdate other) {
        if (other == global::Gazillion.NetMessageLocomotionStateUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasLocomotionstate) {
          MergeLocomotionstate(other.Locomotionstate);
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasOrientation) {
          MergeOrientation(other.Orientation);
        }
        if (other.HasEntityPrototypeId) {
          EntityPrototypeId = other.EntityPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLocomotionStateUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLocomotionStateUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 18: {
              global::Gazillion.NetStructLocomotionState.Builder subBuilder = global::Gazillion.NetStructLocomotionState.CreateBuilder();
              if (result.hasLocomotionstate) {
                subBuilder.MergeFrom(Locomotionstate);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Locomotionstate = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasOrientation) {
                subBuilder.MergeFrom(Orientation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Orientation = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasEntityPrototypeId = input.ReadUInt64(ref result.entityPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasLocomotionstate {
       get { return result.hasLocomotionstate; }
      }
      public global::Gazillion.NetStructLocomotionState Locomotionstate {
        get { return result.Locomotionstate; }
        set { SetLocomotionstate(value); }
      }
      public Builder SetLocomotionstate(global::Gazillion.NetStructLocomotionState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocomotionstate = true;
        result.locomotionstate_ = value;
        return this;
      }
      public Builder SetLocomotionstate(global::Gazillion.NetStructLocomotionState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLocomotionstate = true;
        result.locomotionstate_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLocomotionstate(global::Gazillion.NetStructLocomotionState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLocomotionstate &&
            result.locomotionstate_ != global::Gazillion.NetStructLocomotionState.DefaultInstance) {
            result.locomotionstate_ = global::Gazillion.NetStructLocomotionState.CreateBuilder(result.locomotionstate_).MergeFrom(value).BuildPartial();
        } else {
          result.locomotionstate_ = value;
        }
        result.hasLocomotionstate = true;
        return this;
      }
      public Builder ClearLocomotionstate() {
        PrepareBuilder();
        result.hasLocomotionstate = false;
        result.locomotionstate_ = null;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::Gazillion.NetStructPoint3 Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.position_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasOrientation {
       get { return result.hasOrientation; }
      }
      public global::Gazillion.NetStructPoint3 Orientation {
        get { return result.Orientation; }
        set { SetOrientation(value); }
      }
      public Builder SetOrientation(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrientation = true;
        result.orientation_ = value;
        return this;
      }
      public Builder SetOrientation(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOrientation = true;
        result.orientation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOrientation(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOrientation &&
            result.orientation_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.orientation_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.orientation_).MergeFrom(value).BuildPartial();
        } else {
          result.orientation_ = value;
        }
        result.hasOrientation = true;
        return this;
      }
      public Builder ClearOrientation() {
        PrepareBuilder();
        result.hasOrientation = false;
        result.orientation_ = null;
        return this;
      }
      
      public bool HasEntityPrototypeId {
        get { return result.hasEntityPrototypeId; }
      }
      public ulong EntityPrototypeId {
        get { return result.EntityPrototypeId; }
        set { SetEntityPrototypeId(value); }
      }
      public Builder SetEntityPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasEntityPrototypeId = true;
        result.entityPrototypeId_ = value;
        return this;
      }
      public Builder ClearEntityPrototypeId() {
        PrepareBuilder();
        result.hasEntityPrototypeId = false;
        result.entityPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageLocomotionStateUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageInterestPolicies : pb::GeneratedMessage<NetMessageInterestPolicies, NetMessageInterestPolicies.Builder> {
    private NetMessageInterestPolicies() { }
    private static readonly NetMessageInterestPolicies defaultInstance = new NetMessageInterestPolicies().MakeReadOnly();
    private static readonly string[] _netMessageInterestPoliciesFieldNames = new string[] { "entityDataId", "idEntity", "newPolicies", "prevPolicies" };
    private static readonly uint[] _netMessageInterestPoliciesFieldTags = new uint[] { 32, 8, 16, 24 };
    public static NetMessageInterestPolicies DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageInterestPolicies DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageInterestPolicies ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInterestPolicies__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageInterestPolicies, NetMessageInterestPolicies.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInterestPolicies__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int NewPoliciesFieldNumber = 2;
    private bool hasNewPolicies;
    private uint newPolicies_;
    public bool HasNewPolicies {
      get { return hasNewPolicies; }
    }
    public uint NewPolicies {
      get { return newPolicies_; }
    }
    
    public const int PrevPoliciesFieldNumber = 3;
    private bool hasPrevPolicies;
    private uint prevPolicies_;
    public bool HasPrevPolicies {
      get { return hasPrevPolicies; }
    }
    public uint PrevPolicies {
      get { return prevPolicies_; }
    }
    
    public const int EntityDataIdFieldNumber = 4;
    private bool hasEntityDataId;
    private ulong entityDataId_;
    public bool HasEntityDataId {
      get { return hasEntityDataId; }
    }
    public ulong EntityDataId {
      get { return entityDataId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        if (!hasNewPolicies) return false;
        if (!hasPrevPolicies) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageInterestPoliciesFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[1], IdEntity);
      }
      if (hasNewPolicies) {
        output.WriteUInt32(2, field_names[2], NewPolicies);
      }
      if (hasPrevPolicies) {
        output.WriteUInt32(3, field_names[3], PrevPolicies);
      }
      if (hasEntityDataId) {
        output.WriteUInt64(4, field_names[0], EntityDataId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasNewPolicies) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, NewPolicies);
      }
      if (hasPrevPolicies) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, PrevPolicies);
      }
      if (hasEntityDataId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, EntityDataId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageInterestPolicies ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInterestPolicies ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInterestPolicies ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInterestPolicies ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInterestPolicies ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInterestPolicies ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInterestPolicies ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageInterestPolicies ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageInterestPolicies ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInterestPolicies ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageInterestPolicies MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageInterestPolicies prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageInterestPolicies, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageInterestPolicies cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageInterestPolicies result;
      
      private NetMessageInterestPolicies PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageInterestPolicies original = result;
          result = new NetMessageInterestPolicies();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageInterestPolicies MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageInterestPolicies.Descriptor; }
      }
      
      public override NetMessageInterestPolicies DefaultInstanceForType {
        get { return global::Gazillion.NetMessageInterestPolicies.DefaultInstance; }
      }
      
      public override NetMessageInterestPolicies BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageInterestPolicies) {
          return MergeFrom((NetMessageInterestPolicies) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageInterestPolicies other) {
        if (other == global::Gazillion.NetMessageInterestPolicies.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasNewPolicies) {
          NewPolicies = other.NewPolicies;
        }
        if (other.HasPrevPolicies) {
          PrevPolicies = other.PrevPolicies;
        }
        if (other.HasEntityDataId) {
          EntityDataId = other.EntityDataId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageInterestPoliciesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageInterestPoliciesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 16: {
              result.hasNewPolicies = input.ReadUInt32(ref result.newPolicies_);
              break;
            }
            case 24: {
              result.hasPrevPolicies = input.ReadUInt32(ref result.prevPolicies_);
              break;
            }
            case 32: {
              result.hasEntityDataId = input.ReadUInt64(ref result.entityDataId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasNewPolicies {
        get { return result.hasNewPolicies; }
      }
      public uint NewPolicies {
        get { return result.NewPolicies; }
        set { SetNewPolicies(value); }
      }
      public Builder SetNewPolicies(uint value) {
        PrepareBuilder();
        result.hasNewPolicies = true;
        result.newPolicies_ = value;
        return this;
      }
      public Builder ClearNewPolicies() {
        PrepareBuilder();
        result.hasNewPolicies = false;
        result.newPolicies_ = 0;
        return this;
      }
      
      public bool HasPrevPolicies {
        get { return result.hasPrevPolicies; }
      }
      public uint PrevPolicies {
        get { return result.PrevPolicies; }
        set { SetPrevPolicies(value); }
      }
      public Builder SetPrevPolicies(uint value) {
        PrepareBuilder();
        result.hasPrevPolicies = true;
        result.prevPolicies_ = value;
        return this;
      }
      public Builder ClearPrevPolicies() {
        PrepareBuilder();
        result.hasPrevPolicies = false;
        result.prevPolicies_ = 0;
        return this;
      }
      
      public bool HasEntityDataId {
        get { return result.hasEntityDataId; }
      }
      public ulong EntityDataId {
        get { return result.EntityDataId; }
        set { SetEntityDataId(value); }
      }
      public Builder SetEntityDataId(ulong value) {
        PrepareBuilder();
        result.hasEntityDataId = true;
        result.entityDataId_ = value;
        return this;
      }
      public Builder ClearEntityDataId() {
        PrepareBuilder();
        result.hasEntityDataId = false;
        result.entityDataId_ = 0UL;
        return this;
      }
    }
    static NetMessageInterestPolicies() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUnableToChangeRegion : pb::GeneratedMessage<NetMessageUnableToChangeRegion, NetMessageUnableToChangeRegion.Builder> {
    private NetMessageUnableToChangeRegion() { }
    private static readonly NetMessageUnableToChangeRegion defaultInstance = new NetMessageUnableToChangeRegion().MakeReadOnly();
    private static readonly string[] _netMessageUnableToChangeRegionFieldNames = new string[] { "changeFailed" };
    private static readonly uint[] _netMessageUnableToChangeRegionFieldTags = new uint[] { 10 };
    public static NetMessageUnableToChangeRegion DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUnableToChangeRegion DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUnableToChangeRegion ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUnableToChangeRegion__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUnableToChangeRegion, NetMessageUnableToChangeRegion.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUnableToChangeRegion__FieldAccessorTable; }
    }
    
    public const int ChangeFailedFieldNumber = 1;
    private bool hasChangeFailed;
    private global::Gazillion.ChangeRegionFailed changeFailed_;
    public bool HasChangeFailed {
      get { return hasChangeFailed; }
    }
    public global::Gazillion.ChangeRegionFailed ChangeFailed {
      get { return changeFailed_ ?? global::Gazillion.ChangeRegionFailed.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChangeFailed) return false;
        if (!ChangeFailed.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUnableToChangeRegionFieldNames;
      if (hasChangeFailed) {
        output.WriteMessage(1, field_names[0], ChangeFailed);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasChangeFailed) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, ChangeFailed);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUnableToChangeRegion ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnableToChangeRegion ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnableToChangeRegion ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnableToChangeRegion ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnableToChangeRegion ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnableToChangeRegion ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnableToChangeRegion ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUnableToChangeRegion ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUnableToChangeRegion ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnableToChangeRegion ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUnableToChangeRegion MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUnableToChangeRegion prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUnableToChangeRegion, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUnableToChangeRegion cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUnableToChangeRegion result;
      
      private NetMessageUnableToChangeRegion PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUnableToChangeRegion original = result;
          result = new NetMessageUnableToChangeRegion();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUnableToChangeRegion MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUnableToChangeRegion.Descriptor; }
      }
      
      public override NetMessageUnableToChangeRegion DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUnableToChangeRegion.DefaultInstance; }
      }
      
      public override NetMessageUnableToChangeRegion BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUnableToChangeRegion) {
          return MergeFrom((NetMessageUnableToChangeRegion) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUnableToChangeRegion other) {
        if (other == global::Gazillion.NetMessageUnableToChangeRegion.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChangeFailed) {
          MergeChangeFailed(other.ChangeFailed);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUnableToChangeRegionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUnableToChangeRegionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.ChangeRegionFailed.Builder subBuilder = global::Gazillion.ChangeRegionFailed.CreateBuilder();
              if (result.hasChangeFailed) {
                subBuilder.MergeFrom(ChangeFailed);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChangeFailed = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChangeFailed {
       get { return result.hasChangeFailed; }
      }
      public global::Gazillion.ChangeRegionFailed ChangeFailed {
        get { return result.ChangeFailed; }
        set { SetChangeFailed(value); }
      }
      public Builder SetChangeFailed(global::Gazillion.ChangeRegionFailed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChangeFailed = true;
        result.changeFailed_ = value;
        return this;
      }
      public Builder SetChangeFailed(global::Gazillion.ChangeRegionFailed.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChangeFailed = true;
        result.changeFailed_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChangeFailed(global::Gazillion.ChangeRegionFailed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChangeFailed &&
            result.changeFailed_ != global::Gazillion.ChangeRegionFailed.DefaultInstance) {
            result.changeFailed_ = global::Gazillion.ChangeRegionFailed.CreateBuilder(result.changeFailed_).MergeFrom(value).BuildPartial();
        } else {
          result.changeFailed_ = value;
        }
        result.hasChangeFailed = true;
        return this;
      }
      public Builder ClearChangeFailed() {
        PrepareBuilder();
        result.hasChangeFailed = false;
        result.changeFailed_ = null;
        return this;
      }
    }
    static NetMessageUnableToChangeRegion() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetStructAreaConnection : pb::GeneratedMessage<NetStructAreaConnection, NetStructAreaConnection.Builder> {
    private NetStructAreaConnection() { }
    private static readonly NetStructAreaConnection defaultInstance = new NetStructAreaConnection().MakeReadOnly();
    private static readonly string[] _netStructAreaConnectionFieldNames = new string[] { "areaId", "connectPoint" };
    private static readonly uint[] _netStructAreaConnectionFieldTags = new uint[] { 8, 18 };
    public static NetStructAreaConnection DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetStructAreaConnection DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetStructAreaConnection ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructAreaConnection__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetStructAreaConnection, NetStructAreaConnection.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructAreaConnection__FieldAccessorTable; }
    }
    
    public const int AreaIdFieldNumber = 1;
    private bool hasAreaId;
    private uint areaId_;
    public bool HasAreaId {
      get { return hasAreaId; }
    }
    public uint AreaId {
      get { return areaId_; }
    }
    
    public const int ConnectPointFieldNumber = 2;
    private bool hasConnectPoint;
    private global::Gazillion.NetStructIPoint2 connectPoint_;
    public bool HasConnectPoint {
      get { return hasConnectPoint; }
    }
    public global::Gazillion.NetStructIPoint2 ConnectPoint {
      get { return connectPoint_ ?? global::Gazillion.NetStructIPoint2.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAreaId) return false;
        if (!hasConnectPoint) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netStructAreaConnectionFieldNames;
      if (hasAreaId) {
        output.WriteUInt32(1, field_names[0], AreaId);
      }
      if (hasConnectPoint) {
        output.WriteMessage(2, field_names[1], ConnectPoint);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAreaId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AreaId);
      }
      if (hasConnectPoint) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, ConnectPoint);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetStructAreaConnection ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructAreaConnection ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructAreaConnection ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructAreaConnection ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructAreaConnection ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructAreaConnection ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetStructAreaConnection ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetStructAreaConnection ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetStructAreaConnection ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructAreaConnection ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetStructAreaConnection MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetStructAreaConnection prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetStructAreaConnection, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetStructAreaConnection cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetStructAreaConnection result;
      
      private NetStructAreaConnection PrepareBuilder() {
        if (resultIsReadOnly) {
          NetStructAreaConnection original = result;
          result = new NetStructAreaConnection();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetStructAreaConnection MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetStructAreaConnection.Descriptor; }
      }
      
      public override NetStructAreaConnection DefaultInstanceForType {
        get { return global::Gazillion.NetStructAreaConnection.DefaultInstance; }
      }
      
      public override NetStructAreaConnection BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetStructAreaConnection) {
          return MergeFrom((NetStructAreaConnection) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetStructAreaConnection other) {
        if (other == global::Gazillion.NetStructAreaConnection.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAreaId) {
          AreaId = other.AreaId;
        }
        if (other.HasConnectPoint) {
          MergeConnectPoint(other.ConnectPoint);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netStructAreaConnectionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netStructAreaConnectionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAreaId = input.ReadUInt32(ref result.areaId_);
              break;
            }
            case 18: {
              global::Gazillion.NetStructIPoint2.Builder subBuilder = global::Gazillion.NetStructIPoint2.CreateBuilder();
              if (result.hasConnectPoint) {
                subBuilder.MergeFrom(ConnectPoint);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ConnectPoint = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAreaId {
        get { return result.hasAreaId; }
      }
      public uint AreaId {
        get { return result.AreaId; }
        set { SetAreaId(value); }
      }
      public Builder SetAreaId(uint value) {
        PrepareBuilder();
        result.hasAreaId = true;
        result.areaId_ = value;
        return this;
      }
      public Builder ClearAreaId() {
        PrepareBuilder();
        result.hasAreaId = false;
        result.areaId_ = 0;
        return this;
      }
      
      public bool HasConnectPoint {
       get { return result.hasConnectPoint; }
      }
      public global::Gazillion.NetStructIPoint2 ConnectPoint {
        get { return result.ConnectPoint; }
        set { SetConnectPoint(value); }
      }
      public Builder SetConnectPoint(global::Gazillion.NetStructIPoint2 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConnectPoint = true;
        result.connectPoint_ = value;
        return this;
      }
      public Builder SetConnectPoint(global::Gazillion.NetStructIPoint2.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasConnectPoint = true;
        result.connectPoint_ = builderForValue.Build();
        return this;
      }
      public Builder MergeConnectPoint(global::Gazillion.NetStructIPoint2 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasConnectPoint &&
            result.connectPoint_ != global::Gazillion.NetStructIPoint2.DefaultInstance) {
            result.connectPoint_ = global::Gazillion.NetStructIPoint2.CreateBuilder(result.connectPoint_).MergeFrom(value).BuildPartial();
        } else {
          result.connectPoint_ = value;
        }
        result.hasConnectPoint = true;
        return this;
      }
      public Builder ClearConnectPoint() {
        PrepareBuilder();
        result.hasConnectPoint = false;
        result.connectPoint_ = null;
        return this;
      }
    }
    static NetStructAreaConnection() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAddArea : pb::GeneratedMessage<NetMessageAddArea, NetMessageAddArea.Builder> {
    private NetMessageAddArea() { }
    private static readonly NetMessageAddArea defaultInstance = new NetMessageAddArea().MakeReadOnly();
    private static readonly string[] _netMessageAddAreaFieldNames = new string[] { "areaId", "areaOrigin", "areaPrototypeId", "isStartArea" };
    private static readonly uint[] _netMessageAddAreaFieldTags = new uint[] { 8, 26, 16, 32 };
    public static NetMessageAddArea DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAddArea DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAddArea ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAddArea__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAddArea, NetMessageAddArea.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAddArea__FieldAccessorTable; }
    }
    
    public const int AreaIdFieldNumber = 1;
    private bool hasAreaId;
    private uint areaId_;
    public bool HasAreaId {
      get { return hasAreaId; }
    }
    public uint AreaId {
      get { return areaId_; }
    }
    
    public const int AreaPrototypeIdFieldNumber = 2;
    private bool hasAreaPrototypeId;
    private ulong areaPrototypeId_;
    public bool HasAreaPrototypeId {
      get { return hasAreaPrototypeId; }
    }
    public ulong AreaPrototypeId {
      get { return areaPrototypeId_; }
    }
    
    public const int AreaOriginFieldNumber = 3;
    private bool hasAreaOrigin;
    private global::Gazillion.NetStructPoint3 areaOrigin_;
    public bool HasAreaOrigin {
      get { return hasAreaOrigin; }
    }
    public global::Gazillion.NetStructPoint3 AreaOrigin {
      get { return areaOrigin_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int IsStartAreaFieldNumber = 4;
    private bool hasIsStartArea;
    private bool isStartArea_;
    public bool HasIsStartArea {
      get { return hasIsStartArea; }
    }
    public bool IsStartArea {
      get { return isStartArea_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAreaId) return false;
        if (!hasAreaPrototypeId) return false;
        if (!hasAreaOrigin) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAddAreaFieldNames;
      if (hasAreaId) {
        output.WriteUInt32(1, field_names[0], AreaId);
      }
      if (hasAreaPrototypeId) {
        output.WriteUInt64(2, field_names[2], AreaPrototypeId);
      }
      if (hasAreaOrigin) {
        output.WriteMessage(3, field_names[1], AreaOrigin);
      }
      if (hasIsStartArea) {
        output.WriteBool(4, field_names[3], IsStartArea);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAreaId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AreaId);
      }
      if (hasAreaPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, AreaPrototypeId);
      }
      if (hasAreaOrigin) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, AreaOrigin);
      }
      if (hasIsStartArea) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, IsStartArea);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAddArea ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAddArea ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAddArea ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAddArea ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAddArea ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAddArea ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAddArea ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAddArea ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAddArea ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAddArea ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAddArea MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAddArea prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAddArea, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAddArea cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAddArea result;
      
      private NetMessageAddArea PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAddArea original = result;
          result = new NetMessageAddArea();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAddArea MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAddArea.Descriptor; }
      }
      
      public override NetMessageAddArea DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAddArea.DefaultInstance; }
      }
      
      public override NetMessageAddArea BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAddArea) {
          return MergeFrom((NetMessageAddArea) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAddArea other) {
        if (other == global::Gazillion.NetMessageAddArea.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAreaId) {
          AreaId = other.AreaId;
        }
        if (other.HasAreaPrototypeId) {
          AreaPrototypeId = other.AreaPrototypeId;
        }
        if (other.HasAreaOrigin) {
          MergeAreaOrigin(other.AreaOrigin);
        }
        if (other.HasIsStartArea) {
          IsStartArea = other.IsStartArea;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAddAreaFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAddAreaFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAreaId = input.ReadUInt32(ref result.areaId_);
              break;
            }
            case 16: {
              result.hasAreaPrototypeId = input.ReadUInt64(ref result.areaPrototypeId_);
              break;
            }
            case 26: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasAreaOrigin) {
                subBuilder.MergeFrom(AreaOrigin);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AreaOrigin = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasIsStartArea = input.ReadBool(ref result.isStartArea_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAreaId {
        get { return result.hasAreaId; }
      }
      public uint AreaId {
        get { return result.AreaId; }
        set { SetAreaId(value); }
      }
      public Builder SetAreaId(uint value) {
        PrepareBuilder();
        result.hasAreaId = true;
        result.areaId_ = value;
        return this;
      }
      public Builder ClearAreaId() {
        PrepareBuilder();
        result.hasAreaId = false;
        result.areaId_ = 0;
        return this;
      }
      
      public bool HasAreaPrototypeId {
        get { return result.hasAreaPrototypeId; }
      }
      public ulong AreaPrototypeId {
        get { return result.AreaPrototypeId; }
        set { SetAreaPrototypeId(value); }
      }
      public Builder SetAreaPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasAreaPrototypeId = true;
        result.areaPrototypeId_ = value;
        return this;
      }
      public Builder ClearAreaPrototypeId() {
        PrepareBuilder();
        result.hasAreaPrototypeId = false;
        result.areaPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasAreaOrigin {
       get { return result.hasAreaOrigin; }
      }
      public global::Gazillion.NetStructPoint3 AreaOrigin {
        get { return result.AreaOrigin; }
        set { SetAreaOrigin(value); }
      }
      public Builder SetAreaOrigin(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAreaOrigin = true;
        result.areaOrigin_ = value;
        return this;
      }
      public Builder SetAreaOrigin(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAreaOrigin = true;
        result.areaOrigin_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAreaOrigin(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAreaOrigin &&
            result.areaOrigin_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.areaOrigin_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.areaOrigin_).MergeFrom(value).BuildPartial();
        } else {
          result.areaOrigin_ = value;
        }
        result.hasAreaOrigin = true;
        return this;
      }
      public Builder ClearAreaOrigin() {
        PrepareBuilder();
        result.hasAreaOrigin = false;
        result.areaOrigin_ = null;
        return this;
      }
      
      public bool HasIsStartArea {
        get { return result.hasIsStartArea; }
      }
      public bool IsStartArea {
        get { return result.IsStartArea; }
        set { SetIsStartArea(value); }
      }
      public Builder SetIsStartArea(bool value) {
        PrepareBuilder();
        result.hasIsStartArea = true;
        result.isStartArea_ = value;
        return this;
      }
      public Builder ClearIsStartArea() {
        PrepareBuilder();
        result.hasIsStartArea = false;
        result.isStartArea_ = false;
        return this;
      }
    }
    static NetMessageAddArea() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRemoveArea : pb::GeneratedMessage<NetMessageRemoveArea, NetMessageRemoveArea.Builder> {
    private NetMessageRemoveArea() { }
    private static readonly NetMessageRemoveArea defaultInstance = new NetMessageRemoveArea().MakeReadOnly();
    private static readonly string[] _netMessageRemoveAreaFieldNames = new string[] { "areaId" };
    private static readonly uint[] _netMessageRemoveAreaFieldTags = new uint[] { 8 };
    public static NetMessageRemoveArea DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRemoveArea DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRemoveArea ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRemoveArea__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRemoveArea, NetMessageRemoveArea.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRemoveArea__FieldAccessorTable; }
    }
    
    public const int AreaIdFieldNumber = 1;
    private bool hasAreaId;
    private uint areaId_;
    public bool HasAreaId {
      get { return hasAreaId; }
    }
    public uint AreaId {
      get { return areaId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAreaId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRemoveAreaFieldNames;
      if (hasAreaId) {
        output.WriteUInt32(1, field_names[0], AreaId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAreaId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AreaId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRemoveArea ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRemoveArea ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRemoveArea ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRemoveArea ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRemoveArea ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRemoveArea ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRemoveArea ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRemoveArea ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRemoveArea ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRemoveArea ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRemoveArea MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRemoveArea prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRemoveArea, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRemoveArea cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRemoveArea result;
      
      private NetMessageRemoveArea PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRemoveArea original = result;
          result = new NetMessageRemoveArea();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRemoveArea MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRemoveArea.Descriptor; }
      }
      
      public override NetMessageRemoveArea DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRemoveArea.DefaultInstance; }
      }
      
      public override NetMessageRemoveArea BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRemoveArea) {
          return MergeFrom((NetMessageRemoveArea) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRemoveArea other) {
        if (other == global::Gazillion.NetMessageRemoveArea.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAreaId) {
          AreaId = other.AreaId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRemoveAreaFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRemoveAreaFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAreaId = input.ReadUInt32(ref result.areaId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAreaId {
        get { return result.hasAreaId; }
      }
      public uint AreaId {
        get { return result.AreaId; }
        set { SetAreaId(value); }
      }
      public Builder SetAreaId(uint value) {
        PrepareBuilder();
        result.hasAreaId = true;
        result.areaId_ = value;
        return this;
      }
      public Builder ClearAreaId() {
        PrepareBuilder();
        result.hasAreaId = false;
        result.areaId_ = 0;
        return this;
      }
    }
    static NetMessageRemoveArea() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetStructReservedSpawn : pb::GeneratedMessage<NetStructReservedSpawn, NetStructReservedSpawn.Builder> {
    private NetStructReservedSpawn() { }
    private static readonly NetStructReservedSpawn defaultInstance = new NetStructReservedSpawn().MakeReadOnly();
    private static readonly string[] _netStructReservedSpawnFieldNames = new string[] { "asset", "id" };
    private static readonly uint[] _netStructReservedSpawnFieldTags = new uint[] { 8, 16 };
    public static NetStructReservedSpawn DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetStructReservedSpawn DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetStructReservedSpawn ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructReservedSpawn__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetStructReservedSpawn, NetStructReservedSpawn.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructReservedSpawn__FieldAccessorTable; }
    }
    
    public const int AssetFieldNumber = 1;
    private bool hasAsset;
    private ulong asset_;
    public bool HasAsset {
      get { return hasAsset; }
    }
    public ulong Asset {
      get { return asset_; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAsset) return false;
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netStructReservedSpawnFieldNames;
      if (hasAsset) {
        output.WriteUInt64(1, field_names[0], Asset);
      }
      if (hasId) {
        output.WriteUInt32(2, field_names[1], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAsset) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Asset);
      }
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Id);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetStructReservedSpawn ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructReservedSpawn ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructReservedSpawn ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructReservedSpawn ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructReservedSpawn ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructReservedSpawn ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetStructReservedSpawn ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetStructReservedSpawn ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetStructReservedSpawn ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructReservedSpawn ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetStructReservedSpawn MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetStructReservedSpawn prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetStructReservedSpawn, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetStructReservedSpawn cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetStructReservedSpawn result;
      
      private NetStructReservedSpawn PrepareBuilder() {
        if (resultIsReadOnly) {
          NetStructReservedSpawn original = result;
          result = new NetStructReservedSpawn();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetStructReservedSpawn MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetStructReservedSpawn.Descriptor; }
      }
      
      public override NetStructReservedSpawn DefaultInstanceForType {
        get { return global::Gazillion.NetStructReservedSpawn.DefaultInstance; }
      }
      
      public override NetStructReservedSpawn BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetStructReservedSpawn) {
          return MergeFrom((NetStructReservedSpawn) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetStructReservedSpawn other) {
        if (other == global::Gazillion.NetStructReservedSpawn.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAsset) {
          Asset = other.Asset;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netStructReservedSpawnFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netStructReservedSpawnFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAsset = input.ReadUInt64(ref result.asset_);
              break;
            }
            case 16: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAsset {
        get { return result.hasAsset; }
      }
      public ulong Asset {
        get { return result.Asset; }
        set { SetAsset(value); }
      }
      public Builder SetAsset(ulong value) {
        PrepareBuilder();
        result.hasAsset = true;
        result.asset_ = value;
        return this;
      }
      public Builder ClearAsset() {
        PrepareBuilder();
        result.hasAsset = false;
        result.asset_ = 0UL;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static NetStructReservedSpawn() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCellCreate : pb::GeneratedMessage<NetMessageCellCreate, NetMessageCellCreate.Builder> {
    private NetMessageCellCreate() { }
    private static readonly NetMessageCellCreate defaultInstance = new NetMessageCellCreate().MakeReadOnly();
    private static readonly string[] _netMessageCellCreateFieldNames = new string[] { "areaId", "bufferwidth", "cellId", "cellPrototypeId", "cellRandomSeed", "depth", "encounters", "overrideLocationName", "positionInArea" };
    private static readonly uint[] _netMessageCellCreateFieldTags = new uint[] { 8, 64, 16, 24, 48, 40, 58, 72, 34 };
    public static NetMessageCellCreate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCellCreate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCellCreate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCellCreate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCellCreate, NetMessageCellCreate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCellCreate__FieldAccessorTable; }
    }
    
    public const int AreaIdFieldNumber = 1;
    private bool hasAreaId;
    private uint areaId_;
    public bool HasAreaId {
      get { return hasAreaId; }
    }
    public uint AreaId {
      get { return areaId_; }
    }
    
    public const int CellIdFieldNumber = 2;
    private bool hasCellId;
    private uint cellId_;
    public bool HasCellId {
      get { return hasCellId; }
    }
    public uint CellId {
      get { return cellId_; }
    }
    
    public const int CellPrototypeIdFieldNumber = 3;
    private bool hasCellPrototypeId;
    private ulong cellPrototypeId_;
    public bool HasCellPrototypeId {
      get { return hasCellPrototypeId; }
    }
    public ulong CellPrototypeId {
      get { return cellPrototypeId_; }
    }
    
    public const int PositionInAreaFieldNumber = 4;
    private bool hasPositionInArea;
    private global::Gazillion.NetStructPoint3 positionInArea_;
    public bool HasPositionInArea {
      get { return hasPositionInArea; }
    }
    public global::Gazillion.NetStructPoint3 PositionInArea {
      get { return positionInArea_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int DepthFieldNumber = 5;
    private bool hasDepth;
    private uint depth_;
    public bool HasDepth {
      get { return hasDepth; }
    }
    public uint Depth {
      get { return depth_; }
    }
    
    public const int CellRandomSeedFieldNumber = 6;
    private bool hasCellRandomSeed;
    private int cellRandomSeed_;
    public bool HasCellRandomSeed {
      get { return hasCellRandomSeed; }
    }
    public int CellRandomSeed {
      get { return cellRandomSeed_; }
    }
    
    public const int EncountersFieldNumber = 7;
    private pbc::PopsicleList<global::Gazillion.NetStructReservedSpawn> encounters_ = new pbc::PopsicleList<global::Gazillion.NetStructReservedSpawn>();
    public scg::IList<global::Gazillion.NetStructReservedSpawn> EncountersList {
      get { return encounters_; }
    }
    public int EncountersCount {
      get { return encounters_.Count; }
    }
    public global::Gazillion.NetStructReservedSpawn GetEncounters(int index) {
      return encounters_[index];
    }
    
    public const int BufferwidthFieldNumber = 8;
    private bool hasBufferwidth;
    private int bufferwidth_;
    public bool HasBufferwidth {
      get { return hasBufferwidth; }
    }
    public int Bufferwidth {
      get { return bufferwidth_; }
    }
    
    public const int OverrideLocationNameFieldNumber = 9;
    private bool hasOverrideLocationName;
    private ulong overrideLocationName_;
    public bool HasOverrideLocationName {
      get { return hasOverrideLocationName; }
    }
    public ulong OverrideLocationName {
      get { return overrideLocationName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAreaId) return false;
        if (!hasCellId) return false;
        if (!hasCellPrototypeId) return false;
        if (!hasPositionInArea) return false;
        if (!hasDepth) return false;
        if (!hasCellRandomSeed) return false;
        if (!hasBufferwidth) return false;
        if (!hasOverrideLocationName) return false;
        foreach (global::Gazillion.NetStructReservedSpawn element in EncountersList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCellCreateFieldNames;
      if (hasAreaId) {
        output.WriteUInt32(1, field_names[0], AreaId);
      }
      if (hasCellId) {
        output.WriteUInt32(2, field_names[2], CellId);
      }
      if (hasCellPrototypeId) {
        output.WriteUInt64(3, field_names[3], CellPrototypeId);
      }
      if (hasPositionInArea) {
        output.WriteMessage(4, field_names[8], PositionInArea);
      }
      if (hasDepth) {
        output.WriteUInt32(5, field_names[5], Depth);
      }
      if (hasCellRandomSeed) {
        output.WriteInt32(6, field_names[4], CellRandomSeed);
      }
      if (encounters_.Count > 0) {
        output.WriteMessageArray(7, field_names[6], encounters_);
      }
      if (hasBufferwidth) {
        output.WriteInt32(8, field_names[1], Bufferwidth);
      }
      if (hasOverrideLocationName) {
        output.WriteUInt64(9, field_names[7], OverrideLocationName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAreaId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AreaId);
      }
      if (hasCellId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, CellId);
      }
      if (hasCellPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, CellPrototypeId);
      }
      if (hasPositionInArea) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, PositionInArea);
      }
      if (hasDepth) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Depth);
      }
      if (hasCellRandomSeed) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, CellRandomSeed);
      }
      foreach (global::Gazillion.NetStructReservedSpawn element in EncountersList) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, element);
      }
      if (hasBufferwidth) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, Bufferwidth);
      }
      if (hasOverrideLocationName) {
        size += pb::CodedOutputStream.ComputeUInt64Size(9, OverrideLocationName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCellCreate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCellCreate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCellCreate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCellCreate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCellCreate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCellCreate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCellCreate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCellCreate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCellCreate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCellCreate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCellCreate MakeReadOnly() {
      encounters_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCellCreate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCellCreate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCellCreate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCellCreate result;
      
      private NetMessageCellCreate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCellCreate original = result;
          result = new NetMessageCellCreate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCellCreate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCellCreate.Descriptor; }
      }
      
      public override NetMessageCellCreate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCellCreate.DefaultInstance; }
      }
      
      public override NetMessageCellCreate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCellCreate) {
          return MergeFrom((NetMessageCellCreate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCellCreate other) {
        if (other == global::Gazillion.NetMessageCellCreate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAreaId) {
          AreaId = other.AreaId;
        }
        if (other.HasCellId) {
          CellId = other.CellId;
        }
        if (other.HasCellPrototypeId) {
          CellPrototypeId = other.CellPrototypeId;
        }
        if (other.HasPositionInArea) {
          MergePositionInArea(other.PositionInArea);
        }
        if (other.HasDepth) {
          Depth = other.Depth;
        }
        if (other.HasCellRandomSeed) {
          CellRandomSeed = other.CellRandomSeed;
        }
        if (other.encounters_.Count != 0) {
          result.encounters_.Add(other.encounters_);
        }
        if (other.HasBufferwidth) {
          Bufferwidth = other.Bufferwidth;
        }
        if (other.HasOverrideLocationName) {
          OverrideLocationName = other.OverrideLocationName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCellCreateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCellCreateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAreaId = input.ReadUInt32(ref result.areaId_);
              break;
            }
            case 16: {
              result.hasCellId = input.ReadUInt32(ref result.cellId_);
              break;
            }
            case 24: {
              result.hasCellPrototypeId = input.ReadUInt64(ref result.cellPrototypeId_);
              break;
            }
            case 34: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPositionInArea) {
                subBuilder.MergeFrom(PositionInArea);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PositionInArea = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasDepth = input.ReadUInt32(ref result.depth_);
              break;
            }
            case 48: {
              result.hasCellRandomSeed = input.ReadInt32(ref result.cellRandomSeed_);
              break;
            }
            case 58: {
              input.ReadMessageArray(tag, field_name, result.encounters_, global::Gazillion.NetStructReservedSpawn.DefaultInstance, extensionRegistry);
              break;
            }
            case 64: {
              result.hasBufferwidth = input.ReadInt32(ref result.bufferwidth_);
              break;
            }
            case 72: {
              result.hasOverrideLocationName = input.ReadUInt64(ref result.overrideLocationName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAreaId {
        get { return result.hasAreaId; }
      }
      public uint AreaId {
        get { return result.AreaId; }
        set { SetAreaId(value); }
      }
      public Builder SetAreaId(uint value) {
        PrepareBuilder();
        result.hasAreaId = true;
        result.areaId_ = value;
        return this;
      }
      public Builder ClearAreaId() {
        PrepareBuilder();
        result.hasAreaId = false;
        result.areaId_ = 0;
        return this;
      }
      
      public bool HasCellId {
        get { return result.hasCellId; }
      }
      public uint CellId {
        get { return result.CellId; }
        set { SetCellId(value); }
      }
      public Builder SetCellId(uint value) {
        PrepareBuilder();
        result.hasCellId = true;
        result.cellId_ = value;
        return this;
      }
      public Builder ClearCellId() {
        PrepareBuilder();
        result.hasCellId = false;
        result.cellId_ = 0;
        return this;
      }
      
      public bool HasCellPrototypeId {
        get { return result.hasCellPrototypeId; }
      }
      public ulong CellPrototypeId {
        get { return result.CellPrototypeId; }
        set { SetCellPrototypeId(value); }
      }
      public Builder SetCellPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasCellPrototypeId = true;
        result.cellPrototypeId_ = value;
        return this;
      }
      public Builder ClearCellPrototypeId() {
        PrepareBuilder();
        result.hasCellPrototypeId = false;
        result.cellPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasPositionInArea {
       get { return result.hasPositionInArea; }
      }
      public global::Gazillion.NetStructPoint3 PositionInArea {
        get { return result.PositionInArea; }
        set { SetPositionInArea(value); }
      }
      public Builder SetPositionInArea(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPositionInArea = true;
        result.positionInArea_ = value;
        return this;
      }
      public Builder SetPositionInArea(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPositionInArea = true;
        result.positionInArea_ = builderForValue.Build();
        return this;
      }
      public Builder MergePositionInArea(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPositionInArea &&
            result.positionInArea_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.positionInArea_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.positionInArea_).MergeFrom(value).BuildPartial();
        } else {
          result.positionInArea_ = value;
        }
        result.hasPositionInArea = true;
        return this;
      }
      public Builder ClearPositionInArea() {
        PrepareBuilder();
        result.hasPositionInArea = false;
        result.positionInArea_ = null;
        return this;
      }
      
      public bool HasDepth {
        get { return result.hasDepth; }
      }
      public uint Depth {
        get { return result.Depth; }
        set { SetDepth(value); }
      }
      public Builder SetDepth(uint value) {
        PrepareBuilder();
        result.hasDepth = true;
        result.depth_ = value;
        return this;
      }
      public Builder ClearDepth() {
        PrepareBuilder();
        result.hasDepth = false;
        result.depth_ = 0;
        return this;
      }
      
      public bool HasCellRandomSeed {
        get { return result.hasCellRandomSeed; }
      }
      public int CellRandomSeed {
        get { return result.CellRandomSeed; }
        set { SetCellRandomSeed(value); }
      }
      public Builder SetCellRandomSeed(int value) {
        PrepareBuilder();
        result.hasCellRandomSeed = true;
        result.cellRandomSeed_ = value;
        return this;
      }
      public Builder ClearCellRandomSeed() {
        PrepareBuilder();
        result.hasCellRandomSeed = false;
        result.cellRandomSeed_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.NetStructReservedSpawn> EncountersList {
        get { return PrepareBuilder().encounters_; }
      }
      public int EncountersCount {
        get { return result.EncountersCount; }
      }
      public global::Gazillion.NetStructReservedSpawn GetEncounters(int index) {
        return result.GetEncounters(index);
      }
      public Builder SetEncounters(int index, global::Gazillion.NetStructReservedSpawn value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.encounters_[index] = value;
        return this;
      }
      public Builder SetEncounters(int index, global::Gazillion.NetStructReservedSpawn.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.encounters_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEncounters(global::Gazillion.NetStructReservedSpawn value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.encounters_.Add(value);
        return this;
      }
      public Builder AddEncounters(global::Gazillion.NetStructReservedSpawn.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.encounters_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEncounters(scg::IEnumerable<global::Gazillion.NetStructReservedSpawn> values) {
        PrepareBuilder();
        result.encounters_.Add(values);
        return this;
      }
      public Builder ClearEncounters() {
        PrepareBuilder();
        result.encounters_.Clear();
        return this;
      }
      
      public bool HasBufferwidth {
        get { return result.hasBufferwidth; }
      }
      public int Bufferwidth {
        get { return result.Bufferwidth; }
        set { SetBufferwidth(value); }
      }
      public Builder SetBufferwidth(int value) {
        PrepareBuilder();
        result.hasBufferwidth = true;
        result.bufferwidth_ = value;
        return this;
      }
      public Builder ClearBufferwidth() {
        PrepareBuilder();
        result.hasBufferwidth = false;
        result.bufferwidth_ = 0;
        return this;
      }
      
      public bool HasOverrideLocationName {
        get { return result.hasOverrideLocationName; }
      }
      public ulong OverrideLocationName {
        get { return result.OverrideLocationName; }
        set { SetOverrideLocationName(value); }
      }
      public Builder SetOverrideLocationName(ulong value) {
        PrepareBuilder();
        result.hasOverrideLocationName = true;
        result.overrideLocationName_ = value;
        return this;
      }
      public Builder ClearOverrideLocationName() {
        PrepareBuilder();
        result.hasOverrideLocationName = false;
        result.overrideLocationName_ = 0UL;
        return this;
      }
    }
    static NetMessageCellCreate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCellDestroy : pb::GeneratedMessage<NetMessageCellDestroy, NetMessageCellDestroy.Builder> {
    private NetMessageCellDestroy() { }
    private static readonly NetMessageCellDestroy defaultInstance = new NetMessageCellDestroy().MakeReadOnly();
    private static readonly string[] _netMessageCellDestroyFieldNames = new string[] { "areaId", "cellId" };
    private static readonly uint[] _netMessageCellDestroyFieldTags = new uint[] { 8, 16 };
    public static NetMessageCellDestroy DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCellDestroy DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCellDestroy ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCellDestroy__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCellDestroy, NetMessageCellDestroy.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCellDestroy__FieldAccessorTable; }
    }
    
    public const int AreaIdFieldNumber = 1;
    private bool hasAreaId;
    private uint areaId_;
    public bool HasAreaId {
      get { return hasAreaId; }
    }
    public uint AreaId {
      get { return areaId_; }
    }
    
    public const int CellIdFieldNumber = 2;
    private bool hasCellId;
    private uint cellId_;
    public bool HasCellId {
      get { return hasCellId; }
    }
    public uint CellId {
      get { return cellId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAreaId) return false;
        if (!hasCellId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCellDestroyFieldNames;
      if (hasAreaId) {
        output.WriteUInt32(1, field_names[0], AreaId);
      }
      if (hasCellId) {
        output.WriteUInt32(2, field_names[1], CellId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAreaId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AreaId);
      }
      if (hasCellId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, CellId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCellDestroy ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCellDestroy ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCellDestroy ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCellDestroy ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCellDestroy ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCellDestroy ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCellDestroy ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCellDestroy ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCellDestroy ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCellDestroy ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCellDestroy MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCellDestroy prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCellDestroy, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCellDestroy cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCellDestroy result;
      
      private NetMessageCellDestroy PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCellDestroy original = result;
          result = new NetMessageCellDestroy();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCellDestroy MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCellDestroy.Descriptor; }
      }
      
      public override NetMessageCellDestroy DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCellDestroy.DefaultInstance; }
      }
      
      public override NetMessageCellDestroy BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCellDestroy) {
          return MergeFrom((NetMessageCellDestroy) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCellDestroy other) {
        if (other == global::Gazillion.NetMessageCellDestroy.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAreaId) {
          AreaId = other.AreaId;
        }
        if (other.HasCellId) {
          CellId = other.CellId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCellDestroyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCellDestroyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAreaId = input.ReadUInt32(ref result.areaId_);
              break;
            }
            case 16: {
              result.hasCellId = input.ReadUInt32(ref result.cellId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAreaId {
        get { return result.hasAreaId; }
      }
      public uint AreaId {
        get { return result.AreaId; }
        set { SetAreaId(value); }
      }
      public Builder SetAreaId(uint value) {
        PrepareBuilder();
        result.hasAreaId = true;
        result.areaId_ = value;
        return this;
      }
      public Builder ClearAreaId() {
        PrepareBuilder();
        result.hasAreaId = false;
        result.areaId_ = 0;
        return this;
      }
      
      public bool HasCellId {
        get { return result.hasCellId; }
      }
      public uint CellId {
        get { return result.CellId; }
        set { SetCellId(value); }
      }
      public Builder SetCellId(uint value) {
        PrepareBuilder();
        result.hasCellId = true;
        result.cellId_ = value;
        return this;
      }
      public Builder ClearCellId() {
        PrepareBuilder();
        result.hasCellId = false;
        result.cellId_ = 0;
        return this;
      }
    }
    static NetMessageCellDestroy() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEnvironmentUpdate : pb::GeneratedMessage<NetMessageEnvironmentUpdate, NetMessageEnvironmentUpdate.Builder> {
    private NetMessageEnvironmentUpdate() { }
    private static readonly NetMessageEnvironmentUpdate defaultInstance = new NetMessageEnvironmentUpdate().MakeReadOnly();
    private static readonly string[] _netMessageEnvironmentUpdateFieldNames = new string[] { "flags" };
    private static readonly uint[] _netMessageEnvironmentUpdateFieldTags = new uint[] { 8 };
    public static NetMessageEnvironmentUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEnvironmentUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEnvironmentUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEnvironmentUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEnvironmentUpdate, NetMessageEnvironmentUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEnvironmentUpdate__FieldAccessorTable; }
    }
    
    public const int FlagsFieldNumber = 1;
    private bool hasFlags;
    private uint flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public uint Flags {
      get { return flags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFlags) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEnvironmentUpdateFieldNames;
      if (hasFlags) {
        output.WriteUInt32(1, field_names[0], Flags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasFlags) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Flags);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEnvironmentUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEnvironmentUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEnvironmentUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEnvironmentUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEnvironmentUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEnvironmentUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEnvironmentUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEnvironmentUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEnvironmentUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEnvironmentUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEnvironmentUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEnvironmentUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEnvironmentUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEnvironmentUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEnvironmentUpdate result;
      
      private NetMessageEnvironmentUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEnvironmentUpdate original = result;
          result = new NetMessageEnvironmentUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEnvironmentUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEnvironmentUpdate.Descriptor; }
      }
      
      public override NetMessageEnvironmentUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEnvironmentUpdate.DefaultInstance; }
      }
      
      public override NetMessageEnvironmentUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEnvironmentUpdate) {
          return MergeFrom((NetMessageEnvironmentUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEnvironmentUpdate other) {
        if (other == global::Gazillion.NetMessageEnvironmentUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEnvironmentUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEnvironmentUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasFlags = input.ReadUInt32(ref result.flags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public uint Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(uint value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
    }
    static NetMessageEnvironmentUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDebugSpawnMapVisualization : pb::GeneratedMessage<NetMessageDebugSpawnMapVisualization, NetMessageDebugSpawnMapVisualization.Builder> {
    private NetMessageDebugSpawnMapVisualization() { }
    private static readonly NetMessageDebugSpawnMapVisualization defaultInstance = new NetMessageDebugSpawnMapVisualization().MakeReadOnly();
    private static readonly string[] _netMessageDebugSpawnMapVisualizationFieldNames = new string[] { "areaid", "boundsx", "boundsy", "mapdata", "visualize" };
    private static readonly uint[] _netMessageDebugSpawnMapVisualizationFieldTags = new uint[] { 16, 24, 32, 42, 8 };
    public static NetMessageDebugSpawnMapVisualization DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDebugSpawnMapVisualization DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDebugSpawnMapVisualization ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDebugSpawnMapVisualization__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDebugSpawnMapVisualization, NetMessageDebugSpawnMapVisualization.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDebugSpawnMapVisualization__FieldAccessorTable; }
    }
    
    public const int VisualizeFieldNumber = 1;
    private bool hasVisualize;
    private bool visualize_;
    public bool HasVisualize {
      get { return hasVisualize; }
    }
    public bool Visualize {
      get { return visualize_; }
    }
    
    public const int AreaidFieldNumber = 2;
    private bool hasAreaid;
    private uint areaid_;
    public bool HasAreaid {
      get { return hasAreaid; }
    }
    public uint Areaid {
      get { return areaid_; }
    }
    
    public const int BoundsxFieldNumber = 3;
    private bool hasBoundsx;
    private uint boundsx_;
    public bool HasBoundsx {
      get { return hasBoundsx; }
    }
    public uint Boundsx {
      get { return boundsx_; }
    }
    
    public const int BoundsyFieldNumber = 4;
    private bool hasBoundsy;
    private uint boundsy_;
    public bool HasBoundsy {
      get { return hasBoundsy; }
    }
    public uint Boundsy {
      get { return boundsy_; }
    }
    
    public const int MapdataFieldNumber = 5;
    private bool hasMapdata;
    private pb::ByteString mapdata_ = pb::ByteString.Empty;
    public bool HasMapdata {
      get { return hasMapdata; }
    }
    public pb::ByteString Mapdata {
      get { return mapdata_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVisualize) return false;
        if (!hasAreaid) return false;
        if (!hasBoundsx) return false;
        if (!hasBoundsy) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDebugSpawnMapVisualizationFieldNames;
      if (hasVisualize) {
        output.WriteBool(1, field_names[4], Visualize);
      }
      if (hasAreaid) {
        output.WriteUInt32(2, field_names[0], Areaid);
      }
      if (hasBoundsx) {
        output.WriteUInt32(3, field_names[1], Boundsx);
      }
      if (hasBoundsy) {
        output.WriteUInt32(4, field_names[2], Boundsy);
      }
      if (hasMapdata) {
        output.WriteBytes(5, field_names[3], Mapdata);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasVisualize) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Visualize);
      }
      if (hasAreaid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Areaid);
      }
      if (hasBoundsx) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Boundsx);
      }
      if (hasBoundsy) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Boundsy);
      }
      if (hasMapdata) {
        size += pb::CodedOutputStream.ComputeBytesSize(5, Mapdata);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDebugSpawnMapVisualization ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDebugSpawnMapVisualization ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDebugSpawnMapVisualization ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDebugSpawnMapVisualization ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDebugSpawnMapVisualization ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDebugSpawnMapVisualization ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDebugSpawnMapVisualization ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDebugSpawnMapVisualization ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDebugSpawnMapVisualization ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDebugSpawnMapVisualization ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDebugSpawnMapVisualization MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDebugSpawnMapVisualization prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDebugSpawnMapVisualization, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDebugSpawnMapVisualization cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDebugSpawnMapVisualization result;
      
      private NetMessageDebugSpawnMapVisualization PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDebugSpawnMapVisualization original = result;
          result = new NetMessageDebugSpawnMapVisualization();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDebugSpawnMapVisualization MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDebugSpawnMapVisualization.Descriptor; }
      }
      
      public override NetMessageDebugSpawnMapVisualization DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDebugSpawnMapVisualization.DefaultInstance; }
      }
      
      public override NetMessageDebugSpawnMapVisualization BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDebugSpawnMapVisualization) {
          return MergeFrom((NetMessageDebugSpawnMapVisualization) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDebugSpawnMapVisualization other) {
        if (other == global::Gazillion.NetMessageDebugSpawnMapVisualization.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVisualize) {
          Visualize = other.Visualize;
        }
        if (other.HasAreaid) {
          Areaid = other.Areaid;
        }
        if (other.HasBoundsx) {
          Boundsx = other.Boundsx;
        }
        if (other.HasBoundsy) {
          Boundsy = other.Boundsy;
        }
        if (other.HasMapdata) {
          Mapdata = other.Mapdata;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDebugSpawnMapVisualizationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDebugSpawnMapVisualizationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVisualize = input.ReadBool(ref result.visualize_);
              break;
            }
            case 16: {
              result.hasAreaid = input.ReadUInt32(ref result.areaid_);
              break;
            }
            case 24: {
              result.hasBoundsx = input.ReadUInt32(ref result.boundsx_);
              break;
            }
            case 32: {
              result.hasBoundsy = input.ReadUInt32(ref result.boundsy_);
              break;
            }
            case 42: {
              result.hasMapdata = input.ReadBytes(ref result.mapdata_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVisualize {
        get { return result.hasVisualize; }
      }
      public bool Visualize {
        get { return result.Visualize; }
        set { SetVisualize(value); }
      }
      public Builder SetVisualize(bool value) {
        PrepareBuilder();
        result.hasVisualize = true;
        result.visualize_ = value;
        return this;
      }
      public Builder ClearVisualize() {
        PrepareBuilder();
        result.hasVisualize = false;
        result.visualize_ = false;
        return this;
      }
      
      public bool HasAreaid {
        get { return result.hasAreaid; }
      }
      public uint Areaid {
        get { return result.Areaid; }
        set { SetAreaid(value); }
      }
      public Builder SetAreaid(uint value) {
        PrepareBuilder();
        result.hasAreaid = true;
        result.areaid_ = value;
        return this;
      }
      public Builder ClearAreaid() {
        PrepareBuilder();
        result.hasAreaid = false;
        result.areaid_ = 0;
        return this;
      }
      
      public bool HasBoundsx {
        get { return result.hasBoundsx; }
      }
      public uint Boundsx {
        get { return result.Boundsx; }
        set { SetBoundsx(value); }
      }
      public Builder SetBoundsx(uint value) {
        PrepareBuilder();
        result.hasBoundsx = true;
        result.boundsx_ = value;
        return this;
      }
      public Builder ClearBoundsx() {
        PrepareBuilder();
        result.hasBoundsx = false;
        result.boundsx_ = 0;
        return this;
      }
      
      public bool HasBoundsy {
        get { return result.hasBoundsy; }
      }
      public uint Boundsy {
        get { return result.Boundsy; }
        set { SetBoundsy(value); }
      }
      public Builder SetBoundsy(uint value) {
        PrepareBuilder();
        result.hasBoundsy = true;
        result.boundsy_ = value;
        return this;
      }
      public Builder ClearBoundsy() {
        PrepareBuilder();
        result.hasBoundsy = false;
        result.boundsy_ = 0;
        return this;
      }
      
      public bool HasMapdata {
        get { return result.hasMapdata; }
      }
      public pb::ByteString Mapdata {
        get { return result.Mapdata; }
        set { SetMapdata(value); }
      }
      public Builder SetMapdata(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMapdata = true;
        result.mapdata_ = value;
        return this;
      }
      public Builder ClearMapdata() {
        PrepareBuilder();
        result.hasMapdata = false;
        result.mapdata_ = pb::ByteString.Empty;
        return this;
      }
    }
    static NetMessageDebugSpawnMapVisualization() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageChangeAOIPolicies : pb::GeneratedMessage<NetMessageChangeAOIPolicies, NetMessageChangeAOIPolicies.Builder> {
    private NetMessageChangeAOIPolicies() { }
    private static readonly NetMessageChangeAOIPolicies defaultInstance = new NetMessageChangeAOIPolicies().MakeReadOnly();
    private static readonly string[] _netMessageChangeAOIPoliciesFieldNames = new string[] { "currentpolicies", "entityPrototypeId", "exitGameWorld", "idEntity" };
    private static readonly uint[] _netMessageChangeAOIPoliciesFieldTags = new uint[] { 16, 32, 24, 8 };
    public static NetMessageChangeAOIPolicies DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageChangeAOIPolicies DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageChangeAOIPolicies ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageChangeAOIPolicies__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageChangeAOIPolicies, NetMessageChangeAOIPolicies.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageChangeAOIPolicies__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int CurrentpoliciesFieldNumber = 2;
    private bool hasCurrentpolicies;
    private uint currentpolicies_;
    public bool HasCurrentpolicies {
      get { return hasCurrentpolicies; }
    }
    public uint Currentpolicies {
      get { return currentpolicies_; }
    }
    
    public const int ExitGameWorldFieldNumber = 3;
    private bool hasExitGameWorld;
    private bool exitGameWorld_;
    public bool HasExitGameWorld {
      get { return hasExitGameWorld; }
    }
    public bool ExitGameWorld {
      get { return exitGameWorld_; }
    }
    
    public const int EntityPrototypeIdFieldNumber = 4;
    private bool hasEntityPrototypeId;
    private ulong entityPrototypeId_;
    public bool HasEntityPrototypeId {
      get { return hasEntityPrototypeId; }
    }
    public ulong EntityPrototypeId {
      get { return entityPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        if (!hasCurrentpolicies) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageChangeAOIPoliciesFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[3], IdEntity);
      }
      if (hasCurrentpolicies) {
        output.WriteUInt32(2, field_names[0], Currentpolicies);
      }
      if (hasExitGameWorld) {
        output.WriteBool(3, field_names[2], ExitGameWorld);
      }
      if (hasEntityPrototypeId) {
        output.WriteUInt64(4, field_names[1], EntityPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasCurrentpolicies) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Currentpolicies);
      }
      if (hasExitGameWorld) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, ExitGameWorld);
      }
      if (hasEntityPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, EntityPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageChangeAOIPolicies ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChangeAOIPolicies ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeAOIPolicies ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChangeAOIPolicies ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeAOIPolicies ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChangeAOIPolicies ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeAOIPolicies ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageChangeAOIPolicies ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageChangeAOIPolicies ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChangeAOIPolicies ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageChangeAOIPolicies MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageChangeAOIPolicies prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageChangeAOIPolicies, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageChangeAOIPolicies cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageChangeAOIPolicies result;
      
      private NetMessageChangeAOIPolicies PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageChangeAOIPolicies original = result;
          result = new NetMessageChangeAOIPolicies();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageChangeAOIPolicies MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageChangeAOIPolicies.Descriptor; }
      }
      
      public override NetMessageChangeAOIPolicies DefaultInstanceForType {
        get { return global::Gazillion.NetMessageChangeAOIPolicies.DefaultInstance; }
      }
      
      public override NetMessageChangeAOIPolicies BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageChangeAOIPolicies) {
          return MergeFrom((NetMessageChangeAOIPolicies) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageChangeAOIPolicies other) {
        if (other == global::Gazillion.NetMessageChangeAOIPolicies.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasCurrentpolicies) {
          Currentpolicies = other.Currentpolicies;
        }
        if (other.HasExitGameWorld) {
          ExitGameWorld = other.ExitGameWorld;
        }
        if (other.HasEntityPrototypeId) {
          EntityPrototypeId = other.EntityPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageChangeAOIPoliciesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageChangeAOIPoliciesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 16: {
              result.hasCurrentpolicies = input.ReadUInt32(ref result.currentpolicies_);
              break;
            }
            case 24: {
              result.hasExitGameWorld = input.ReadBool(ref result.exitGameWorld_);
              break;
            }
            case 32: {
              result.hasEntityPrototypeId = input.ReadUInt64(ref result.entityPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasCurrentpolicies {
        get { return result.hasCurrentpolicies; }
      }
      public uint Currentpolicies {
        get { return result.Currentpolicies; }
        set { SetCurrentpolicies(value); }
      }
      public Builder SetCurrentpolicies(uint value) {
        PrepareBuilder();
        result.hasCurrentpolicies = true;
        result.currentpolicies_ = value;
        return this;
      }
      public Builder ClearCurrentpolicies() {
        PrepareBuilder();
        result.hasCurrentpolicies = false;
        result.currentpolicies_ = 0;
        return this;
      }
      
      public bool HasExitGameWorld {
        get { return result.hasExitGameWorld; }
      }
      public bool ExitGameWorld {
        get { return result.ExitGameWorld; }
        set { SetExitGameWorld(value); }
      }
      public Builder SetExitGameWorld(bool value) {
        PrepareBuilder();
        result.hasExitGameWorld = true;
        result.exitGameWorld_ = value;
        return this;
      }
      public Builder ClearExitGameWorld() {
        PrepareBuilder();
        result.hasExitGameWorld = false;
        result.exitGameWorld_ = false;
        return this;
      }
      
      public bool HasEntityPrototypeId {
        get { return result.hasEntityPrototypeId; }
      }
      public ulong EntityPrototypeId {
        get { return result.EntityPrototypeId; }
        set { SetEntityPrototypeId(value); }
      }
      public Builder SetEntityPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasEntityPrototypeId = true;
        result.entityPrototypeId_ = value;
        return this;
      }
      public Builder ClearEntityPrototypeId() {
        PrepareBuilder();
        result.hasEntityPrototypeId = false;
        result.entityPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageChangeAOIPolicies() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageFullInWorldHierarchyUpdateEnd : pb::GeneratedMessage<NetMessageFullInWorldHierarchyUpdateEnd, NetMessageFullInWorldHierarchyUpdateEnd.Builder> {
    private NetMessageFullInWorldHierarchyUpdateEnd() { }
    private static readonly NetMessageFullInWorldHierarchyUpdateEnd defaultInstance = new NetMessageFullInWorldHierarchyUpdateEnd().MakeReadOnly();
    private static readonly string[] _netMessageFullInWorldHierarchyUpdateEndFieldNames = new string[] { "idEntity" };
    private static readonly uint[] _netMessageFullInWorldHierarchyUpdateEndFieldTags = new uint[] { 8 };
    public static NetMessageFullInWorldHierarchyUpdateEnd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageFullInWorldHierarchyUpdateEnd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageFullInWorldHierarchyUpdateEnd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateEnd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageFullInWorldHierarchyUpdateEnd, NetMessageFullInWorldHierarchyUpdateEnd.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateEnd__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageFullInWorldHierarchyUpdateEndFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[0], IdEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageFullInWorldHierarchyUpdateEnd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageFullInWorldHierarchyUpdateEnd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageFullInWorldHierarchyUpdateEnd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageFullInWorldHierarchyUpdateEnd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageFullInWorldHierarchyUpdateEnd result;
      
      private NetMessageFullInWorldHierarchyUpdateEnd PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageFullInWorldHierarchyUpdateEnd original = result;
          result = new NetMessageFullInWorldHierarchyUpdateEnd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageFullInWorldHierarchyUpdateEnd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageFullInWorldHierarchyUpdateEnd.Descriptor; }
      }
      
      public override NetMessageFullInWorldHierarchyUpdateEnd DefaultInstanceForType {
        get { return global::Gazillion.NetMessageFullInWorldHierarchyUpdateEnd.DefaultInstance; }
      }
      
      public override NetMessageFullInWorldHierarchyUpdateEnd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageFullInWorldHierarchyUpdateEnd) {
          return MergeFrom((NetMessageFullInWorldHierarchyUpdateEnd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageFullInWorldHierarchyUpdateEnd other) {
        if (other == global::Gazillion.NetMessageFullInWorldHierarchyUpdateEnd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageFullInWorldHierarchyUpdateEndFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageFullInWorldHierarchyUpdateEndFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageFullInWorldHierarchyUpdateEnd() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageFullInWorldHierarchyUpdateBegin : pb::GeneratedMessage<NetMessageFullInWorldHierarchyUpdateBegin, NetMessageFullInWorldHierarchyUpdateBegin.Builder> {
    private NetMessageFullInWorldHierarchyUpdateBegin() { }
    private static readonly NetMessageFullInWorldHierarchyUpdateBegin defaultInstance = new NetMessageFullInWorldHierarchyUpdateBegin().MakeReadOnly();
    private static readonly string[] _netMessageFullInWorldHierarchyUpdateBeginFieldNames = new string[] { "idEntity" };
    private static readonly uint[] _netMessageFullInWorldHierarchyUpdateBeginFieldTags = new uint[] { 8 };
    public static NetMessageFullInWorldHierarchyUpdateBegin DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageFullInWorldHierarchyUpdateBegin DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageFullInWorldHierarchyUpdateBegin ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateBegin__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageFullInWorldHierarchyUpdateBegin, NetMessageFullInWorldHierarchyUpdateBegin.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateBegin__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageFullInWorldHierarchyUpdateBeginFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[0], IdEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageFullInWorldHierarchyUpdateBegin MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageFullInWorldHierarchyUpdateBegin prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageFullInWorldHierarchyUpdateBegin, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageFullInWorldHierarchyUpdateBegin cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageFullInWorldHierarchyUpdateBegin result;
      
      private NetMessageFullInWorldHierarchyUpdateBegin PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageFullInWorldHierarchyUpdateBegin original = result;
          result = new NetMessageFullInWorldHierarchyUpdateBegin();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageFullInWorldHierarchyUpdateBegin MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageFullInWorldHierarchyUpdateBegin.Descriptor; }
      }
      
      public override NetMessageFullInWorldHierarchyUpdateBegin DefaultInstanceForType {
        get { return global::Gazillion.NetMessageFullInWorldHierarchyUpdateBegin.DefaultInstance; }
      }
      
      public override NetMessageFullInWorldHierarchyUpdateBegin BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageFullInWorldHierarchyUpdateBegin) {
          return MergeFrom((NetMessageFullInWorldHierarchyUpdateBegin) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageFullInWorldHierarchyUpdateBegin other) {
        if (other == global::Gazillion.NetMessageFullInWorldHierarchyUpdateBegin.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageFullInWorldHierarchyUpdateBeginFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageFullInWorldHierarchyUpdateBeginFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageFullInWorldHierarchyUpdateBegin() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAdminCommandResponse : pb::GeneratedMessage<NetMessageAdminCommandResponse, NetMessageAdminCommandResponse.Builder> {
    private NetMessageAdminCommandResponse() { }
    private static readonly NetMessageAdminCommandResponse defaultInstance = new NetMessageAdminCommandResponse().MakeReadOnly();
    private static readonly string[] _netMessageAdminCommandResponseFieldNames = new string[] { "response" };
    private static readonly uint[] _netMessageAdminCommandResponseFieldTags = new uint[] { 10 };
    public static NetMessageAdminCommandResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAdminCommandResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAdminCommandResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAdminCommandResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAdminCommandResponse, NetMessageAdminCommandResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAdminCommandResponse__FieldAccessorTable; }
    }
    
    public const int ResponseFieldNumber = 1;
    private bool hasResponse;
    private string response_ = "";
    public bool HasResponse {
      get { return hasResponse; }
    }
    public string Response {
      get { return response_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasResponse) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAdminCommandResponseFieldNames;
      if (hasResponse) {
        output.WriteString(1, field_names[0], Response);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResponse) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Response);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAdminCommandResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAdminCommandResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAdminCommandResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAdminCommandResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAdminCommandResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAdminCommandResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAdminCommandResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAdminCommandResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAdminCommandResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAdminCommandResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAdminCommandResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAdminCommandResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAdminCommandResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAdminCommandResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAdminCommandResponse result;
      
      private NetMessageAdminCommandResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAdminCommandResponse original = result;
          result = new NetMessageAdminCommandResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAdminCommandResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAdminCommandResponse.Descriptor; }
      }
      
      public override NetMessageAdminCommandResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAdminCommandResponse.DefaultInstance; }
      }
      
      public override NetMessageAdminCommandResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAdminCommandResponse) {
          return MergeFrom((NetMessageAdminCommandResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAdminCommandResponse other) {
        if (other == global::Gazillion.NetMessageAdminCommandResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResponse) {
          Response = other.Response;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAdminCommandResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAdminCommandResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasResponse = input.ReadString(ref result.response_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasResponse {
        get { return result.hasResponse; }
      }
      public string Response {
        get { return result.Response; }
        set { SetResponse(value); }
      }
      public Builder SetResponse(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResponse = true;
        result.response_ = value;
        return this;
      }
      public Builder ClearResponse() {
        PrepareBuilder();
        result.hasResponse = false;
        result.response_ = "";
        return this;
      }
    }
    static NetMessageAdminCommandResponse() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageActivatePowerFailed : pb::GeneratedMessage<NetMessageActivatePowerFailed, NetMessageActivatePowerFailed.Builder> {
    private NetMessageActivatePowerFailed() { }
    private static readonly NetMessageActivatePowerFailed defaultInstance = new NetMessageActivatePowerFailed().MakeReadOnly();
    private static readonly string[] _netMessageActivatePowerFailedFieldNames = new string[] { "powerPrototypeId", "reason" };
    private static readonly uint[] _netMessageActivatePowerFailedFieldTags = new uint[] { 16, 8 };
    public static NetMessageActivatePowerFailed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageActivatePowerFailed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageActivatePowerFailed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageActivatePowerFailed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageActivatePowerFailed, NetMessageActivatePowerFailed.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageActivatePowerFailed__FieldAccessorTable; }
    }
    
    public const int ReasonFieldNumber = 1;
    private bool hasReason;
    private uint reason_;
    public bool HasReason {
      get { return hasReason; }
    }
    public uint Reason {
      get { return reason_; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 2;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReason) return false;
        if (!hasPowerPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageActivatePowerFailedFieldNames;
      if (hasReason) {
        output.WriteUInt32(1, field_names[1], Reason);
      }
      if (hasPowerPrototypeId) {
        output.WriteUInt64(2, field_names[0], PowerPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Reason);
      }
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageActivatePowerFailed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageActivatePowerFailed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageActivatePowerFailed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageActivatePowerFailed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageActivatePowerFailed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageActivatePowerFailed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageActivatePowerFailed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageActivatePowerFailed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageActivatePowerFailed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageActivatePowerFailed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageActivatePowerFailed MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageActivatePowerFailed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageActivatePowerFailed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageActivatePowerFailed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageActivatePowerFailed result;
      
      private NetMessageActivatePowerFailed PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageActivatePowerFailed original = result;
          result = new NetMessageActivatePowerFailed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageActivatePowerFailed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageActivatePowerFailed.Descriptor; }
      }
      
      public override NetMessageActivatePowerFailed DefaultInstanceForType {
        get { return global::Gazillion.NetMessageActivatePowerFailed.DefaultInstance; }
      }
      
      public override NetMessageActivatePowerFailed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageActivatePowerFailed) {
          return MergeFrom((NetMessageActivatePowerFailed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageActivatePowerFailed other) {
        if (other == global::Gazillion.NetMessageActivatePowerFailed.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReason) {
          Reason = other.Reason;
        }
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageActivatePowerFailedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageActivatePowerFailedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasReason = input.ReadUInt32(ref result.reason_);
              break;
            }
            case 16: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public uint Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(uint value) {
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = 0;
        return this;
      }
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageActivatePowerFailed() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCancelPower : pb::GeneratedMessage<NetMessageCancelPower, NetMessageCancelPower.Builder> {
    private NetMessageCancelPower() { }
    private static readonly NetMessageCancelPower defaultInstance = new NetMessageCancelPower().MakeReadOnly();
    private static readonly string[] _netMessageCancelPowerFieldNames = new string[] { "endPowerFlags", "idAgent", "powerPrototypeId" };
    private static readonly uint[] _netMessageCancelPowerFieldTags = new uint[] { 24, 8, 16 };
    public static NetMessageCancelPower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCancelPower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCancelPower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCancelPower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCancelPower, NetMessageCancelPower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCancelPower__FieldAccessorTable; }
    }
    
    public const int IdAgentFieldNumber = 1;
    private bool hasIdAgent;
    private ulong idAgent_;
    public bool HasIdAgent {
      get { return hasIdAgent; }
    }
    public ulong IdAgent {
      get { return idAgent_; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 2;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public const int EndPowerFlagsFieldNumber = 3;
    private bool hasEndPowerFlags;
    private uint endPowerFlags_;
    public bool HasEndPowerFlags {
      get { return hasEndPowerFlags; }
    }
    public uint EndPowerFlags {
      get { return endPowerFlags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdAgent) return false;
        if (!hasPowerPrototypeId) return false;
        if (!hasEndPowerFlags) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCancelPowerFieldNames;
      if (hasIdAgent) {
        output.WriteUInt64(1, field_names[1], IdAgent);
      }
      if (hasPowerPrototypeId) {
        output.WriteUInt64(2, field_names[2], PowerPrototypeId);
      }
      if (hasEndPowerFlags) {
        output.WriteUInt32(3, field_names[0], EndPowerFlags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdAgent) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdAgent);
      }
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerPrototypeId);
      }
      if (hasEndPowerFlags) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, EndPowerFlags);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCancelPower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCancelPower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCancelPower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCancelPower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCancelPower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCancelPower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCancelPower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCancelPower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCancelPower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCancelPower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCancelPower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCancelPower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCancelPower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCancelPower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCancelPower result;
      
      private NetMessageCancelPower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCancelPower original = result;
          result = new NetMessageCancelPower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCancelPower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCancelPower.Descriptor; }
      }
      
      public override NetMessageCancelPower DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCancelPower.DefaultInstance; }
      }
      
      public override NetMessageCancelPower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCancelPower) {
          return MergeFrom((NetMessageCancelPower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCancelPower other) {
        if (other == global::Gazillion.NetMessageCancelPower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdAgent) {
          IdAgent = other.IdAgent;
        }
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        if (other.HasEndPowerFlags) {
          EndPowerFlags = other.EndPowerFlags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCancelPowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCancelPowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdAgent = input.ReadUInt64(ref result.idAgent_);
              break;
            }
            case 16: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
            case 24: {
              result.hasEndPowerFlags = input.ReadUInt32(ref result.endPowerFlags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdAgent {
        get { return result.hasIdAgent; }
      }
      public ulong IdAgent {
        get { return result.IdAgent; }
        set { SetIdAgent(value); }
      }
      public Builder SetIdAgent(ulong value) {
        PrepareBuilder();
        result.hasIdAgent = true;
        result.idAgent_ = value;
        return this;
      }
      public Builder ClearIdAgent() {
        PrepareBuilder();
        result.hasIdAgent = false;
        result.idAgent_ = 0UL;
        return this;
      }
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasEndPowerFlags {
        get { return result.hasEndPowerFlags; }
      }
      public uint EndPowerFlags {
        get { return result.EndPowerFlags; }
        set { SetEndPowerFlags(value); }
      }
      public Builder SetEndPowerFlags(uint value) {
        PrepareBuilder();
        result.hasEndPowerFlags = true;
        result.endPowerFlags_ = value;
        return this;
      }
      public Builder ClearEndPowerFlags() {
        PrepareBuilder();
        result.hasEndPowerFlags = false;
        result.endPowerFlags_ = 0;
        return this;
      }
    }
    static NetMessageCancelPower() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageContinuousPowerUpdateToClient : pb::GeneratedMessage<NetMessageContinuousPowerUpdateToClient, NetMessageContinuousPowerUpdateToClient.Builder> {
    private NetMessageContinuousPowerUpdateToClient() { }
    private static readonly NetMessageContinuousPowerUpdateToClient defaultInstance = new NetMessageContinuousPowerUpdateToClient().MakeReadOnly();
    private static readonly string[] _netMessageContinuousPowerUpdateToClientFieldNames = new string[] { "idAvatar", "idTargetEntity", "powerPrototypeId", "targetPosition" };
    private static readonly uint[] _netMessageContinuousPowerUpdateToClientFieldTags = new uint[] { 8, 24, 16, 34 };
    public static NetMessageContinuousPowerUpdateToClient DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageContinuousPowerUpdateToClient DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageContinuousPowerUpdateToClient ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageContinuousPowerUpdateToClient__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageContinuousPowerUpdateToClient, NetMessageContinuousPowerUpdateToClient.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageContinuousPowerUpdateToClient__FieldAccessorTable; }
    }
    
    public const int IdAvatarFieldNumber = 1;
    private bool hasIdAvatar;
    private ulong idAvatar_;
    public bool HasIdAvatar {
      get { return hasIdAvatar; }
    }
    public ulong IdAvatar {
      get { return idAvatar_; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 2;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public const int IdTargetEntityFieldNumber = 3;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public const int TargetPositionFieldNumber = 4;
    private bool hasTargetPosition;
    private global::Gazillion.NetStructPoint3 targetPosition_;
    public bool HasTargetPosition {
      get { return hasTargetPosition; }
    }
    public global::Gazillion.NetStructPoint3 TargetPosition {
      get { return targetPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdAvatar) return false;
        if (!hasPowerPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageContinuousPowerUpdateToClientFieldNames;
      if (hasIdAvatar) {
        output.WriteUInt64(1, field_names[0], IdAvatar);
      }
      if (hasPowerPrototypeId) {
        output.WriteUInt64(2, field_names[2], PowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        output.WriteUInt64(3, field_names[1], IdTargetEntity);
      }
      if (hasTargetPosition) {
        output.WriteMessage(4, field_names[3], TargetPosition);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdAvatar) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdAvatar);
      }
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, IdTargetEntity);
      }
      if (hasTargetPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, TargetPosition);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageContinuousPowerUpdateToClient ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToClient ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToClient ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToClient ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToClient ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToClient ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToClient ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToClient ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToClient ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToClient ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageContinuousPowerUpdateToClient MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageContinuousPowerUpdateToClient prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageContinuousPowerUpdateToClient, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageContinuousPowerUpdateToClient cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageContinuousPowerUpdateToClient result;
      
      private NetMessageContinuousPowerUpdateToClient PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageContinuousPowerUpdateToClient original = result;
          result = new NetMessageContinuousPowerUpdateToClient();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageContinuousPowerUpdateToClient MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageContinuousPowerUpdateToClient.Descriptor; }
      }
      
      public override NetMessageContinuousPowerUpdateToClient DefaultInstanceForType {
        get { return global::Gazillion.NetMessageContinuousPowerUpdateToClient.DefaultInstance; }
      }
      
      public override NetMessageContinuousPowerUpdateToClient BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageContinuousPowerUpdateToClient) {
          return MergeFrom((NetMessageContinuousPowerUpdateToClient) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageContinuousPowerUpdateToClient other) {
        if (other == global::Gazillion.NetMessageContinuousPowerUpdateToClient.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdAvatar) {
          IdAvatar = other.IdAvatar;
        }
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        if (other.HasTargetPosition) {
          MergeTargetPosition(other.TargetPosition);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageContinuousPowerUpdateToClientFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageContinuousPowerUpdateToClientFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdAvatar = input.ReadUInt64(ref result.idAvatar_);
              break;
            }
            case 16: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
            case 24: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
            case 34: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasTargetPosition) {
                subBuilder.MergeFrom(TargetPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetPosition = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdAvatar {
        get { return result.hasIdAvatar; }
      }
      public ulong IdAvatar {
        get { return result.IdAvatar; }
        set { SetIdAvatar(value); }
      }
      public Builder SetIdAvatar(ulong value) {
        PrepareBuilder();
        result.hasIdAvatar = true;
        result.idAvatar_ = value;
        return this;
      }
      public Builder ClearIdAvatar() {
        PrepareBuilder();
        result.hasIdAvatar = false;
        result.idAvatar_ = 0UL;
        return this;
      }
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
      
      public bool HasTargetPosition {
       get { return result.hasTargetPosition; }
      }
      public global::Gazillion.NetStructPoint3 TargetPosition {
        get { return result.TargetPosition; }
        set { SetTargetPosition(value); }
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = value;
        return this;
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetPosition &&
            result.targetPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.targetPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.targetPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.targetPosition_ = value;
        }
        result.hasTargetPosition = true;
        return this;
      }
      public Builder ClearTargetPosition() {
        PrepareBuilder();
        result.hasTargetPosition = false;
        result.targetPosition_ = null;
        return this;
      }
    }
    static NetMessageContinuousPowerUpdateToClient() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageActivatePower : pb::GeneratedMessage<NetMessageActivatePower, NetMessageActivatePower.Builder> {
    private NetMessageActivatePower() { }
    private static readonly NetMessageActivatePower defaultInstance = new NetMessageActivatePower().MakeReadOnly();
    private static readonly string[] _netMessageActivatePowerFieldNames = new string[] { "idTargetEntity", "idUserEntity", "missileRandomSeed", "moveTimeSeconds", "parentPowerPrototypeId", "powerPrototypeId", "targetPosition", "userPosition", "variableActivationTime" };
    private static readonly uint[] _netMessageActivatePowerFieldTags = new uint[] { 32, 8, 72, 61, 24, 16, 42, 50, 69 };
    public static NetMessageActivatePower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageActivatePower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageActivatePower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageActivatePower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageActivatePower, NetMessageActivatePower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageActivatePower__FieldAccessorTable; }
    }
    
    public const int IdUserEntityFieldNumber = 1;
    private bool hasIdUserEntity;
    private ulong idUserEntity_;
    public bool HasIdUserEntity {
      get { return hasIdUserEntity; }
    }
    public ulong IdUserEntity {
      get { return idUserEntity_; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 2;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public const int ParentPowerPrototypeIdFieldNumber = 3;
    private bool hasParentPowerPrototypeId;
    private ulong parentPowerPrototypeId_;
    public bool HasParentPowerPrototypeId {
      get { return hasParentPowerPrototypeId; }
    }
    public ulong ParentPowerPrototypeId {
      get { return parentPowerPrototypeId_; }
    }
    
    public const int IdTargetEntityFieldNumber = 4;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public const int TargetPositionFieldNumber = 5;
    private bool hasTargetPosition;
    private global::Gazillion.NetStructPoint3 targetPosition_;
    public bool HasTargetPosition {
      get { return hasTargetPosition; }
    }
    public global::Gazillion.NetStructPoint3 TargetPosition {
      get { return targetPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int UserPositionFieldNumber = 6;
    private bool hasUserPosition;
    private global::Gazillion.NetStructPoint3 userPosition_;
    public bool HasUserPosition {
      get { return hasUserPosition; }
    }
    public global::Gazillion.NetStructPoint3 UserPosition {
      get { return userPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int MoveTimeSecondsFieldNumber = 7;
    private bool hasMoveTimeSeconds;
    private float moveTimeSeconds_;
    public bool HasMoveTimeSeconds {
      get { return hasMoveTimeSeconds; }
    }
    public float MoveTimeSeconds {
      get { return moveTimeSeconds_; }
    }
    
    public const int VariableActivationTimeFieldNumber = 8;
    private bool hasVariableActivationTime;
    private float variableActivationTime_;
    public bool HasVariableActivationTime {
      get { return hasVariableActivationTime; }
    }
    public float VariableActivationTime {
      get { return variableActivationTime_; }
    }
    
    public const int MissileRandomSeedFieldNumber = 9;
    private bool hasMissileRandomSeed;
    private uint missileRandomSeed_;
    public bool HasMissileRandomSeed {
      get { return hasMissileRandomSeed; }
    }
    public uint MissileRandomSeed {
      get { return missileRandomSeed_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdUserEntity) return false;
        if (!hasPowerPrototypeId) return false;
        if (!hasParentPowerPrototypeId) return false;
        if (!hasIdTargetEntity) return false;
        if (!hasTargetPosition) return false;
        if (!hasUserPosition) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageActivatePowerFieldNames;
      if (hasIdUserEntity) {
        output.WriteUInt64(1, field_names[1], IdUserEntity);
      }
      if (hasPowerPrototypeId) {
        output.WriteUInt64(2, field_names[5], PowerPrototypeId);
      }
      if (hasParentPowerPrototypeId) {
        output.WriteUInt64(3, field_names[4], ParentPowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        output.WriteUInt64(4, field_names[0], IdTargetEntity);
      }
      if (hasTargetPosition) {
        output.WriteMessage(5, field_names[6], TargetPosition);
      }
      if (hasUserPosition) {
        output.WriteMessage(6, field_names[7], UserPosition);
      }
      if (hasMoveTimeSeconds) {
        output.WriteFloat(7, field_names[3], MoveTimeSeconds);
      }
      if (hasVariableActivationTime) {
        output.WriteFloat(8, field_names[8], VariableActivationTime);
      }
      if (hasMissileRandomSeed) {
        output.WriteUInt32(9, field_names[2], MissileRandomSeed);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdUserEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdUserEntity);
      }
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerPrototypeId);
      }
      if (hasParentPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, ParentPowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, IdTargetEntity);
      }
      if (hasTargetPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, TargetPosition);
      }
      if (hasUserPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, UserPosition);
      }
      if (hasMoveTimeSeconds) {
        size += pb::CodedOutputStream.ComputeFloatSize(7, MoveTimeSeconds);
      }
      if (hasVariableActivationTime) {
        size += pb::CodedOutputStream.ComputeFloatSize(8, VariableActivationTime);
      }
      if (hasMissileRandomSeed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, MissileRandomSeed);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageActivatePower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageActivatePower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageActivatePower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageActivatePower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageActivatePower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageActivatePower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageActivatePower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageActivatePower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageActivatePower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageActivatePower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageActivatePower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageActivatePower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageActivatePower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageActivatePower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageActivatePower result;
      
      private NetMessageActivatePower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageActivatePower original = result;
          result = new NetMessageActivatePower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageActivatePower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageActivatePower.Descriptor; }
      }
      
      public override NetMessageActivatePower DefaultInstanceForType {
        get { return global::Gazillion.NetMessageActivatePower.DefaultInstance; }
      }
      
      public override NetMessageActivatePower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageActivatePower) {
          return MergeFrom((NetMessageActivatePower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageActivatePower other) {
        if (other == global::Gazillion.NetMessageActivatePower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdUserEntity) {
          IdUserEntity = other.IdUserEntity;
        }
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        if (other.HasParentPowerPrototypeId) {
          ParentPowerPrototypeId = other.ParentPowerPrototypeId;
        }
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        if (other.HasTargetPosition) {
          MergeTargetPosition(other.TargetPosition);
        }
        if (other.HasUserPosition) {
          MergeUserPosition(other.UserPosition);
        }
        if (other.HasMoveTimeSeconds) {
          MoveTimeSeconds = other.MoveTimeSeconds;
        }
        if (other.HasVariableActivationTime) {
          VariableActivationTime = other.VariableActivationTime;
        }
        if (other.HasMissileRandomSeed) {
          MissileRandomSeed = other.MissileRandomSeed;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageActivatePowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageActivatePowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdUserEntity = input.ReadUInt64(ref result.idUserEntity_);
              break;
            }
            case 16: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
            case 24: {
              result.hasParentPowerPrototypeId = input.ReadUInt64(ref result.parentPowerPrototypeId_);
              break;
            }
            case 32: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
            case 42: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasTargetPosition) {
                subBuilder.MergeFrom(TargetPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetPosition = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasUserPosition) {
                subBuilder.MergeFrom(UserPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserPosition = subBuilder.BuildPartial();
              break;
            }
            case 61: {
              result.hasMoveTimeSeconds = input.ReadFloat(ref result.moveTimeSeconds_);
              break;
            }
            case 69: {
              result.hasVariableActivationTime = input.ReadFloat(ref result.variableActivationTime_);
              break;
            }
            case 72: {
              result.hasMissileRandomSeed = input.ReadUInt32(ref result.missileRandomSeed_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdUserEntity {
        get { return result.hasIdUserEntity; }
      }
      public ulong IdUserEntity {
        get { return result.IdUserEntity; }
        set { SetIdUserEntity(value); }
      }
      public Builder SetIdUserEntity(ulong value) {
        PrepareBuilder();
        result.hasIdUserEntity = true;
        result.idUserEntity_ = value;
        return this;
      }
      public Builder ClearIdUserEntity() {
        PrepareBuilder();
        result.hasIdUserEntity = false;
        result.idUserEntity_ = 0UL;
        return this;
      }
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasParentPowerPrototypeId {
        get { return result.hasParentPowerPrototypeId; }
      }
      public ulong ParentPowerPrototypeId {
        get { return result.ParentPowerPrototypeId; }
        set { SetParentPowerPrototypeId(value); }
      }
      public Builder SetParentPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasParentPowerPrototypeId = true;
        result.parentPowerPrototypeId_ = value;
        return this;
      }
      public Builder ClearParentPowerPrototypeId() {
        PrepareBuilder();
        result.hasParentPowerPrototypeId = false;
        result.parentPowerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
      
      public bool HasTargetPosition {
       get { return result.hasTargetPosition; }
      }
      public global::Gazillion.NetStructPoint3 TargetPosition {
        get { return result.TargetPosition; }
        set { SetTargetPosition(value); }
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = value;
        return this;
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetPosition &&
            result.targetPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.targetPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.targetPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.targetPosition_ = value;
        }
        result.hasTargetPosition = true;
        return this;
      }
      public Builder ClearTargetPosition() {
        PrepareBuilder();
        result.hasTargetPosition = false;
        result.targetPosition_ = null;
        return this;
      }
      
      public bool HasUserPosition {
       get { return result.hasUserPosition; }
      }
      public global::Gazillion.NetStructPoint3 UserPosition {
        get { return result.UserPosition; }
        set { SetUserPosition(value); }
      }
      public Builder SetUserPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserPosition = true;
        result.userPosition_ = value;
        return this;
      }
      public Builder SetUserPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserPosition = true;
        result.userPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserPosition &&
            result.userPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.userPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.userPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.userPosition_ = value;
        }
        result.hasUserPosition = true;
        return this;
      }
      public Builder ClearUserPosition() {
        PrepareBuilder();
        result.hasUserPosition = false;
        result.userPosition_ = null;
        return this;
      }
      
      public bool HasMoveTimeSeconds {
        get { return result.hasMoveTimeSeconds; }
      }
      public float MoveTimeSeconds {
        get { return result.MoveTimeSeconds; }
        set { SetMoveTimeSeconds(value); }
      }
      public Builder SetMoveTimeSeconds(float value) {
        PrepareBuilder();
        result.hasMoveTimeSeconds = true;
        result.moveTimeSeconds_ = value;
        return this;
      }
      public Builder ClearMoveTimeSeconds() {
        PrepareBuilder();
        result.hasMoveTimeSeconds = false;
        result.moveTimeSeconds_ = 0F;
        return this;
      }
      
      public bool HasVariableActivationTime {
        get { return result.hasVariableActivationTime; }
      }
      public float VariableActivationTime {
        get { return result.VariableActivationTime; }
        set { SetVariableActivationTime(value); }
      }
      public Builder SetVariableActivationTime(float value) {
        PrepareBuilder();
        result.hasVariableActivationTime = true;
        result.variableActivationTime_ = value;
        return this;
      }
      public Builder ClearVariableActivationTime() {
        PrepareBuilder();
        result.hasVariableActivationTime = false;
        result.variableActivationTime_ = 0F;
        return this;
      }
      
      public bool HasMissileRandomSeed {
        get { return result.hasMissileRandomSeed; }
      }
      public uint MissileRandomSeed {
        get { return result.MissileRandomSeed; }
        set { SetMissileRandomSeed(value); }
      }
      public Builder SetMissileRandomSeed(uint value) {
        PrepareBuilder();
        result.hasMissileRandomSeed = true;
        result.missileRandomSeed_ = value;
        return this;
      }
      public Builder ClearMissileRandomSeed() {
        PrepareBuilder();
        result.hasMissileRandomSeed = false;
        result.missileRandomSeed_ = 0;
        return this;
      }
    }
    static NetMessageActivatePower() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePreActivatePower : pb::GeneratedMessage<NetMessagePreActivatePower, NetMessagePreActivatePower.Builder> {
    private NetMessagePreActivatePower() { }
    private static readonly NetMessagePreActivatePower defaultInstance = new NetMessagePreActivatePower().MakeReadOnly();
    private static readonly string[] _netMessagePreActivatePowerFieldNames = new string[] { "idTargetEntity", "idUserEntity", "powerPrototypeId", "targetPosition" };
    private static readonly uint[] _netMessagePreActivatePowerFieldTags = new uint[] { 24, 8, 16, 34 };
    public static NetMessagePreActivatePower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePreActivatePower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePreActivatePower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePreActivatePower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePreActivatePower, NetMessagePreActivatePower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePreActivatePower__FieldAccessorTable; }
    }
    
    public const int IdUserEntityFieldNumber = 1;
    private bool hasIdUserEntity;
    private ulong idUserEntity_;
    public bool HasIdUserEntity {
      get { return hasIdUserEntity; }
    }
    public ulong IdUserEntity {
      get { return idUserEntity_; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 2;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public const int IdTargetEntityFieldNumber = 3;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public const int TargetPositionFieldNumber = 4;
    private bool hasTargetPosition;
    private global::Gazillion.NetStructPoint3 targetPosition_;
    public bool HasTargetPosition {
      get { return hasTargetPosition; }
    }
    public global::Gazillion.NetStructPoint3 TargetPosition {
      get { return targetPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdUserEntity) return false;
        if (!hasPowerPrototypeId) return false;
        if (!hasIdTargetEntity) return false;
        if (!hasTargetPosition) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePreActivatePowerFieldNames;
      if (hasIdUserEntity) {
        output.WriteUInt64(1, field_names[1], IdUserEntity);
      }
      if (hasPowerPrototypeId) {
        output.WriteUInt64(2, field_names[2], PowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        output.WriteUInt64(3, field_names[0], IdTargetEntity);
      }
      if (hasTargetPosition) {
        output.WriteMessage(4, field_names[3], TargetPosition);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdUserEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdUserEntity);
      }
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, IdTargetEntity);
      }
      if (hasTargetPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, TargetPosition);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePreActivatePower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePreActivatePower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePreActivatePower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePreActivatePower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePreActivatePower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePreActivatePower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePreActivatePower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePreActivatePower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePreActivatePower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePreActivatePower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePreActivatePower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePreActivatePower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePreActivatePower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePreActivatePower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePreActivatePower result;
      
      private NetMessagePreActivatePower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePreActivatePower original = result;
          result = new NetMessagePreActivatePower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePreActivatePower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePreActivatePower.Descriptor; }
      }
      
      public override NetMessagePreActivatePower DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePreActivatePower.DefaultInstance; }
      }
      
      public override NetMessagePreActivatePower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePreActivatePower) {
          return MergeFrom((NetMessagePreActivatePower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePreActivatePower other) {
        if (other == global::Gazillion.NetMessagePreActivatePower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdUserEntity) {
          IdUserEntity = other.IdUserEntity;
        }
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        if (other.HasTargetPosition) {
          MergeTargetPosition(other.TargetPosition);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePreActivatePowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePreActivatePowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdUserEntity = input.ReadUInt64(ref result.idUserEntity_);
              break;
            }
            case 16: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
            case 24: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
            case 34: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasTargetPosition) {
                subBuilder.MergeFrom(TargetPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetPosition = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdUserEntity {
        get { return result.hasIdUserEntity; }
      }
      public ulong IdUserEntity {
        get { return result.IdUserEntity; }
        set { SetIdUserEntity(value); }
      }
      public Builder SetIdUserEntity(ulong value) {
        PrepareBuilder();
        result.hasIdUserEntity = true;
        result.idUserEntity_ = value;
        return this;
      }
      public Builder ClearIdUserEntity() {
        PrepareBuilder();
        result.hasIdUserEntity = false;
        result.idUserEntity_ = 0UL;
        return this;
      }
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
      
      public bool HasTargetPosition {
       get { return result.hasTargetPosition; }
      }
      public global::Gazillion.NetStructPoint3 TargetPosition {
        get { return result.TargetPosition; }
        set { SetTargetPosition(value); }
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = value;
        return this;
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetPosition &&
            result.targetPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.targetPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.targetPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.targetPosition_ = value;
        }
        result.hasTargetPosition = true;
        return this;
      }
      public Builder ClearTargetPosition() {
        PrepareBuilder();
        result.hasTargetPosition = false;
        result.targetPosition_ = null;
        return this;
      }
    }
    static NetMessagePreActivatePower() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePowerResult : pb::GeneratedMessage<NetMessagePowerResult, NetMessagePowerResult.Builder> {
    private NetMessagePowerResult() { }
    private static readonly NetMessagePowerResult defaultInstance = new NetMessagePowerResult().MakeReadOnly();
    private static readonly string[] _netMessagePowerResultFieldNames = new string[] { "deliveryDelayMS", "flags", "idPowerOwnerEntity", "idTargetEntity", "idUltimateOwnerEntity", "powerOwnerEntityPrototypeId", "powerOwnerPosition", "powerOwnerRegionPrototypeId", "powerPrototypeId", "properties", "targetEntityPrototypeId", "targetServerString", "transferToEntityId", "transferToEntityPrototypeId", "ultimateOwnerEntityPrototypeId" };
    private static readonly uint[] _netMessagePowerResultFieldTags = new uint[] { 40, 48, 16, 8, 24, 88, 66, 104, 32, 58, 80, 122, 72, 112, 96 };
    public static NetMessagePowerResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePowerResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePowerResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowerResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePowerResult, NetMessagePowerResult.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowerResult__FieldAccessorTable; }
    }
    
    public const int IdTargetEntityFieldNumber = 1;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public const int IdPowerOwnerEntityFieldNumber = 2;
    private bool hasIdPowerOwnerEntity;
    private ulong idPowerOwnerEntity_;
    public bool HasIdPowerOwnerEntity {
      get { return hasIdPowerOwnerEntity; }
    }
    public ulong IdPowerOwnerEntity {
      get { return idPowerOwnerEntity_; }
    }
    
    public const int IdUltimateOwnerEntityFieldNumber = 3;
    private bool hasIdUltimateOwnerEntity;
    private ulong idUltimateOwnerEntity_;
    public bool HasIdUltimateOwnerEntity {
      get { return hasIdUltimateOwnerEntity; }
    }
    public ulong IdUltimateOwnerEntity {
      get { return idUltimateOwnerEntity_; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 4;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public const int DeliveryDelayMSFieldNumber = 5;
    private bool hasDeliveryDelayMS;
    private ulong deliveryDelayMS_;
    public bool HasDeliveryDelayMS {
      get { return hasDeliveryDelayMS; }
    }
    public ulong DeliveryDelayMS {
      get { return deliveryDelayMS_; }
    }
    
    public const int FlagsFieldNumber = 6;
    private bool hasFlags;
    private ulong flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public ulong Flags {
      get { return flags_; }
    }
    
    public const int PropertiesFieldNumber = 7;
    private bool hasProperties;
    private global::Gazillion.NetStructPropertyList properties_;
    public bool HasProperties {
      get { return hasProperties; }
    }
    public global::Gazillion.NetStructPropertyList Properties {
      get { return properties_ ?? global::Gazillion.NetStructPropertyList.DefaultInstance; }
    }
    
    public const int PowerOwnerPositionFieldNumber = 8;
    private bool hasPowerOwnerPosition;
    private global::Gazillion.NetStructPoint3 powerOwnerPosition_;
    public bool HasPowerOwnerPosition {
      get { return hasPowerOwnerPosition; }
    }
    public global::Gazillion.NetStructPoint3 PowerOwnerPosition {
      get { return powerOwnerPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int TransferToEntityIdFieldNumber = 9;
    private bool hasTransferToEntityId;
    private ulong transferToEntityId_;
    public bool HasTransferToEntityId {
      get { return hasTransferToEntityId; }
    }
    public ulong TransferToEntityId {
      get { return transferToEntityId_; }
    }
    
    public const int TargetEntityPrototypeIdFieldNumber = 10;
    private bool hasTargetEntityPrototypeId;
    private ulong targetEntityPrototypeId_;
    public bool HasTargetEntityPrototypeId {
      get { return hasTargetEntityPrototypeId; }
    }
    public ulong TargetEntityPrototypeId {
      get { return targetEntityPrototypeId_; }
    }
    
    public const int PowerOwnerEntityPrototypeIdFieldNumber = 11;
    private bool hasPowerOwnerEntityPrototypeId;
    private ulong powerOwnerEntityPrototypeId_;
    public bool HasPowerOwnerEntityPrototypeId {
      get { return hasPowerOwnerEntityPrototypeId; }
    }
    public ulong PowerOwnerEntityPrototypeId {
      get { return powerOwnerEntityPrototypeId_; }
    }
    
    public const int UltimateOwnerEntityPrototypeIdFieldNumber = 12;
    private bool hasUltimateOwnerEntityPrototypeId;
    private ulong ultimateOwnerEntityPrototypeId_;
    public bool HasUltimateOwnerEntityPrototypeId {
      get { return hasUltimateOwnerEntityPrototypeId; }
    }
    public ulong UltimateOwnerEntityPrototypeId {
      get { return ultimateOwnerEntityPrototypeId_; }
    }
    
    public const int PowerOwnerRegionPrototypeIdFieldNumber = 13;
    private bool hasPowerOwnerRegionPrototypeId;
    private ulong powerOwnerRegionPrototypeId_;
    public bool HasPowerOwnerRegionPrototypeId {
      get { return hasPowerOwnerRegionPrototypeId; }
    }
    public ulong PowerOwnerRegionPrototypeId {
      get { return powerOwnerRegionPrototypeId_; }
    }
    
    public const int TransferToEntityPrototypeIdFieldNumber = 14;
    private bool hasTransferToEntityPrototypeId;
    private ulong transferToEntityPrototypeId_;
    public bool HasTransferToEntityPrototypeId {
      get { return hasTransferToEntityPrototypeId; }
    }
    public ulong TransferToEntityPrototypeId {
      get { return transferToEntityPrototypeId_; }
    }
    
    public const int TargetServerStringFieldNumber = 15;
    private bool hasTargetServerString;
    private string targetServerString_ = "";
    public bool HasTargetServerString {
      get { return hasTargetServerString; }
    }
    public string TargetServerString {
      get { return targetServerString_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetEntity) return false;
        if (!hasIdPowerOwnerEntity) return false;
        if (!hasIdUltimateOwnerEntity) return false;
        if (!hasPowerPrototypeId) return false;
        if (!hasDeliveryDelayMS) return false;
        if (!hasFlags) return false;
        if (!hasProperties) return false;
        if (!hasPowerOwnerPosition) return false;
        if (!Properties.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePowerResultFieldNames;
      if (hasIdTargetEntity) {
        output.WriteUInt64(1, field_names[3], IdTargetEntity);
      }
      if (hasIdPowerOwnerEntity) {
        output.WriteUInt64(2, field_names[2], IdPowerOwnerEntity);
      }
      if (hasIdUltimateOwnerEntity) {
        output.WriteUInt64(3, field_names[4], IdUltimateOwnerEntity);
      }
      if (hasPowerPrototypeId) {
        output.WriteUInt64(4, field_names[8], PowerPrototypeId);
      }
      if (hasDeliveryDelayMS) {
        output.WriteUInt64(5, field_names[0], DeliveryDelayMS);
      }
      if (hasFlags) {
        output.WriteUInt64(6, field_names[1], Flags);
      }
      if (hasProperties) {
        output.WriteMessage(7, field_names[9], Properties);
      }
      if (hasPowerOwnerPosition) {
        output.WriteMessage(8, field_names[6], PowerOwnerPosition);
      }
      if (hasTransferToEntityId) {
        output.WriteUInt64(9, field_names[12], TransferToEntityId);
      }
      if (hasTargetEntityPrototypeId) {
        output.WriteUInt64(10, field_names[10], TargetEntityPrototypeId);
      }
      if (hasPowerOwnerEntityPrototypeId) {
        output.WriteUInt64(11, field_names[5], PowerOwnerEntityPrototypeId);
      }
      if (hasUltimateOwnerEntityPrototypeId) {
        output.WriteUInt64(12, field_names[14], UltimateOwnerEntityPrototypeId);
      }
      if (hasPowerOwnerRegionPrototypeId) {
        output.WriteUInt64(13, field_names[7], PowerOwnerRegionPrototypeId);
      }
      if (hasTransferToEntityPrototypeId) {
        output.WriteUInt64(14, field_names[13], TransferToEntityPrototypeId);
      }
      if (hasTargetServerString) {
        output.WriteString(15, field_names[11], TargetServerString);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetEntity);
      }
      if (hasIdPowerOwnerEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, IdPowerOwnerEntity);
      }
      if (hasIdUltimateOwnerEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, IdUltimateOwnerEntity);
      }
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, PowerPrototypeId);
      }
      if (hasDeliveryDelayMS) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, DeliveryDelayMS);
      }
      if (hasFlags) {
        size += pb::CodedOutputStream.ComputeUInt64Size(6, Flags);
      }
      if (hasProperties) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, Properties);
      }
      if (hasPowerOwnerPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, PowerOwnerPosition);
      }
      if (hasTransferToEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(9, TransferToEntityId);
      }
      if (hasTargetEntityPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(10, TargetEntityPrototypeId);
      }
      if (hasPowerOwnerEntityPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(11, PowerOwnerEntityPrototypeId);
      }
      if (hasUltimateOwnerEntityPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(12, UltimateOwnerEntityPrototypeId);
      }
      if (hasPowerOwnerRegionPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(13, PowerOwnerRegionPrototypeId);
      }
      if (hasTransferToEntityPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(14, TransferToEntityPrototypeId);
      }
      if (hasTargetServerString) {
        size += pb::CodedOutputStream.ComputeStringSize(15, TargetServerString);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePowerResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePowerResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePowerResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePowerResult MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePowerResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePowerResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePowerResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePowerResult result;
      
      private NetMessagePowerResult PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePowerResult original = result;
          result = new NetMessagePowerResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePowerResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePowerResult.Descriptor; }
      }
      
      public override NetMessagePowerResult DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePowerResult.DefaultInstance; }
      }
      
      public override NetMessagePowerResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePowerResult) {
          return MergeFrom((NetMessagePowerResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePowerResult other) {
        if (other == global::Gazillion.NetMessagePowerResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        if (other.HasIdPowerOwnerEntity) {
          IdPowerOwnerEntity = other.IdPowerOwnerEntity;
        }
        if (other.HasIdUltimateOwnerEntity) {
          IdUltimateOwnerEntity = other.IdUltimateOwnerEntity;
        }
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        if (other.HasDeliveryDelayMS) {
          DeliveryDelayMS = other.DeliveryDelayMS;
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        if (other.HasProperties) {
          MergeProperties(other.Properties);
        }
        if (other.HasPowerOwnerPosition) {
          MergePowerOwnerPosition(other.PowerOwnerPosition);
        }
        if (other.HasTransferToEntityId) {
          TransferToEntityId = other.TransferToEntityId;
        }
        if (other.HasTargetEntityPrototypeId) {
          TargetEntityPrototypeId = other.TargetEntityPrototypeId;
        }
        if (other.HasPowerOwnerEntityPrototypeId) {
          PowerOwnerEntityPrototypeId = other.PowerOwnerEntityPrototypeId;
        }
        if (other.HasUltimateOwnerEntityPrototypeId) {
          UltimateOwnerEntityPrototypeId = other.UltimateOwnerEntityPrototypeId;
        }
        if (other.HasPowerOwnerRegionPrototypeId) {
          PowerOwnerRegionPrototypeId = other.PowerOwnerRegionPrototypeId;
        }
        if (other.HasTransferToEntityPrototypeId) {
          TransferToEntityPrototypeId = other.TransferToEntityPrototypeId;
        }
        if (other.HasTargetServerString) {
          TargetServerString = other.TargetServerString;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePowerResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePowerResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
            case 16: {
              result.hasIdPowerOwnerEntity = input.ReadUInt64(ref result.idPowerOwnerEntity_);
              break;
            }
            case 24: {
              result.hasIdUltimateOwnerEntity = input.ReadUInt64(ref result.idUltimateOwnerEntity_);
              break;
            }
            case 32: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
            case 40: {
              result.hasDeliveryDelayMS = input.ReadUInt64(ref result.deliveryDelayMS_);
              break;
            }
            case 48: {
              result.hasFlags = input.ReadUInt64(ref result.flags_);
              break;
            }
            case 58: {
              global::Gazillion.NetStructPropertyList.Builder subBuilder = global::Gazillion.NetStructPropertyList.CreateBuilder();
              if (result.hasProperties) {
                subBuilder.MergeFrom(Properties);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Properties = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPowerOwnerPosition) {
                subBuilder.MergeFrom(PowerOwnerPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PowerOwnerPosition = subBuilder.BuildPartial();
              break;
            }
            case 72: {
              result.hasTransferToEntityId = input.ReadUInt64(ref result.transferToEntityId_);
              break;
            }
            case 80: {
              result.hasTargetEntityPrototypeId = input.ReadUInt64(ref result.targetEntityPrototypeId_);
              break;
            }
            case 88: {
              result.hasPowerOwnerEntityPrototypeId = input.ReadUInt64(ref result.powerOwnerEntityPrototypeId_);
              break;
            }
            case 96: {
              result.hasUltimateOwnerEntityPrototypeId = input.ReadUInt64(ref result.ultimateOwnerEntityPrototypeId_);
              break;
            }
            case 104: {
              result.hasPowerOwnerRegionPrototypeId = input.ReadUInt64(ref result.powerOwnerRegionPrototypeId_);
              break;
            }
            case 112: {
              result.hasTransferToEntityPrototypeId = input.ReadUInt64(ref result.transferToEntityPrototypeId_);
              break;
            }
            case 122: {
              result.hasTargetServerString = input.ReadString(ref result.targetServerString_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
      
      public bool HasIdPowerOwnerEntity {
        get { return result.hasIdPowerOwnerEntity; }
      }
      public ulong IdPowerOwnerEntity {
        get { return result.IdPowerOwnerEntity; }
        set { SetIdPowerOwnerEntity(value); }
      }
      public Builder SetIdPowerOwnerEntity(ulong value) {
        PrepareBuilder();
        result.hasIdPowerOwnerEntity = true;
        result.idPowerOwnerEntity_ = value;
        return this;
      }
      public Builder ClearIdPowerOwnerEntity() {
        PrepareBuilder();
        result.hasIdPowerOwnerEntity = false;
        result.idPowerOwnerEntity_ = 0UL;
        return this;
      }
      
      public bool HasIdUltimateOwnerEntity {
        get { return result.hasIdUltimateOwnerEntity; }
      }
      public ulong IdUltimateOwnerEntity {
        get { return result.IdUltimateOwnerEntity; }
        set { SetIdUltimateOwnerEntity(value); }
      }
      public Builder SetIdUltimateOwnerEntity(ulong value) {
        PrepareBuilder();
        result.hasIdUltimateOwnerEntity = true;
        result.idUltimateOwnerEntity_ = value;
        return this;
      }
      public Builder ClearIdUltimateOwnerEntity() {
        PrepareBuilder();
        result.hasIdUltimateOwnerEntity = false;
        result.idUltimateOwnerEntity_ = 0UL;
        return this;
      }
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasDeliveryDelayMS {
        get { return result.hasDeliveryDelayMS; }
      }
      public ulong DeliveryDelayMS {
        get { return result.DeliveryDelayMS; }
        set { SetDeliveryDelayMS(value); }
      }
      public Builder SetDeliveryDelayMS(ulong value) {
        PrepareBuilder();
        result.hasDeliveryDelayMS = true;
        result.deliveryDelayMS_ = value;
        return this;
      }
      public Builder ClearDeliveryDelayMS() {
        PrepareBuilder();
        result.hasDeliveryDelayMS = false;
        result.deliveryDelayMS_ = 0UL;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public ulong Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(ulong value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0UL;
        return this;
      }
      
      public bool HasProperties {
       get { return result.hasProperties; }
      }
      public global::Gazillion.NetStructPropertyList Properties {
        get { return result.Properties; }
        set { SetProperties(value); }
      }
      public Builder SetProperties(global::Gazillion.NetStructPropertyList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProperties = true;
        result.properties_ = value;
        return this;
      }
      public Builder SetProperties(global::Gazillion.NetStructPropertyList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasProperties = true;
        result.properties_ = builderForValue.Build();
        return this;
      }
      public Builder MergeProperties(global::Gazillion.NetStructPropertyList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasProperties &&
            result.properties_ != global::Gazillion.NetStructPropertyList.DefaultInstance) {
            result.properties_ = global::Gazillion.NetStructPropertyList.CreateBuilder(result.properties_).MergeFrom(value).BuildPartial();
        } else {
          result.properties_ = value;
        }
        result.hasProperties = true;
        return this;
      }
      public Builder ClearProperties() {
        PrepareBuilder();
        result.hasProperties = false;
        result.properties_ = null;
        return this;
      }
      
      public bool HasPowerOwnerPosition {
       get { return result.hasPowerOwnerPosition; }
      }
      public global::Gazillion.NetStructPoint3 PowerOwnerPosition {
        get { return result.PowerOwnerPosition; }
        set { SetPowerOwnerPosition(value); }
      }
      public Builder SetPowerOwnerPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPowerOwnerPosition = true;
        result.powerOwnerPosition_ = value;
        return this;
      }
      public Builder SetPowerOwnerPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPowerOwnerPosition = true;
        result.powerOwnerPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergePowerOwnerPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPowerOwnerPosition &&
            result.powerOwnerPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.powerOwnerPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.powerOwnerPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.powerOwnerPosition_ = value;
        }
        result.hasPowerOwnerPosition = true;
        return this;
      }
      public Builder ClearPowerOwnerPosition() {
        PrepareBuilder();
        result.hasPowerOwnerPosition = false;
        result.powerOwnerPosition_ = null;
        return this;
      }
      
      public bool HasTransferToEntityId {
        get { return result.hasTransferToEntityId; }
      }
      public ulong TransferToEntityId {
        get { return result.TransferToEntityId; }
        set { SetTransferToEntityId(value); }
      }
      public Builder SetTransferToEntityId(ulong value) {
        PrepareBuilder();
        result.hasTransferToEntityId = true;
        result.transferToEntityId_ = value;
        return this;
      }
      public Builder ClearTransferToEntityId() {
        PrepareBuilder();
        result.hasTransferToEntityId = false;
        result.transferToEntityId_ = 0UL;
        return this;
      }
      
      public bool HasTargetEntityPrototypeId {
        get { return result.hasTargetEntityPrototypeId; }
      }
      public ulong TargetEntityPrototypeId {
        get { return result.TargetEntityPrototypeId; }
        set { SetTargetEntityPrototypeId(value); }
      }
      public Builder SetTargetEntityPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasTargetEntityPrototypeId = true;
        result.targetEntityPrototypeId_ = value;
        return this;
      }
      public Builder ClearTargetEntityPrototypeId() {
        PrepareBuilder();
        result.hasTargetEntityPrototypeId = false;
        result.targetEntityPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasPowerOwnerEntityPrototypeId {
        get { return result.hasPowerOwnerEntityPrototypeId; }
      }
      public ulong PowerOwnerEntityPrototypeId {
        get { return result.PowerOwnerEntityPrototypeId; }
        set { SetPowerOwnerEntityPrototypeId(value); }
      }
      public Builder SetPowerOwnerEntityPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerOwnerEntityPrototypeId = true;
        result.powerOwnerEntityPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerOwnerEntityPrototypeId() {
        PrepareBuilder();
        result.hasPowerOwnerEntityPrototypeId = false;
        result.powerOwnerEntityPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasUltimateOwnerEntityPrototypeId {
        get { return result.hasUltimateOwnerEntityPrototypeId; }
      }
      public ulong UltimateOwnerEntityPrototypeId {
        get { return result.UltimateOwnerEntityPrototypeId; }
        set { SetUltimateOwnerEntityPrototypeId(value); }
      }
      public Builder SetUltimateOwnerEntityPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasUltimateOwnerEntityPrototypeId = true;
        result.ultimateOwnerEntityPrototypeId_ = value;
        return this;
      }
      public Builder ClearUltimateOwnerEntityPrototypeId() {
        PrepareBuilder();
        result.hasUltimateOwnerEntityPrototypeId = false;
        result.ultimateOwnerEntityPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasPowerOwnerRegionPrototypeId {
        get { return result.hasPowerOwnerRegionPrototypeId; }
      }
      public ulong PowerOwnerRegionPrototypeId {
        get { return result.PowerOwnerRegionPrototypeId; }
        set { SetPowerOwnerRegionPrototypeId(value); }
      }
      public Builder SetPowerOwnerRegionPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerOwnerRegionPrototypeId = true;
        result.powerOwnerRegionPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerOwnerRegionPrototypeId() {
        PrepareBuilder();
        result.hasPowerOwnerRegionPrototypeId = false;
        result.powerOwnerRegionPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasTransferToEntityPrototypeId {
        get { return result.hasTransferToEntityPrototypeId; }
      }
      public ulong TransferToEntityPrototypeId {
        get { return result.TransferToEntityPrototypeId; }
        set { SetTransferToEntityPrototypeId(value); }
      }
      public Builder SetTransferToEntityPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasTransferToEntityPrototypeId = true;
        result.transferToEntityPrototypeId_ = value;
        return this;
      }
      public Builder ClearTransferToEntityPrototypeId() {
        PrepareBuilder();
        result.hasTransferToEntityPrototypeId = false;
        result.transferToEntityPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasTargetServerString {
        get { return result.hasTargetServerString; }
      }
      public string TargetServerString {
        get { return result.TargetServerString; }
        set { SetTargetServerString(value); }
      }
      public Builder SetTargetServerString(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetServerString = true;
        result.targetServerString_ = value;
        return this;
      }
      public Builder ClearTargetServerString() {
        PrepareBuilder();
        result.hasTargetServerString = false;
        result.targetServerString_ = "";
        return this;
      }
    }
    static NetMessagePowerResult() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePowerBounce : pb::GeneratedMessage<NetMessagePowerBounce, NetMessagePowerBounce.Builder> {
    private NetMessagePowerBounce() { }
    private static readonly NetMessagePowerBounce defaultInstance = new NetMessagePowerBounce().MakeReadOnly();
    private static readonly string[] _netMessagePowerBounceFieldNames = new string[] { "idLastTarget", "idNewTarget", "idPowerUser", "lastTargetPosition", "powerPrototypeId", "projectileSpeed", "userCurrentAssetId", "userOriginalAssetId" };
    private static readonly uint[] _netMessagePowerBounceFieldTags = new uint[] { 16, 32, 8, 26, 40, 69, 56, 48 };
    public static NetMessagePowerBounce DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePowerBounce DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePowerBounce ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowerBounce__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePowerBounce, NetMessagePowerBounce.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowerBounce__FieldAccessorTable; }
    }
    
    public const int IdPowerUserFieldNumber = 1;
    private bool hasIdPowerUser;
    private ulong idPowerUser_;
    public bool HasIdPowerUser {
      get { return hasIdPowerUser; }
    }
    public ulong IdPowerUser {
      get { return idPowerUser_; }
    }
    
    public const int IdLastTargetFieldNumber = 2;
    private bool hasIdLastTarget;
    private ulong idLastTarget_;
    public bool HasIdLastTarget {
      get { return hasIdLastTarget; }
    }
    public ulong IdLastTarget {
      get { return idLastTarget_; }
    }
    
    public const int LastTargetPositionFieldNumber = 3;
    private bool hasLastTargetPosition;
    private global::Gazillion.NetStructPoint3 lastTargetPosition_;
    public bool HasLastTargetPosition {
      get { return hasLastTargetPosition; }
    }
    public global::Gazillion.NetStructPoint3 LastTargetPosition {
      get { return lastTargetPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int IdNewTargetFieldNumber = 4;
    private bool hasIdNewTarget;
    private ulong idNewTarget_;
    public bool HasIdNewTarget {
      get { return hasIdNewTarget; }
    }
    public ulong IdNewTarget {
      get { return idNewTarget_; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 5;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public const int UserOriginalAssetIdFieldNumber = 6;
    private bool hasUserOriginalAssetId;
    private ulong userOriginalAssetId_;
    public bool HasUserOriginalAssetId {
      get { return hasUserOriginalAssetId; }
    }
    public ulong UserOriginalAssetId {
      get { return userOriginalAssetId_; }
    }
    
    public const int UserCurrentAssetIdFieldNumber = 7;
    private bool hasUserCurrentAssetId;
    private ulong userCurrentAssetId_;
    public bool HasUserCurrentAssetId {
      get { return hasUserCurrentAssetId; }
    }
    public ulong UserCurrentAssetId {
      get { return userCurrentAssetId_; }
    }
    
    public const int ProjectileSpeedFieldNumber = 8;
    private bool hasProjectileSpeed;
    private float projectileSpeed_;
    public bool HasProjectileSpeed {
      get { return hasProjectileSpeed; }
    }
    public float ProjectileSpeed {
      get { return projectileSpeed_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdPowerUser) return false;
        if (!hasIdLastTarget) return false;
        if (!hasLastTargetPosition) return false;
        if (!hasIdNewTarget) return false;
        if (!hasPowerPrototypeId) return false;
        if (!hasUserOriginalAssetId) return false;
        if (!hasUserCurrentAssetId) return false;
        if (!hasProjectileSpeed) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePowerBounceFieldNames;
      if (hasIdPowerUser) {
        output.WriteUInt64(1, field_names[2], IdPowerUser);
      }
      if (hasIdLastTarget) {
        output.WriteUInt64(2, field_names[0], IdLastTarget);
      }
      if (hasLastTargetPosition) {
        output.WriteMessage(3, field_names[3], LastTargetPosition);
      }
      if (hasIdNewTarget) {
        output.WriteUInt64(4, field_names[1], IdNewTarget);
      }
      if (hasPowerPrototypeId) {
        output.WriteUInt64(5, field_names[4], PowerPrototypeId);
      }
      if (hasUserOriginalAssetId) {
        output.WriteUInt64(6, field_names[7], UserOriginalAssetId);
      }
      if (hasUserCurrentAssetId) {
        output.WriteUInt64(7, field_names[6], UserCurrentAssetId);
      }
      if (hasProjectileSpeed) {
        output.WriteFloat(8, field_names[5], ProjectileSpeed);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdPowerUser) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdPowerUser);
      }
      if (hasIdLastTarget) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, IdLastTarget);
      }
      if (hasLastTargetPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, LastTargetPosition);
      }
      if (hasIdNewTarget) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, IdNewTarget);
      }
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, PowerPrototypeId);
      }
      if (hasUserOriginalAssetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(6, UserOriginalAssetId);
      }
      if (hasUserCurrentAssetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(7, UserCurrentAssetId);
      }
      if (hasProjectileSpeed) {
        size += pb::CodedOutputStream.ComputeFloatSize(8, ProjectileSpeed);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePowerBounce ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerBounce ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerBounce ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerBounce ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerBounce ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerBounce ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerBounce ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePowerBounce ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePowerBounce ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerBounce ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePowerBounce MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePowerBounce prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePowerBounce, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePowerBounce cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePowerBounce result;
      
      private NetMessagePowerBounce PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePowerBounce original = result;
          result = new NetMessagePowerBounce();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePowerBounce MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePowerBounce.Descriptor; }
      }
      
      public override NetMessagePowerBounce DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePowerBounce.DefaultInstance; }
      }
      
      public override NetMessagePowerBounce BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePowerBounce) {
          return MergeFrom((NetMessagePowerBounce) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePowerBounce other) {
        if (other == global::Gazillion.NetMessagePowerBounce.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdPowerUser) {
          IdPowerUser = other.IdPowerUser;
        }
        if (other.HasIdLastTarget) {
          IdLastTarget = other.IdLastTarget;
        }
        if (other.HasLastTargetPosition) {
          MergeLastTargetPosition(other.LastTargetPosition);
        }
        if (other.HasIdNewTarget) {
          IdNewTarget = other.IdNewTarget;
        }
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        if (other.HasUserOriginalAssetId) {
          UserOriginalAssetId = other.UserOriginalAssetId;
        }
        if (other.HasUserCurrentAssetId) {
          UserCurrentAssetId = other.UserCurrentAssetId;
        }
        if (other.HasProjectileSpeed) {
          ProjectileSpeed = other.ProjectileSpeed;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePowerBounceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePowerBounceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdPowerUser = input.ReadUInt64(ref result.idPowerUser_);
              break;
            }
            case 16: {
              result.hasIdLastTarget = input.ReadUInt64(ref result.idLastTarget_);
              break;
            }
            case 26: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasLastTargetPosition) {
                subBuilder.MergeFrom(LastTargetPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LastTargetPosition = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasIdNewTarget = input.ReadUInt64(ref result.idNewTarget_);
              break;
            }
            case 40: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
            case 48: {
              result.hasUserOriginalAssetId = input.ReadUInt64(ref result.userOriginalAssetId_);
              break;
            }
            case 56: {
              result.hasUserCurrentAssetId = input.ReadUInt64(ref result.userCurrentAssetId_);
              break;
            }
            case 69: {
              result.hasProjectileSpeed = input.ReadFloat(ref result.projectileSpeed_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdPowerUser {
        get { return result.hasIdPowerUser; }
      }
      public ulong IdPowerUser {
        get { return result.IdPowerUser; }
        set { SetIdPowerUser(value); }
      }
      public Builder SetIdPowerUser(ulong value) {
        PrepareBuilder();
        result.hasIdPowerUser = true;
        result.idPowerUser_ = value;
        return this;
      }
      public Builder ClearIdPowerUser() {
        PrepareBuilder();
        result.hasIdPowerUser = false;
        result.idPowerUser_ = 0UL;
        return this;
      }
      
      public bool HasIdLastTarget {
        get { return result.hasIdLastTarget; }
      }
      public ulong IdLastTarget {
        get { return result.IdLastTarget; }
        set { SetIdLastTarget(value); }
      }
      public Builder SetIdLastTarget(ulong value) {
        PrepareBuilder();
        result.hasIdLastTarget = true;
        result.idLastTarget_ = value;
        return this;
      }
      public Builder ClearIdLastTarget() {
        PrepareBuilder();
        result.hasIdLastTarget = false;
        result.idLastTarget_ = 0UL;
        return this;
      }
      
      public bool HasLastTargetPosition {
       get { return result.hasLastTargetPosition; }
      }
      public global::Gazillion.NetStructPoint3 LastTargetPosition {
        get { return result.LastTargetPosition; }
        set { SetLastTargetPosition(value); }
      }
      public Builder SetLastTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLastTargetPosition = true;
        result.lastTargetPosition_ = value;
        return this;
      }
      public Builder SetLastTargetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLastTargetPosition = true;
        result.lastTargetPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLastTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLastTargetPosition &&
            result.lastTargetPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.lastTargetPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.lastTargetPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.lastTargetPosition_ = value;
        }
        result.hasLastTargetPosition = true;
        return this;
      }
      public Builder ClearLastTargetPosition() {
        PrepareBuilder();
        result.hasLastTargetPosition = false;
        result.lastTargetPosition_ = null;
        return this;
      }
      
      public bool HasIdNewTarget {
        get { return result.hasIdNewTarget; }
      }
      public ulong IdNewTarget {
        get { return result.IdNewTarget; }
        set { SetIdNewTarget(value); }
      }
      public Builder SetIdNewTarget(ulong value) {
        PrepareBuilder();
        result.hasIdNewTarget = true;
        result.idNewTarget_ = value;
        return this;
      }
      public Builder ClearIdNewTarget() {
        PrepareBuilder();
        result.hasIdNewTarget = false;
        result.idNewTarget_ = 0UL;
        return this;
      }
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasUserOriginalAssetId {
        get { return result.hasUserOriginalAssetId; }
      }
      public ulong UserOriginalAssetId {
        get { return result.UserOriginalAssetId; }
        set { SetUserOriginalAssetId(value); }
      }
      public Builder SetUserOriginalAssetId(ulong value) {
        PrepareBuilder();
        result.hasUserOriginalAssetId = true;
        result.userOriginalAssetId_ = value;
        return this;
      }
      public Builder ClearUserOriginalAssetId() {
        PrepareBuilder();
        result.hasUserOriginalAssetId = false;
        result.userOriginalAssetId_ = 0UL;
        return this;
      }
      
      public bool HasUserCurrentAssetId {
        get { return result.hasUserCurrentAssetId; }
      }
      public ulong UserCurrentAssetId {
        get { return result.UserCurrentAssetId; }
        set { SetUserCurrentAssetId(value); }
      }
      public Builder SetUserCurrentAssetId(ulong value) {
        PrepareBuilder();
        result.hasUserCurrentAssetId = true;
        result.userCurrentAssetId_ = value;
        return this;
      }
      public Builder ClearUserCurrentAssetId() {
        PrepareBuilder();
        result.hasUserCurrentAssetId = false;
        result.userCurrentAssetId_ = 0UL;
        return this;
      }
      
      public bool HasProjectileSpeed {
        get { return result.hasProjectileSpeed; }
      }
      public float ProjectileSpeed {
        get { return result.ProjectileSpeed; }
        set { SetProjectileSpeed(value); }
      }
      public Builder SetProjectileSpeed(float value) {
        PrepareBuilder();
        result.hasProjectileSpeed = true;
        result.projectileSpeed_ = value;
        return this;
      }
      public Builder ClearProjectileSpeed() {
        PrepareBuilder();
        result.hasProjectileSpeed = false;
        result.projectileSpeed_ = 0F;
        return this;
      }
    }
    static NetMessagePowerBounce() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePowerWeaponMissing : pb::GeneratedMessage<NetMessagePowerWeaponMissing, NetMessagePowerWeaponMissing.Builder> {
    private NetMessagePowerWeaponMissing() { }
    private static readonly NetMessagePowerWeaponMissing defaultInstance = new NetMessagePowerWeaponMissing().MakeReadOnly();
    private static readonly string[] _netMessagePowerWeaponMissingFieldNames = new string[] { "idOwner", "weaponMissing" };
    private static readonly uint[] _netMessagePowerWeaponMissingFieldTags = new uint[] { 8, 16 };
    public static NetMessagePowerWeaponMissing DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePowerWeaponMissing DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePowerWeaponMissing ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowerWeaponMissing__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePowerWeaponMissing, NetMessagePowerWeaponMissing.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowerWeaponMissing__FieldAccessorTable; }
    }
    
    public const int IdOwnerFieldNumber = 1;
    private bool hasIdOwner;
    private ulong idOwner_;
    public bool HasIdOwner {
      get { return hasIdOwner; }
    }
    public ulong IdOwner {
      get { return idOwner_; }
    }
    
    public const int WeaponMissingFieldNumber = 2;
    private bool hasWeaponMissing;
    private bool weaponMissing_;
    public bool HasWeaponMissing {
      get { return hasWeaponMissing; }
    }
    public bool WeaponMissing {
      get { return weaponMissing_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdOwner) return false;
        if (!hasWeaponMissing) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePowerWeaponMissingFieldNames;
      if (hasIdOwner) {
        output.WriteUInt64(1, field_names[0], IdOwner);
      }
      if (hasWeaponMissing) {
        output.WriteBool(2, field_names[1], WeaponMissing);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdOwner) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdOwner);
      }
      if (hasWeaponMissing) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, WeaponMissing);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePowerWeaponMissing ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerWeaponMissing ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerWeaponMissing ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerWeaponMissing ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerWeaponMissing ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerWeaponMissing ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerWeaponMissing ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePowerWeaponMissing ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePowerWeaponMissing ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerWeaponMissing ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePowerWeaponMissing MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePowerWeaponMissing prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePowerWeaponMissing, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePowerWeaponMissing cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePowerWeaponMissing result;
      
      private NetMessagePowerWeaponMissing PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePowerWeaponMissing original = result;
          result = new NetMessagePowerWeaponMissing();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePowerWeaponMissing MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePowerWeaponMissing.Descriptor; }
      }
      
      public override NetMessagePowerWeaponMissing DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePowerWeaponMissing.DefaultInstance; }
      }
      
      public override NetMessagePowerWeaponMissing BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePowerWeaponMissing) {
          return MergeFrom((NetMessagePowerWeaponMissing) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePowerWeaponMissing other) {
        if (other == global::Gazillion.NetMessagePowerWeaponMissing.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdOwner) {
          IdOwner = other.IdOwner;
        }
        if (other.HasWeaponMissing) {
          WeaponMissing = other.WeaponMissing;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePowerWeaponMissingFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePowerWeaponMissingFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdOwner = input.ReadUInt64(ref result.idOwner_);
              break;
            }
            case 16: {
              result.hasWeaponMissing = input.ReadBool(ref result.weaponMissing_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdOwner {
        get { return result.hasIdOwner; }
      }
      public ulong IdOwner {
        get { return result.IdOwner; }
        set { SetIdOwner(value); }
      }
      public Builder SetIdOwner(ulong value) {
        PrepareBuilder();
        result.hasIdOwner = true;
        result.idOwner_ = value;
        return this;
      }
      public Builder ClearIdOwner() {
        PrepareBuilder();
        result.hasIdOwner = false;
        result.idOwner_ = 0UL;
        return this;
      }
      
      public bool HasWeaponMissing {
        get { return result.hasWeaponMissing; }
      }
      public bool WeaponMissing {
        get { return result.WeaponMissing; }
        set { SetWeaponMissing(value); }
      }
      public Builder SetWeaponMissing(bool value) {
        PrepareBuilder();
        result.hasWeaponMissing = true;
        result.weaponMissing_ = value;
        return this;
      }
      public Builder ClearWeaponMissing() {
        PrepareBuilder();
        result.hasWeaponMissing = false;
        result.weaponMissing_ = false;
        return this;
      }
    }
    static NetMessagePowerWeaponMissing() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageOnPreInteractPowerEnd : pb::GeneratedMessage<NetMessageOnPreInteractPowerEnd, NetMessageOnPreInteractPowerEnd.Builder> {
    private NetMessageOnPreInteractPowerEnd() { }
    private static readonly NetMessageOnPreInteractPowerEnd defaultInstance = new NetMessageOnPreInteractPowerEnd().MakeReadOnly();
    private static readonly string[] _netMessageOnPreInteractPowerEndFieldNames = new string[] { "idTargetEntity" };
    private static readonly uint[] _netMessageOnPreInteractPowerEndFieldTags = new uint[] { 8 };
    public static NetMessageOnPreInteractPowerEnd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageOnPreInteractPowerEnd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageOnPreInteractPowerEnd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnPreInteractPowerEnd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageOnPreInteractPowerEnd, NetMessageOnPreInteractPowerEnd.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnPreInteractPowerEnd__FieldAccessorTable; }
    }
    
    public const int IdTargetEntityFieldNumber = 1;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageOnPreInteractPowerEndFieldNames;
      if (hasIdTargetEntity) {
        output.WriteUInt64(1, field_names[0], IdTargetEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageOnPreInteractPowerEnd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnPreInteractPowerEnd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnPreInteractPowerEnd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnPreInteractPowerEnd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnPreInteractPowerEnd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnPreInteractPowerEnd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnPreInteractPowerEnd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageOnPreInteractPowerEnd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageOnPreInteractPowerEnd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnPreInteractPowerEnd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageOnPreInteractPowerEnd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageOnPreInteractPowerEnd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageOnPreInteractPowerEnd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageOnPreInteractPowerEnd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageOnPreInteractPowerEnd result;
      
      private NetMessageOnPreInteractPowerEnd PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageOnPreInteractPowerEnd original = result;
          result = new NetMessageOnPreInteractPowerEnd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageOnPreInteractPowerEnd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageOnPreInteractPowerEnd.Descriptor; }
      }
      
      public override NetMessageOnPreInteractPowerEnd DefaultInstanceForType {
        get { return global::Gazillion.NetMessageOnPreInteractPowerEnd.DefaultInstance; }
      }
      
      public override NetMessageOnPreInteractPowerEnd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageOnPreInteractPowerEnd) {
          return MergeFrom((NetMessageOnPreInteractPowerEnd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageOnPreInteractPowerEnd other) {
        if (other == global::Gazillion.NetMessageOnPreInteractPowerEnd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageOnPreInteractPowerEndFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageOnPreInteractPowerEndFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageOnPreInteractPowerEnd() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRegionPrimitiveBox : pb::GeneratedMessage<NetMessageRegionPrimitiveBox, NetMessageRegionPrimitiveBox.Builder> {
    private NetMessageRegionPrimitiveBox() { }
    private static readonly NetMessageRegionPrimitiveBox defaultInstance = new NetMessageRegionPrimitiveBox().MakeReadOnly();
    private static readonly string[] _netMessageRegionPrimitiveBoxFieldNames = new string[] { "add", "center", "color", "lifetimeInMilliseconds", "size" };
    private static readonly uint[] _netMessageRegionPrimitiveBoxFieldTags = new uint[] { 40, 10, 26, 32, 18 };
    public static NetMessageRegionPrimitiveBox DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRegionPrimitiveBox DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRegionPrimitiveBox ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionPrimitiveBox__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRegionPrimitiveBox, NetMessageRegionPrimitiveBox.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionPrimitiveBox__FieldAccessorTable; }
    }
    
    public const int CenterFieldNumber = 1;
    private bool hasCenter;
    private global::Gazillion.NetStructPoint3 center_;
    public bool HasCenter {
      get { return hasCenter; }
    }
    public global::Gazillion.NetStructPoint3 Center {
      get { return center_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int SizeFieldNumber = 2;
    private bool hasSize;
    private global::Gazillion.NetStructPoint3 size_;
    public bool HasSize {
      get { return hasSize; }
    }
    public global::Gazillion.NetStructPoint3 Size {
      get { return size_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int ColorFieldNumber = 3;
    private bool hasColor;
    private global::Gazillion.NetStructIPoint3 color_;
    public bool HasColor {
      get { return hasColor; }
    }
    public global::Gazillion.NetStructIPoint3 Color {
      get { return color_ ?? global::Gazillion.NetStructIPoint3.DefaultInstance; }
    }
    
    public const int LifetimeInMillisecondsFieldNumber = 4;
    private bool hasLifetimeInMilliseconds;
    private ulong lifetimeInMilliseconds_;
    public bool HasLifetimeInMilliseconds {
      get { return hasLifetimeInMilliseconds; }
    }
    public ulong LifetimeInMilliseconds {
      get { return lifetimeInMilliseconds_; }
    }
    
    public const int AddFieldNumber = 5;
    private bool hasAdd;
    private bool add_;
    public bool HasAdd {
      get { return hasAdd; }
    }
    public bool Add {
      get { return add_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCenter) return false;
        if (!hasSize) return false;
        if (!hasColor) return false;
        if (!hasLifetimeInMilliseconds) return false;
        if (!hasAdd) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRegionPrimitiveBoxFieldNames;
      if (hasCenter) {
        output.WriteMessage(1, field_names[1], Center);
      }
      if (hasSize) {
        output.WriteMessage(2, field_names[4], Size);
      }
      if (hasColor) {
        output.WriteMessage(3, field_names[2], Color);
      }
      if (hasLifetimeInMilliseconds) {
        output.WriteUInt64(4, field_names[3], LifetimeInMilliseconds);
      }
      if (hasAdd) {
        output.WriteBool(5, field_names[0], Add);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCenter) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Center);
      }
      if (hasSize) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Size);
      }
      if (hasColor) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Color);
      }
      if (hasLifetimeInMilliseconds) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, LifetimeInMilliseconds);
      }
      if (hasAdd) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Add);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRegionPrimitiveBox ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveBox ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveBox ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveBox ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveBox ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveBox ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveBox ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRegionPrimitiveBox ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRegionPrimitiveBox ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveBox ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRegionPrimitiveBox MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRegionPrimitiveBox prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRegionPrimitiveBox, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRegionPrimitiveBox cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRegionPrimitiveBox result;
      
      private NetMessageRegionPrimitiveBox PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRegionPrimitiveBox original = result;
          result = new NetMessageRegionPrimitiveBox();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRegionPrimitiveBox MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRegionPrimitiveBox.Descriptor; }
      }
      
      public override NetMessageRegionPrimitiveBox DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRegionPrimitiveBox.DefaultInstance; }
      }
      
      public override NetMessageRegionPrimitiveBox BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRegionPrimitiveBox) {
          return MergeFrom((NetMessageRegionPrimitiveBox) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRegionPrimitiveBox other) {
        if (other == global::Gazillion.NetMessageRegionPrimitiveBox.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCenter) {
          MergeCenter(other.Center);
        }
        if (other.HasSize) {
          MergeSize(other.Size);
        }
        if (other.HasColor) {
          MergeColor(other.Color);
        }
        if (other.HasLifetimeInMilliseconds) {
          LifetimeInMilliseconds = other.LifetimeInMilliseconds;
        }
        if (other.HasAdd) {
          Add = other.Add;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRegionPrimitiveBoxFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRegionPrimitiveBoxFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasCenter) {
                subBuilder.MergeFrom(Center);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Center = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasSize) {
                subBuilder.MergeFrom(Size);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Size = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Gazillion.NetStructIPoint3.Builder subBuilder = global::Gazillion.NetStructIPoint3.CreateBuilder();
              if (result.hasColor) {
                subBuilder.MergeFrom(Color);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Color = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasLifetimeInMilliseconds = input.ReadUInt64(ref result.lifetimeInMilliseconds_);
              break;
            }
            case 40: {
              result.hasAdd = input.ReadBool(ref result.add_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCenter {
       get { return result.hasCenter; }
      }
      public global::Gazillion.NetStructPoint3 Center {
        get { return result.Center; }
        set { SetCenter(value); }
      }
      public Builder SetCenter(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCenter = true;
        result.center_ = value;
        return this;
      }
      public Builder SetCenter(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCenter = true;
        result.center_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCenter(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCenter &&
            result.center_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.center_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.center_).MergeFrom(value).BuildPartial();
        } else {
          result.center_ = value;
        }
        result.hasCenter = true;
        return this;
      }
      public Builder ClearCenter() {
        PrepareBuilder();
        result.hasCenter = false;
        result.center_ = null;
        return this;
      }
      
      public bool HasSize {
       get { return result.hasSize; }
      }
      public global::Gazillion.NetStructPoint3 Size {
        get { return result.Size; }
        set { SetSize(value); }
      }
      public Builder SetSize(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSize = true;
        result.size_ = value;
        return this;
      }
      public Builder SetSize(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSize = true;
        result.size_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSize(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSize &&
            result.size_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.size_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.size_).MergeFrom(value).BuildPartial();
        } else {
          result.size_ = value;
        }
        result.hasSize = true;
        return this;
      }
      public Builder ClearSize() {
        PrepareBuilder();
        result.hasSize = false;
        result.size_ = null;
        return this;
      }
      
      public bool HasColor {
       get { return result.hasColor; }
      }
      public global::Gazillion.NetStructIPoint3 Color {
        get { return result.Color; }
        set { SetColor(value); }
      }
      public Builder SetColor(global::Gazillion.NetStructIPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = value;
        return this;
      }
      public Builder SetColor(global::Gazillion.NetStructIPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = builderForValue.Build();
        return this;
      }
      public Builder MergeColor(global::Gazillion.NetStructIPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasColor &&
            result.color_ != global::Gazillion.NetStructIPoint3.DefaultInstance) {
            result.color_ = global::Gazillion.NetStructIPoint3.CreateBuilder(result.color_).MergeFrom(value).BuildPartial();
        } else {
          result.color_ = value;
        }
        result.hasColor = true;
        return this;
      }
      public Builder ClearColor() {
        PrepareBuilder();
        result.hasColor = false;
        result.color_ = null;
        return this;
      }
      
      public bool HasLifetimeInMilliseconds {
        get { return result.hasLifetimeInMilliseconds; }
      }
      public ulong LifetimeInMilliseconds {
        get { return result.LifetimeInMilliseconds; }
        set { SetLifetimeInMilliseconds(value); }
      }
      public Builder SetLifetimeInMilliseconds(ulong value) {
        PrepareBuilder();
        result.hasLifetimeInMilliseconds = true;
        result.lifetimeInMilliseconds_ = value;
        return this;
      }
      public Builder ClearLifetimeInMilliseconds() {
        PrepareBuilder();
        result.hasLifetimeInMilliseconds = false;
        result.lifetimeInMilliseconds_ = 0UL;
        return this;
      }
      
      public bool HasAdd {
        get { return result.hasAdd; }
      }
      public bool Add {
        get { return result.Add; }
        set { SetAdd(value); }
      }
      public Builder SetAdd(bool value) {
        PrepareBuilder();
        result.hasAdd = true;
        result.add_ = value;
        return this;
      }
      public Builder ClearAdd() {
        PrepareBuilder();
        result.hasAdd = false;
        result.add_ = false;
        return this;
      }
    }
    static NetMessageRegionPrimitiveBox() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRegionPrimitiveTriangle : pb::GeneratedMessage<NetMessageRegionPrimitiveTriangle, NetMessageRegionPrimitiveTriangle.Builder> {
    private NetMessageRegionPrimitiveTriangle() { }
    private static readonly NetMessageRegionPrimitiveTriangle defaultInstance = new NetMessageRegionPrimitiveTriangle().MakeReadOnly();
    private static readonly string[] _netMessageRegionPrimitiveTriangleFieldNames = new string[] { "add", "color", "lifetimeInMilliseconds", "point0", "point1", "point2" };
    private static readonly uint[] _netMessageRegionPrimitiveTriangleFieldTags = new uint[] { 48, 34, 40, 10, 18, 26 };
    public static NetMessageRegionPrimitiveTriangle DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRegionPrimitiveTriangle DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRegionPrimitiveTriangle ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionPrimitiveTriangle__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRegionPrimitiveTriangle, NetMessageRegionPrimitiveTriangle.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionPrimitiveTriangle__FieldAccessorTable; }
    }
    
    public const int Point0FieldNumber = 1;
    private bool hasPoint0;
    private global::Gazillion.NetStructPoint3 point0_;
    public bool HasPoint0 {
      get { return hasPoint0; }
    }
    public global::Gazillion.NetStructPoint3 Point0 {
      get { return point0_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int Point1FieldNumber = 2;
    private bool hasPoint1;
    private global::Gazillion.NetStructPoint3 point1_;
    public bool HasPoint1 {
      get { return hasPoint1; }
    }
    public global::Gazillion.NetStructPoint3 Point1 {
      get { return point1_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int Point2FieldNumber = 3;
    private bool hasPoint2;
    private global::Gazillion.NetStructPoint3 point2_;
    public bool HasPoint2 {
      get { return hasPoint2; }
    }
    public global::Gazillion.NetStructPoint3 Point2 {
      get { return point2_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int ColorFieldNumber = 4;
    private bool hasColor;
    private global::Gazillion.NetStructIPoint3 color_;
    public bool HasColor {
      get { return hasColor; }
    }
    public global::Gazillion.NetStructIPoint3 Color {
      get { return color_ ?? global::Gazillion.NetStructIPoint3.DefaultInstance; }
    }
    
    public const int LifetimeInMillisecondsFieldNumber = 5;
    private bool hasLifetimeInMilliseconds;
    private ulong lifetimeInMilliseconds_;
    public bool HasLifetimeInMilliseconds {
      get { return hasLifetimeInMilliseconds; }
    }
    public ulong LifetimeInMilliseconds {
      get { return lifetimeInMilliseconds_; }
    }
    
    public const int AddFieldNumber = 6;
    private bool hasAdd;
    private bool add_;
    public bool HasAdd {
      get { return hasAdd; }
    }
    public bool Add {
      get { return add_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPoint0) return false;
        if (!hasPoint1) return false;
        if (!hasPoint2) return false;
        if (!hasColor) return false;
        if (!hasLifetimeInMilliseconds) return false;
        if (!hasAdd) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRegionPrimitiveTriangleFieldNames;
      if (hasPoint0) {
        output.WriteMessage(1, field_names[3], Point0);
      }
      if (hasPoint1) {
        output.WriteMessage(2, field_names[4], Point1);
      }
      if (hasPoint2) {
        output.WriteMessage(3, field_names[5], Point2);
      }
      if (hasColor) {
        output.WriteMessage(4, field_names[1], Color);
      }
      if (hasLifetimeInMilliseconds) {
        output.WriteUInt64(5, field_names[2], LifetimeInMilliseconds);
      }
      if (hasAdd) {
        output.WriteBool(6, field_names[0], Add);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPoint0) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Point0);
      }
      if (hasPoint1) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Point1);
      }
      if (hasPoint2) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Point2);
      }
      if (hasColor) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Color);
      }
      if (hasLifetimeInMilliseconds) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, LifetimeInMilliseconds);
      }
      if (hasAdd) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, Add);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRegionPrimitiveTriangle ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveTriangle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveTriangle ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveTriangle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveTriangle ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveTriangle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveTriangle ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRegionPrimitiveTriangle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRegionPrimitiveTriangle ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveTriangle ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRegionPrimitiveTriangle MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRegionPrimitiveTriangle prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRegionPrimitiveTriangle, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRegionPrimitiveTriangle cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRegionPrimitiveTriangle result;
      
      private NetMessageRegionPrimitiveTriangle PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRegionPrimitiveTriangle original = result;
          result = new NetMessageRegionPrimitiveTriangle();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRegionPrimitiveTriangle MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRegionPrimitiveTriangle.Descriptor; }
      }
      
      public override NetMessageRegionPrimitiveTriangle DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRegionPrimitiveTriangle.DefaultInstance; }
      }
      
      public override NetMessageRegionPrimitiveTriangle BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRegionPrimitiveTriangle) {
          return MergeFrom((NetMessageRegionPrimitiveTriangle) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRegionPrimitiveTriangle other) {
        if (other == global::Gazillion.NetMessageRegionPrimitiveTriangle.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPoint0) {
          MergePoint0(other.Point0);
        }
        if (other.HasPoint1) {
          MergePoint1(other.Point1);
        }
        if (other.HasPoint2) {
          MergePoint2(other.Point2);
        }
        if (other.HasColor) {
          MergeColor(other.Color);
        }
        if (other.HasLifetimeInMilliseconds) {
          LifetimeInMilliseconds = other.LifetimeInMilliseconds;
        }
        if (other.HasAdd) {
          Add = other.Add;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRegionPrimitiveTriangleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRegionPrimitiveTriangleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPoint0) {
                subBuilder.MergeFrom(Point0);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Point0 = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPoint1) {
                subBuilder.MergeFrom(Point1);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Point1 = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPoint2) {
                subBuilder.MergeFrom(Point2);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Point2 = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Gazillion.NetStructIPoint3.Builder subBuilder = global::Gazillion.NetStructIPoint3.CreateBuilder();
              if (result.hasColor) {
                subBuilder.MergeFrom(Color);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Color = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasLifetimeInMilliseconds = input.ReadUInt64(ref result.lifetimeInMilliseconds_);
              break;
            }
            case 48: {
              result.hasAdd = input.ReadBool(ref result.add_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPoint0 {
       get { return result.hasPoint0; }
      }
      public global::Gazillion.NetStructPoint3 Point0 {
        get { return result.Point0; }
        set { SetPoint0(value); }
      }
      public Builder SetPoint0(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPoint0 = true;
        result.point0_ = value;
        return this;
      }
      public Builder SetPoint0(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPoint0 = true;
        result.point0_ = builderForValue.Build();
        return this;
      }
      public Builder MergePoint0(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPoint0 &&
            result.point0_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.point0_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.point0_).MergeFrom(value).BuildPartial();
        } else {
          result.point0_ = value;
        }
        result.hasPoint0 = true;
        return this;
      }
      public Builder ClearPoint0() {
        PrepareBuilder();
        result.hasPoint0 = false;
        result.point0_ = null;
        return this;
      }
      
      public bool HasPoint1 {
       get { return result.hasPoint1; }
      }
      public global::Gazillion.NetStructPoint3 Point1 {
        get { return result.Point1; }
        set { SetPoint1(value); }
      }
      public Builder SetPoint1(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPoint1 = true;
        result.point1_ = value;
        return this;
      }
      public Builder SetPoint1(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPoint1 = true;
        result.point1_ = builderForValue.Build();
        return this;
      }
      public Builder MergePoint1(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPoint1 &&
            result.point1_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.point1_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.point1_).MergeFrom(value).BuildPartial();
        } else {
          result.point1_ = value;
        }
        result.hasPoint1 = true;
        return this;
      }
      public Builder ClearPoint1() {
        PrepareBuilder();
        result.hasPoint1 = false;
        result.point1_ = null;
        return this;
      }
      
      public bool HasPoint2 {
       get { return result.hasPoint2; }
      }
      public global::Gazillion.NetStructPoint3 Point2 {
        get { return result.Point2; }
        set { SetPoint2(value); }
      }
      public Builder SetPoint2(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPoint2 = true;
        result.point2_ = value;
        return this;
      }
      public Builder SetPoint2(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPoint2 = true;
        result.point2_ = builderForValue.Build();
        return this;
      }
      public Builder MergePoint2(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPoint2 &&
            result.point2_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.point2_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.point2_).MergeFrom(value).BuildPartial();
        } else {
          result.point2_ = value;
        }
        result.hasPoint2 = true;
        return this;
      }
      public Builder ClearPoint2() {
        PrepareBuilder();
        result.hasPoint2 = false;
        result.point2_ = null;
        return this;
      }
      
      public bool HasColor {
       get { return result.hasColor; }
      }
      public global::Gazillion.NetStructIPoint3 Color {
        get { return result.Color; }
        set { SetColor(value); }
      }
      public Builder SetColor(global::Gazillion.NetStructIPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = value;
        return this;
      }
      public Builder SetColor(global::Gazillion.NetStructIPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = builderForValue.Build();
        return this;
      }
      public Builder MergeColor(global::Gazillion.NetStructIPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasColor &&
            result.color_ != global::Gazillion.NetStructIPoint3.DefaultInstance) {
            result.color_ = global::Gazillion.NetStructIPoint3.CreateBuilder(result.color_).MergeFrom(value).BuildPartial();
        } else {
          result.color_ = value;
        }
        result.hasColor = true;
        return this;
      }
      public Builder ClearColor() {
        PrepareBuilder();
        result.hasColor = false;
        result.color_ = null;
        return this;
      }
      
      public bool HasLifetimeInMilliseconds {
        get { return result.hasLifetimeInMilliseconds; }
      }
      public ulong LifetimeInMilliseconds {
        get { return result.LifetimeInMilliseconds; }
        set { SetLifetimeInMilliseconds(value); }
      }
      public Builder SetLifetimeInMilliseconds(ulong value) {
        PrepareBuilder();
        result.hasLifetimeInMilliseconds = true;
        result.lifetimeInMilliseconds_ = value;
        return this;
      }
      public Builder ClearLifetimeInMilliseconds() {
        PrepareBuilder();
        result.hasLifetimeInMilliseconds = false;
        result.lifetimeInMilliseconds_ = 0UL;
        return this;
      }
      
      public bool HasAdd {
        get { return result.hasAdd; }
      }
      public bool Add {
        get { return result.Add; }
        set { SetAdd(value); }
      }
      public Builder SetAdd(bool value) {
        PrepareBuilder();
        result.hasAdd = true;
        result.add_ = value;
        return this;
      }
      public Builder ClearAdd() {
        PrepareBuilder();
        result.hasAdd = false;
        result.add_ = false;
        return this;
      }
    }
    static NetMessageRegionPrimitiveTriangle() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRegionPrimitiveSphere : pb::GeneratedMessage<NetMessageRegionPrimitiveSphere, NetMessageRegionPrimitiveSphere.Builder> {
    private NetMessageRegionPrimitiveSphere() { }
    private static readonly NetMessageRegionPrimitiveSphere defaultInstance = new NetMessageRegionPrimitiveSphere().MakeReadOnly();
    private static readonly string[] _netMessageRegionPrimitiveSphereFieldNames = new string[] { "add", "center", "color", "lifetimeInMilliseconds", "radius" };
    private static readonly uint[] _netMessageRegionPrimitiveSphereFieldTags = new uint[] { 40, 10, 26, 32, 21 };
    public static NetMessageRegionPrimitiveSphere DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRegionPrimitiveSphere DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRegionPrimitiveSphere ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionPrimitiveSphere__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRegionPrimitiveSphere, NetMessageRegionPrimitiveSphere.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionPrimitiveSphere__FieldAccessorTable; }
    }
    
    public const int CenterFieldNumber = 1;
    private bool hasCenter;
    private global::Gazillion.NetStructPoint3 center_;
    public bool HasCenter {
      get { return hasCenter; }
    }
    public global::Gazillion.NetStructPoint3 Center {
      get { return center_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int RadiusFieldNumber = 2;
    private bool hasRadius;
    private float radius_;
    public bool HasRadius {
      get { return hasRadius; }
    }
    public float Radius {
      get { return radius_; }
    }
    
    public const int ColorFieldNumber = 3;
    private bool hasColor;
    private global::Gazillion.NetStructIPoint3 color_;
    public bool HasColor {
      get { return hasColor; }
    }
    public global::Gazillion.NetStructIPoint3 Color {
      get { return color_ ?? global::Gazillion.NetStructIPoint3.DefaultInstance; }
    }
    
    public const int LifetimeInMillisecondsFieldNumber = 4;
    private bool hasLifetimeInMilliseconds;
    private ulong lifetimeInMilliseconds_;
    public bool HasLifetimeInMilliseconds {
      get { return hasLifetimeInMilliseconds; }
    }
    public ulong LifetimeInMilliseconds {
      get { return lifetimeInMilliseconds_; }
    }
    
    public const int AddFieldNumber = 5;
    private bool hasAdd;
    private bool add_;
    public bool HasAdd {
      get { return hasAdd; }
    }
    public bool Add {
      get { return add_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCenter) return false;
        if (!hasRadius) return false;
        if (!hasColor) return false;
        if (!hasLifetimeInMilliseconds) return false;
        if (!hasAdd) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRegionPrimitiveSphereFieldNames;
      if (hasCenter) {
        output.WriteMessage(1, field_names[1], Center);
      }
      if (hasRadius) {
        output.WriteFloat(2, field_names[4], Radius);
      }
      if (hasColor) {
        output.WriteMessage(3, field_names[2], Color);
      }
      if (hasLifetimeInMilliseconds) {
        output.WriteUInt64(4, field_names[3], LifetimeInMilliseconds);
      }
      if (hasAdd) {
        output.WriteBool(5, field_names[0], Add);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCenter) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Center);
      }
      if (hasRadius) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, Radius);
      }
      if (hasColor) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Color);
      }
      if (hasLifetimeInMilliseconds) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, LifetimeInMilliseconds);
      }
      if (hasAdd) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Add);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRegionPrimitiveSphere ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveSphere ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveSphere ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveSphere ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveSphere ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveSphere ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveSphere ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRegionPrimitiveSphere ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRegionPrimitiveSphere ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveSphere ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRegionPrimitiveSphere MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRegionPrimitiveSphere prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRegionPrimitiveSphere, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRegionPrimitiveSphere cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRegionPrimitiveSphere result;
      
      private NetMessageRegionPrimitiveSphere PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRegionPrimitiveSphere original = result;
          result = new NetMessageRegionPrimitiveSphere();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRegionPrimitiveSphere MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRegionPrimitiveSphere.Descriptor; }
      }
      
      public override NetMessageRegionPrimitiveSphere DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRegionPrimitiveSphere.DefaultInstance; }
      }
      
      public override NetMessageRegionPrimitiveSphere BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRegionPrimitiveSphere) {
          return MergeFrom((NetMessageRegionPrimitiveSphere) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRegionPrimitiveSphere other) {
        if (other == global::Gazillion.NetMessageRegionPrimitiveSphere.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCenter) {
          MergeCenter(other.Center);
        }
        if (other.HasRadius) {
          Radius = other.Radius;
        }
        if (other.HasColor) {
          MergeColor(other.Color);
        }
        if (other.HasLifetimeInMilliseconds) {
          LifetimeInMilliseconds = other.LifetimeInMilliseconds;
        }
        if (other.HasAdd) {
          Add = other.Add;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRegionPrimitiveSphereFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRegionPrimitiveSphereFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasCenter) {
                subBuilder.MergeFrom(Center);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Center = subBuilder.BuildPartial();
              break;
            }
            case 21: {
              result.hasRadius = input.ReadFloat(ref result.radius_);
              break;
            }
            case 26: {
              global::Gazillion.NetStructIPoint3.Builder subBuilder = global::Gazillion.NetStructIPoint3.CreateBuilder();
              if (result.hasColor) {
                subBuilder.MergeFrom(Color);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Color = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasLifetimeInMilliseconds = input.ReadUInt64(ref result.lifetimeInMilliseconds_);
              break;
            }
            case 40: {
              result.hasAdd = input.ReadBool(ref result.add_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCenter {
       get { return result.hasCenter; }
      }
      public global::Gazillion.NetStructPoint3 Center {
        get { return result.Center; }
        set { SetCenter(value); }
      }
      public Builder SetCenter(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCenter = true;
        result.center_ = value;
        return this;
      }
      public Builder SetCenter(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCenter = true;
        result.center_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCenter(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCenter &&
            result.center_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.center_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.center_).MergeFrom(value).BuildPartial();
        } else {
          result.center_ = value;
        }
        result.hasCenter = true;
        return this;
      }
      public Builder ClearCenter() {
        PrepareBuilder();
        result.hasCenter = false;
        result.center_ = null;
        return this;
      }
      
      public bool HasRadius {
        get { return result.hasRadius; }
      }
      public float Radius {
        get { return result.Radius; }
        set { SetRadius(value); }
      }
      public Builder SetRadius(float value) {
        PrepareBuilder();
        result.hasRadius = true;
        result.radius_ = value;
        return this;
      }
      public Builder ClearRadius() {
        PrepareBuilder();
        result.hasRadius = false;
        result.radius_ = 0F;
        return this;
      }
      
      public bool HasColor {
       get { return result.hasColor; }
      }
      public global::Gazillion.NetStructIPoint3 Color {
        get { return result.Color; }
        set { SetColor(value); }
      }
      public Builder SetColor(global::Gazillion.NetStructIPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = value;
        return this;
      }
      public Builder SetColor(global::Gazillion.NetStructIPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = builderForValue.Build();
        return this;
      }
      public Builder MergeColor(global::Gazillion.NetStructIPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasColor &&
            result.color_ != global::Gazillion.NetStructIPoint3.DefaultInstance) {
            result.color_ = global::Gazillion.NetStructIPoint3.CreateBuilder(result.color_).MergeFrom(value).BuildPartial();
        } else {
          result.color_ = value;
        }
        result.hasColor = true;
        return this;
      }
      public Builder ClearColor() {
        PrepareBuilder();
        result.hasColor = false;
        result.color_ = null;
        return this;
      }
      
      public bool HasLifetimeInMilliseconds {
        get { return result.hasLifetimeInMilliseconds; }
      }
      public ulong LifetimeInMilliseconds {
        get { return result.LifetimeInMilliseconds; }
        set { SetLifetimeInMilliseconds(value); }
      }
      public Builder SetLifetimeInMilliseconds(ulong value) {
        PrepareBuilder();
        result.hasLifetimeInMilliseconds = true;
        result.lifetimeInMilliseconds_ = value;
        return this;
      }
      public Builder ClearLifetimeInMilliseconds() {
        PrepareBuilder();
        result.hasLifetimeInMilliseconds = false;
        result.lifetimeInMilliseconds_ = 0UL;
        return this;
      }
      
      public bool HasAdd {
        get { return result.hasAdd; }
      }
      public bool Add {
        get { return result.Add; }
        set { SetAdd(value); }
      }
      public Builder SetAdd(bool value) {
        PrepareBuilder();
        result.hasAdd = true;
        result.add_ = value;
        return this;
      }
      public Builder ClearAdd() {
        PrepareBuilder();
        result.hasAdd = false;
        result.add_ = false;
        return this;
      }
    }
    static NetMessageRegionPrimitiveSphere() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRegionPrimitiveLine : pb::GeneratedMessage<NetMessageRegionPrimitiveLine, NetMessageRegionPrimitiveLine.Builder> {
    private NetMessageRegionPrimitiveLine() { }
    private static readonly NetMessageRegionPrimitiveLine defaultInstance = new NetMessageRegionPrimitiveLine().MakeReadOnly();
    private static readonly string[] _netMessageRegionPrimitiveLineFieldNames = new string[] { "add", "color", "end", "lifetimeInMilliseconds", "start" };
    private static readonly uint[] _netMessageRegionPrimitiveLineFieldTags = new uint[] { 40, 26, 18, 32, 10 };
    public static NetMessageRegionPrimitiveLine DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRegionPrimitiveLine DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRegionPrimitiveLine ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionPrimitiveLine__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRegionPrimitiveLine, NetMessageRegionPrimitiveLine.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionPrimitiveLine__FieldAccessorTable; }
    }
    
    public const int StartFieldNumber = 1;
    private bool hasStart;
    private global::Gazillion.NetStructPoint3 start_;
    public bool HasStart {
      get { return hasStart; }
    }
    public global::Gazillion.NetStructPoint3 Start {
      get { return start_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int EndFieldNumber = 2;
    private bool hasEnd;
    private global::Gazillion.NetStructPoint3 end_;
    public bool HasEnd {
      get { return hasEnd; }
    }
    public global::Gazillion.NetStructPoint3 End {
      get { return end_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int ColorFieldNumber = 3;
    private bool hasColor;
    private global::Gazillion.NetStructIPoint3 color_;
    public bool HasColor {
      get { return hasColor; }
    }
    public global::Gazillion.NetStructIPoint3 Color {
      get { return color_ ?? global::Gazillion.NetStructIPoint3.DefaultInstance; }
    }
    
    public const int LifetimeInMillisecondsFieldNumber = 4;
    private bool hasLifetimeInMilliseconds;
    private ulong lifetimeInMilliseconds_;
    public bool HasLifetimeInMilliseconds {
      get { return hasLifetimeInMilliseconds; }
    }
    public ulong LifetimeInMilliseconds {
      get { return lifetimeInMilliseconds_; }
    }
    
    public const int AddFieldNumber = 5;
    private bool hasAdd;
    private bool add_;
    public bool HasAdd {
      get { return hasAdd; }
    }
    public bool Add {
      get { return add_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStart) return false;
        if (!hasEnd) return false;
        if (!hasColor) return false;
        if (!hasLifetimeInMilliseconds) return false;
        if (!hasAdd) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRegionPrimitiveLineFieldNames;
      if (hasStart) {
        output.WriteMessage(1, field_names[4], Start);
      }
      if (hasEnd) {
        output.WriteMessage(2, field_names[2], End);
      }
      if (hasColor) {
        output.WriteMessage(3, field_names[1], Color);
      }
      if (hasLifetimeInMilliseconds) {
        output.WriteUInt64(4, field_names[3], LifetimeInMilliseconds);
      }
      if (hasAdd) {
        output.WriteBool(5, field_names[0], Add);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStart) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Start);
      }
      if (hasEnd) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, End);
      }
      if (hasColor) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Color);
      }
      if (hasLifetimeInMilliseconds) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, LifetimeInMilliseconds);
      }
      if (hasAdd) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Add);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRegionPrimitiveLine ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveLine ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveLine ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveLine ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveLine ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveLine ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveLine ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRegionPrimitiveLine ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRegionPrimitiveLine ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveLine ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRegionPrimitiveLine MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRegionPrimitiveLine prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRegionPrimitiveLine, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRegionPrimitiveLine cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRegionPrimitiveLine result;
      
      private NetMessageRegionPrimitiveLine PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRegionPrimitiveLine original = result;
          result = new NetMessageRegionPrimitiveLine();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRegionPrimitiveLine MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRegionPrimitiveLine.Descriptor; }
      }
      
      public override NetMessageRegionPrimitiveLine DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRegionPrimitiveLine.DefaultInstance; }
      }
      
      public override NetMessageRegionPrimitiveLine BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRegionPrimitiveLine) {
          return MergeFrom((NetMessageRegionPrimitiveLine) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRegionPrimitiveLine other) {
        if (other == global::Gazillion.NetMessageRegionPrimitiveLine.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStart) {
          MergeStart(other.Start);
        }
        if (other.HasEnd) {
          MergeEnd(other.End);
        }
        if (other.HasColor) {
          MergeColor(other.Color);
        }
        if (other.HasLifetimeInMilliseconds) {
          LifetimeInMilliseconds = other.LifetimeInMilliseconds;
        }
        if (other.HasAdd) {
          Add = other.Add;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRegionPrimitiveLineFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRegionPrimitiveLineFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasStart) {
                subBuilder.MergeFrom(Start);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Start = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasEnd) {
                subBuilder.MergeFrom(End);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              End = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Gazillion.NetStructIPoint3.Builder subBuilder = global::Gazillion.NetStructIPoint3.CreateBuilder();
              if (result.hasColor) {
                subBuilder.MergeFrom(Color);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Color = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasLifetimeInMilliseconds = input.ReadUInt64(ref result.lifetimeInMilliseconds_);
              break;
            }
            case 40: {
              result.hasAdd = input.ReadBool(ref result.add_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStart {
       get { return result.hasStart; }
      }
      public global::Gazillion.NetStructPoint3 Start {
        get { return result.Start; }
        set { SetStart(value); }
      }
      public Builder SetStart(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStart = true;
        result.start_ = value;
        return this;
      }
      public Builder SetStart(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStart = true;
        result.start_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStart(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStart &&
            result.start_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.start_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.start_).MergeFrom(value).BuildPartial();
        } else {
          result.start_ = value;
        }
        result.hasStart = true;
        return this;
      }
      public Builder ClearStart() {
        PrepareBuilder();
        result.hasStart = false;
        result.start_ = null;
        return this;
      }
      
      public bool HasEnd {
       get { return result.hasEnd; }
      }
      public global::Gazillion.NetStructPoint3 End {
        get { return result.End; }
        set { SetEnd(value); }
      }
      public Builder SetEnd(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEnd = true;
        result.end_ = value;
        return this;
      }
      public Builder SetEnd(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEnd = true;
        result.end_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEnd(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEnd &&
            result.end_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.end_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.end_).MergeFrom(value).BuildPartial();
        } else {
          result.end_ = value;
        }
        result.hasEnd = true;
        return this;
      }
      public Builder ClearEnd() {
        PrepareBuilder();
        result.hasEnd = false;
        result.end_ = null;
        return this;
      }
      
      public bool HasColor {
       get { return result.hasColor; }
      }
      public global::Gazillion.NetStructIPoint3 Color {
        get { return result.Color; }
        set { SetColor(value); }
      }
      public Builder SetColor(global::Gazillion.NetStructIPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = value;
        return this;
      }
      public Builder SetColor(global::Gazillion.NetStructIPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = builderForValue.Build();
        return this;
      }
      public Builder MergeColor(global::Gazillion.NetStructIPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasColor &&
            result.color_ != global::Gazillion.NetStructIPoint3.DefaultInstance) {
            result.color_ = global::Gazillion.NetStructIPoint3.CreateBuilder(result.color_).MergeFrom(value).BuildPartial();
        } else {
          result.color_ = value;
        }
        result.hasColor = true;
        return this;
      }
      public Builder ClearColor() {
        PrepareBuilder();
        result.hasColor = false;
        result.color_ = null;
        return this;
      }
      
      public bool HasLifetimeInMilliseconds {
        get { return result.hasLifetimeInMilliseconds; }
      }
      public ulong LifetimeInMilliseconds {
        get { return result.LifetimeInMilliseconds; }
        set { SetLifetimeInMilliseconds(value); }
      }
      public Builder SetLifetimeInMilliseconds(ulong value) {
        PrepareBuilder();
        result.hasLifetimeInMilliseconds = true;
        result.lifetimeInMilliseconds_ = value;
        return this;
      }
      public Builder ClearLifetimeInMilliseconds() {
        PrepareBuilder();
        result.hasLifetimeInMilliseconds = false;
        result.lifetimeInMilliseconds_ = 0UL;
        return this;
      }
      
      public bool HasAdd {
        get { return result.hasAdd; }
      }
      public bool Add {
        get { return result.Add; }
        set { SetAdd(value); }
      }
      public Builder SetAdd(bool value) {
        PrepareBuilder();
        result.hasAdd = true;
        result.add_ = value;
        return this;
      }
      public Builder ClearAdd() {
        PrepareBuilder();
        result.hasAdd = false;
        result.add_ = false;
        return this;
      }
    }
    static NetMessageRegionPrimitiveLine() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMarkFirstGameFrame : pb::GeneratedMessage<NetMessageMarkFirstGameFrame, NetMessageMarkFirstGameFrame.Builder> {
    private NetMessageMarkFirstGameFrame() { }
    private static readonly NetMessageMarkFirstGameFrame defaultInstance = new NetMessageMarkFirstGameFrame().MakeReadOnly();
    private static readonly string[] _netMessageMarkFirstGameFrameFieldNames = new string[] { "currentservergameid", "currentservergametime" };
    private static readonly uint[] _netMessageMarkFirstGameFrameFieldTags = new uint[] { 16, 8 };
    public static NetMessageMarkFirstGameFrame DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMarkFirstGameFrame DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMarkFirstGameFrame ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMarkFirstGameFrame__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMarkFirstGameFrame, NetMessageMarkFirstGameFrame.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMarkFirstGameFrame__FieldAccessorTable; }
    }
    
    public const int CurrentservergametimeFieldNumber = 1;
    private bool hasCurrentservergametime;
    private ulong currentservergametime_;
    public bool HasCurrentservergametime {
      get { return hasCurrentservergametime; }
    }
    public ulong Currentservergametime {
      get { return currentservergametime_; }
    }
    
    public const int CurrentservergameidFieldNumber = 2;
    private bool hasCurrentservergameid;
    private ulong currentservergameid_;
    public bool HasCurrentservergameid {
      get { return hasCurrentservergameid; }
    }
    public ulong Currentservergameid {
      get { return currentservergameid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCurrentservergametime) return false;
        if (!hasCurrentservergameid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMarkFirstGameFrameFieldNames;
      if (hasCurrentservergametime) {
        output.WriteUInt64(1, field_names[1], Currentservergametime);
      }
      if (hasCurrentservergameid) {
        output.WriteUInt64(2, field_names[0], Currentservergameid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCurrentservergametime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Currentservergametime);
      }
      if (hasCurrentservergameid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, Currentservergameid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMarkFirstGameFrame ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMarkFirstGameFrame ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMarkFirstGameFrame ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMarkFirstGameFrame ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMarkFirstGameFrame ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMarkFirstGameFrame ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMarkFirstGameFrame ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMarkFirstGameFrame ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMarkFirstGameFrame ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMarkFirstGameFrame ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMarkFirstGameFrame MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMarkFirstGameFrame prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMarkFirstGameFrame, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMarkFirstGameFrame cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMarkFirstGameFrame result;
      
      private NetMessageMarkFirstGameFrame PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMarkFirstGameFrame original = result;
          result = new NetMessageMarkFirstGameFrame();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMarkFirstGameFrame MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMarkFirstGameFrame.Descriptor; }
      }
      
      public override NetMessageMarkFirstGameFrame DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMarkFirstGameFrame.DefaultInstance; }
      }
      
      public override NetMessageMarkFirstGameFrame BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMarkFirstGameFrame) {
          return MergeFrom((NetMessageMarkFirstGameFrame) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMarkFirstGameFrame other) {
        if (other == global::Gazillion.NetMessageMarkFirstGameFrame.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCurrentservergametime) {
          Currentservergametime = other.Currentservergametime;
        }
        if (other.HasCurrentservergameid) {
          Currentservergameid = other.Currentservergameid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMarkFirstGameFrameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMarkFirstGameFrameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCurrentservergametime = input.ReadUInt64(ref result.currentservergametime_);
              break;
            }
            case 16: {
              result.hasCurrentservergameid = input.ReadUInt64(ref result.currentservergameid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCurrentservergametime {
        get { return result.hasCurrentservergametime; }
      }
      public ulong Currentservergametime {
        get { return result.Currentservergametime; }
        set { SetCurrentservergametime(value); }
      }
      public Builder SetCurrentservergametime(ulong value) {
        PrepareBuilder();
        result.hasCurrentservergametime = true;
        result.currentservergametime_ = value;
        return this;
      }
      public Builder ClearCurrentservergametime() {
        PrepareBuilder();
        result.hasCurrentservergametime = false;
        result.currentservergametime_ = 0UL;
        return this;
      }
      
      public bool HasCurrentservergameid {
        get { return result.hasCurrentservergameid; }
      }
      public ulong Currentservergameid {
        get { return result.Currentservergameid; }
        set { SetCurrentservergameid(value); }
      }
      public Builder SetCurrentservergameid(ulong value) {
        PrepareBuilder();
        result.hasCurrentservergameid = true;
        result.currentservergameid_ = value;
        return this;
      }
      public Builder ClearCurrentservergameid() {
        PrepareBuilder();
        result.hasCurrentservergameid = false;
        result.currentservergameid_ = 0UL;
        return this;
      }
    }
    static NetMessageMarkFirstGameFrame() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBeginExitGame : pb::GeneratedMessage<NetMessageBeginExitGame, NetMessageBeginExitGame.Builder> {
    private NetMessageBeginExitGame() { }
    private static readonly NetMessageBeginExitGame defaultInstance = new NetMessageBeginExitGame().MakeReadOnly();
    private static readonly string[] _netMessageBeginExitGameFieldNames = new string[] {  };
    private static readonly uint[] _netMessageBeginExitGameFieldTags = new uint[] {  };
    public static NetMessageBeginExitGame DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBeginExitGame DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBeginExitGame ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageBeginExitGame__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBeginExitGame, NetMessageBeginExitGame.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageBeginExitGame__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBeginExitGameFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBeginExitGame ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBeginExitGame ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBeginExitGame ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBeginExitGame ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBeginExitGame ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBeginExitGame ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBeginExitGame ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBeginExitGame ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBeginExitGame ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBeginExitGame ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBeginExitGame MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBeginExitGame prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBeginExitGame, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBeginExitGame cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBeginExitGame result;
      
      private NetMessageBeginExitGame PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBeginExitGame original = result;
          result = new NetMessageBeginExitGame();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBeginExitGame MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBeginExitGame.Descriptor; }
      }
      
      public override NetMessageBeginExitGame DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBeginExitGame.DefaultInstance; }
      }
      
      public override NetMessageBeginExitGame BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBeginExitGame) {
          return MergeFrom((NetMessageBeginExitGame) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBeginExitGame other) {
        if (other == global::Gazillion.NetMessageBeginExitGame.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBeginExitGameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBeginExitGameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageBeginExitGame() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSystemMessage : pb::GeneratedMessage<NetMessageSystemMessage, NetMessageSystemMessage.Builder> {
    private NetMessageSystemMessage() { }
    private static readonly NetMessageSystemMessage defaultInstance = new NetMessageSystemMessage().MakeReadOnly();
    private static readonly string[] _netMessageSystemMessageFieldNames = new string[] { "messageId" };
    private static readonly uint[] _netMessageSystemMessageFieldTags = new uint[] { 8 };
    public static NetMessageSystemMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSystemMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSystemMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSystemMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSystemMessage, NetMessageSystemMessage.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSystemMessage__FieldAccessorTable; }
    }
    
    public const int MessageIdFieldNumber = 1;
    private bool hasMessageId;
    private int messageId_;
    public bool HasMessageId {
      get { return hasMessageId; }
    }
    public int MessageId {
      get { return messageId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSystemMessageFieldNames;
      if (hasMessageId) {
        output.WriteInt32(1, field_names[0], MessageId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMessageId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, MessageId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSystemMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSystemMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSystemMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSystemMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSystemMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSystemMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSystemMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSystemMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSystemMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSystemMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSystemMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSystemMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSystemMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSystemMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSystemMessage result;
      
      private NetMessageSystemMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSystemMessage original = result;
          result = new NetMessageSystemMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSystemMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSystemMessage.Descriptor; }
      }
      
      public override NetMessageSystemMessage DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSystemMessage.DefaultInstance; }
      }
      
      public override NetMessageSystemMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSystemMessage) {
          return MergeFrom((NetMessageSystemMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSystemMessage other) {
        if (other == global::Gazillion.NetMessageSystemMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageId) {
          MessageId = other.MessageId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSystemMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSystemMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMessageId = input.ReadInt32(ref result.messageId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageId {
        get { return result.hasMessageId; }
      }
      public int MessageId {
        get { return result.MessageId; }
        set { SetMessageId(value); }
      }
      public Builder SetMessageId(int value) {
        PrepareBuilder();
        result.hasMessageId = true;
        result.messageId_ = value;
        return this;
      }
      public Builder ClearMessageId() {
        PrepareBuilder();
        result.hasMessageId = false;
        result.messageId_ = 0;
        return this;
      }
    }
    static NetMessageSystemMessage() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAIDebugUIUpdate : pb::GeneratedMessage<NetMessageAIDebugUIUpdate, NetMessageAIDebugUIUpdate.Builder> {
    private NetMessageAIDebugUIUpdate() { }
    private static readonly NetMessageAIDebugUIUpdate defaultInstance = new NetMessageAIDebugUIUpdate().MakeReadOnly();
    private static readonly string[] _netMessageAIDebugUIUpdateFieldNames = new string[] { "currentActionName", "idTargetNPC", "previousActionName", "propertyString", "sensoryInputs" };
    private static readonly uint[] _netMessageAIDebugUIUpdateFieldTags = new uint[] { 18, 8, 26, 42, 34 };
    public static NetMessageAIDebugUIUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAIDebugUIUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAIDebugUIUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAIDebugUIUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAIDebugUIUpdate, NetMessageAIDebugUIUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAIDebugUIUpdate__FieldAccessorTable; }
    }
    
    public const int IdTargetNPCFieldNumber = 1;
    private bool hasIdTargetNPC;
    private ulong idTargetNPC_;
    public bool HasIdTargetNPC {
      get { return hasIdTargetNPC; }
    }
    public ulong IdTargetNPC {
      get { return idTargetNPC_; }
    }
    
    public const int CurrentActionNameFieldNumber = 2;
    private bool hasCurrentActionName;
    private string currentActionName_ = "";
    public bool HasCurrentActionName {
      get { return hasCurrentActionName; }
    }
    public string CurrentActionName {
      get { return currentActionName_; }
    }
    
    public const int PreviousActionNameFieldNumber = 3;
    private bool hasPreviousActionName;
    private string previousActionName_ = "";
    public bool HasPreviousActionName {
      get { return hasPreviousActionName; }
    }
    public string PreviousActionName {
      get { return previousActionName_; }
    }
    
    public const int SensoryInputsFieldNumber = 4;
    private pbc::PopsicleList<string> sensoryInputs_ = new pbc::PopsicleList<string>();
    public scg::IList<string> SensoryInputsList {
      get { return pbc::Lists.AsReadOnly(sensoryInputs_); }
    }
    public int SensoryInputsCount {
      get { return sensoryInputs_.Count; }
    }
    public string GetSensoryInputs(int index) {
      return sensoryInputs_[index];
    }
    
    public const int PropertyStringFieldNumber = 5;
    private bool hasPropertyString;
    private string propertyString_ = "";
    public bool HasPropertyString {
      get { return hasPropertyString; }
    }
    public string PropertyString {
      get { return propertyString_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetNPC) return false;
        if (!hasCurrentActionName) return false;
        if (!hasPreviousActionName) return false;
        if (!hasPropertyString) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAIDebugUIUpdateFieldNames;
      if (hasIdTargetNPC) {
        output.WriteUInt64(1, field_names[1], IdTargetNPC);
      }
      if (hasCurrentActionName) {
        output.WriteString(2, field_names[0], CurrentActionName);
      }
      if (hasPreviousActionName) {
        output.WriteString(3, field_names[2], PreviousActionName);
      }
      if (sensoryInputs_.Count > 0) {
        output.WriteStringArray(4, field_names[4], sensoryInputs_);
      }
      if (hasPropertyString) {
        output.WriteString(5, field_names[3], PropertyString);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetNPC) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetNPC);
      }
      if (hasCurrentActionName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, CurrentActionName);
      }
      if (hasPreviousActionName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, PreviousActionName);
      }
      {
        int dataSize = 0;
        foreach (string element in SensoryInputsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * sensoryInputs_.Count;
      }
      if (hasPropertyString) {
        size += pb::CodedOutputStream.ComputeStringSize(5, PropertyString);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAIDebugUIUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAIDebugUIUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIDebugUIUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAIDebugUIUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIDebugUIUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAIDebugUIUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAIDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAIDebugUIUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAIDebugUIUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAIDebugUIUpdate MakeReadOnly() {
      sensoryInputs_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAIDebugUIUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAIDebugUIUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAIDebugUIUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAIDebugUIUpdate result;
      
      private NetMessageAIDebugUIUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAIDebugUIUpdate original = result;
          result = new NetMessageAIDebugUIUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAIDebugUIUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAIDebugUIUpdate.Descriptor; }
      }
      
      public override NetMessageAIDebugUIUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAIDebugUIUpdate.DefaultInstance; }
      }
      
      public override NetMessageAIDebugUIUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAIDebugUIUpdate) {
          return MergeFrom((NetMessageAIDebugUIUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAIDebugUIUpdate other) {
        if (other == global::Gazillion.NetMessageAIDebugUIUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetNPC) {
          IdTargetNPC = other.IdTargetNPC;
        }
        if (other.HasCurrentActionName) {
          CurrentActionName = other.CurrentActionName;
        }
        if (other.HasPreviousActionName) {
          PreviousActionName = other.PreviousActionName;
        }
        if (other.sensoryInputs_.Count != 0) {
          result.sensoryInputs_.Add(other.sensoryInputs_);
        }
        if (other.HasPropertyString) {
          PropertyString = other.PropertyString;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAIDebugUIUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAIDebugUIUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetNPC = input.ReadUInt64(ref result.idTargetNPC_);
              break;
            }
            case 18: {
              result.hasCurrentActionName = input.ReadString(ref result.currentActionName_);
              break;
            }
            case 26: {
              result.hasPreviousActionName = input.ReadString(ref result.previousActionName_);
              break;
            }
            case 34: {
              input.ReadStringArray(tag, field_name, result.sensoryInputs_);
              break;
            }
            case 42: {
              result.hasPropertyString = input.ReadString(ref result.propertyString_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetNPC {
        get { return result.hasIdTargetNPC; }
      }
      public ulong IdTargetNPC {
        get { return result.IdTargetNPC; }
        set { SetIdTargetNPC(value); }
      }
      public Builder SetIdTargetNPC(ulong value) {
        PrepareBuilder();
        result.hasIdTargetNPC = true;
        result.idTargetNPC_ = value;
        return this;
      }
      public Builder ClearIdTargetNPC() {
        PrepareBuilder();
        result.hasIdTargetNPC = false;
        result.idTargetNPC_ = 0UL;
        return this;
      }
      
      public bool HasCurrentActionName {
        get { return result.hasCurrentActionName; }
      }
      public string CurrentActionName {
        get { return result.CurrentActionName; }
        set { SetCurrentActionName(value); }
      }
      public Builder SetCurrentActionName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCurrentActionName = true;
        result.currentActionName_ = value;
        return this;
      }
      public Builder ClearCurrentActionName() {
        PrepareBuilder();
        result.hasCurrentActionName = false;
        result.currentActionName_ = "";
        return this;
      }
      
      public bool HasPreviousActionName {
        get { return result.hasPreviousActionName; }
      }
      public string PreviousActionName {
        get { return result.PreviousActionName; }
        set { SetPreviousActionName(value); }
      }
      public Builder SetPreviousActionName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPreviousActionName = true;
        result.previousActionName_ = value;
        return this;
      }
      public Builder ClearPreviousActionName() {
        PrepareBuilder();
        result.hasPreviousActionName = false;
        result.previousActionName_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> SensoryInputsList {
        get { return PrepareBuilder().sensoryInputs_; }
      }
      public int SensoryInputsCount {
        get { return result.SensoryInputsCount; }
      }
      public string GetSensoryInputs(int index) {
        return result.GetSensoryInputs(index);
      }
      public Builder SetSensoryInputs(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sensoryInputs_[index] = value;
        return this;
      }
      public Builder AddSensoryInputs(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sensoryInputs_.Add(value);
        return this;
      }
      public Builder AddRangeSensoryInputs(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.sensoryInputs_.Add(values);
        return this;
      }
      public Builder ClearSensoryInputs() {
        PrepareBuilder();
        result.sensoryInputs_.Clear();
        return this;
      }
      
      public bool HasPropertyString {
        get { return result.hasPropertyString; }
      }
      public string PropertyString {
        get { return result.PropertyString; }
        set { SetPropertyString(value); }
      }
      public Builder SetPropertyString(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPropertyString = true;
        result.propertyString_ = value;
        return this;
      }
      public Builder ClearPropertyString() {
        PrepareBuilder();
        result.hasPropertyString = false;
        result.propertyString_ = "";
        return this;
      }
    }
    static NetMessageAIDebugUIUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePropertiesDebugUIUpdate : pb::GeneratedMessage<NetMessagePropertiesDebugUIUpdate, NetMessagePropertiesDebugUIUpdate.Builder> {
    private NetMessagePropertiesDebugUIUpdate() { }
    private static readonly NetMessagePropertiesDebugUIUpdate defaultInstance = new NetMessagePropertiesDebugUIUpdate().MakeReadOnly();
    private static readonly string[] _netMessagePropertiesDebugUIUpdateFieldNames = new string[] { "idTargetEntity", "propertyString" };
    private static readonly uint[] _netMessagePropertiesDebugUIUpdateFieldTags = new uint[] { 8, 18 };
    public static NetMessagePropertiesDebugUIUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePropertiesDebugUIUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePropertiesDebugUIUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePropertiesDebugUIUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePropertiesDebugUIUpdate, NetMessagePropertiesDebugUIUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePropertiesDebugUIUpdate__FieldAccessorTable; }
    }
    
    public const int IdTargetEntityFieldNumber = 1;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public const int PropertyStringFieldNumber = 2;
    private bool hasPropertyString;
    private string propertyString_ = "";
    public bool HasPropertyString {
      get { return hasPropertyString; }
    }
    public string PropertyString {
      get { return propertyString_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetEntity) return false;
        if (!hasPropertyString) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePropertiesDebugUIUpdateFieldNames;
      if (hasIdTargetEntity) {
        output.WriteUInt64(1, field_names[0], IdTargetEntity);
      }
      if (hasPropertyString) {
        output.WriteString(2, field_names[1], PropertyString);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetEntity);
      }
      if (hasPropertyString) {
        size += pb::CodedOutputStream.ComputeStringSize(2, PropertyString);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePropertiesDebugUIUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePropertiesDebugUIUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePropertiesDebugUIUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePropertiesDebugUIUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePropertiesDebugUIUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePropertiesDebugUIUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePropertiesDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePropertiesDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePropertiesDebugUIUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePropertiesDebugUIUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePropertiesDebugUIUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePropertiesDebugUIUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePropertiesDebugUIUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePropertiesDebugUIUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePropertiesDebugUIUpdate result;
      
      private NetMessagePropertiesDebugUIUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePropertiesDebugUIUpdate original = result;
          result = new NetMessagePropertiesDebugUIUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePropertiesDebugUIUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePropertiesDebugUIUpdate.Descriptor; }
      }
      
      public override NetMessagePropertiesDebugUIUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePropertiesDebugUIUpdate.DefaultInstance; }
      }
      
      public override NetMessagePropertiesDebugUIUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePropertiesDebugUIUpdate) {
          return MergeFrom((NetMessagePropertiesDebugUIUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePropertiesDebugUIUpdate other) {
        if (other == global::Gazillion.NetMessagePropertiesDebugUIUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        if (other.HasPropertyString) {
          PropertyString = other.PropertyString;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePropertiesDebugUIUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePropertiesDebugUIUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
            case 18: {
              result.hasPropertyString = input.ReadString(ref result.propertyString_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
      
      public bool HasPropertyString {
        get { return result.hasPropertyString; }
      }
      public string PropertyString {
        get { return result.PropertyString; }
        set { SetPropertyString(value); }
      }
      public Builder SetPropertyString(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPropertyString = true;
        result.propertyString_ = value;
        return this;
      }
      public Builder ClearPropertyString() {
        PrepareBuilder();
        result.hasPropertyString = false;
        result.propertyString_ = "";
        return this;
      }
    }
    static NetMessagePropertiesDebugUIUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageConditionsDebugUIUpdate : pb::GeneratedMessage<NetMessageConditionsDebugUIUpdate, NetMessageConditionsDebugUIUpdate.Builder> {
    private NetMessageConditionsDebugUIUpdate() { }
    private static readonly NetMessageConditionsDebugUIUpdate defaultInstance = new NetMessageConditionsDebugUIUpdate().MakeReadOnly();
    private static readonly string[] _netMessageConditionsDebugUIUpdateFieldNames = new string[] { "conditionsString", "idTargetEntity" };
    private static readonly uint[] _netMessageConditionsDebugUIUpdateFieldTags = new uint[] { 18, 8 };
    public static NetMessageConditionsDebugUIUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageConditionsDebugUIUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageConditionsDebugUIUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageConditionsDebugUIUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageConditionsDebugUIUpdate, NetMessageConditionsDebugUIUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageConditionsDebugUIUpdate__FieldAccessorTable; }
    }
    
    public const int IdTargetEntityFieldNumber = 1;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public const int ConditionsStringFieldNumber = 2;
    private bool hasConditionsString;
    private string conditionsString_ = "";
    public bool HasConditionsString {
      get { return hasConditionsString; }
    }
    public string ConditionsString {
      get { return conditionsString_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetEntity) return false;
        if (!hasConditionsString) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageConditionsDebugUIUpdateFieldNames;
      if (hasIdTargetEntity) {
        output.WriteUInt64(1, field_names[1], IdTargetEntity);
      }
      if (hasConditionsString) {
        output.WriteString(2, field_names[0], ConditionsString);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetEntity);
      }
      if (hasConditionsString) {
        size += pb::CodedOutputStream.ComputeStringSize(2, ConditionsString);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageConditionsDebugUIUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageConditionsDebugUIUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConditionsDebugUIUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageConditionsDebugUIUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConditionsDebugUIUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageConditionsDebugUIUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConditionsDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageConditionsDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageConditionsDebugUIUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageConditionsDebugUIUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageConditionsDebugUIUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageConditionsDebugUIUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageConditionsDebugUIUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageConditionsDebugUIUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageConditionsDebugUIUpdate result;
      
      private NetMessageConditionsDebugUIUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageConditionsDebugUIUpdate original = result;
          result = new NetMessageConditionsDebugUIUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageConditionsDebugUIUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageConditionsDebugUIUpdate.Descriptor; }
      }
      
      public override NetMessageConditionsDebugUIUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageConditionsDebugUIUpdate.DefaultInstance; }
      }
      
      public override NetMessageConditionsDebugUIUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageConditionsDebugUIUpdate) {
          return MergeFrom((NetMessageConditionsDebugUIUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageConditionsDebugUIUpdate other) {
        if (other == global::Gazillion.NetMessageConditionsDebugUIUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        if (other.HasConditionsString) {
          ConditionsString = other.ConditionsString;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageConditionsDebugUIUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageConditionsDebugUIUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
            case 18: {
              result.hasConditionsString = input.ReadString(ref result.conditionsString_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
      
      public bool HasConditionsString {
        get { return result.hasConditionsString; }
      }
      public string ConditionsString {
        get { return result.ConditionsString; }
        set { SetConditionsString(value); }
      }
      public Builder SetConditionsString(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConditionsString = true;
        result.conditionsString_ = value;
        return this;
      }
      public Builder ClearConditionsString() {
        PrepareBuilder();
        result.hasConditionsString = false;
        result.conditionsString_ = "";
        return this;
      }
    }
    static NetMessageConditionsDebugUIUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePowersDebugUIUpdate : pb::GeneratedMessage<NetMessagePowersDebugUIUpdate, NetMessagePowersDebugUIUpdate.Builder> {
    private NetMessagePowersDebugUIUpdate() { }
    private static readonly NetMessagePowersDebugUIUpdate defaultInstance = new NetMessagePowersDebugUIUpdate().MakeReadOnly();
    private static readonly string[] _netMessagePowersDebugUIUpdateFieldNames = new string[] { "activePowerId", "activePowerLastActivationTime", "continuousPowerId", "continuousTargetId", "continuousTargetPosition", "debugEntityId", "pendingActionState", "pendingPowerId", "pendingTargetId", "pendingTargetPosition" };
    private static readonly uint[] _netMessagePowersDebugUIUpdateFieldTags = new uint[] { 16, 80, 56, 64, 74, 8, 24, 32, 40, 50 };
    public static NetMessagePowersDebugUIUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePowersDebugUIUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePowersDebugUIUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowersDebugUIUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePowersDebugUIUpdate, NetMessagePowersDebugUIUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowersDebugUIUpdate__FieldAccessorTable; }
    }
    
    public const int DebugEntityIdFieldNumber = 1;
    private bool hasDebugEntityId;
    private ulong debugEntityId_;
    public bool HasDebugEntityId {
      get { return hasDebugEntityId; }
    }
    public ulong DebugEntityId {
      get { return debugEntityId_; }
    }
    
    public const int ActivePowerIdFieldNumber = 2;
    private bool hasActivePowerId;
    private ulong activePowerId_;
    public bool HasActivePowerId {
      get { return hasActivePowerId; }
    }
    public ulong ActivePowerId {
      get { return activePowerId_; }
    }
    
    public const int PendingActionStateFieldNumber = 3;
    private bool hasPendingActionState;
    private int pendingActionState_;
    public bool HasPendingActionState {
      get { return hasPendingActionState; }
    }
    public int PendingActionState {
      get { return pendingActionState_; }
    }
    
    public const int PendingPowerIdFieldNumber = 4;
    private bool hasPendingPowerId;
    private ulong pendingPowerId_;
    public bool HasPendingPowerId {
      get { return hasPendingPowerId; }
    }
    public ulong PendingPowerId {
      get { return pendingPowerId_; }
    }
    
    public const int PendingTargetIdFieldNumber = 5;
    private bool hasPendingTargetId;
    private ulong pendingTargetId_;
    public bool HasPendingTargetId {
      get { return hasPendingTargetId; }
    }
    public ulong PendingTargetId {
      get { return pendingTargetId_; }
    }
    
    public const int PendingTargetPositionFieldNumber = 6;
    private bool hasPendingTargetPosition;
    private global::Gazillion.NetStructPoint3 pendingTargetPosition_;
    public bool HasPendingTargetPosition {
      get { return hasPendingTargetPosition; }
    }
    public global::Gazillion.NetStructPoint3 PendingTargetPosition {
      get { return pendingTargetPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int ContinuousPowerIdFieldNumber = 7;
    private bool hasContinuousPowerId;
    private ulong continuousPowerId_;
    public bool HasContinuousPowerId {
      get { return hasContinuousPowerId; }
    }
    public ulong ContinuousPowerId {
      get { return continuousPowerId_; }
    }
    
    public const int ContinuousTargetIdFieldNumber = 8;
    private bool hasContinuousTargetId;
    private ulong continuousTargetId_;
    public bool HasContinuousTargetId {
      get { return hasContinuousTargetId; }
    }
    public ulong ContinuousTargetId {
      get { return continuousTargetId_; }
    }
    
    public const int ContinuousTargetPositionFieldNumber = 9;
    private bool hasContinuousTargetPosition;
    private global::Gazillion.NetStructPoint3 continuousTargetPosition_;
    public bool HasContinuousTargetPosition {
      get { return hasContinuousTargetPosition; }
    }
    public global::Gazillion.NetStructPoint3 ContinuousTargetPosition {
      get { return continuousTargetPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int ActivePowerLastActivationTimeFieldNumber = 10;
    private bool hasActivePowerLastActivationTime;
    private ulong activePowerLastActivationTime_;
    public bool HasActivePowerLastActivationTime {
      get { return hasActivePowerLastActivationTime; }
    }
    public ulong ActivePowerLastActivationTime {
      get { return activePowerLastActivationTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDebugEntityId) return false;
        if (!hasActivePowerId) return false;
        if (!hasPendingActionState) return false;
        if (!hasPendingPowerId) return false;
        if (!hasPendingTargetId) return false;
        if (!hasPendingTargetPosition) return false;
        if (!hasContinuousPowerId) return false;
        if (!hasContinuousTargetId) return false;
        if (!hasContinuousTargetPosition) return false;
        if (!hasActivePowerLastActivationTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePowersDebugUIUpdateFieldNames;
      if (hasDebugEntityId) {
        output.WriteUInt64(1, field_names[5], DebugEntityId);
      }
      if (hasActivePowerId) {
        output.WriteUInt64(2, field_names[0], ActivePowerId);
      }
      if (hasPendingActionState) {
        output.WriteInt32(3, field_names[6], PendingActionState);
      }
      if (hasPendingPowerId) {
        output.WriteUInt64(4, field_names[7], PendingPowerId);
      }
      if (hasPendingTargetId) {
        output.WriteUInt64(5, field_names[8], PendingTargetId);
      }
      if (hasPendingTargetPosition) {
        output.WriteMessage(6, field_names[9], PendingTargetPosition);
      }
      if (hasContinuousPowerId) {
        output.WriteUInt64(7, field_names[2], ContinuousPowerId);
      }
      if (hasContinuousTargetId) {
        output.WriteUInt64(8, field_names[3], ContinuousTargetId);
      }
      if (hasContinuousTargetPosition) {
        output.WriteMessage(9, field_names[4], ContinuousTargetPosition);
      }
      if (hasActivePowerLastActivationTime) {
        output.WriteUInt64(10, field_names[1], ActivePowerLastActivationTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDebugEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, DebugEntityId);
      }
      if (hasActivePowerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ActivePowerId);
      }
      if (hasPendingActionState) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, PendingActionState);
      }
      if (hasPendingPowerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, PendingPowerId);
      }
      if (hasPendingTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, PendingTargetId);
      }
      if (hasPendingTargetPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, PendingTargetPosition);
      }
      if (hasContinuousPowerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(7, ContinuousPowerId);
      }
      if (hasContinuousTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(8, ContinuousTargetId);
      }
      if (hasContinuousTargetPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, ContinuousTargetPosition);
      }
      if (hasActivePowerLastActivationTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(10, ActivePowerLastActivationTime);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePowersDebugUIUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowersDebugUIUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowersDebugUIUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowersDebugUIUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowersDebugUIUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowersDebugUIUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowersDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePowersDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePowersDebugUIUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowersDebugUIUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePowersDebugUIUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePowersDebugUIUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePowersDebugUIUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePowersDebugUIUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePowersDebugUIUpdate result;
      
      private NetMessagePowersDebugUIUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePowersDebugUIUpdate original = result;
          result = new NetMessagePowersDebugUIUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePowersDebugUIUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePowersDebugUIUpdate.Descriptor; }
      }
      
      public override NetMessagePowersDebugUIUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePowersDebugUIUpdate.DefaultInstance; }
      }
      
      public override NetMessagePowersDebugUIUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePowersDebugUIUpdate) {
          return MergeFrom((NetMessagePowersDebugUIUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePowersDebugUIUpdate other) {
        if (other == global::Gazillion.NetMessagePowersDebugUIUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDebugEntityId) {
          DebugEntityId = other.DebugEntityId;
        }
        if (other.HasActivePowerId) {
          ActivePowerId = other.ActivePowerId;
        }
        if (other.HasPendingActionState) {
          PendingActionState = other.PendingActionState;
        }
        if (other.HasPendingPowerId) {
          PendingPowerId = other.PendingPowerId;
        }
        if (other.HasPendingTargetId) {
          PendingTargetId = other.PendingTargetId;
        }
        if (other.HasPendingTargetPosition) {
          MergePendingTargetPosition(other.PendingTargetPosition);
        }
        if (other.HasContinuousPowerId) {
          ContinuousPowerId = other.ContinuousPowerId;
        }
        if (other.HasContinuousTargetId) {
          ContinuousTargetId = other.ContinuousTargetId;
        }
        if (other.HasContinuousTargetPosition) {
          MergeContinuousTargetPosition(other.ContinuousTargetPosition);
        }
        if (other.HasActivePowerLastActivationTime) {
          ActivePowerLastActivationTime = other.ActivePowerLastActivationTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePowersDebugUIUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePowersDebugUIUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDebugEntityId = input.ReadUInt64(ref result.debugEntityId_);
              break;
            }
            case 16: {
              result.hasActivePowerId = input.ReadUInt64(ref result.activePowerId_);
              break;
            }
            case 24: {
              result.hasPendingActionState = input.ReadInt32(ref result.pendingActionState_);
              break;
            }
            case 32: {
              result.hasPendingPowerId = input.ReadUInt64(ref result.pendingPowerId_);
              break;
            }
            case 40: {
              result.hasPendingTargetId = input.ReadUInt64(ref result.pendingTargetId_);
              break;
            }
            case 50: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPendingTargetPosition) {
                subBuilder.MergeFrom(PendingTargetPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PendingTargetPosition = subBuilder.BuildPartial();
              break;
            }
            case 56: {
              result.hasContinuousPowerId = input.ReadUInt64(ref result.continuousPowerId_);
              break;
            }
            case 64: {
              result.hasContinuousTargetId = input.ReadUInt64(ref result.continuousTargetId_);
              break;
            }
            case 74: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasContinuousTargetPosition) {
                subBuilder.MergeFrom(ContinuousTargetPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ContinuousTargetPosition = subBuilder.BuildPartial();
              break;
            }
            case 80: {
              result.hasActivePowerLastActivationTime = input.ReadUInt64(ref result.activePowerLastActivationTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDebugEntityId {
        get { return result.hasDebugEntityId; }
      }
      public ulong DebugEntityId {
        get { return result.DebugEntityId; }
        set { SetDebugEntityId(value); }
      }
      public Builder SetDebugEntityId(ulong value) {
        PrepareBuilder();
        result.hasDebugEntityId = true;
        result.debugEntityId_ = value;
        return this;
      }
      public Builder ClearDebugEntityId() {
        PrepareBuilder();
        result.hasDebugEntityId = false;
        result.debugEntityId_ = 0UL;
        return this;
      }
      
      public bool HasActivePowerId {
        get { return result.hasActivePowerId; }
      }
      public ulong ActivePowerId {
        get { return result.ActivePowerId; }
        set { SetActivePowerId(value); }
      }
      public Builder SetActivePowerId(ulong value) {
        PrepareBuilder();
        result.hasActivePowerId = true;
        result.activePowerId_ = value;
        return this;
      }
      public Builder ClearActivePowerId() {
        PrepareBuilder();
        result.hasActivePowerId = false;
        result.activePowerId_ = 0UL;
        return this;
      }
      
      public bool HasPendingActionState {
        get { return result.hasPendingActionState; }
      }
      public int PendingActionState {
        get { return result.PendingActionState; }
        set { SetPendingActionState(value); }
      }
      public Builder SetPendingActionState(int value) {
        PrepareBuilder();
        result.hasPendingActionState = true;
        result.pendingActionState_ = value;
        return this;
      }
      public Builder ClearPendingActionState() {
        PrepareBuilder();
        result.hasPendingActionState = false;
        result.pendingActionState_ = 0;
        return this;
      }
      
      public bool HasPendingPowerId {
        get { return result.hasPendingPowerId; }
      }
      public ulong PendingPowerId {
        get { return result.PendingPowerId; }
        set { SetPendingPowerId(value); }
      }
      public Builder SetPendingPowerId(ulong value) {
        PrepareBuilder();
        result.hasPendingPowerId = true;
        result.pendingPowerId_ = value;
        return this;
      }
      public Builder ClearPendingPowerId() {
        PrepareBuilder();
        result.hasPendingPowerId = false;
        result.pendingPowerId_ = 0UL;
        return this;
      }
      
      public bool HasPendingTargetId {
        get { return result.hasPendingTargetId; }
      }
      public ulong PendingTargetId {
        get { return result.PendingTargetId; }
        set { SetPendingTargetId(value); }
      }
      public Builder SetPendingTargetId(ulong value) {
        PrepareBuilder();
        result.hasPendingTargetId = true;
        result.pendingTargetId_ = value;
        return this;
      }
      public Builder ClearPendingTargetId() {
        PrepareBuilder();
        result.hasPendingTargetId = false;
        result.pendingTargetId_ = 0UL;
        return this;
      }
      
      public bool HasPendingTargetPosition {
       get { return result.hasPendingTargetPosition; }
      }
      public global::Gazillion.NetStructPoint3 PendingTargetPosition {
        get { return result.PendingTargetPosition; }
        set { SetPendingTargetPosition(value); }
      }
      public Builder SetPendingTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPendingTargetPosition = true;
        result.pendingTargetPosition_ = value;
        return this;
      }
      public Builder SetPendingTargetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPendingTargetPosition = true;
        result.pendingTargetPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergePendingTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPendingTargetPosition &&
            result.pendingTargetPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.pendingTargetPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.pendingTargetPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.pendingTargetPosition_ = value;
        }
        result.hasPendingTargetPosition = true;
        return this;
      }
      public Builder ClearPendingTargetPosition() {
        PrepareBuilder();
        result.hasPendingTargetPosition = false;
        result.pendingTargetPosition_ = null;
        return this;
      }
      
      public bool HasContinuousPowerId {
        get { return result.hasContinuousPowerId; }
      }
      public ulong ContinuousPowerId {
        get { return result.ContinuousPowerId; }
        set { SetContinuousPowerId(value); }
      }
      public Builder SetContinuousPowerId(ulong value) {
        PrepareBuilder();
        result.hasContinuousPowerId = true;
        result.continuousPowerId_ = value;
        return this;
      }
      public Builder ClearContinuousPowerId() {
        PrepareBuilder();
        result.hasContinuousPowerId = false;
        result.continuousPowerId_ = 0UL;
        return this;
      }
      
      public bool HasContinuousTargetId {
        get { return result.hasContinuousTargetId; }
      }
      public ulong ContinuousTargetId {
        get { return result.ContinuousTargetId; }
        set { SetContinuousTargetId(value); }
      }
      public Builder SetContinuousTargetId(ulong value) {
        PrepareBuilder();
        result.hasContinuousTargetId = true;
        result.continuousTargetId_ = value;
        return this;
      }
      public Builder ClearContinuousTargetId() {
        PrepareBuilder();
        result.hasContinuousTargetId = false;
        result.continuousTargetId_ = 0UL;
        return this;
      }
      
      public bool HasContinuousTargetPosition {
       get { return result.hasContinuousTargetPosition; }
      }
      public global::Gazillion.NetStructPoint3 ContinuousTargetPosition {
        get { return result.ContinuousTargetPosition; }
        set { SetContinuousTargetPosition(value); }
      }
      public Builder SetContinuousTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContinuousTargetPosition = true;
        result.continuousTargetPosition_ = value;
        return this;
      }
      public Builder SetContinuousTargetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasContinuousTargetPosition = true;
        result.continuousTargetPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeContinuousTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasContinuousTargetPosition &&
            result.continuousTargetPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.continuousTargetPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.continuousTargetPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.continuousTargetPosition_ = value;
        }
        result.hasContinuousTargetPosition = true;
        return this;
      }
      public Builder ClearContinuousTargetPosition() {
        PrepareBuilder();
        result.hasContinuousTargetPosition = false;
        result.continuousTargetPosition_ = null;
        return this;
      }
      
      public bool HasActivePowerLastActivationTime {
        get { return result.hasActivePowerLastActivationTime; }
      }
      public ulong ActivePowerLastActivationTime {
        get { return result.ActivePowerLastActivationTime; }
        set { SetActivePowerLastActivationTime(value); }
      }
      public Builder SetActivePowerLastActivationTime(ulong value) {
        PrepareBuilder();
        result.hasActivePowerLastActivationTime = true;
        result.activePowerLastActivationTime_ = value;
        return this;
      }
      public Builder ClearActivePowerLastActivationTime() {
        PrepareBuilder();
        result.hasActivePowerLastActivationTime = false;
        result.activePowerLastActivationTime_ = 0UL;
        return this;
      }
    }
    static NetMessagePowersDebugUIUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMissionDebugUIUpdate : pb::GeneratedMessage<NetMessageMissionDebugUIUpdate, NetMessageMissionDebugUIUpdate.Builder> {
    private NetMessageMissionDebugUIUpdate() { }
    private static readonly NetMessageMissionDebugUIUpdate defaultInstance = new NetMessageMissionDebugUIUpdate().MakeReadOnly();
    private static readonly string[] _netMessageMissionDebugUIUpdateFieldNames = new string[] { "missionStrings" };
    private static readonly uint[] _netMessageMissionDebugUIUpdateFieldTags = new uint[] { 10 };
    public static NetMessageMissionDebugUIUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMissionDebugUIUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMissionDebugUIUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionDebugUIUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMissionDebugUIUpdate, NetMessageMissionDebugUIUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionDebugUIUpdate__FieldAccessorTable; }
    }
    
    public const int MissionStringsFieldNumber = 1;
    private pbc::PopsicleList<string> missionStrings_ = new pbc::PopsicleList<string>();
    public scg::IList<string> MissionStringsList {
      get { return pbc::Lists.AsReadOnly(missionStrings_); }
    }
    public int MissionStringsCount {
      get { return missionStrings_.Count; }
    }
    public string GetMissionStrings(int index) {
      return missionStrings_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMissionDebugUIUpdateFieldNames;
      if (missionStrings_.Count > 0) {
        output.WriteStringArray(1, field_names[0], missionStrings_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        foreach (string element in MissionStringsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * missionStrings_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMissionDebugUIUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionDebugUIUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionDebugUIUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionDebugUIUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionDebugUIUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionDebugUIUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMissionDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMissionDebugUIUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionDebugUIUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMissionDebugUIUpdate MakeReadOnly() {
      missionStrings_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMissionDebugUIUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMissionDebugUIUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMissionDebugUIUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMissionDebugUIUpdate result;
      
      private NetMessageMissionDebugUIUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMissionDebugUIUpdate original = result;
          result = new NetMessageMissionDebugUIUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMissionDebugUIUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMissionDebugUIUpdate.Descriptor; }
      }
      
      public override NetMessageMissionDebugUIUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMissionDebugUIUpdate.DefaultInstance; }
      }
      
      public override NetMessageMissionDebugUIUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMissionDebugUIUpdate) {
          return MergeFrom((NetMessageMissionDebugUIUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMissionDebugUIUpdate other) {
        if (other == global::Gazillion.NetMessageMissionDebugUIUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.missionStrings_.Count != 0) {
          result.missionStrings_.Add(other.missionStrings_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMissionDebugUIUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMissionDebugUIUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadStringArray(tag, field_name, result.missionStrings_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<string> MissionStringsList {
        get { return PrepareBuilder().missionStrings_; }
      }
      public int MissionStringsCount {
        get { return result.MissionStringsCount; }
      }
      public string GetMissionStrings(int index) {
        return result.GetMissionStrings(index);
      }
      public Builder SetMissionStrings(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.missionStrings_[index] = value;
        return this;
      }
      public Builder AddMissionStrings(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.missionStrings_.Add(value);
        return this;
      }
      public Builder AddRangeMissionStrings(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.missionStrings_.Add(values);
        return this;
      }
      public Builder ClearMissionStrings() {
        PrepareBuilder();
        result.missionStrings_.Clear();
        return this;
      }
    }
    static NetMessageMissionDebugUIUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDebugEntityPosition : pb::GeneratedMessage<NetMessageDebugEntityPosition, NetMessageDebugEntityPosition.Builder> {
    private NetMessageDebugEntityPosition() { }
    private static readonly NetMessageDebugEntityPosition defaultInstance = new NetMessageDebugEntityPosition().MakeReadOnly();
    private static readonly string[] _netMessageDebugEntityPositionFieldNames = new string[] { "entityId", "position" };
    private static readonly uint[] _netMessageDebugEntityPositionFieldTags = new uint[] { 8, 18 };
    public static NetMessageDebugEntityPosition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDebugEntityPosition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDebugEntityPosition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDebugEntityPosition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDebugEntityPosition, NetMessageDebugEntityPosition.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDebugEntityPosition__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public const int PositionFieldNumber = 2;
    private bool hasPosition;
    private global::Gazillion.NetStructPoint3 position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::Gazillion.NetStructPoint3 Position {
      get { return position_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasPosition) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDebugEntityPositionFieldNames;
      if (hasEntityId) {
        output.WriteUInt64(1, field_names[0], EntityId);
      }
      if (hasPosition) {
        output.WriteMessage(2, field_names[1], Position);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityId);
      }
      if (hasPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Position);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDebugEntityPosition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDebugEntityPosition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDebugEntityPosition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDebugEntityPosition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDebugEntityPosition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDebugEntityPosition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDebugEntityPosition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDebugEntityPosition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDebugEntityPosition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDebugEntityPosition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDebugEntityPosition MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDebugEntityPosition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDebugEntityPosition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDebugEntityPosition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDebugEntityPosition result;
      
      private NetMessageDebugEntityPosition PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDebugEntityPosition original = result;
          result = new NetMessageDebugEntityPosition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDebugEntityPosition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDebugEntityPosition.Descriptor; }
      }
      
      public override NetMessageDebugEntityPosition DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDebugEntityPosition.DefaultInstance; }
      }
      
      public override NetMessageDebugEntityPosition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDebugEntityPosition) {
          return MergeFrom((NetMessageDebugEntityPosition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDebugEntityPosition other) {
        if (other == global::Gazillion.NetMessageDebugEntityPosition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDebugEntityPositionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDebugEntityPositionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
            case 18: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::Gazillion.NetStructPoint3 Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.position_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
    }
    static NetMessageDebugEntityPosition() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePingResponse : pb::GeneratedMessage<NetMessagePingResponse, NetMessagePingResponse.Builder> {
    private NetMessagePingResponse() { }
    private static readonly NetMessagePingResponse defaultInstance = new NetMessagePingResponse().MakeReadOnly();
    private static readonly string[] _netMessagePingResponseFieldNames = new string[] { "displayOutput", "requestNetReceivedGameTime", "requestSentClientTime", "requestSentGameTime", "responseLatencyBufferReceiveClientTime", "responseNetReceiveClientTime", "responseNetReceiveGameTime", "responseSendTime", "serverTimeSinceLastGameUpdate" };
    private static readonly uint[] _netMessagePingResponseFieldTags = new uint[] { 8, 32, 16, 24, 72, 48, 56, 40, 64 };
    public static NetMessagePingResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePingResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePingResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePingResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePingResponse, NetMessagePingResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePingResponse__FieldAccessorTable; }
    }
    
    public const int DisplayOutputFieldNumber = 1;
    private bool hasDisplayOutput;
    private bool displayOutput_;
    public bool HasDisplayOutput {
      get { return hasDisplayOutput; }
    }
    public bool DisplayOutput {
      get { return displayOutput_; }
    }
    
    public const int RequestSentClientTimeFieldNumber = 2;
    private bool hasRequestSentClientTime;
    private ulong requestSentClientTime_;
    public bool HasRequestSentClientTime {
      get { return hasRequestSentClientTime; }
    }
    public ulong RequestSentClientTime {
      get { return requestSentClientTime_; }
    }
    
    public const int RequestSentGameTimeFieldNumber = 3;
    private bool hasRequestSentGameTime;
    private ulong requestSentGameTime_;
    public bool HasRequestSentGameTime {
      get { return hasRequestSentGameTime; }
    }
    public ulong RequestSentGameTime {
      get { return requestSentGameTime_; }
    }
    
    public const int RequestNetReceivedGameTimeFieldNumber = 4;
    private bool hasRequestNetReceivedGameTime;
    private ulong requestNetReceivedGameTime_;
    public bool HasRequestNetReceivedGameTime {
      get { return hasRequestNetReceivedGameTime; }
    }
    public ulong RequestNetReceivedGameTime {
      get { return requestNetReceivedGameTime_; }
    }
    
    public const int ResponseSendTimeFieldNumber = 5;
    private bool hasResponseSendTime;
    private ulong responseSendTime_;
    public bool HasResponseSendTime {
      get { return hasResponseSendTime; }
    }
    public ulong ResponseSendTime {
      get { return responseSendTime_; }
    }
    
    public const int ResponseNetReceiveClientTimeFieldNumber = 6;
    private bool hasResponseNetReceiveClientTime;
    private ulong responseNetReceiveClientTime_;
    public bool HasResponseNetReceiveClientTime {
      get { return hasResponseNetReceiveClientTime; }
    }
    public ulong ResponseNetReceiveClientTime {
      get { return responseNetReceiveClientTime_; }
    }
    
    public const int ResponseNetReceiveGameTimeFieldNumber = 7;
    private bool hasResponseNetReceiveGameTime;
    private ulong responseNetReceiveGameTime_;
    public bool HasResponseNetReceiveGameTime {
      get { return hasResponseNetReceiveGameTime; }
    }
    public ulong ResponseNetReceiveGameTime {
      get { return responseNetReceiveGameTime_; }
    }
    
    public const int ServerTimeSinceLastGameUpdateFieldNumber = 8;
    private bool hasServerTimeSinceLastGameUpdate;
    private ulong serverTimeSinceLastGameUpdate_;
    public bool HasServerTimeSinceLastGameUpdate {
      get { return hasServerTimeSinceLastGameUpdate; }
    }
    public ulong ServerTimeSinceLastGameUpdate {
      get { return serverTimeSinceLastGameUpdate_; }
    }
    
    public const int ResponseLatencyBufferReceiveClientTimeFieldNumber = 9;
    private bool hasResponseLatencyBufferReceiveClientTime;
    private ulong responseLatencyBufferReceiveClientTime_;
    public bool HasResponseLatencyBufferReceiveClientTime {
      get { return hasResponseLatencyBufferReceiveClientTime; }
    }
    public ulong ResponseLatencyBufferReceiveClientTime {
      get { return responseLatencyBufferReceiveClientTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDisplayOutput) return false;
        if (!hasRequestSentClientTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePingResponseFieldNames;
      if (hasDisplayOutput) {
        output.WriteBool(1, field_names[0], DisplayOutput);
      }
      if (hasRequestSentClientTime) {
        output.WriteUInt64(2, field_names[2], RequestSentClientTime);
      }
      if (hasRequestSentGameTime) {
        output.WriteUInt64(3, field_names[3], RequestSentGameTime);
      }
      if (hasRequestNetReceivedGameTime) {
        output.WriteUInt64(4, field_names[1], RequestNetReceivedGameTime);
      }
      if (hasResponseSendTime) {
        output.WriteUInt64(5, field_names[7], ResponseSendTime);
      }
      if (hasResponseNetReceiveClientTime) {
        output.WriteUInt64(6, field_names[5], ResponseNetReceiveClientTime);
      }
      if (hasResponseNetReceiveGameTime) {
        output.WriteUInt64(7, field_names[6], ResponseNetReceiveGameTime);
      }
      if (hasServerTimeSinceLastGameUpdate) {
        output.WriteUInt64(8, field_names[8], ServerTimeSinceLastGameUpdate);
      }
      if (hasResponseLatencyBufferReceiveClientTime) {
        output.WriteUInt64(9, field_names[4], ResponseLatencyBufferReceiveClientTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDisplayOutput) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, DisplayOutput);
      }
      if (hasRequestSentClientTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, RequestSentClientTime);
      }
      if (hasRequestSentGameTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, RequestSentGameTime);
      }
      if (hasRequestNetReceivedGameTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, RequestNetReceivedGameTime);
      }
      if (hasResponseSendTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, ResponseSendTime);
      }
      if (hasResponseNetReceiveClientTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(6, ResponseNetReceiveClientTime);
      }
      if (hasResponseNetReceiveGameTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(7, ResponseNetReceiveGameTime);
      }
      if (hasServerTimeSinceLastGameUpdate) {
        size += pb::CodedOutputStream.ComputeUInt64Size(8, ServerTimeSinceLastGameUpdate);
      }
      if (hasResponseLatencyBufferReceiveClientTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(9, ResponseLatencyBufferReceiveClientTime);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePingResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePingResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePingResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePingResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePingResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePingResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePingResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePingResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePingResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePingResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePingResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePingResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePingResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePingResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePingResponse result;
      
      private NetMessagePingResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePingResponse original = result;
          result = new NetMessagePingResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePingResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePingResponse.Descriptor; }
      }
      
      public override NetMessagePingResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePingResponse.DefaultInstance; }
      }
      
      public override NetMessagePingResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePingResponse) {
          return MergeFrom((NetMessagePingResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePingResponse other) {
        if (other == global::Gazillion.NetMessagePingResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDisplayOutput) {
          DisplayOutput = other.DisplayOutput;
        }
        if (other.HasRequestSentClientTime) {
          RequestSentClientTime = other.RequestSentClientTime;
        }
        if (other.HasRequestSentGameTime) {
          RequestSentGameTime = other.RequestSentGameTime;
        }
        if (other.HasRequestNetReceivedGameTime) {
          RequestNetReceivedGameTime = other.RequestNetReceivedGameTime;
        }
        if (other.HasResponseSendTime) {
          ResponseSendTime = other.ResponseSendTime;
        }
        if (other.HasResponseNetReceiveClientTime) {
          ResponseNetReceiveClientTime = other.ResponseNetReceiveClientTime;
        }
        if (other.HasResponseNetReceiveGameTime) {
          ResponseNetReceiveGameTime = other.ResponseNetReceiveGameTime;
        }
        if (other.HasServerTimeSinceLastGameUpdate) {
          ServerTimeSinceLastGameUpdate = other.ServerTimeSinceLastGameUpdate;
        }
        if (other.HasResponseLatencyBufferReceiveClientTime) {
          ResponseLatencyBufferReceiveClientTime = other.ResponseLatencyBufferReceiveClientTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePingResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePingResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDisplayOutput = input.ReadBool(ref result.displayOutput_);
              break;
            }
            case 16: {
              result.hasRequestSentClientTime = input.ReadUInt64(ref result.requestSentClientTime_);
              break;
            }
            case 24: {
              result.hasRequestSentGameTime = input.ReadUInt64(ref result.requestSentGameTime_);
              break;
            }
            case 32: {
              result.hasRequestNetReceivedGameTime = input.ReadUInt64(ref result.requestNetReceivedGameTime_);
              break;
            }
            case 40: {
              result.hasResponseSendTime = input.ReadUInt64(ref result.responseSendTime_);
              break;
            }
            case 48: {
              result.hasResponseNetReceiveClientTime = input.ReadUInt64(ref result.responseNetReceiveClientTime_);
              break;
            }
            case 56: {
              result.hasResponseNetReceiveGameTime = input.ReadUInt64(ref result.responseNetReceiveGameTime_);
              break;
            }
            case 64: {
              result.hasServerTimeSinceLastGameUpdate = input.ReadUInt64(ref result.serverTimeSinceLastGameUpdate_);
              break;
            }
            case 72: {
              result.hasResponseLatencyBufferReceiveClientTime = input.ReadUInt64(ref result.responseLatencyBufferReceiveClientTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDisplayOutput {
        get { return result.hasDisplayOutput; }
      }
      public bool DisplayOutput {
        get { return result.DisplayOutput; }
        set { SetDisplayOutput(value); }
      }
      public Builder SetDisplayOutput(bool value) {
        PrepareBuilder();
        result.hasDisplayOutput = true;
        result.displayOutput_ = value;
        return this;
      }
      public Builder ClearDisplayOutput() {
        PrepareBuilder();
        result.hasDisplayOutput = false;
        result.displayOutput_ = false;
        return this;
      }
      
      public bool HasRequestSentClientTime {
        get { return result.hasRequestSentClientTime; }
      }
      public ulong RequestSentClientTime {
        get { return result.RequestSentClientTime; }
        set { SetRequestSentClientTime(value); }
      }
      public Builder SetRequestSentClientTime(ulong value) {
        PrepareBuilder();
        result.hasRequestSentClientTime = true;
        result.requestSentClientTime_ = value;
        return this;
      }
      public Builder ClearRequestSentClientTime() {
        PrepareBuilder();
        result.hasRequestSentClientTime = false;
        result.requestSentClientTime_ = 0UL;
        return this;
      }
      
      public bool HasRequestSentGameTime {
        get { return result.hasRequestSentGameTime; }
      }
      public ulong RequestSentGameTime {
        get { return result.RequestSentGameTime; }
        set { SetRequestSentGameTime(value); }
      }
      public Builder SetRequestSentGameTime(ulong value) {
        PrepareBuilder();
        result.hasRequestSentGameTime = true;
        result.requestSentGameTime_ = value;
        return this;
      }
      public Builder ClearRequestSentGameTime() {
        PrepareBuilder();
        result.hasRequestSentGameTime = false;
        result.requestSentGameTime_ = 0UL;
        return this;
      }
      
      public bool HasRequestNetReceivedGameTime {
        get { return result.hasRequestNetReceivedGameTime; }
      }
      public ulong RequestNetReceivedGameTime {
        get { return result.RequestNetReceivedGameTime; }
        set { SetRequestNetReceivedGameTime(value); }
      }
      public Builder SetRequestNetReceivedGameTime(ulong value) {
        PrepareBuilder();
        result.hasRequestNetReceivedGameTime = true;
        result.requestNetReceivedGameTime_ = value;
        return this;
      }
      public Builder ClearRequestNetReceivedGameTime() {
        PrepareBuilder();
        result.hasRequestNetReceivedGameTime = false;
        result.requestNetReceivedGameTime_ = 0UL;
        return this;
      }
      
      public bool HasResponseSendTime {
        get { return result.hasResponseSendTime; }
      }
      public ulong ResponseSendTime {
        get { return result.ResponseSendTime; }
        set { SetResponseSendTime(value); }
      }
      public Builder SetResponseSendTime(ulong value) {
        PrepareBuilder();
        result.hasResponseSendTime = true;
        result.responseSendTime_ = value;
        return this;
      }
      public Builder ClearResponseSendTime() {
        PrepareBuilder();
        result.hasResponseSendTime = false;
        result.responseSendTime_ = 0UL;
        return this;
      }
      
      public bool HasResponseNetReceiveClientTime {
        get { return result.hasResponseNetReceiveClientTime; }
      }
      public ulong ResponseNetReceiveClientTime {
        get { return result.ResponseNetReceiveClientTime; }
        set { SetResponseNetReceiveClientTime(value); }
      }
      public Builder SetResponseNetReceiveClientTime(ulong value) {
        PrepareBuilder();
        result.hasResponseNetReceiveClientTime = true;
        result.responseNetReceiveClientTime_ = value;
        return this;
      }
      public Builder ClearResponseNetReceiveClientTime() {
        PrepareBuilder();
        result.hasResponseNetReceiveClientTime = false;
        result.responseNetReceiveClientTime_ = 0UL;
        return this;
      }
      
      public bool HasResponseNetReceiveGameTime {
        get { return result.hasResponseNetReceiveGameTime; }
      }
      public ulong ResponseNetReceiveGameTime {
        get { return result.ResponseNetReceiveGameTime; }
        set { SetResponseNetReceiveGameTime(value); }
      }
      public Builder SetResponseNetReceiveGameTime(ulong value) {
        PrepareBuilder();
        result.hasResponseNetReceiveGameTime = true;
        result.responseNetReceiveGameTime_ = value;
        return this;
      }
      public Builder ClearResponseNetReceiveGameTime() {
        PrepareBuilder();
        result.hasResponseNetReceiveGameTime = false;
        result.responseNetReceiveGameTime_ = 0UL;
        return this;
      }
      
      public bool HasServerTimeSinceLastGameUpdate {
        get { return result.hasServerTimeSinceLastGameUpdate; }
      }
      public ulong ServerTimeSinceLastGameUpdate {
        get { return result.ServerTimeSinceLastGameUpdate; }
        set { SetServerTimeSinceLastGameUpdate(value); }
      }
      public Builder SetServerTimeSinceLastGameUpdate(ulong value) {
        PrepareBuilder();
        result.hasServerTimeSinceLastGameUpdate = true;
        result.serverTimeSinceLastGameUpdate_ = value;
        return this;
      }
      public Builder ClearServerTimeSinceLastGameUpdate() {
        PrepareBuilder();
        result.hasServerTimeSinceLastGameUpdate = false;
        result.serverTimeSinceLastGameUpdate_ = 0UL;
        return this;
      }
      
      public bool HasResponseLatencyBufferReceiveClientTime {
        get { return result.hasResponseLatencyBufferReceiveClientTime; }
      }
      public ulong ResponseLatencyBufferReceiveClientTime {
        get { return result.ResponseLatencyBufferReceiveClientTime; }
        set { SetResponseLatencyBufferReceiveClientTime(value); }
      }
      public Builder SetResponseLatencyBufferReceiveClientTime(ulong value) {
        PrepareBuilder();
        result.hasResponseLatencyBufferReceiveClientTime = true;
        result.responseLatencyBufferReceiveClientTime_ = value;
        return this;
      }
      public Builder ClearResponseLatencyBufferReceiveClientTime() {
        PrepareBuilder();
        result.hasResponseLatencyBufferReceiveClientTime = false;
        result.responseLatencyBufferReceiveClientTime_ = 0UL;
        return this;
      }
    }
    static NetMessagePingResponse() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityEnterGameWorld : pb::GeneratedMessage<NetMessageEntityEnterGameWorld, NetMessageEntityEnterGameWorld.Builder> {
    private NetMessageEntityEnterGameWorld() { }
    private static readonly NetMessageEntityEnterGameWorld defaultInstance = new NetMessageEntityEnterGameWorld().MakeReadOnly();
    private static readonly string[] _netMessageEntityEnterGameWorldFieldNames = new string[] { "entityId", "entityPrototypeId", "isClientEntityHidden", "locomotionState", "orientation", "position" };
    private static readonly uint[] _netMessageEntityEnterGameWorldFieldTags = new uint[] { 8, 40, 48, 34, 26, 18 };
    public static NetMessageEntityEnterGameWorld DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityEnterGameWorld DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityEnterGameWorld ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityEnterGameWorld__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityEnterGameWorld, NetMessageEntityEnterGameWorld.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityEnterGameWorld__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public const int PositionFieldNumber = 2;
    private bool hasPosition;
    private global::Gazillion.NetStructPoint3 position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::Gazillion.NetStructPoint3 Position {
      get { return position_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int OrientationFieldNumber = 3;
    private bool hasOrientation;
    private global::Gazillion.NetStructPoint3 orientation_;
    public bool HasOrientation {
      get { return hasOrientation; }
    }
    public global::Gazillion.NetStructPoint3 Orientation {
      get { return orientation_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int LocomotionStateFieldNumber = 4;
    private bool hasLocomotionState;
    private global::Gazillion.NetStructLocomotionState locomotionState_;
    public bool HasLocomotionState {
      get { return hasLocomotionState; }
    }
    public global::Gazillion.NetStructLocomotionState LocomotionState {
      get { return locomotionState_ ?? global::Gazillion.NetStructLocomotionState.DefaultInstance; }
    }
    
    public const int EntityPrototypeIdFieldNumber = 5;
    private bool hasEntityPrototypeId;
    private ulong entityPrototypeId_;
    public bool HasEntityPrototypeId {
      get { return hasEntityPrototypeId; }
    }
    public ulong EntityPrototypeId {
      get { return entityPrototypeId_; }
    }
    
    public const int IsClientEntityHiddenFieldNumber = 6;
    private bool hasIsClientEntityHidden;
    private bool isClientEntityHidden_;
    public bool HasIsClientEntityHidden {
      get { return hasIsClientEntityHidden; }
    }
    public bool IsClientEntityHidden {
      get { return isClientEntityHidden_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasPosition) return false;
        if (HasLocomotionState) {
          if (!LocomotionState.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityEnterGameWorldFieldNames;
      if (hasEntityId) {
        output.WriteUInt64(1, field_names[0], EntityId);
      }
      if (hasPosition) {
        output.WriteMessage(2, field_names[5], Position);
      }
      if (hasOrientation) {
        output.WriteMessage(3, field_names[4], Orientation);
      }
      if (hasLocomotionState) {
        output.WriteMessage(4, field_names[3], LocomotionState);
      }
      if (hasEntityPrototypeId) {
        output.WriteUInt64(5, field_names[1], EntityPrototypeId);
      }
      if (hasIsClientEntityHidden) {
        output.WriteBool(6, field_names[2], IsClientEntityHidden);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityId);
      }
      if (hasPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Position);
      }
      if (hasOrientation) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Orientation);
      }
      if (hasLocomotionState) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, LocomotionState);
      }
      if (hasEntityPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, EntityPrototypeId);
      }
      if (hasIsClientEntityHidden) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, IsClientEntityHidden);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityEnterGameWorld ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityEnterGameWorld ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityEnterGameWorld ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityEnterGameWorld ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityEnterGameWorld ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityEnterGameWorld ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityEnterGameWorld ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityEnterGameWorld ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityEnterGameWorld ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityEnterGameWorld ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityEnterGameWorld MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityEnterGameWorld prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityEnterGameWorld, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityEnterGameWorld cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityEnterGameWorld result;
      
      private NetMessageEntityEnterGameWorld PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityEnterGameWorld original = result;
          result = new NetMessageEntityEnterGameWorld();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityEnterGameWorld MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityEnterGameWorld.Descriptor; }
      }
      
      public override NetMessageEntityEnterGameWorld DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityEnterGameWorld.DefaultInstance; }
      }
      
      public override NetMessageEntityEnterGameWorld BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityEnterGameWorld) {
          return MergeFrom((NetMessageEntityEnterGameWorld) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityEnterGameWorld other) {
        if (other == global::Gazillion.NetMessageEntityEnterGameWorld.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasOrientation) {
          MergeOrientation(other.Orientation);
        }
        if (other.HasLocomotionState) {
          MergeLocomotionState(other.LocomotionState);
        }
        if (other.HasEntityPrototypeId) {
          EntityPrototypeId = other.EntityPrototypeId;
        }
        if (other.HasIsClientEntityHidden) {
          IsClientEntityHidden = other.IsClientEntityHidden;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityEnterGameWorldFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityEnterGameWorldFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
            case 18: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasOrientation) {
                subBuilder.MergeFrom(Orientation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Orientation = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Gazillion.NetStructLocomotionState.Builder subBuilder = global::Gazillion.NetStructLocomotionState.CreateBuilder();
              if (result.hasLocomotionState) {
                subBuilder.MergeFrom(LocomotionState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LocomotionState = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasEntityPrototypeId = input.ReadUInt64(ref result.entityPrototypeId_);
              break;
            }
            case 48: {
              result.hasIsClientEntityHidden = input.ReadBool(ref result.isClientEntityHidden_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::Gazillion.NetStructPoint3 Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.position_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasOrientation {
       get { return result.hasOrientation; }
      }
      public global::Gazillion.NetStructPoint3 Orientation {
        get { return result.Orientation; }
        set { SetOrientation(value); }
      }
      public Builder SetOrientation(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrientation = true;
        result.orientation_ = value;
        return this;
      }
      public Builder SetOrientation(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOrientation = true;
        result.orientation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOrientation(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOrientation &&
            result.orientation_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.orientation_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.orientation_).MergeFrom(value).BuildPartial();
        } else {
          result.orientation_ = value;
        }
        result.hasOrientation = true;
        return this;
      }
      public Builder ClearOrientation() {
        PrepareBuilder();
        result.hasOrientation = false;
        result.orientation_ = null;
        return this;
      }
      
      public bool HasLocomotionState {
       get { return result.hasLocomotionState; }
      }
      public global::Gazillion.NetStructLocomotionState LocomotionState {
        get { return result.LocomotionState; }
        set { SetLocomotionState(value); }
      }
      public Builder SetLocomotionState(global::Gazillion.NetStructLocomotionState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocomotionState = true;
        result.locomotionState_ = value;
        return this;
      }
      public Builder SetLocomotionState(global::Gazillion.NetStructLocomotionState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLocomotionState = true;
        result.locomotionState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLocomotionState(global::Gazillion.NetStructLocomotionState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLocomotionState &&
            result.locomotionState_ != global::Gazillion.NetStructLocomotionState.DefaultInstance) {
            result.locomotionState_ = global::Gazillion.NetStructLocomotionState.CreateBuilder(result.locomotionState_).MergeFrom(value).BuildPartial();
        } else {
          result.locomotionState_ = value;
        }
        result.hasLocomotionState = true;
        return this;
      }
      public Builder ClearLocomotionState() {
        PrepareBuilder();
        result.hasLocomotionState = false;
        result.locomotionState_ = null;
        return this;
      }
      
      public bool HasEntityPrototypeId {
        get { return result.hasEntityPrototypeId; }
      }
      public ulong EntityPrototypeId {
        get { return result.EntityPrototypeId; }
        set { SetEntityPrototypeId(value); }
      }
      public Builder SetEntityPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasEntityPrototypeId = true;
        result.entityPrototypeId_ = value;
        return this;
      }
      public Builder ClearEntityPrototypeId() {
        PrepareBuilder();
        result.hasEntityPrototypeId = false;
        result.entityPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasIsClientEntityHidden {
        get { return result.hasIsClientEntityHidden; }
      }
      public bool IsClientEntityHidden {
        get { return result.IsClientEntityHidden; }
        set { SetIsClientEntityHidden(value); }
      }
      public Builder SetIsClientEntityHidden(bool value) {
        PrepareBuilder();
        result.hasIsClientEntityHidden = true;
        result.isClientEntityHidden_ = value;
        return this;
      }
      public Builder ClearIsClientEntityHidden() {
        PrepareBuilder();
        result.hasIsClientEntityHidden = false;
        result.isClientEntityHidden_ = false;
        return this;
      }
    }
    static NetMessageEntityEnterGameWorld() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTeleportAckRequest : pb::GeneratedMessage<NetMessageTeleportAckRequest, NetMessageTeleportAckRequest.Builder> {
    private NetMessageTeleportAckRequest() { }
    private static readonly NetMessageTeleportAckRequest defaultInstance = new NetMessageTeleportAckRequest().MakeReadOnly();
    private static readonly string[] _netMessageTeleportAckRequestFieldNames = new string[] { "ackseq" };
    private static readonly uint[] _netMessageTeleportAckRequestFieldTags = new uint[] { 8 };
    public static NetMessageTeleportAckRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTeleportAckRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTeleportAckRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageTeleportAckRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTeleportAckRequest, NetMessageTeleportAckRequest.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageTeleportAckRequest__FieldAccessorTable; }
    }
    
    public const int AckseqFieldNumber = 1;
    private bool hasAckseq;
    private uint ackseq_;
    public bool HasAckseq {
      get { return hasAckseq; }
    }
    public uint Ackseq {
      get { return ackseq_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAckseq) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTeleportAckRequestFieldNames;
      if (hasAckseq) {
        output.WriteUInt32(1, field_names[0], Ackseq);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAckseq) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Ackseq);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTeleportAckRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTeleportAckRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeleportAckRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTeleportAckRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeleportAckRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTeleportAckRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeleportAckRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTeleportAckRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTeleportAckRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTeleportAckRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTeleportAckRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTeleportAckRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTeleportAckRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTeleportAckRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTeleportAckRequest result;
      
      private NetMessageTeleportAckRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTeleportAckRequest original = result;
          result = new NetMessageTeleportAckRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTeleportAckRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTeleportAckRequest.Descriptor; }
      }
      
      public override NetMessageTeleportAckRequest DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTeleportAckRequest.DefaultInstance; }
      }
      
      public override NetMessageTeleportAckRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTeleportAckRequest) {
          return MergeFrom((NetMessageTeleportAckRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTeleportAckRequest other) {
        if (other == global::Gazillion.NetMessageTeleportAckRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAckseq) {
          Ackseq = other.Ackseq;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTeleportAckRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTeleportAckRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAckseq = input.ReadUInt32(ref result.ackseq_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAckseq {
        get { return result.hasAckseq; }
      }
      public uint Ackseq {
        get { return result.Ackseq; }
        set { SetAckseq(value); }
      }
      public Builder SetAckseq(uint value) {
        PrepareBuilder();
        result.hasAckseq = true;
        result.ackseq_ = value;
        return this;
      }
      public Builder ClearAckseq() {
        PrepareBuilder();
        result.hasAckseq = false;
        result.ackseq_ = 0;
        return this;
      }
    }
    static NetMessageTeleportAckRequest() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageServerVersion : pb::GeneratedMessage<NetMessageServerVersion, NetMessageServerVersion.Builder> {
    private NetMessageServerVersion() { }
    private static readonly NetMessageServerVersion defaultInstance = new NetMessageServerVersion().MakeReadOnly();
    private static readonly string[] _netMessageServerVersionFieldNames = new string[] { "version" };
    private static readonly uint[] _netMessageServerVersionFieldTags = new uint[] { 10 };
    public static NetMessageServerVersion DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageServerVersion DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageServerVersion ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageServerVersion__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageServerVersion, NetMessageServerVersion.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageServerVersion__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private string version_ = "";
    public bool HasVersion {
      get { return hasVersion; }
    }
    public string Version {
      get { return version_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageServerVersionFieldNames;
      if (hasVersion) {
        output.WriteString(1, field_names[0], Version);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Version);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageServerVersion ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageServerVersion ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageServerVersion ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageServerVersion ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageServerVersion ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageServerVersion ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageServerVersion ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageServerVersion ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageServerVersion ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageServerVersion ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageServerVersion MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageServerVersion prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageServerVersion, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageServerVersion cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageServerVersion result;
      
      private NetMessageServerVersion PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageServerVersion original = result;
          result = new NetMessageServerVersion();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageServerVersion MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageServerVersion.Descriptor; }
      }
      
      public override NetMessageServerVersion DefaultInstanceForType {
        get { return global::Gazillion.NetMessageServerVersion.DefaultInstance; }
      }
      
      public override NetMessageServerVersion BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageServerVersion) {
          return MergeFrom((NetMessageServerVersion) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageServerVersion other) {
        if (other == global::Gazillion.NetMessageServerVersion.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageServerVersionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageServerVersionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasVersion = input.ReadString(ref result.version_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public string Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = "";
        return this;
      }
    }
    static NetMessageServerVersion() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetStructAffixSpec : pb::GeneratedMessage<NetStructAffixSpec, NetStructAffixSpec.Builder> {
    private NetStructAffixSpec() { }
    private static readonly NetStructAffixSpec defaultInstance = new NetStructAffixSpec().MakeReadOnly();
    private static readonly string[] _netStructAffixSpecFieldNames = new string[] { "affixProtoRef", "scopeProtoRef", "seed" };
    private static readonly uint[] _netStructAffixSpecFieldTags = new uint[] { 8, 16, 24 };
    public static NetStructAffixSpec DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetStructAffixSpec DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetStructAffixSpec ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructAffixSpec__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetStructAffixSpec, NetStructAffixSpec.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructAffixSpec__FieldAccessorTable; }
    }
    
    public const int AffixProtoRefFieldNumber = 1;
    private bool hasAffixProtoRef;
    private ulong affixProtoRef_;
    public bool HasAffixProtoRef {
      get { return hasAffixProtoRef; }
    }
    public ulong AffixProtoRef {
      get { return affixProtoRef_; }
    }
    
    public const int ScopeProtoRefFieldNumber = 2;
    private bool hasScopeProtoRef;
    private ulong scopeProtoRef_;
    public bool HasScopeProtoRef {
      get { return hasScopeProtoRef; }
    }
    public ulong ScopeProtoRef {
      get { return scopeProtoRef_; }
    }
    
    public const int SeedFieldNumber = 3;
    private bool hasSeed;
    private int seed_;
    public bool HasSeed {
      get { return hasSeed; }
    }
    public int Seed {
      get { return seed_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAffixProtoRef) return false;
        if (!hasScopeProtoRef) return false;
        if (!hasSeed) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netStructAffixSpecFieldNames;
      if (hasAffixProtoRef) {
        output.WriteUInt64(1, field_names[0], AffixProtoRef);
      }
      if (hasScopeProtoRef) {
        output.WriteUInt64(2, field_names[1], ScopeProtoRef);
      }
      if (hasSeed) {
        output.WriteInt32(3, field_names[2], Seed);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAffixProtoRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AffixProtoRef);
      }
      if (hasScopeProtoRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ScopeProtoRef);
      }
      if (hasSeed) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Seed);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetStructAffixSpec ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructAffixSpec ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructAffixSpec ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructAffixSpec ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructAffixSpec ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructAffixSpec ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetStructAffixSpec ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetStructAffixSpec ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetStructAffixSpec ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructAffixSpec ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetStructAffixSpec MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetStructAffixSpec prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetStructAffixSpec, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetStructAffixSpec cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetStructAffixSpec result;
      
      private NetStructAffixSpec PrepareBuilder() {
        if (resultIsReadOnly) {
          NetStructAffixSpec original = result;
          result = new NetStructAffixSpec();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetStructAffixSpec MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetStructAffixSpec.Descriptor; }
      }
      
      public override NetStructAffixSpec DefaultInstanceForType {
        get { return global::Gazillion.NetStructAffixSpec.DefaultInstance; }
      }
      
      public override NetStructAffixSpec BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetStructAffixSpec) {
          return MergeFrom((NetStructAffixSpec) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetStructAffixSpec other) {
        if (other == global::Gazillion.NetStructAffixSpec.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAffixProtoRef) {
          AffixProtoRef = other.AffixProtoRef;
        }
        if (other.HasScopeProtoRef) {
          ScopeProtoRef = other.ScopeProtoRef;
        }
        if (other.HasSeed) {
          Seed = other.Seed;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netStructAffixSpecFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netStructAffixSpecFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAffixProtoRef = input.ReadUInt64(ref result.affixProtoRef_);
              break;
            }
            case 16: {
              result.hasScopeProtoRef = input.ReadUInt64(ref result.scopeProtoRef_);
              break;
            }
            case 24: {
              result.hasSeed = input.ReadInt32(ref result.seed_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAffixProtoRef {
        get { return result.hasAffixProtoRef; }
      }
      public ulong AffixProtoRef {
        get { return result.AffixProtoRef; }
        set { SetAffixProtoRef(value); }
      }
      public Builder SetAffixProtoRef(ulong value) {
        PrepareBuilder();
        result.hasAffixProtoRef = true;
        result.affixProtoRef_ = value;
        return this;
      }
      public Builder ClearAffixProtoRef() {
        PrepareBuilder();
        result.hasAffixProtoRef = false;
        result.affixProtoRef_ = 0UL;
        return this;
      }
      
      public bool HasScopeProtoRef {
        get { return result.hasScopeProtoRef; }
      }
      public ulong ScopeProtoRef {
        get { return result.ScopeProtoRef; }
        set { SetScopeProtoRef(value); }
      }
      public Builder SetScopeProtoRef(ulong value) {
        PrepareBuilder();
        result.hasScopeProtoRef = true;
        result.scopeProtoRef_ = value;
        return this;
      }
      public Builder ClearScopeProtoRef() {
        PrepareBuilder();
        result.hasScopeProtoRef = false;
        result.scopeProtoRef_ = 0UL;
        return this;
      }
      
      public bool HasSeed {
        get { return result.hasSeed; }
      }
      public int Seed {
        get { return result.Seed; }
        set { SetSeed(value); }
      }
      public Builder SetSeed(int value) {
        PrepareBuilder();
        result.hasSeed = true;
        result.seed_ = value;
        return this;
      }
      public Builder ClearSeed() {
        PrepareBuilder();
        result.hasSeed = false;
        result.seed_ = 0;
        return this;
      }
    }
    static NetStructAffixSpec() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetStructItemSpec : pb::GeneratedMessage<NetStructItemSpec, NetStructItemSpec.Builder> {
    private NetStructItemSpec() { }
    private static readonly NetStructItemSpec defaultInstance = new NetStructItemSpec().MakeReadOnly();
    private static readonly string[] _netStructItemSpecFieldNames = new string[] { "affixSpecs", "creditsAmount", "itemLevel", "itemProtoRef", "rarityProtoRef", "seed" };
    private static readonly uint[] _netStructItemSpecFieldTags = new uint[] { 50, 40, 16, 8, 24, 32 };
    public static NetStructItemSpec DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetStructItemSpec DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetStructItemSpec ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructItemSpec__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetStructItemSpec, NetStructItemSpec.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructItemSpec__FieldAccessorTable; }
    }
    
    public const int ItemProtoRefFieldNumber = 1;
    private bool hasItemProtoRef;
    private ulong itemProtoRef_;
    public bool HasItemProtoRef {
      get { return hasItemProtoRef; }
    }
    public ulong ItemProtoRef {
      get { return itemProtoRef_; }
    }
    
    public const int ItemLevelFieldNumber = 2;
    private bool hasItemLevel;
    private uint itemLevel_;
    public bool HasItemLevel {
      get { return hasItemLevel; }
    }
    public uint ItemLevel {
      get { return itemLevel_; }
    }
    
    public const int RarityProtoRefFieldNumber = 3;
    private bool hasRarityProtoRef;
    private ulong rarityProtoRef_;
    public bool HasRarityProtoRef {
      get { return hasRarityProtoRef; }
    }
    public ulong RarityProtoRef {
      get { return rarityProtoRef_; }
    }
    
    public const int SeedFieldNumber = 4;
    private bool hasSeed;
    private uint seed_;
    public bool HasSeed {
      get { return hasSeed; }
    }
    public uint Seed {
      get { return seed_; }
    }
    
    public const int CreditsAmountFieldNumber = 5;
    private bool hasCreditsAmount;
    private uint creditsAmount_;
    public bool HasCreditsAmount {
      get { return hasCreditsAmount; }
    }
    public uint CreditsAmount {
      get { return creditsAmount_; }
    }
    
    public const int AffixSpecsFieldNumber = 6;
    private pbc::PopsicleList<global::Gazillion.NetStructAffixSpec> affixSpecs_ = new pbc::PopsicleList<global::Gazillion.NetStructAffixSpec>();
    public scg::IList<global::Gazillion.NetStructAffixSpec> AffixSpecsList {
      get { return affixSpecs_; }
    }
    public int AffixSpecsCount {
      get { return affixSpecs_.Count; }
    }
    public global::Gazillion.NetStructAffixSpec GetAffixSpecs(int index) {
      return affixSpecs_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemProtoRef) return false;
        if (!hasItemLevel) return false;
        if (!hasRarityProtoRef) return false;
        if (!hasSeed) return false;
        foreach (global::Gazillion.NetStructAffixSpec element in AffixSpecsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netStructItemSpecFieldNames;
      if (hasItemProtoRef) {
        output.WriteUInt64(1, field_names[3], ItemProtoRef);
      }
      if (hasItemLevel) {
        output.WriteUInt32(2, field_names[2], ItemLevel);
      }
      if (hasRarityProtoRef) {
        output.WriteUInt64(3, field_names[4], RarityProtoRef);
      }
      if (hasSeed) {
        output.WriteUInt32(4, field_names[5], Seed);
      }
      if (hasCreditsAmount) {
        output.WriteUInt32(5, field_names[1], CreditsAmount);
      }
      if (affixSpecs_.Count > 0) {
        output.WriteMessageArray(6, field_names[0], affixSpecs_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemProtoRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemProtoRef);
      }
      if (hasItemLevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ItemLevel);
      }
      if (hasRarityProtoRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, RarityProtoRef);
      }
      if (hasSeed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Seed);
      }
      if (hasCreditsAmount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, CreditsAmount);
      }
      foreach (global::Gazillion.NetStructAffixSpec element in AffixSpecsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetStructItemSpec ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructItemSpec ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructItemSpec ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructItemSpec ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructItemSpec ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructItemSpec ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetStructItemSpec ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetStructItemSpec ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetStructItemSpec ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructItemSpec ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetStructItemSpec MakeReadOnly() {
      affixSpecs_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetStructItemSpec prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetStructItemSpec, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetStructItemSpec cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetStructItemSpec result;
      
      private NetStructItemSpec PrepareBuilder() {
        if (resultIsReadOnly) {
          NetStructItemSpec original = result;
          result = new NetStructItemSpec();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetStructItemSpec MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetStructItemSpec.Descriptor; }
      }
      
      public override NetStructItemSpec DefaultInstanceForType {
        get { return global::Gazillion.NetStructItemSpec.DefaultInstance; }
      }
      
      public override NetStructItemSpec BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetStructItemSpec) {
          return MergeFrom((NetStructItemSpec) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetStructItemSpec other) {
        if (other == global::Gazillion.NetStructItemSpec.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemProtoRef) {
          ItemProtoRef = other.ItemProtoRef;
        }
        if (other.HasItemLevel) {
          ItemLevel = other.ItemLevel;
        }
        if (other.HasRarityProtoRef) {
          RarityProtoRef = other.RarityProtoRef;
        }
        if (other.HasSeed) {
          Seed = other.Seed;
        }
        if (other.HasCreditsAmount) {
          CreditsAmount = other.CreditsAmount;
        }
        if (other.affixSpecs_.Count != 0) {
          result.affixSpecs_.Add(other.affixSpecs_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netStructItemSpecFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netStructItemSpecFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemProtoRef = input.ReadUInt64(ref result.itemProtoRef_);
              break;
            }
            case 16: {
              result.hasItemLevel = input.ReadUInt32(ref result.itemLevel_);
              break;
            }
            case 24: {
              result.hasRarityProtoRef = input.ReadUInt64(ref result.rarityProtoRef_);
              break;
            }
            case 32: {
              result.hasSeed = input.ReadUInt32(ref result.seed_);
              break;
            }
            case 40: {
              result.hasCreditsAmount = input.ReadUInt32(ref result.creditsAmount_);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.affixSpecs_, global::Gazillion.NetStructAffixSpec.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemProtoRef {
        get { return result.hasItemProtoRef; }
      }
      public ulong ItemProtoRef {
        get { return result.ItemProtoRef; }
        set { SetItemProtoRef(value); }
      }
      public Builder SetItemProtoRef(ulong value) {
        PrepareBuilder();
        result.hasItemProtoRef = true;
        result.itemProtoRef_ = value;
        return this;
      }
      public Builder ClearItemProtoRef() {
        PrepareBuilder();
        result.hasItemProtoRef = false;
        result.itemProtoRef_ = 0UL;
        return this;
      }
      
      public bool HasItemLevel {
        get { return result.hasItemLevel; }
      }
      public uint ItemLevel {
        get { return result.ItemLevel; }
        set { SetItemLevel(value); }
      }
      public Builder SetItemLevel(uint value) {
        PrepareBuilder();
        result.hasItemLevel = true;
        result.itemLevel_ = value;
        return this;
      }
      public Builder ClearItemLevel() {
        PrepareBuilder();
        result.hasItemLevel = false;
        result.itemLevel_ = 0;
        return this;
      }
      
      public bool HasRarityProtoRef {
        get { return result.hasRarityProtoRef; }
      }
      public ulong RarityProtoRef {
        get { return result.RarityProtoRef; }
        set { SetRarityProtoRef(value); }
      }
      public Builder SetRarityProtoRef(ulong value) {
        PrepareBuilder();
        result.hasRarityProtoRef = true;
        result.rarityProtoRef_ = value;
        return this;
      }
      public Builder ClearRarityProtoRef() {
        PrepareBuilder();
        result.hasRarityProtoRef = false;
        result.rarityProtoRef_ = 0UL;
        return this;
      }
      
      public bool HasSeed {
        get { return result.hasSeed; }
      }
      public uint Seed {
        get { return result.Seed; }
        set { SetSeed(value); }
      }
      public Builder SetSeed(uint value) {
        PrepareBuilder();
        result.hasSeed = true;
        result.seed_ = value;
        return this;
      }
      public Builder ClearSeed() {
        PrepareBuilder();
        result.hasSeed = false;
        result.seed_ = 0;
        return this;
      }
      
      public bool HasCreditsAmount {
        get { return result.hasCreditsAmount; }
      }
      public uint CreditsAmount {
        get { return result.CreditsAmount; }
        set { SetCreditsAmount(value); }
      }
      public Builder SetCreditsAmount(uint value) {
        PrepareBuilder();
        result.hasCreditsAmount = true;
        result.creditsAmount_ = value;
        return this;
      }
      public Builder ClearCreditsAmount() {
        PrepareBuilder();
        result.hasCreditsAmount = false;
        result.creditsAmount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.NetStructAffixSpec> AffixSpecsList {
        get { return PrepareBuilder().affixSpecs_; }
      }
      public int AffixSpecsCount {
        get { return result.AffixSpecsCount; }
      }
      public global::Gazillion.NetStructAffixSpec GetAffixSpecs(int index) {
        return result.GetAffixSpecs(index);
      }
      public Builder SetAffixSpecs(int index, global::Gazillion.NetStructAffixSpec value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.affixSpecs_[index] = value;
        return this;
      }
      public Builder SetAffixSpecs(int index, global::Gazillion.NetStructAffixSpec.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.affixSpecs_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAffixSpecs(global::Gazillion.NetStructAffixSpec value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.affixSpecs_.Add(value);
        return this;
      }
      public Builder AddAffixSpecs(global::Gazillion.NetStructAffixSpec.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.affixSpecs_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAffixSpecs(scg::IEnumerable<global::Gazillion.NetStructAffixSpec> values) {
        PrepareBuilder();
        result.affixSpecs_.Add(values);
        return this;
      }
      public Builder ClearAffixSpecs() {
        PrepareBuilder();
        result.affixSpecs_.Clear();
        return this;
      }
    }
    static NetStructItemSpec() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetStructItemSpecEntry : pb::GeneratedMessage<NetStructItemSpecEntry, NetStructItemSpecEntry.Builder> {
    private NetStructItemSpecEntry() { }
    private static readonly NetStructItemSpecEntry defaultInstance = new NetStructItemSpecEntry().MakeReadOnly();
    private static readonly string[] _netStructItemSpecEntryFieldNames = new string[] { "itemSpec", "key" };
    private static readonly uint[] _netStructItemSpecEntryFieldTags = new uint[] { 18, 8 };
    public static NetStructItemSpecEntry DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetStructItemSpecEntry DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetStructItemSpecEntry ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructItemSpecEntry__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetStructItemSpecEntry, NetStructItemSpecEntry.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructItemSpecEntry__FieldAccessorTable; }
    }
    
    public const int KeyFieldNumber = 1;
    private bool hasKey;
    private ulong key_;
    public bool HasKey {
      get { return hasKey; }
    }
    public ulong Key {
      get { return key_; }
    }
    
    public const int ItemSpecFieldNumber = 2;
    private bool hasItemSpec;
    private global::Gazillion.NetStructItemSpec itemSpec_;
    public bool HasItemSpec {
      get { return hasItemSpec; }
    }
    public global::Gazillion.NetStructItemSpec ItemSpec {
      get { return itemSpec_ ?? global::Gazillion.NetStructItemSpec.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKey) return false;
        if (!hasItemSpec) return false;
        if (!ItemSpec.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netStructItemSpecEntryFieldNames;
      if (hasKey) {
        output.WriteUInt64(1, field_names[1], Key);
      }
      if (hasItemSpec) {
        output.WriteMessage(2, field_names[0], ItemSpec);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasKey) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Key);
      }
      if (hasItemSpec) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, ItemSpec);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetStructItemSpecEntry ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructItemSpecEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructItemSpecEntry ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructItemSpecEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructItemSpecEntry ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructItemSpecEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetStructItemSpecEntry ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetStructItemSpecEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetStructItemSpecEntry ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructItemSpecEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetStructItemSpecEntry MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetStructItemSpecEntry prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetStructItemSpecEntry, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetStructItemSpecEntry cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetStructItemSpecEntry result;
      
      private NetStructItemSpecEntry PrepareBuilder() {
        if (resultIsReadOnly) {
          NetStructItemSpecEntry original = result;
          result = new NetStructItemSpecEntry();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetStructItemSpecEntry MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetStructItemSpecEntry.Descriptor; }
      }
      
      public override NetStructItemSpecEntry DefaultInstanceForType {
        get { return global::Gazillion.NetStructItemSpecEntry.DefaultInstance; }
      }
      
      public override NetStructItemSpecEntry BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetStructItemSpecEntry) {
          return MergeFrom((NetStructItemSpecEntry) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetStructItemSpecEntry other) {
        if (other == global::Gazillion.NetStructItemSpecEntry.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasItemSpec) {
          MergeItemSpec(other.ItemSpec);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netStructItemSpecEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netStructItemSpecEntryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasKey = input.ReadUInt64(ref result.key_);
              break;
            }
            case 18: {
              global::Gazillion.NetStructItemSpec.Builder subBuilder = global::Gazillion.NetStructItemSpec.CreateBuilder();
              if (result.hasItemSpec) {
                subBuilder.MergeFrom(ItemSpec);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ItemSpec = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public ulong Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(ulong value) {
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = 0UL;
        return this;
      }
      
      public bool HasItemSpec {
       get { return result.hasItemSpec; }
      }
      public global::Gazillion.NetStructItemSpec ItemSpec {
        get { return result.ItemSpec; }
        set { SetItemSpec(value); }
      }
      public Builder SetItemSpec(global::Gazillion.NetStructItemSpec value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItemSpec = true;
        result.itemSpec_ = value;
        return this;
      }
      public Builder SetItemSpec(global::Gazillion.NetStructItemSpec.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItemSpec = true;
        result.itemSpec_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItemSpec(global::Gazillion.NetStructItemSpec value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItemSpec &&
            result.itemSpec_ != global::Gazillion.NetStructItemSpec.DefaultInstance) {
            result.itemSpec_ = global::Gazillion.NetStructItemSpec.CreateBuilder(result.itemSpec_).MergeFrom(value).BuildPartial();
        } else {
          result.itemSpec_ = value;
        }
        result.hasItemSpec = true;
        return this;
      }
      public Builder ClearItemSpec() {
        PrepareBuilder();
        result.hasItemSpec = false;
        result.itemSpec_ = null;
        return this;
      }
    }
    static NetStructItemSpecEntry() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMissionUpdate : pb::GeneratedMessage<NetMessageMissionUpdate, NetMessageMissionUpdate.Builder> {
    private NetMessageMissionUpdate() { }
    private static readonly NetMessageMissionUpdate defaultInstance = new NetMessageMissionUpdate().MakeReadOnly();
    private static readonly string[] _netMessageMissionUpdateFieldNames = new string[] { "create", "creditsAwarded", "enduranceBonusAwarded", "healthBonusAwarded", "items", "missionPrototypeId", "missionState", "missionStateExpireTime", "participants", "powerPointsAwarded", "suppressNotification", "xpAwarded" };
    private static readonly uint[] _netMessageMissionUpdateFieldTags = new uint[] { 88, 40, 64, 56, 82, 8, 16, 24, 72, 48, 96, 32 };
    public static NetMessageMissionUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMissionUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMissionUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMissionUpdate, NetMessageMissionUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionUpdate__FieldAccessorTable; }
    }
    
    public const int MissionPrototypeIdFieldNumber = 1;
    private bool hasMissionPrototypeId;
    private ulong missionPrototypeId_;
    public bool HasMissionPrototypeId {
      get { return hasMissionPrototypeId; }
    }
    public ulong MissionPrototypeId {
      get { return missionPrototypeId_; }
    }
    
    public const int MissionStateFieldNumber = 2;
    private bool hasMissionState;
    private uint missionState_;
    public bool HasMissionState {
      get { return hasMissionState; }
    }
    public uint MissionState {
      get { return missionState_; }
    }
    
    public const int MissionStateExpireTimeFieldNumber = 3;
    private bool hasMissionStateExpireTime;
    private ulong missionStateExpireTime_;
    public bool HasMissionStateExpireTime {
      get { return hasMissionStateExpireTime; }
    }
    public ulong MissionStateExpireTime {
      get { return missionStateExpireTime_; }
    }
    
    public const int XpAwardedFieldNumber = 4;
    private bool hasXpAwarded;
    private uint xpAwarded_;
    public bool HasXpAwarded {
      get { return hasXpAwarded; }
    }
    public uint XpAwarded {
      get { return xpAwarded_; }
    }
    
    public const int CreditsAwardedFieldNumber = 5;
    private bool hasCreditsAwarded;
    private uint creditsAwarded_;
    public bool HasCreditsAwarded {
      get { return hasCreditsAwarded; }
    }
    public uint CreditsAwarded {
      get { return creditsAwarded_; }
    }
    
    public const int PowerPointsAwardedFieldNumber = 6;
    private bool hasPowerPointsAwarded;
    private uint powerPointsAwarded_;
    public bool HasPowerPointsAwarded {
      get { return hasPowerPointsAwarded; }
    }
    public uint PowerPointsAwarded {
      get { return powerPointsAwarded_; }
    }
    
    public const int HealthBonusAwardedFieldNumber = 7;
    private bool hasHealthBonusAwarded;
    private uint healthBonusAwarded_;
    public bool HasHealthBonusAwarded {
      get { return hasHealthBonusAwarded; }
    }
    public uint HealthBonusAwarded {
      get { return healthBonusAwarded_; }
    }
    
    public const int EnduranceBonusAwardedFieldNumber = 8;
    private bool hasEnduranceBonusAwarded;
    private uint enduranceBonusAwarded_;
    public bool HasEnduranceBonusAwarded {
      get { return hasEnduranceBonusAwarded; }
    }
    public uint EnduranceBonusAwarded {
      get { return enduranceBonusAwarded_; }
    }
    
    public const int ParticipantsFieldNumber = 9;
    private pbc::PopsicleList<ulong> participants_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> ParticipantsList {
      get { return pbc::Lists.AsReadOnly(participants_); }
    }
    public int ParticipantsCount {
      get { return participants_.Count; }
    }
    public ulong GetParticipants(int index) {
      return participants_[index];
    }
    
    public const int ItemsFieldNumber = 10;
    private pbc::PopsicleList<global::Gazillion.NetStructItemSpecEntry> items_ = new pbc::PopsicleList<global::Gazillion.NetStructItemSpecEntry>();
    public scg::IList<global::Gazillion.NetStructItemSpecEntry> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::Gazillion.NetStructItemSpecEntry GetItems(int index) {
      return items_[index];
    }
    
    public const int CreateFieldNumber = 11;
    private bool hasCreate;
    private bool create_;
    public bool HasCreate {
      get { return hasCreate; }
    }
    public bool Create {
      get { return create_; }
    }
    
    public const int SuppressNotificationFieldNumber = 12;
    private bool hasSuppressNotification;
    private bool suppressNotification_;
    public bool HasSuppressNotification {
      get { return hasSuppressNotification; }
    }
    public bool SuppressNotification {
      get { return suppressNotification_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMissionPrototypeId) return false;
        foreach (global::Gazillion.NetStructItemSpecEntry element in ItemsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMissionUpdateFieldNames;
      if (hasMissionPrototypeId) {
        output.WriteUInt64(1, field_names[5], MissionPrototypeId);
      }
      if (hasMissionState) {
        output.WriteUInt32(2, field_names[6], MissionState);
      }
      if (hasMissionStateExpireTime) {
        output.WriteUInt64(3, field_names[7], MissionStateExpireTime);
      }
      if (hasXpAwarded) {
        output.WriteUInt32(4, field_names[11], XpAwarded);
      }
      if (hasCreditsAwarded) {
        output.WriteUInt32(5, field_names[1], CreditsAwarded);
      }
      if (hasPowerPointsAwarded) {
        output.WriteUInt32(6, field_names[9], PowerPointsAwarded);
      }
      if (hasHealthBonusAwarded) {
        output.WriteUInt32(7, field_names[3], HealthBonusAwarded);
      }
      if (hasEnduranceBonusAwarded) {
        output.WriteUInt32(8, field_names[2], EnduranceBonusAwarded);
      }
      if (participants_.Count > 0) {
        output.WriteUInt64Array(9, field_names[8], participants_);
      }
      if (items_.Count > 0) {
        output.WriteMessageArray(10, field_names[4], items_);
      }
      if (hasCreate) {
        output.WriteBool(11, field_names[0], Create);
      }
      if (hasSuppressNotification) {
        output.WriteBool(12, field_names[10], SuppressNotification);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMissionPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MissionPrototypeId);
      }
      if (hasMissionState) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, MissionState);
      }
      if (hasMissionStateExpireTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, MissionStateExpireTime);
      }
      if (hasXpAwarded) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, XpAwarded);
      }
      if (hasCreditsAwarded) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, CreditsAwarded);
      }
      if (hasPowerPointsAwarded) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, PowerPointsAwarded);
      }
      if (hasHealthBonusAwarded) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, HealthBonusAwarded);
      }
      if (hasEnduranceBonusAwarded) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, EnduranceBonusAwarded);
      }
      {
        int dataSize = 0;
        foreach (ulong element in ParticipantsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * participants_.Count;
      }
      foreach (global::Gazillion.NetStructItemSpecEntry element in ItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, element);
      }
      if (hasCreate) {
        size += pb::CodedOutputStream.ComputeBoolSize(11, Create);
      }
      if (hasSuppressNotification) {
        size += pb::CodedOutputStream.ComputeBoolSize(12, SuppressNotification);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMissionUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMissionUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMissionUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMissionUpdate MakeReadOnly() {
      participants_.MakeReadOnly();
      items_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMissionUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMissionUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMissionUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMissionUpdate result;
      
      private NetMessageMissionUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMissionUpdate original = result;
          result = new NetMessageMissionUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMissionUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMissionUpdate.Descriptor; }
      }
      
      public override NetMessageMissionUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMissionUpdate.DefaultInstance; }
      }
      
      public override NetMessageMissionUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMissionUpdate) {
          return MergeFrom((NetMessageMissionUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMissionUpdate other) {
        if (other == global::Gazillion.NetMessageMissionUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMissionPrototypeId) {
          MissionPrototypeId = other.MissionPrototypeId;
        }
        if (other.HasMissionState) {
          MissionState = other.MissionState;
        }
        if (other.HasMissionStateExpireTime) {
          MissionStateExpireTime = other.MissionStateExpireTime;
        }
        if (other.HasXpAwarded) {
          XpAwarded = other.XpAwarded;
        }
        if (other.HasCreditsAwarded) {
          CreditsAwarded = other.CreditsAwarded;
        }
        if (other.HasPowerPointsAwarded) {
          PowerPointsAwarded = other.PowerPointsAwarded;
        }
        if (other.HasHealthBonusAwarded) {
          HealthBonusAwarded = other.HealthBonusAwarded;
        }
        if (other.HasEnduranceBonusAwarded) {
          EnduranceBonusAwarded = other.EnduranceBonusAwarded;
        }
        if (other.participants_.Count != 0) {
          result.participants_.Add(other.participants_);
        }
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        if (other.HasCreate) {
          Create = other.Create;
        }
        if (other.HasSuppressNotification) {
          SuppressNotification = other.SuppressNotification;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMissionUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMissionUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMissionPrototypeId = input.ReadUInt64(ref result.missionPrototypeId_);
              break;
            }
            case 16: {
              result.hasMissionState = input.ReadUInt32(ref result.missionState_);
              break;
            }
            case 24: {
              result.hasMissionStateExpireTime = input.ReadUInt64(ref result.missionStateExpireTime_);
              break;
            }
            case 32: {
              result.hasXpAwarded = input.ReadUInt32(ref result.xpAwarded_);
              break;
            }
            case 40: {
              result.hasCreditsAwarded = input.ReadUInt32(ref result.creditsAwarded_);
              break;
            }
            case 48: {
              result.hasPowerPointsAwarded = input.ReadUInt32(ref result.powerPointsAwarded_);
              break;
            }
            case 56: {
              result.hasHealthBonusAwarded = input.ReadUInt32(ref result.healthBonusAwarded_);
              break;
            }
            case 64: {
              result.hasEnduranceBonusAwarded = input.ReadUInt32(ref result.enduranceBonusAwarded_);
              break;
            }
            case 74:
            case 72: {
              input.ReadUInt64Array(tag, field_name, result.participants_);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.items_, global::Gazillion.NetStructItemSpecEntry.DefaultInstance, extensionRegistry);
              break;
            }
            case 88: {
              result.hasCreate = input.ReadBool(ref result.create_);
              break;
            }
            case 96: {
              result.hasSuppressNotification = input.ReadBool(ref result.suppressNotification_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMissionPrototypeId {
        get { return result.hasMissionPrototypeId; }
      }
      public ulong MissionPrototypeId {
        get { return result.MissionPrototypeId; }
        set { SetMissionPrototypeId(value); }
      }
      public Builder SetMissionPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasMissionPrototypeId = true;
        result.missionPrototypeId_ = value;
        return this;
      }
      public Builder ClearMissionPrototypeId() {
        PrepareBuilder();
        result.hasMissionPrototypeId = false;
        result.missionPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasMissionState {
        get { return result.hasMissionState; }
      }
      public uint MissionState {
        get { return result.MissionState; }
        set { SetMissionState(value); }
      }
      public Builder SetMissionState(uint value) {
        PrepareBuilder();
        result.hasMissionState = true;
        result.missionState_ = value;
        return this;
      }
      public Builder ClearMissionState() {
        PrepareBuilder();
        result.hasMissionState = false;
        result.missionState_ = 0;
        return this;
      }
      
      public bool HasMissionStateExpireTime {
        get { return result.hasMissionStateExpireTime; }
      }
      public ulong MissionStateExpireTime {
        get { return result.MissionStateExpireTime; }
        set { SetMissionStateExpireTime(value); }
      }
      public Builder SetMissionStateExpireTime(ulong value) {
        PrepareBuilder();
        result.hasMissionStateExpireTime = true;
        result.missionStateExpireTime_ = value;
        return this;
      }
      public Builder ClearMissionStateExpireTime() {
        PrepareBuilder();
        result.hasMissionStateExpireTime = false;
        result.missionStateExpireTime_ = 0UL;
        return this;
      }
      
      public bool HasXpAwarded {
        get { return result.hasXpAwarded; }
      }
      public uint XpAwarded {
        get { return result.XpAwarded; }
        set { SetXpAwarded(value); }
      }
      public Builder SetXpAwarded(uint value) {
        PrepareBuilder();
        result.hasXpAwarded = true;
        result.xpAwarded_ = value;
        return this;
      }
      public Builder ClearXpAwarded() {
        PrepareBuilder();
        result.hasXpAwarded = false;
        result.xpAwarded_ = 0;
        return this;
      }
      
      public bool HasCreditsAwarded {
        get { return result.hasCreditsAwarded; }
      }
      public uint CreditsAwarded {
        get { return result.CreditsAwarded; }
        set { SetCreditsAwarded(value); }
      }
      public Builder SetCreditsAwarded(uint value) {
        PrepareBuilder();
        result.hasCreditsAwarded = true;
        result.creditsAwarded_ = value;
        return this;
      }
      public Builder ClearCreditsAwarded() {
        PrepareBuilder();
        result.hasCreditsAwarded = false;
        result.creditsAwarded_ = 0;
        return this;
      }
      
      public bool HasPowerPointsAwarded {
        get { return result.hasPowerPointsAwarded; }
      }
      public uint PowerPointsAwarded {
        get { return result.PowerPointsAwarded; }
        set { SetPowerPointsAwarded(value); }
      }
      public Builder SetPowerPointsAwarded(uint value) {
        PrepareBuilder();
        result.hasPowerPointsAwarded = true;
        result.powerPointsAwarded_ = value;
        return this;
      }
      public Builder ClearPowerPointsAwarded() {
        PrepareBuilder();
        result.hasPowerPointsAwarded = false;
        result.powerPointsAwarded_ = 0;
        return this;
      }
      
      public bool HasHealthBonusAwarded {
        get { return result.hasHealthBonusAwarded; }
      }
      public uint HealthBonusAwarded {
        get { return result.HealthBonusAwarded; }
        set { SetHealthBonusAwarded(value); }
      }
      public Builder SetHealthBonusAwarded(uint value) {
        PrepareBuilder();
        result.hasHealthBonusAwarded = true;
        result.healthBonusAwarded_ = value;
        return this;
      }
      public Builder ClearHealthBonusAwarded() {
        PrepareBuilder();
        result.hasHealthBonusAwarded = false;
        result.healthBonusAwarded_ = 0;
        return this;
      }
      
      public bool HasEnduranceBonusAwarded {
        get { return result.hasEnduranceBonusAwarded; }
      }
      public uint EnduranceBonusAwarded {
        get { return result.EnduranceBonusAwarded; }
        set { SetEnduranceBonusAwarded(value); }
      }
      public Builder SetEnduranceBonusAwarded(uint value) {
        PrepareBuilder();
        result.hasEnduranceBonusAwarded = true;
        result.enduranceBonusAwarded_ = value;
        return this;
      }
      public Builder ClearEnduranceBonusAwarded() {
        PrepareBuilder();
        result.hasEnduranceBonusAwarded = false;
        result.enduranceBonusAwarded_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> ParticipantsList {
        get { return PrepareBuilder().participants_; }
      }
      public int ParticipantsCount {
        get { return result.ParticipantsCount; }
      }
      public ulong GetParticipants(int index) {
        return result.GetParticipants(index);
      }
      public Builder SetParticipants(int index, ulong value) {
        PrepareBuilder();
        result.participants_[index] = value;
        return this;
      }
      public Builder AddParticipants(ulong value) {
        PrepareBuilder();
        result.participants_.Add(value);
        return this;
      }
      public Builder AddRangeParticipants(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.participants_.Add(values);
        return this;
      }
      public Builder ClearParticipants() {
        PrepareBuilder();
        result.participants_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.NetStructItemSpecEntry> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::Gazillion.NetStructItemSpecEntry GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::Gazillion.NetStructItemSpecEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::Gazillion.NetStructItemSpecEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::Gazillion.NetStructItemSpecEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::Gazillion.NetStructItemSpecEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::Gazillion.NetStructItemSpecEntry> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
      
      public bool HasCreate {
        get { return result.hasCreate; }
      }
      public bool Create {
        get { return result.Create; }
        set { SetCreate(value); }
      }
      public Builder SetCreate(bool value) {
        PrepareBuilder();
        result.hasCreate = true;
        result.create_ = value;
        return this;
      }
      public Builder ClearCreate() {
        PrepareBuilder();
        result.hasCreate = false;
        result.create_ = false;
        return this;
      }
      
      public bool HasSuppressNotification {
        get { return result.hasSuppressNotification; }
      }
      public bool SuppressNotification {
        get { return result.SuppressNotification; }
        set { SetSuppressNotification(value); }
      }
      public Builder SetSuppressNotification(bool value) {
        PrepareBuilder();
        result.hasSuppressNotification = true;
        result.suppressNotification_ = value;
        return this;
      }
      public Builder ClearSuppressNotification() {
        PrepareBuilder();
        result.hasSuppressNotification = false;
        result.suppressNotification_ = false;
        return this;
      }
    }
    static NetMessageMissionUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMissionObjectiveUpdate : pb::GeneratedMessage<NetMessageMissionObjectiveUpdate, NetMessageMissionObjectiveUpdate.Builder> {
    private NetMessageMissionObjectiveUpdate() { }
    private static readonly NetMessageMissionObjectiveUpdate defaultInstance = new NetMessageMissionObjectiveUpdate().MakeReadOnly();
    private static readonly string[] _netMessageMissionObjectiveUpdateFieldNames = new string[] { "completedCount", "create", "interactedEntities", "missionPrototypeId", "objectiveIndex", "objectiveState", "objectiveStateExpireTime", "suppressNotification", "totalCount" };
    private static readonly uint[] _netMessageMissionObjectiveUpdateFieldTags = new uint[] { 40, 64, 56, 8, 16, 24, 32, 72, 48 };
    public static NetMessageMissionObjectiveUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMissionObjectiveUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMissionObjectiveUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionObjectiveUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMissionObjectiveUpdate, NetMessageMissionObjectiveUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionObjectiveUpdate__FieldAccessorTable; }
    }
    
    public const int MissionPrototypeIdFieldNumber = 1;
    private bool hasMissionPrototypeId;
    private ulong missionPrototypeId_;
    public bool HasMissionPrototypeId {
      get { return hasMissionPrototypeId; }
    }
    public ulong MissionPrototypeId {
      get { return missionPrototypeId_; }
    }
    
    public const int ObjectiveIndexFieldNumber = 2;
    private bool hasObjectiveIndex;
    private uint objectiveIndex_;
    public bool HasObjectiveIndex {
      get { return hasObjectiveIndex; }
    }
    public uint ObjectiveIndex {
      get { return objectiveIndex_; }
    }
    
    public const int ObjectiveStateFieldNumber = 3;
    private bool hasObjectiveState;
    private uint objectiveState_;
    public bool HasObjectiveState {
      get { return hasObjectiveState; }
    }
    public uint ObjectiveState {
      get { return objectiveState_; }
    }
    
    public const int ObjectiveStateExpireTimeFieldNumber = 4;
    private bool hasObjectiveStateExpireTime;
    private ulong objectiveStateExpireTime_;
    public bool HasObjectiveStateExpireTime {
      get { return hasObjectiveStateExpireTime; }
    }
    public ulong ObjectiveStateExpireTime {
      get { return objectiveStateExpireTime_; }
    }
    
    public const int CompletedCountFieldNumber = 5;
    private bool hasCompletedCount;
    private uint completedCount_;
    public bool HasCompletedCount {
      get { return hasCompletedCount; }
    }
    public uint CompletedCount {
      get { return completedCount_; }
    }
    
    public const int TotalCountFieldNumber = 6;
    private bool hasTotalCount;
    private uint totalCount_;
    public bool HasTotalCount {
      get { return hasTotalCount; }
    }
    public uint TotalCount {
      get { return totalCount_; }
    }
    
    public const int InteractedEntitiesFieldNumber = 7;
    private pbc::PopsicleList<ulong> interactedEntities_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> InteractedEntitiesList {
      get { return pbc::Lists.AsReadOnly(interactedEntities_); }
    }
    public int InteractedEntitiesCount {
      get { return interactedEntities_.Count; }
    }
    public ulong GetInteractedEntities(int index) {
      return interactedEntities_[index];
    }
    
    public const int CreateFieldNumber = 8;
    private bool hasCreate;
    private bool create_;
    public bool HasCreate {
      get { return hasCreate; }
    }
    public bool Create {
      get { return create_; }
    }
    
    public const int SuppressNotificationFieldNumber = 9;
    private bool hasSuppressNotification;
    private bool suppressNotification_;
    public bool HasSuppressNotification {
      get { return hasSuppressNotification; }
    }
    public bool SuppressNotification {
      get { return suppressNotification_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMissionPrototypeId) return false;
        if (!hasObjectiveIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMissionObjectiveUpdateFieldNames;
      if (hasMissionPrototypeId) {
        output.WriteUInt64(1, field_names[3], MissionPrototypeId);
      }
      if (hasObjectiveIndex) {
        output.WriteUInt32(2, field_names[4], ObjectiveIndex);
      }
      if (hasObjectiveState) {
        output.WriteUInt32(3, field_names[5], ObjectiveState);
      }
      if (hasObjectiveStateExpireTime) {
        output.WriteUInt64(4, field_names[6], ObjectiveStateExpireTime);
      }
      if (hasCompletedCount) {
        output.WriteUInt32(5, field_names[0], CompletedCount);
      }
      if (hasTotalCount) {
        output.WriteUInt32(6, field_names[8], TotalCount);
      }
      if (interactedEntities_.Count > 0) {
        output.WriteUInt64Array(7, field_names[2], interactedEntities_);
      }
      if (hasCreate) {
        output.WriteBool(8, field_names[1], Create);
      }
      if (hasSuppressNotification) {
        output.WriteBool(9, field_names[7], SuppressNotification);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMissionPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MissionPrototypeId);
      }
      if (hasObjectiveIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ObjectiveIndex);
      }
      if (hasObjectiveState) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, ObjectiveState);
      }
      if (hasObjectiveStateExpireTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, ObjectiveStateExpireTime);
      }
      if (hasCompletedCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, CompletedCount);
      }
      if (hasTotalCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, TotalCount);
      }
      {
        int dataSize = 0;
        foreach (ulong element in InteractedEntitiesList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * interactedEntities_.Count;
      }
      if (hasCreate) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, Create);
      }
      if (hasSuppressNotification) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, SuppressNotification);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMissionObjectiveUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionObjectiveUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionObjectiveUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionObjectiveUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionObjectiveUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionObjectiveUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionObjectiveUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMissionObjectiveUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMissionObjectiveUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionObjectiveUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMissionObjectiveUpdate MakeReadOnly() {
      interactedEntities_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMissionObjectiveUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMissionObjectiveUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMissionObjectiveUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMissionObjectiveUpdate result;
      
      private NetMessageMissionObjectiveUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMissionObjectiveUpdate original = result;
          result = new NetMessageMissionObjectiveUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMissionObjectiveUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMissionObjectiveUpdate.Descriptor; }
      }
      
      public override NetMessageMissionObjectiveUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMissionObjectiveUpdate.DefaultInstance; }
      }
      
      public override NetMessageMissionObjectiveUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMissionObjectiveUpdate) {
          return MergeFrom((NetMessageMissionObjectiveUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMissionObjectiveUpdate other) {
        if (other == global::Gazillion.NetMessageMissionObjectiveUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMissionPrototypeId) {
          MissionPrototypeId = other.MissionPrototypeId;
        }
        if (other.HasObjectiveIndex) {
          ObjectiveIndex = other.ObjectiveIndex;
        }
        if (other.HasObjectiveState) {
          ObjectiveState = other.ObjectiveState;
        }
        if (other.HasObjectiveStateExpireTime) {
          ObjectiveStateExpireTime = other.ObjectiveStateExpireTime;
        }
        if (other.HasCompletedCount) {
          CompletedCount = other.CompletedCount;
        }
        if (other.HasTotalCount) {
          TotalCount = other.TotalCount;
        }
        if (other.interactedEntities_.Count != 0) {
          result.interactedEntities_.Add(other.interactedEntities_);
        }
        if (other.HasCreate) {
          Create = other.Create;
        }
        if (other.HasSuppressNotification) {
          SuppressNotification = other.SuppressNotification;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMissionObjectiveUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMissionObjectiveUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMissionPrototypeId = input.ReadUInt64(ref result.missionPrototypeId_);
              break;
            }
            case 16: {
              result.hasObjectiveIndex = input.ReadUInt32(ref result.objectiveIndex_);
              break;
            }
            case 24: {
              result.hasObjectiveState = input.ReadUInt32(ref result.objectiveState_);
              break;
            }
            case 32: {
              result.hasObjectiveStateExpireTime = input.ReadUInt64(ref result.objectiveStateExpireTime_);
              break;
            }
            case 40: {
              result.hasCompletedCount = input.ReadUInt32(ref result.completedCount_);
              break;
            }
            case 48: {
              result.hasTotalCount = input.ReadUInt32(ref result.totalCount_);
              break;
            }
            case 58:
            case 56: {
              input.ReadUInt64Array(tag, field_name, result.interactedEntities_);
              break;
            }
            case 64: {
              result.hasCreate = input.ReadBool(ref result.create_);
              break;
            }
            case 72: {
              result.hasSuppressNotification = input.ReadBool(ref result.suppressNotification_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMissionPrototypeId {
        get { return result.hasMissionPrototypeId; }
      }
      public ulong MissionPrototypeId {
        get { return result.MissionPrototypeId; }
        set { SetMissionPrototypeId(value); }
      }
      public Builder SetMissionPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasMissionPrototypeId = true;
        result.missionPrototypeId_ = value;
        return this;
      }
      public Builder ClearMissionPrototypeId() {
        PrepareBuilder();
        result.hasMissionPrototypeId = false;
        result.missionPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasObjectiveIndex {
        get { return result.hasObjectiveIndex; }
      }
      public uint ObjectiveIndex {
        get { return result.ObjectiveIndex; }
        set { SetObjectiveIndex(value); }
      }
      public Builder SetObjectiveIndex(uint value) {
        PrepareBuilder();
        result.hasObjectiveIndex = true;
        result.objectiveIndex_ = value;
        return this;
      }
      public Builder ClearObjectiveIndex() {
        PrepareBuilder();
        result.hasObjectiveIndex = false;
        result.objectiveIndex_ = 0;
        return this;
      }
      
      public bool HasObjectiveState {
        get { return result.hasObjectiveState; }
      }
      public uint ObjectiveState {
        get { return result.ObjectiveState; }
        set { SetObjectiveState(value); }
      }
      public Builder SetObjectiveState(uint value) {
        PrepareBuilder();
        result.hasObjectiveState = true;
        result.objectiveState_ = value;
        return this;
      }
      public Builder ClearObjectiveState() {
        PrepareBuilder();
        result.hasObjectiveState = false;
        result.objectiveState_ = 0;
        return this;
      }
      
      public bool HasObjectiveStateExpireTime {
        get { return result.hasObjectiveStateExpireTime; }
      }
      public ulong ObjectiveStateExpireTime {
        get { return result.ObjectiveStateExpireTime; }
        set { SetObjectiveStateExpireTime(value); }
      }
      public Builder SetObjectiveStateExpireTime(ulong value) {
        PrepareBuilder();
        result.hasObjectiveStateExpireTime = true;
        result.objectiveStateExpireTime_ = value;
        return this;
      }
      public Builder ClearObjectiveStateExpireTime() {
        PrepareBuilder();
        result.hasObjectiveStateExpireTime = false;
        result.objectiveStateExpireTime_ = 0UL;
        return this;
      }
      
      public bool HasCompletedCount {
        get { return result.hasCompletedCount; }
      }
      public uint CompletedCount {
        get { return result.CompletedCount; }
        set { SetCompletedCount(value); }
      }
      public Builder SetCompletedCount(uint value) {
        PrepareBuilder();
        result.hasCompletedCount = true;
        result.completedCount_ = value;
        return this;
      }
      public Builder ClearCompletedCount() {
        PrepareBuilder();
        result.hasCompletedCount = false;
        result.completedCount_ = 0;
        return this;
      }
      
      public bool HasTotalCount {
        get { return result.hasTotalCount; }
      }
      public uint TotalCount {
        get { return result.TotalCount; }
        set { SetTotalCount(value); }
      }
      public Builder SetTotalCount(uint value) {
        PrepareBuilder();
        result.hasTotalCount = true;
        result.totalCount_ = value;
        return this;
      }
      public Builder ClearTotalCount() {
        PrepareBuilder();
        result.hasTotalCount = false;
        result.totalCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> InteractedEntitiesList {
        get { return PrepareBuilder().interactedEntities_; }
      }
      public int InteractedEntitiesCount {
        get { return result.InteractedEntitiesCount; }
      }
      public ulong GetInteractedEntities(int index) {
        return result.GetInteractedEntities(index);
      }
      public Builder SetInteractedEntities(int index, ulong value) {
        PrepareBuilder();
        result.interactedEntities_[index] = value;
        return this;
      }
      public Builder AddInteractedEntities(ulong value) {
        PrepareBuilder();
        result.interactedEntities_.Add(value);
        return this;
      }
      public Builder AddRangeInteractedEntities(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.interactedEntities_.Add(values);
        return this;
      }
      public Builder ClearInteractedEntities() {
        PrepareBuilder();
        result.interactedEntities_.Clear();
        return this;
      }
      
      public bool HasCreate {
        get { return result.hasCreate; }
      }
      public bool Create {
        get { return result.Create; }
        set { SetCreate(value); }
      }
      public Builder SetCreate(bool value) {
        PrepareBuilder();
        result.hasCreate = true;
        result.create_ = value;
        return this;
      }
      public Builder ClearCreate() {
        PrepareBuilder();
        result.hasCreate = false;
        result.create_ = false;
        return this;
      }
      
      public bool HasSuppressNotification {
        get { return result.hasSuppressNotification; }
      }
      public bool SuppressNotification {
        get { return result.SuppressNotification; }
        set { SetSuppressNotification(value); }
      }
      public Builder SetSuppressNotification(bool value) {
        PrepareBuilder();
        result.hasSuppressNotification = true;
        result.suppressNotification_ = value;
        return this;
      }
      public Builder ClearSuppressNotification() {
        PrepareBuilder();
        result.hasSuppressNotification = false;
        result.suppressNotification_ = false;
        return this;
      }
    }
    static NetMessageMissionObjectiveUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCurrentAvatarChanged : pb::GeneratedMessage<NetMessageCurrentAvatarChanged, NetMessageCurrentAvatarChanged.Builder> {
    private NetMessageCurrentAvatarChanged() { }
    private static readonly NetMessageCurrentAvatarChanged defaultInstance = new NetMessageCurrentAvatarChanged().MakeReadOnly();
    private static readonly string[] _netMessageCurrentAvatarChangedFieldNames = new string[] { "lastCurrentEntityId" };
    private static readonly uint[] _netMessageCurrentAvatarChangedFieldTags = new uint[] { 8 };
    public static NetMessageCurrentAvatarChanged DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCurrentAvatarChanged DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCurrentAvatarChanged ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCurrentAvatarChanged__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCurrentAvatarChanged, NetMessageCurrentAvatarChanged.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCurrentAvatarChanged__FieldAccessorTable; }
    }
    
    public const int LastCurrentEntityIdFieldNumber = 1;
    private bool hasLastCurrentEntityId;
    private ulong lastCurrentEntityId_;
    public bool HasLastCurrentEntityId {
      get { return hasLastCurrentEntityId; }
    }
    public ulong LastCurrentEntityId {
      get { return lastCurrentEntityId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLastCurrentEntityId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCurrentAvatarChangedFieldNames;
      if (hasLastCurrentEntityId) {
        output.WriteUInt64(1, field_names[0], LastCurrentEntityId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLastCurrentEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, LastCurrentEntityId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCurrentAvatarChanged ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCurrentAvatarChanged ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCurrentAvatarChanged ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCurrentAvatarChanged ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCurrentAvatarChanged ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCurrentAvatarChanged ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCurrentAvatarChanged ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCurrentAvatarChanged ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCurrentAvatarChanged ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCurrentAvatarChanged ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCurrentAvatarChanged MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCurrentAvatarChanged prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCurrentAvatarChanged, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCurrentAvatarChanged cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCurrentAvatarChanged result;
      
      private NetMessageCurrentAvatarChanged PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCurrentAvatarChanged original = result;
          result = new NetMessageCurrentAvatarChanged();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCurrentAvatarChanged MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCurrentAvatarChanged.Descriptor; }
      }
      
      public override NetMessageCurrentAvatarChanged DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCurrentAvatarChanged.DefaultInstance; }
      }
      
      public override NetMessageCurrentAvatarChanged BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCurrentAvatarChanged) {
          return MergeFrom((NetMessageCurrentAvatarChanged) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCurrentAvatarChanged other) {
        if (other == global::Gazillion.NetMessageCurrentAvatarChanged.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLastCurrentEntityId) {
          LastCurrentEntityId = other.LastCurrentEntityId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCurrentAvatarChangedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCurrentAvatarChangedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLastCurrentEntityId = input.ReadUInt64(ref result.lastCurrentEntityId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLastCurrentEntityId {
        get { return result.hasLastCurrentEntityId; }
      }
      public ulong LastCurrentEntityId {
        get { return result.LastCurrentEntityId; }
        set { SetLastCurrentEntityId(value); }
      }
      public Builder SetLastCurrentEntityId(ulong value) {
        PrepareBuilder();
        result.hasLastCurrentEntityId = true;
        result.lastCurrentEntityId_ = value;
        return this;
      }
      public Builder ClearLastCurrentEntityId() {
        PrepareBuilder();
        result.hasLastCurrentEntityId = false;
        result.lastCurrentEntityId_ = 0UL;
        return this;
      }
    }
    static NetMessageCurrentAvatarChanged() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageNewAvatarAcquired : pb::GeneratedMessage<NetMessageNewAvatarAcquired, NetMessageNewAvatarAcquired.Builder> {
    private NetMessageNewAvatarAcquired() { }
    private static readonly NetMessageNewAvatarAcquired defaultInstance = new NetMessageNewAvatarAcquired().MakeReadOnly();
    private static readonly string[] _netMessageNewAvatarAcquiredFieldNames = new string[] { "prototypeId" };
    private static readonly uint[] _netMessageNewAvatarAcquiredFieldTags = new uint[] { 8 };
    public static NetMessageNewAvatarAcquired DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageNewAvatarAcquired DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageNewAvatarAcquired ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageNewAvatarAcquired__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageNewAvatarAcquired, NetMessageNewAvatarAcquired.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageNewAvatarAcquired__FieldAccessorTable; }
    }
    
    public const int PrototypeIdFieldNumber = 1;
    private bool hasPrototypeId;
    private ulong prototypeId_;
    public bool HasPrototypeId {
      get { return hasPrototypeId; }
    }
    public ulong PrototypeId {
      get { return prototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageNewAvatarAcquiredFieldNames;
      if (hasPrototypeId) {
        output.WriteUInt64(1, field_names[0], PrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageNewAvatarAcquired ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageNewAvatarAcquired ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNewAvatarAcquired ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageNewAvatarAcquired ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNewAvatarAcquired ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageNewAvatarAcquired ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNewAvatarAcquired ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageNewAvatarAcquired ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageNewAvatarAcquired ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageNewAvatarAcquired ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageNewAvatarAcquired MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageNewAvatarAcquired prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageNewAvatarAcquired, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageNewAvatarAcquired cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageNewAvatarAcquired result;
      
      private NetMessageNewAvatarAcquired PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageNewAvatarAcquired original = result;
          result = new NetMessageNewAvatarAcquired();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageNewAvatarAcquired MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageNewAvatarAcquired.Descriptor; }
      }
      
      public override NetMessageNewAvatarAcquired DefaultInstanceForType {
        get { return global::Gazillion.NetMessageNewAvatarAcquired.DefaultInstance; }
      }
      
      public override NetMessageNewAvatarAcquired BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageNewAvatarAcquired) {
          return MergeFrom((NetMessageNewAvatarAcquired) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageNewAvatarAcquired other) {
        if (other == global::Gazillion.NetMessageNewAvatarAcquired.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPrototypeId) {
          PrototypeId = other.PrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageNewAvatarAcquiredFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageNewAvatarAcquiredFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPrototypeId = input.ReadUInt64(ref result.prototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPrototypeId {
        get { return result.hasPrototypeId; }
      }
      public ulong PrototypeId {
        get { return result.PrototypeId; }
        set { SetPrototypeId(value); }
      }
      public Builder SetPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPrototypeId = true;
        result.prototypeId_ = value;
        return this;
      }
      public Builder ClearPrototypeId() {
        PrepareBuilder();
        result.hasPrototypeId = false;
        result.prototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageNewAvatarAcquired() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetStructPrefetchEntityPower : pb::GeneratedMessage<NetStructPrefetchEntityPower, NetStructPrefetchEntityPower.Builder> {
    private NetStructPrefetchEntityPower() { }
    private static readonly NetStructPrefetchEntityPower defaultInstance = new NetStructPrefetchEntityPower().MakeReadOnly();
    private static readonly string[] _netStructPrefetchEntityPowerFieldNames = new string[] { "entityAssetId", "powerPrototypeId" };
    private static readonly uint[] _netStructPrefetchEntityPowerFieldTags = new uint[] { 8, 16 };
    public static NetStructPrefetchEntityPower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetStructPrefetchEntityPower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetStructPrefetchEntityPower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructPrefetchEntityPower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetStructPrefetchEntityPower, NetStructPrefetchEntityPower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructPrefetchEntityPower__FieldAccessorTable; }
    }
    
    public const int EntityAssetIdFieldNumber = 1;
    private bool hasEntityAssetId;
    private ulong entityAssetId_;
    public bool HasEntityAssetId {
      get { return hasEntityAssetId; }
    }
    public ulong EntityAssetId {
      get { return entityAssetId_; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 2;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityAssetId) return false;
        if (!hasPowerPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netStructPrefetchEntityPowerFieldNames;
      if (hasEntityAssetId) {
        output.WriteUInt64(1, field_names[0], EntityAssetId);
      }
      if (hasPowerPrototypeId) {
        output.WriteUInt64(2, field_names[1], PowerPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityAssetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityAssetId);
      }
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetStructPrefetchEntityPower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructPrefetchEntityPower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructPrefetchEntityPower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructPrefetchEntityPower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructPrefetchEntityPower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructPrefetchEntityPower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetStructPrefetchEntityPower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetStructPrefetchEntityPower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetStructPrefetchEntityPower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructPrefetchEntityPower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetStructPrefetchEntityPower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetStructPrefetchEntityPower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetStructPrefetchEntityPower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetStructPrefetchEntityPower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetStructPrefetchEntityPower result;
      
      private NetStructPrefetchEntityPower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetStructPrefetchEntityPower original = result;
          result = new NetStructPrefetchEntityPower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetStructPrefetchEntityPower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetStructPrefetchEntityPower.Descriptor; }
      }
      
      public override NetStructPrefetchEntityPower DefaultInstanceForType {
        get { return global::Gazillion.NetStructPrefetchEntityPower.DefaultInstance; }
      }
      
      public override NetStructPrefetchEntityPower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetStructPrefetchEntityPower) {
          return MergeFrom((NetStructPrefetchEntityPower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetStructPrefetchEntityPower other) {
        if (other == global::Gazillion.NetStructPrefetchEntityPower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityAssetId) {
          EntityAssetId = other.EntityAssetId;
        }
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netStructPrefetchEntityPowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netStructPrefetchEntityPowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityAssetId = input.ReadUInt64(ref result.entityAssetId_);
              break;
            }
            case 16: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityAssetId {
        get { return result.hasEntityAssetId; }
      }
      public ulong EntityAssetId {
        get { return result.EntityAssetId; }
        set { SetEntityAssetId(value); }
      }
      public Builder SetEntityAssetId(ulong value) {
        PrepareBuilder();
        result.hasEntityAssetId = true;
        result.entityAssetId_ = value;
        return this;
      }
      public Builder ClearEntityAssetId() {
        PrepareBuilder();
        result.hasEntityAssetId = false;
        result.entityAssetId_ = 0UL;
        return this;
      }
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetStructPrefetchEntityPower() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetStructPrefetchCell : pb::GeneratedMessage<NetStructPrefetchCell, NetStructPrefetchCell.Builder> {
    private NetStructPrefetchCell() { }
    private static readonly NetStructPrefetchCell defaultInstance = new NetStructPrefetchCell().MakeReadOnly();
    private static readonly string[] _netStructPrefetchCellFieldNames = new string[] { "cellId", "cellPrototypeId" };
    private static readonly uint[] _netStructPrefetchCellFieldTags = new uint[] { 8, 16 };
    public static NetStructPrefetchCell DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetStructPrefetchCell DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetStructPrefetchCell ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructPrefetchCell__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetStructPrefetchCell, NetStructPrefetchCell.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructPrefetchCell__FieldAccessorTable; }
    }
    
    public const int CellIdFieldNumber = 1;
    private bool hasCellId;
    private uint cellId_;
    public bool HasCellId {
      get { return hasCellId; }
    }
    public uint CellId {
      get { return cellId_; }
    }
    
    public const int CellPrototypeIdFieldNumber = 2;
    private bool hasCellPrototypeId;
    private ulong cellPrototypeId_;
    public bool HasCellPrototypeId {
      get { return hasCellPrototypeId; }
    }
    public ulong CellPrototypeId {
      get { return cellPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCellId) return false;
        if (!hasCellPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netStructPrefetchCellFieldNames;
      if (hasCellId) {
        output.WriteUInt32(1, field_names[0], CellId);
      }
      if (hasCellPrototypeId) {
        output.WriteUInt64(2, field_names[1], CellPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCellId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, CellId);
      }
      if (hasCellPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, CellPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetStructPrefetchCell ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructPrefetchCell ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructPrefetchCell ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructPrefetchCell ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructPrefetchCell ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructPrefetchCell ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetStructPrefetchCell ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetStructPrefetchCell ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetStructPrefetchCell ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructPrefetchCell ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetStructPrefetchCell MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetStructPrefetchCell prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetStructPrefetchCell, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetStructPrefetchCell cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetStructPrefetchCell result;
      
      private NetStructPrefetchCell PrepareBuilder() {
        if (resultIsReadOnly) {
          NetStructPrefetchCell original = result;
          result = new NetStructPrefetchCell();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetStructPrefetchCell MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetStructPrefetchCell.Descriptor; }
      }
      
      public override NetStructPrefetchCell DefaultInstanceForType {
        get { return global::Gazillion.NetStructPrefetchCell.DefaultInstance; }
      }
      
      public override NetStructPrefetchCell BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetStructPrefetchCell) {
          return MergeFrom((NetStructPrefetchCell) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetStructPrefetchCell other) {
        if (other == global::Gazillion.NetStructPrefetchCell.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCellId) {
          CellId = other.CellId;
        }
        if (other.HasCellPrototypeId) {
          CellPrototypeId = other.CellPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netStructPrefetchCellFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netStructPrefetchCellFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCellId = input.ReadUInt32(ref result.cellId_);
              break;
            }
            case 16: {
              result.hasCellPrototypeId = input.ReadUInt64(ref result.cellPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCellId {
        get { return result.hasCellId; }
      }
      public uint CellId {
        get { return result.CellId; }
        set { SetCellId(value); }
      }
      public Builder SetCellId(uint value) {
        PrepareBuilder();
        result.hasCellId = true;
        result.cellId_ = value;
        return this;
      }
      public Builder ClearCellId() {
        PrepareBuilder();
        result.hasCellId = false;
        result.cellId_ = 0;
        return this;
      }
      
      public bool HasCellPrototypeId {
        get { return result.hasCellPrototypeId; }
      }
      public ulong CellPrototypeId {
        get { return result.CellPrototypeId; }
        set { SetCellPrototypeId(value); }
      }
      public Builder SetCellPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasCellPrototypeId = true;
        result.cellPrototypeId_ = value;
        return this;
      }
      public Builder ClearCellPrototypeId() {
        PrepareBuilder();
        result.hasCellPrototypeId = false;
        result.cellPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetStructPrefetchCell() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePrefetchAssets : pb::GeneratedMessage<NetMessagePrefetchAssets, NetMessagePrefetchAssets.Builder> {
    private NetMessagePrefetchAssets() { }
    private static readonly NetMessagePrefetchAssets defaultInstance = new NetMessagePrefetchAssets().MakeReadOnly();
    private static readonly string[] _netMessagePrefetchAssetsFieldNames = new string[] { "assets", "backgroundload", "cells", "powers", "prototypes", "regionId" };
    private static readonly uint[] _netMessagePrefetchAssetsFieldTags = new uint[] { 16, 8, 42, 34, 24, 48 };
    public static NetMessagePrefetchAssets DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePrefetchAssets DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePrefetchAssets ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePrefetchAssets__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePrefetchAssets, NetMessagePrefetchAssets.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePrefetchAssets__FieldAccessorTable; }
    }
    
    public const int BackgroundloadFieldNumber = 1;
    private bool hasBackgroundload;
    private bool backgroundload_;
    public bool HasBackgroundload {
      get { return hasBackgroundload; }
    }
    public bool Backgroundload {
      get { return backgroundload_; }
    }
    
    public const int AssetsFieldNumber = 2;
    private pbc::PopsicleList<ulong> assets_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> AssetsList {
      get { return pbc::Lists.AsReadOnly(assets_); }
    }
    public int AssetsCount {
      get { return assets_.Count; }
    }
    public ulong GetAssets(int index) {
      return assets_[index];
    }
    
    public const int PrototypesFieldNumber = 3;
    private pbc::PopsicleList<ulong> prototypes_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> PrototypesList {
      get { return pbc::Lists.AsReadOnly(prototypes_); }
    }
    public int PrototypesCount {
      get { return prototypes_.Count; }
    }
    public ulong GetPrototypes(int index) {
      return prototypes_[index];
    }
    
    public const int PowersFieldNumber = 4;
    private pbc::PopsicleList<global::Gazillion.NetStructPrefetchEntityPower> powers_ = new pbc::PopsicleList<global::Gazillion.NetStructPrefetchEntityPower>();
    public scg::IList<global::Gazillion.NetStructPrefetchEntityPower> PowersList {
      get { return powers_; }
    }
    public int PowersCount {
      get { return powers_.Count; }
    }
    public global::Gazillion.NetStructPrefetchEntityPower GetPowers(int index) {
      return powers_[index];
    }
    
    public const int CellsFieldNumber = 5;
    private pbc::PopsicleList<global::Gazillion.NetStructPrefetchCell> cells_ = new pbc::PopsicleList<global::Gazillion.NetStructPrefetchCell>();
    public scg::IList<global::Gazillion.NetStructPrefetchCell> CellsList {
      get { return cells_; }
    }
    public int CellsCount {
      get { return cells_.Count; }
    }
    public global::Gazillion.NetStructPrefetchCell GetCells(int index) {
      return cells_[index];
    }
    
    public const int RegionIdFieldNumber = 6;
    private bool hasRegionId;
    private ulong regionId_;
    public bool HasRegionId {
      get { return hasRegionId; }
    }
    public ulong RegionId {
      get { return regionId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBackgroundload) return false;
        foreach (global::Gazillion.NetStructPrefetchEntityPower element in PowersList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Gazillion.NetStructPrefetchCell element in CellsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePrefetchAssetsFieldNames;
      if (hasBackgroundload) {
        output.WriteBool(1, field_names[1], Backgroundload);
      }
      if (assets_.Count > 0) {
        output.WriteUInt64Array(2, field_names[0], assets_);
      }
      if (prototypes_.Count > 0) {
        output.WriteUInt64Array(3, field_names[4], prototypes_);
      }
      if (powers_.Count > 0) {
        output.WriteMessageArray(4, field_names[3], powers_);
      }
      if (cells_.Count > 0) {
        output.WriteMessageArray(5, field_names[2], cells_);
      }
      if (hasRegionId) {
        output.WriteUInt64(6, field_names[5], RegionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBackgroundload) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Backgroundload);
      }
      {
        int dataSize = 0;
        foreach (ulong element in AssetsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * assets_.Count;
      }
      {
        int dataSize = 0;
        foreach (ulong element in PrototypesList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * prototypes_.Count;
      }
      foreach (global::Gazillion.NetStructPrefetchEntityPower element in PowersList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      foreach (global::Gazillion.NetStructPrefetchCell element in CellsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, element);
      }
      if (hasRegionId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(6, RegionId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePrefetchAssets ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePrefetchAssets ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePrefetchAssets ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePrefetchAssets ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePrefetchAssets ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePrefetchAssets ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePrefetchAssets ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePrefetchAssets ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePrefetchAssets ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePrefetchAssets ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePrefetchAssets MakeReadOnly() {
      assets_.MakeReadOnly();
      prototypes_.MakeReadOnly();
      powers_.MakeReadOnly();
      cells_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePrefetchAssets prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePrefetchAssets, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePrefetchAssets cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePrefetchAssets result;
      
      private NetMessagePrefetchAssets PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePrefetchAssets original = result;
          result = new NetMessagePrefetchAssets();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePrefetchAssets MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePrefetchAssets.Descriptor; }
      }
      
      public override NetMessagePrefetchAssets DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePrefetchAssets.DefaultInstance; }
      }
      
      public override NetMessagePrefetchAssets BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePrefetchAssets) {
          return MergeFrom((NetMessagePrefetchAssets) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePrefetchAssets other) {
        if (other == global::Gazillion.NetMessagePrefetchAssets.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBackgroundload) {
          Backgroundload = other.Backgroundload;
        }
        if (other.assets_.Count != 0) {
          result.assets_.Add(other.assets_);
        }
        if (other.prototypes_.Count != 0) {
          result.prototypes_.Add(other.prototypes_);
        }
        if (other.powers_.Count != 0) {
          result.powers_.Add(other.powers_);
        }
        if (other.cells_.Count != 0) {
          result.cells_.Add(other.cells_);
        }
        if (other.HasRegionId) {
          RegionId = other.RegionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePrefetchAssetsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePrefetchAssetsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasBackgroundload = input.ReadBool(ref result.backgroundload_);
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt64Array(tag, field_name, result.assets_);
              break;
            }
            case 26:
            case 24: {
              input.ReadUInt64Array(tag, field_name, result.prototypes_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.powers_, global::Gazillion.NetStructPrefetchEntityPower.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.cells_, global::Gazillion.NetStructPrefetchCell.DefaultInstance, extensionRegistry);
              break;
            }
            case 48: {
              result.hasRegionId = input.ReadUInt64(ref result.regionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBackgroundload {
        get { return result.hasBackgroundload; }
      }
      public bool Backgroundload {
        get { return result.Backgroundload; }
        set { SetBackgroundload(value); }
      }
      public Builder SetBackgroundload(bool value) {
        PrepareBuilder();
        result.hasBackgroundload = true;
        result.backgroundload_ = value;
        return this;
      }
      public Builder ClearBackgroundload() {
        PrepareBuilder();
        result.hasBackgroundload = false;
        result.backgroundload_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> AssetsList {
        get { return PrepareBuilder().assets_; }
      }
      public int AssetsCount {
        get { return result.AssetsCount; }
      }
      public ulong GetAssets(int index) {
        return result.GetAssets(index);
      }
      public Builder SetAssets(int index, ulong value) {
        PrepareBuilder();
        result.assets_[index] = value;
        return this;
      }
      public Builder AddAssets(ulong value) {
        PrepareBuilder();
        result.assets_.Add(value);
        return this;
      }
      public Builder AddRangeAssets(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.assets_.Add(values);
        return this;
      }
      public Builder ClearAssets() {
        PrepareBuilder();
        result.assets_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<ulong> PrototypesList {
        get { return PrepareBuilder().prototypes_; }
      }
      public int PrototypesCount {
        get { return result.PrototypesCount; }
      }
      public ulong GetPrototypes(int index) {
        return result.GetPrototypes(index);
      }
      public Builder SetPrototypes(int index, ulong value) {
        PrepareBuilder();
        result.prototypes_[index] = value;
        return this;
      }
      public Builder AddPrototypes(ulong value) {
        PrepareBuilder();
        result.prototypes_.Add(value);
        return this;
      }
      public Builder AddRangePrototypes(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.prototypes_.Add(values);
        return this;
      }
      public Builder ClearPrototypes() {
        PrepareBuilder();
        result.prototypes_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.NetStructPrefetchEntityPower> PowersList {
        get { return PrepareBuilder().powers_; }
      }
      public int PowersCount {
        get { return result.PowersCount; }
      }
      public global::Gazillion.NetStructPrefetchEntityPower GetPowers(int index) {
        return result.GetPowers(index);
      }
      public Builder SetPowers(int index, global::Gazillion.NetStructPrefetchEntityPower value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.powers_[index] = value;
        return this;
      }
      public Builder SetPowers(int index, global::Gazillion.NetStructPrefetchEntityPower.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.powers_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPowers(global::Gazillion.NetStructPrefetchEntityPower value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.powers_.Add(value);
        return this;
      }
      public Builder AddPowers(global::Gazillion.NetStructPrefetchEntityPower.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.powers_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePowers(scg::IEnumerable<global::Gazillion.NetStructPrefetchEntityPower> values) {
        PrepareBuilder();
        result.powers_.Add(values);
        return this;
      }
      public Builder ClearPowers() {
        PrepareBuilder();
        result.powers_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.NetStructPrefetchCell> CellsList {
        get { return PrepareBuilder().cells_; }
      }
      public int CellsCount {
        get { return result.CellsCount; }
      }
      public global::Gazillion.NetStructPrefetchCell GetCells(int index) {
        return result.GetCells(index);
      }
      public Builder SetCells(int index, global::Gazillion.NetStructPrefetchCell value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cells_[index] = value;
        return this;
      }
      public Builder SetCells(int index, global::Gazillion.NetStructPrefetchCell.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cells_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCells(global::Gazillion.NetStructPrefetchCell value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cells_.Add(value);
        return this;
      }
      public Builder AddCells(global::Gazillion.NetStructPrefetchCell.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cells_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCells(scg::IEnumerable<global::Gazillion.NetStructPrefetchCell> values) {
        PrepareBuilder();
        result.cells_.Add(values);
        return this;
      }
      public Builder ClearCells() {
        PrepareBuilder();
        result.cells_.Clear();
        return this;
      }
      
      public bool HasRegionId {
        get { return result.hasRegionId; }
      }
      public ulong RegionId {
        get { return result.RegionId; }
        set { SetRegionId(value); }
      }
      public Builder SetRegionId(ulong value) {
        PrepareBuilder();
        result.hasRegionId = true;
        result.regionId_ = value;
        return this;
      }
      public Builder ClearRegionId() {
        PrepareBuilder();
        result.hasRegionId = false;
        result.regionId_ = 0UL;
        return this;
      }
    }
    static NetMessagePrefetchAssets() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePrefetchRegionsForDownload : pb::GeneratedMessage<NetMessagePrefetchRegionsForDownload, NetMessagePrefetchRegionsForDownload.Builder> {
    private NetMessagePrefetchRegionsForDownload() { }
    private static readonly NetMessagePrefetchRegionsForDownload defaultInstance = new NetMessagePrefetchRegionsForDownload().MakeReadOnly();
    private static readonly string[] _netMessagePrefetchRegionsForDownloadFieldNames = new string[] { "prototypes" };
    private static readonly uint[] _netMessagePrefetchRegionsForDownloadFieldTags = new uint[] { 8 };
    public static NetMessagePrefetchRegionsForDownload DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePrefetchRegionsForDownload DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePrefetchRegionsForDownload ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePrefetchRegionsForDownload__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePrefetchRegionsForDownload, NetMessagePrefetchRegionsForDownload.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePrefetchRegionsForDownload__FieldAccessorTable; }
    }
    
    public const int PrototypesFieldNumber = 1;
    private pbc::PopsicleList<ulong> prototypes_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> PrototypesList {
      get { return pbc::Lists.AsReadOnly(prototypes_); }
    }
    public int PrototypesCount {
      get { return prototypes_.Count; }
    }
    public ulong GetPrototypes(int index) {
      return prototypes_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePrefetchRegionsForDownloadFieldNames;
      if (prototypes_.Count > 0) {
        output.WriteUInt64Array(1, field_names[0], prototypes_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        foreach (ulong element in PrototypesList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * prototypes_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePrefetchRegionsForDownload ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePrefetchRegionsForDownload ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePrefetchRegionsForDownload ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePrefetchRegionsForDownload ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePrefetchRegionsForDownload ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePrefetchRegionsForDownload ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePrefetchRegionsForDownload ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePrefetchRegionsForDownload ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePrefetchRegionsForDownload ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePrefetchRegionsForDownload ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePrefetchRegionsForDownload MakeReadOnly() {
      prototypes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePrefetchRegionsForDownload prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePrefetchRegionsForDownload, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePrefetchRegionsForDownload cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePrefetchRegionsForDownload result;
      
      private NetMessagePrefetchRegionsForDownload PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePrefetchRegionsForDownload original = result;
          result = new NetMessagePrefetchRegionsForDownload();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePrefetchRegionsForDownload MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePrefetchRegionsForDownload.Descriptor; }
      }
      
      public override NetMessagePrefetchRegionsForDownload DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePrefetchRegionsForDownload.DefaultInstance; }
      }
      
      public override NetMessagePrefetchRegionsForDownload BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePrefetchRegionsForDownload) {
          return MergeFrom((NetMessagePrefetchRegionsForDownload) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePrefetchRegionsForDownload other) {
        if (other == global::Gazillion.NetMessagePrefetchRegionsForDownload.DefaultInstance) return this;
        PrepareBuilder();
        if (other.prototypes_.Count != 0) {
          result.prototypes_.Add(other.prototypes_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePrefetchRegionsForDownloadFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePrefetchRegionsForDownloadFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt64Array(tag, field_name, result.prototypes_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<ulong> PrototypesList {
        get { return PrepareBuilder().prototypes_; }
      }
      public int PrototypesCount {
        get { return result.PrototypesCount; }
      }
      public ulong GetPrototypes(int index) {
        return result.GetPrototypes(index);
      }
      public Builder SetPrototypes(int index, ulong value) {
        PrepareBuilder();
        result.prototypes_[index] = value;
        return this;
      }
      public Builder AddPrototypes(ulong value) {
        PrepareBuilder();
        result.prototypes_.Add(value);
        return this;
      }
      public Builder AddRangePrototypes(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.prototypes_.Add(values);
        return this;
      }
      public Builder ClearPrototypes() {
        PrepareBuilder();
        result.prototypes_.Clear();
        return this;
      }
    }
    static NetMessagePrefetchRegionsForDownload() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageQueryIsRegionAvailable : pb::GeneratedMessage<NetMessageQueryIsRegionAvailable, NetMessageQueryIsRegionAvailable.Builder> {
    private NetMessageQueryIsRegionAvailable() { }
    private static readonly NetMessageQueryIsRegionAvailable defaultInstance = new NetMessageQueryIsRegionAvailable().MakeReadOnly();
    private static readonly string[] _netMessageQueryIsRegionAvailableFieldNames = new string[] { "regionPrototype" };
    private static readonly uint[] _netMessageQueryIsRegionAvailableFieldTags = new uint[] { 8 };
    public static NetMessageQueryIsRegionAvailable DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageQueryIsRegionAvailable DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageQueryIsRegionAvailable ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageQueryIsRegionAvailable__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageQueryIsRegionAvailable, NetMessageQueryIsRegionAvailable.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageQueryIsRegionAvailable__FieldAccessorTable; }
    }
    
    public const int RegionPrototypeFieldNumber = 1;
    private bool hasRegionPrototype;
    private ulong regionPrototype_;
    public bool HasRegionPrototype {
      get { return hasRegionPrototype; }
    }
    public ulong RegionPrototype {
      get { return regionPrototype_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRegionPrototype) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageQueryIsRegionAvailableFieldNames;
      if (hasRegionPrototype) {
        output.WriteUInt64(1, field_names[0], RegionPrototype);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRegionPrototype) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, RegionPrototype);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageQueryIsRegionAvailable ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageQueryIsRegionAvailable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageQueryIsRegionAvailable ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageQueryIsRegionAvailable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageQueryIsRegionAvailable ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageQueryIsRegionAvailable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageQueryIsRegionAvailable ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageQueryIsRegionAvailable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageQueryIsRegionAvailable ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageQueryIsRegionAvailable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageQueryIsRegionAvailable MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageQueryIsRegionAvailable prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageQueryIsRegionAvailable, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageQueryIsRegionAvailable cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageQueryIsRegionAvailable result;
      
      private NetMessageQueryIsRegionAvailable PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageQueryIsRegionAvailable original = result;
          result = new NetMessageQueryIsRegionAvailable();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageQueryIsRegionAvailable MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageQueryIsRegionAvailable.Descriptor; }
      }
      
      public override NetMessageQueryIsRegionAvailable DefaultInstanceForType {
        get { return global::Gazillion.NetMessageQueryIsRegionAvailable.DefaultInstance; }
      }
      
      public override NetMessageQueryIsRegionAvailable BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageQueryIsRegionAvailable) {
          return MergeFrom((NetMessageQueryIsRegionAvailable) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageQueryIsRegionAvailable other) {
        if (other == global::Gazillion.NetMessageQueryIsRegionAvailable.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRegionPrototype) {
          RegionPrototype = other.RegionPrototype;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageQueryIsRegionAvailableFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageQueryIsRegionAvailableFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRegionPrototype = input.ReadUInt64(ref result.regionPrototype_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRegionPrototype {
        get { return result.hasRegionPrototype; }
      }
      public ulong RegionPrototype {
        get { return result.RegionPrototype; }
        set { SetRegionPrototype(value); }
      }
      public Builder SetRegionPrototype(ulong value) {
        PrepareBuilder();
        result.hasRegionPrototype = true;
        result.regionPrototype_ = value;
        return this;
      }
      public Builder ClearRegionPrototype() {
        PrepareBuilder();
        result.hasRegionPrototype = false;
        result.regionPrototype_ = 0UL;
        return this;
      }
    }
    static NetMessageQueryIsRegionAvailable() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageShowOverheadText : pb::GeneratedMessage<NetMessageShowOverheadText, NetMessageShowOverheadText.Builder> {
    private NetMessageShowOverheadText() { }
    private static readonly NetMessageShowOverheadText defaultInstance = new NetMessageShowOverheadText().MakeReadOnly();
    private static readonly string[] _netMessageShowOverheadTextFieldNames = new string[] { "duration", "idAgent", "idText" };
    private static readonly uint[] _netMessageShowOverheadTextFieldTags = new uint[] { 29, 8, 16 };
    public static NetMessageShowOverheadText DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageShowOverheadText DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageShowOverheadText ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShowOverheadText__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageShowOverheadText, NetMessageShowOverheadText.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShowOverheadText__FieldAccessorTable; }
    }
    
    public const int IdAgentFieldNumber = 1;
    private bool hasIdAgent;
    private ulong idAgent_;
    public bool HasIdAgent {
      get { return hasIdAgent; }
    }
    public ulong IdAgent {
      get { return idAgent_; }
    }
    
    public const int IdTextFieldNumber = 2;
    private bool hasIdText;
    private ulong idText_;
    public bool HasIdText {
      get { return hasIdText; }
    }
    public ulong IdText {
      get { return idText_; }
    }
    
    public const int DurationFieldNumber = 3;
    private bool hasDuration;
    private float duration_;
    public bool HasDuration {
      get { return hasDuration; }
    }
    public float Duration {
      get { return duration_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdAgent) return false;
        if (!hasIdText) return false;
        if (!hasDuration) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageShowOverheadTextFieldNames;
      if (hasIdAgent) {
        output.WriteUInt64(1, field_names[1], IdAgent);
      }
      if (hasIdText) {
        output.WriteUInt64(2, field_names[2], IdText);
      }
      if (hasDuration) {
        output.WriteFloat(3, field_names[0], Duration);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdAgent) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdAgent);
      }
      if (hasIdText) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, IdText);
      }
      if (hasDuration) {
        size += pb::CodedOutputStream.ComputeFloatSize(3, Duration);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageShowOverheadText ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShowOverheadText ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowOverheadText ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShowOverheadText ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowOverheadText ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShowOverheadText ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowOverheadText ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageShowOverheadText ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageShowOverheadText ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShowOverheadText ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageShowOverheadText MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageShowOverheadText prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageShowOverheadText, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageShowOverheadText cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageShowOverheadText result;
      
      private NetMessageShowOverheadText PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageShowOverheadText original = result;
          result = new NetMessageShowOverheadText();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageShowOverheadText MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageShowOverheadText.Descriptor; }
      }
      
      public override NetMessageShowOverheadText DefaultInstanceForType {
        get { return global::Gazillion.NetMessageShowOverheadText.DefaultInstance; }
      }
      
      public override NetMessageShowOverheadText BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageShowOverheadText) {
          return MergeFrom((NetMessageShowOverheadText) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageShowOverheadText other) {
        if (other == global::Gazillion.NetMessageShowOverheadText.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdAgent) {
          IdAgent = other.IdAgent;
        }
        if (other.HasIdText) {
          IdText = other.IdText;
        }
        if (other.HasDuration) {
          Duration = other.Duration;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageShowOverheadTextFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageShowOverheadTextFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdAgent = input.ReadUInt64(ref result.idAgent_);
              break;
            }
            case 16: {
              result.hasIdText = input.ReadUInt64(ref result.idText_);
              break;
            }
            case 29: {
              result.hasDuration = input.ReadFloat(ref result.duration_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdAgent {
        get { return result.hasIdAgent; }
      }
      public ulong IdAgent {
        get { return result.IdAgent; }
        set { SetIdAgent(value); }
      }
      public Builder SetIdAgent(ulong value) {
        PrepareBuilder();
        result.hasIdAgent = true;
        result.idAgent_ = value;
        return this;
      }
      public Builder ClearIdAgent() {
        PrepareBuilder();
        result.hasIdAgent = false;
        result.idAgent_ = 0UL;
        return this;
      }
      
      public bool HasIdText {
        get { return result.hasIdText; }
      }
      public ulong IdText {
        get { return result.IdText; }
        set { SetIdText(value); }
      }
      public Builder SetIdText(ulong value) {
        PrepareBuilder();
        result.hasIdText = true;
        result.idText_ = value;
        return this;
      }
      public Builder ClearIdText() {
        PrepareBuilder();
        result.hasIdText = false;
        result.idText_ = 0UL;
        return this;
      }
      
      public bool HasDuration {
        get { return result.hasDuration; }
      }
      public float Duration {
        get { return result.Duration; }
        set { SetDuration(value); }
      }
      public Builder SetDuration(float value) {
        PrepareBuilder();
        result.hasDuration = true;
        result.duration_ = value;
        return this;
      }
      public Builder ClearDuration() {
        PrepareBuilder();
        result.hasDuration = false;
        result.duration_ = 0F;
        return this;
      }
    }
    static NetMessageShowOverheadText() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAIToggleState : pb::GeneratedMessage<NetMessageAIToggleState, NetMessageAIToggleState.Builder> {
    private NetMessageAIToggleState() { }
    private static readonly NetMessageAIToggleState defaultInstance = new NetMessageAIToggleState().MakeReadOnly();
    private static readonly string[] _netMessageAIToggleStateFieldNames = new string[] { "state" };
    private static readonly uint[] _netMessageAIToggleStateFieldTags = new uint[] { 8 };
    public static NetMessageAIToggleState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAIToggleState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAIToggleState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAIToggleState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAIToggleState, NetMessageAIToggleState.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAIToggleState__FieldAccessorTable; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private bool state_;
    public bool HasState {
      get { return hasState; }
    }
    public bool State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasState) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAIToggleStateFieldNames;
      if (hasState) {
        output.WriteBool(1, field_names[0], State);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, State);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAIToggleState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAIToggleState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIToggleState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAIToggleState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIToggleState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAIToggleState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIToggleState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAIToggleState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAIToggleState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAIToggleState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAIToggleState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAIToggleState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAIToggleState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAIToggleState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAIToggleState result;
      
      private NetMessageAIToggleState PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAIToggleState original = result;
          result = new NetMessageAIToggleState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAIToggleState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAIToggleState.Descriptor; }
      }
      
      public override NetMessageAIToggleState DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAIToggleState.DefaultInstance; }
      }
      
      public override NetMessageAIToggleState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAIToggleState) {
          return MergeFrom((NetMessageAIToggleState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAIToggleState other) {
        if (other == global::Gazillion.NetMessageAIToggleState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAIToggleStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAIToggleStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadBool(ref result.state_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public bool State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(bool value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = false;
        return this;
      }
    }
    static NetMessageAIToggleState() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDamageToggleState : pb::GeneratedMessage<NetMessageDamageToggleState, NetMessageDamageToggleState.Builder> {
    private NetMessageDamageToggleState() { }
    private static readonly NetMessageDamageToggleState defaultInstance = new NetMessageDamageToggleState().MakeReadOnly();
    private static readonly string[] _netMessageDamageToggleStateFieldNames = new string[] { "state" };
    private static readonly uint[] _netMessageDamageToggleStateFieldTags = new uint[] { 8 };
    public static NetMessageDamageToggleState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDamageToggleState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDamageToggleState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDamageToggleState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDamageToggleState, NetMessageDamageToggleState.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDamageToggleState__FieldAccessorTable; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private bool state_;
    public bool HasState {
      get { return hasState; }
    }
    public bool State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasState) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDamageToggleStateFieldNames;
      if (hasState) {
        output.WriteBool(1, field_names[0], State);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, State);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDamageToggleState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDamageToggleState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDamageToggleState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDamageToggleState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDamageToggleState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDamageToggleState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDamageToggleState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDamageToggleState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDamageToggleState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDamageToggleState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDamageToggleState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDamageToggleState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDamageToggleState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDamageToggleState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDamageToggleState result;
      
      private NetMessageDamageToggleState PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDamageToggleState original = result;
          result = new NetMessageDamageToggleState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDamageToggleState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDamageToggleState.Descriptor; }
      }
      
      public override NetMessageDamageToggleState DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDamageToggleState.DefaultInstance; }
      }
      
      public override NetMessageDamageToggleState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDamageToggleState) {
          return MergeFrom((NetMessageDamageToggleState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDamageToggleState other) {
        if (other == global::Gazillion.NetMessageDamageToggleState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDamageToggleStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDamageToggleStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadBool(ref result.state_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public bool State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(bool value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = false;
        return this;
      }
    }
    static NetMessageDamageToggleState() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetStructMatchQueueEntry : pb::GeneratedMessage<NetStructMatchQueueEntry, NetStructMatchQueueEntry.Builder> {
    private NetStructMatchQueueEntry() { }
    private static readonly NetStructMatchQueueEntry defaultInstance = new NetStructMatchQueueEntry().MakeReadOnly();
    private static readonly string[] _netStructMatchQueueEntryFieldNames = new string[] { "canQueueParty", "queueIndex", "queuePrototypeId" };
    private static readonly uint[] _netStructMatchQueueEntryFieldTags = new uint[] { 24, 8, 16 };
    public static NetStructMatchQueueEntry DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetStructMatchQueueEntry DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetStructMatchQueueEntry ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructMatchQueueEntry__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetStructMatchQueueEntry, NetStructMatchQueueEntry.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructMatchQueueEntry__FieldAccessorTable; }
    }
    
    public const int QueueIndexFieldNumber = 1;
    private bool hasQueueIndex;
    private uint queueIndex_;
    public bool HasQueueIndex {
      get { return hasQueueIndex; }
    }
    public uint QueueIndex {
      get { return queueIndex_; }
    }
    
    public const int QueuePrototypeIdFieldNumber = 2;
    private bool hasQueuePrototypeId;
    private ulong queuePrototypeId_;
    public bool HasQueuePrototypeId {
      get { return hasQueuePrototypeId; }
    }
    public ulong QueuePrototypeId {
      get { return queuePrototypeId_; }
    }
    
    public const int CanQueuePartyFieldNumber = 3;
    private bool hasCanQueueParty;
    private bool canQueueParty_;
    public bool HasCanQueueParty {
      get { return hasCanQueueParty; }
    }
    public bool CanQueueParty {
      get { return canQueueParty_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasQueueIndex) return false;
        if (!hasQueuePrototypeId) return false;
        if (!hasCanQueueParty) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netStructMatchQueueEntryFieldNames;
      if (hasQueueIndex) {
        output.WriteUInt32(1, field_names[1], QueueIndex);
      }
      if (hasQueuePrototypeId) {
        output.WriteUInt64(2, field_names[2], QueuePrototypeId);
      }
      if (hasCanQueueParty) {
        output.WriteBool(3, field_names[0], CanQueueParty);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasQueueIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, QueueIndex);
      }
      if (hasQueuePrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, QueuePrototypeId);
      }
      if (hasCanQueueParty) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, CanQueueParty);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetStructMatchQueueEntry ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructMatchQueueEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructMatchQueueEntry ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructMatchQueueEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructMatchQueueEntry ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructMatchQueueEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetStructMatchQueueEntry ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetStructMatchQueueEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetStructMatchQueueEntry ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructMatchQueueEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetStructMatchQueueEntry MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetStructMatchQueueEntry prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetStructMatchQueueEntry, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetStructMatchQueueEntry cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetStructMatchQueueEntry result;
      
      private NetStructMatchQueueEntry PrepareBuilder() {
        if (resultIsReadOnly) {
          NetStructMatchQueueEntry original = result;
          result = new NetStructMatchQueueEntry();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetStructMatchQueueEntry MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetStructMatchQueueEntry.Descriptor; }
      }
      
      public override NetStructMatchQueueEntry DefaultInstanceForType {
        get { return global::Gazillion.NetStructMatchQueueEntry.DefaultInstance; }
      }
      
      public override NetStructMatchQueueEntry BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetStructMatchQueueEntry) {
          return MergeFrom((NetStructMatchQueueEntry) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetStructMatchQueueEntry other) {
        if (other == global::Gazillion.NetStructMatchQueueEntry.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasQueueIndex) {
          QueueIndex = other.QueueIndex;
        }
        if (other.HasQueuePrototypeId) {
          QueuePrototypeId = other.QueuePrototypeId;
        }
        if (other.HasCanQueueParty) {
          CanQueueParty = other.CanQueueParty;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netStructMatchQueueEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netStructMatchQueueEntryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasQueueIndex = input.ReadUInt32(ref result.queueIndex_);
              break;
            }
            case 16: {
              result.hasQueuePrototypeId = input.ReadUInt64(ref result.queuePrototypeId_);
              break;
            }
            case 24: {
              result.hasCanQueueParty = input.ReadBool(ref result.canQueueParty_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasQueueIndex {
        get { return result.hasQueueIndex; }
      }
      public uint QueueIndex {
        get { return result.QueueIndex; }
        set { SetQueueIndex(value); }
      }
      public Builder SetQueueIndex(uint value) {
        PrepareBuilder();
        result.hasQueueIndex = true;
        result.queueIndex_ = value;
        return this;
      }
      public Builder ClearQueueIndex() {
        PrepareBuilder();
        result.hasQueueIndex = false;
        result.queueIndex_ = 0;
        return this;
      }
      
      public bool HasQueuePrototypeId {
        get { return result.hasQueuePrototypeId; }
      }
      public ulong QueuePrototypeId {
        get { return result.QueuePrototypeId; }
        set { SetQueuePrototypeId(value); }
      }
      public Builder SetQueuePrototypeId(ulong value) {
        PrepareBuilder();
        result.hasQueuePrototypeId = true;
        result.queuePrototypeId_ = value;
        return this;
      }
      public Builder ClearQueuePrototypeId() {
        PrepareBuilder();
        result.hasQueuePrototypeId = false;
        result.queuePrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasCanQueueParty {
        get { return result.hasCanQueueParty; }
      }
      public bool CanQueueParty {
        get { return result.CanQueueParty; }
        set { SetCanQueueParty(value); }
      }
      public Builder SetCanQueueParty(bool value) {
        PrepareBuilder();
        result.hasCanQueueParty = true;
        result.canQueueParty_ = value;
        return this;
      }
      public Builder ClearCanQueueParty() {
        PrepareBuilder();
        result.hasCanQueueParty = false;
        result.canQueueParty_ = false;
        return this;
      }
    }
    static NetStructMatchQueueEntry() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMatchQueueListResponse : pb::GeneratedMessage<NetMessageMatchQueueListResponse, NetMessageMatchQueueListResponse.Builder> {
    private NetMessageMatchQueueListResponse() { }
    private static readonly NetMessageMatchQueueListResponse defaultInstance = new NetMessageMatchQueueListResponse().MakeReadOnly();
    private static readonly string[] _netMessageMatchQueueListResponseFieldNames = new string[] { "list" };
    private static readonly uint[] _netMessageMatchQueueListResponseFieldTags = new uint[] { 10 };
    public static NetMessageMatchQueueListResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMatchQueueListResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMatchQueueListResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMatchQueueListResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMatchQueueListResponse, NetMessageMatchQueueListResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMatchQueueListResponse__FieldAccessorTable; }
    }
    
    public const int ListFieldNumber = 1;
    private pbc::PopsicleList<global::Gazillion.NetStructMatchQueueEntry> list_ = new pbc::PopsicleList<global::Gazillion.NetStructMatchQueueEntry>();
    public scg::IList<global::Gazillion.NetStructMatchQueueEntry> ListList {
      get { return list_; }
    }
    public int ListCount {
      get { return list_.Count; }
    }
    public global::Gazillion.NetStructMatchQueueEntry GetList(int index) {
      return list_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Gazillion.NetStructMatchQueueEntry element in ListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMatchQueueListResponseFieldNames;
      if (list_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], list_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Gazillion.NetStructMatchQueueEntry element in ListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMatchQueueListResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchQueueListResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchQueueListResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchQueueListResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchQueueListResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchQueueListResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchQueueListResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMatchQueueListResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMatchQueueListResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchQueueListResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMatchQueueListResponse MakeReadOnly() {
      list_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMatchQueueListResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMatchQueueListResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMatchQueueListResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMatchQueueListResponse result;
      
      private NetMessageMatchQueueListResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMatchQueueListResponse original = result;
          result = new NetMessageMatchQueueListResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMatchQueueListResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMatchQueueListResponse.Descriptor; }
      }
      
      public override NetMessageMatchQueueListResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMatchQueueListResponse.DefaultInstance; }
      }
      
      public override NetMessageMatchQueueListResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMatchQueueListResponse) {
          return MergeFrom((NetMessageMatchQueueListResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMatchQueueListResponse other) {
        if (other == global::Gazillion.NetMessageMatchQueueListResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.list_.Count != 0) {
          result.list_.Add(other.list_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMatchQueueListResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMatchQueueListResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.list_, global::Gazillion.NetStructMatchQueueEntry.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Gazillion.NetStructMatchQueueEntry> ListList {
        get { return PrepareBuilder().list_; }
      }
      public int ListCount {
        get { return result.ListCount; }
      }
      public global::Gazillion.NetStructMatchQueueEntry GetList(int index) {
        return result.GetList(index);
      }
      public Builder SetList(int index, global::Gazillion.NetStructMatchQueueEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.list_[index] = value;
        return this;
      }
      public Builder SetList(int index, global::Gazillion.NetStructMatchQueueEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.list_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddList(global::Gazillion.NetStructMatchQueueEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.list_.Add(value);
        return this;
      }
      public Builder AddList(global::Gazillion.NetStructMatchQueueEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.list_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeList(scg::IEnumerable<global::Gazillion.NetStructMatchQueueEntry> values) {
        PrepareBuilder();
        result.list_.Add(values);
        return this;
      }
      public Builder ClearList() {
        PrepareBuilder();
        result.list_.Clear();
        return this;
      }
    }
    static NetMessageMatchQueueListResponse() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMatchQueueResponse : pb::GeneratedMessage<NetMessageMatchQueueResponse, NetMessageMatchQueueResponse.Builder> {
    private NetMessageMatchQueueResponse() { }
    private static readonly NetMessageMatchQueueResponse defaultInstance = new NetMessageMatchQueueResponse().MakeReadOnly();
    private static readonly string[] _netMessageMatchQueueResponseFieldNames = new string[] { "queueIndex", "queuePrototypeId" };
    private static readonly uint[] _netMessageMatchQueueResponseFieldTags = new uint[] { 8, 16 };
    public static NetMessageMatchQueueResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMatchQueueResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMatchQueueResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMatchQueueResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMatchQueueResponse, NetMessageMatchQueueResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMatchQueueResponse__FieldAccessorTable; }
    }
    
    public const int QueueIndexFieldNumber = 1;
    private bool hasQueueIndex;
    private uint queueIndex_;
    public bool HasQueueIndex {
      get { return hasQueueIndex; }
    }
    public uint QueueIndex {
      get { return queueIndex_; }
    }
    
    public const int QueuePrototypeIdFieldNumber = 2;
    private bool hasQueuePrototypeId;
    private ulong queuePrototypeId_;
    public bool HasQueuePrototypeId {
      get { return hasQueuePrototypeId; }
    }
    public ulong QueuePrototypeId {
      get { return queuePrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasQueueIndex) return false;
        if (!hasQueuePrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMatchQueueResponseFieldNames;
      if (hasQueueIndex) {
        output.WriteUInt32(1, field_names[0], QueueIndex);
      }
      if (hasQueuePrototypeId) {
        output.WriteUInt64(2, field_names[1], QueuePrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasQueueIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, QueueIndex);
      }
      if (hasQueuePrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, QueuePrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMatchQueueResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchQueueResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchQueueResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchQueueResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchQueueResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchQueueResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchQueueResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMatchQueueResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMatchQueueResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchQueueResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMatchQueueResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMatchQueueResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMatchQueueResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMatchQueueResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMatchQueueResponse result;
      
      private NetMessageMatchQueueResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMatchQueueResponse original = result;
          result = new NetMessageMatchQueueResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMatchQueueResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMatchQueueResponse.Descriptor; }
      }
      
      public override NetMessageMatchQueueResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMatchQueueResponse.DefaultInstance; }
      }
      
      public override NetMessageMatchQueueResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMatchQueueResponse) {
          return MergeFrom((NetMessageMatchQueueResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMatchQueueResponse other) {
        if (other == global::Gazillion.NetMessageMatchQueueResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasQueueIndex) {
          QueueIndex = other.QueueIndex;
        }
        if (other.HasQueuePrototypeId) {
          QueuePrototypeId = other.QueuePrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMatchQueueResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMatchQueueResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasQueueIndex = input.ReadUInt32(ref result.queueIndex_);
              break;
            }
            case 16: {
              result.hasQueuePrototypeId = input.ReadUInt64(ref result.queuePrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasQueueIndex {
        get { return result.hasQueueIndex; }
      }
      public uint QueueIndex {
        get { return result.QueueIndex; }
        set { SetQueueIndex(value); }
      }
      public Builder SetQueueIndex(uint value) {
        PrepareBuilder();
        result.hasQueueIndex = true;
        result.queueIndex_ = value;
        return this;
      }
      public Builder ClearQueueIndex() {
        PrepareBuilder();
        result.hasQueueIndex = false;
        result.queueIndex_ = 0;
        return this;
      }
      
      public bool HasQueuePrototypeId {
        get { return result.hasQueuePrototypeId; }
      }
      public ulong QueuePrototypeId {
        get { return result.QueuePrototypeId; }
        set { SetQueuePrototypeId(value); }
      }
      public Builder SetQueuePrototypeId(ulong value) {
        PrepareBuilder();
        result.hasQueuePrototypeId = true;
        result.queuePrototypeId_ = value;
        return this;
      }
      public Builder ClearQueuePrototypeId() {
        PrepareBuilder();
        result.hasQueuePrototypeId = false;
        result.queuePrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageMatchQueueResponse() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMatchInviteNotification : pb::GeneratedMessage<NetMessageMatchInviteNotification, NetMessageMatchInviteNotification.Builder> {
    private NetMessageMatchInviteNotification() { }
    private static readonly NetMessageMatchInviteNotification defaultInstance = new NetMessageMatchInviteNotification().MakeReadOnly();
    private static readonly string[] _netMessageMatchInviteNotificationFieldNames = new string[] { "matchNumber", "queueIndex", "queuePrototypeId" };
    private static readonly uint[] _netMessageMatchInviteNotificationFieldTags = new uint[] { 24, 8, 16 };
    public static NetMessageMatchInviteNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMatchInviteNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMatchInviteNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMatchInviteNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMatchInviteNotification, NetMessageMatchInviteNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMatchInviteNotification__FieldAccessorTable; }
    }
    
    public const int QueueIndexFieldNumber = 1;
    private bool hasQueueIndex;
    private uint queueIndex_;
    public bool HasQueueIndex {
      get { return hasQueueIndex; }
    }
    public uint QueueIndex {
      get { return queueIndex_; }
    }
    
    public const int QueuePrototypeIdFieldNumber = 2;
    private bool hasQueuePrototypeId;
    private ulong queuePrototypeId_;
    public bool HasQueuePrototypeId {
      get { return hasQueuePrototypeId; }
    }
    public ulong QueuePrototypeId {
      get { return queuePrototypeId_; }
    }
    
    public const int MatchNumberFieldNumber = 3;
    private bool hasMatchNumber;
    private ulong matchNumber_;
    public bool HasMatchNumber {
      get { return hasMatchNumber; }
    }
    public ulong MatchNumber {
      get { return matchNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasQueueIndex) return false;
        if (!hasQueuePrototypeId) return false;
        if (!hasMatchNumber) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMatchInviteNotificationFieldNames;
      if (hasQueueIndex) {
        output.WriteUInt32(1, field_names[1], QueueIndex);
      }
      if (hasQueuePrototypeId) {
        output.WriteUInt64(2, field_names[2], QueuePrototypeId);
      }
      if (hasMatchNumber) {
        output.WriteUInt64(3, field_names[0], MatchNumber);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasQueueIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, QueueIndex);
      }
      if (hasQueuePrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, QueuePrototypeId);
      }
      if (hasMatchNumber) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, MatchNumber);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMatchInviteNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchInviteNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchInviteNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchInviteNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchInviteNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchInviteNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchInviteNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMatchInviteNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMatchInviteNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchInviteNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMatchInviteNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMatchInviteNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMatchInviteNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMatchInviteNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMatchInviteNotification result;
      
      private NetMessageMatchInviteNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMatchInviteNotification original = result;
          result = new NetMessageMatchInviteNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMatchInviteNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMatchInviteNotification.Descriptor; }
      }
      
      public override NetMessageMatchInviteNotification DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMatchInviteNotification.DefaultInstance; }
      }
      
      public override NetMessageMatchInviteNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMatchInviteNotification) {
          return MergeFrom((NetMessageMatchInviteNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMatchInviteNotification other) {
        if (other == global::Gazillion.NetMessageMatchInviteNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasQueueIndex) {
          QueueIndex = other.QueueIndex;
        }
        if (other.HasQueuePrototypeId) {
          QueuePrototypeId = other.QueuePrototypeId;
        }
        if (other.HasMatchNumber) {
          MatchNumber = other.MatchNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMatchInviteNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMatchInviteNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasQueueIndex = input.ReadUInt32(ref result.queueIndex_);
              break;
            }
            case 16: {
              result.hasQueuePrototypeId = input.ReadUInt64(ref result.queuePrototypeId_);
              break;
            }
            case 24: {
              result.hasMatchNumber = input.ReadUInt64(ref result.matchNumber_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasQueueIndex {
        get { return result.hasQueueIndex; }
      }
      public uint QueueIndex {
        get { return result.QueueIndex; }
        set { SetQueueIndex(value); }
      }
      public Builder SetQueueIndex(uint value) {
        PrepareBuilder();
        result.hasQueueIndex = true;
        result.queueIndex_ = value;
        return this;
      }
      public Builder ClearQueueIndex() {
        PrepareBuilder();
        result.hasQueueIndex = false;
        result.queueIndex_ = 0;
        return this;
      }
      
      public bool HasQueuePrototypeId {
        get { return result.hasQueuePrototypeId; }
      }
      public ulong QueuePrototypeId {
        get { return result.QueuePrototypeId; }
        set { SetQueuePrototypeId(value); }
      }
      public Builder SetQueuePrototypeId(ulong value) {
        PrepareBuilder();
        result.hasQueuePrototypeId = true;
        result.queuePrototypeId_ = value;
        return this;
      }
      public Builder ClearQueuePrototypeId() {
        PrepareBuilder();
        result.hasQueuePrototypeId = false;
        result.queuePrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasMatchNumber {
        get { return result.hasMatchNumber; }
      }
      public ulong MatchNumber {
        get { return result.MatchNumber; }
        set { SetMatchNumber(value); }
      }
      public Builder SetMatchNumber(ulong value) {
        PrepareBuilder();
        result.hasMatchNumber = true;
        result.matchNumber_ = value;
        return this;
      }
      public Builder ClearMatchNumber() {
        PrepareBuilder();
        result.hasMatchNumber = false;
        result.matchNumber_ = 0UL;
        return this;
      }
    }
    static NetMessageMatchInviteNotification() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMatchStatsResponse : pb::GeneratedMessage<NetMessageMatchStatsResponse, NetMessageMatchStatsResponse.Builder> {
    private NetMessageMatchStatsResponse() { }
    private static readonly NetMessageMatchStatsResponse defaultInstance = new NetMessageMatchStatsResponse().MakeReadOnly();
    private static readonly string[] _netMessageMatchStatsResponseFieldNames = new string[] { "playerFound", "statRequestNumber", "summaries" };
    private static readonly uint[] _netMessageMatchStatsResponseFieldTags = new uint[] { 16, 8, 26 };
    public static NetMessageMatchStatsResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMatchStatsResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMatchStatsResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMatchStatsResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMatchStatsResponse, NetMessageMatchStatsResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMatchStatsResponse__FieldAccessorTable; }
    }
    
    public const int StatRequestNumberFieldNumber = 1;
    private bool hasStatRequestNumber;
    private uint statRequestNumber_;
    public bool HasStatRequestNumber {
      get { return hasStatRequestNumber; }
    }
    public uint StatRequestNumber {
      get { return statRequestNumber_; }
    }
    
    public const int PlayerFoundFieldNumber = 2;
    private bool hasPlayerFound;
    private bool playerFound_;
    public bool HasPlayerFound {
      get { return hasPlayerFound; }
    }
    public bool PlayerFound {
      get { return playerFound_; }
    }
    
    public const int SummariesFieldNumber = 3;
    private pbc::PopsicleList<global::Gazillion.MatchPlayerStatisticsSummary> summaries_ = new pbc::PopsicleList<global::Gazillion.MatchPlayerStatisticsSummary>();
    public scg::IList<global::Gazillion.MatchPlayerStatisticsSummary> SummariesList {
      get { return summaries_; }
    }
    public int SummariesCount {
      get { return summaries_.Count; }
    }
    public global::Gazillion.MatchPlayerStatisticsSummary GetSummaries(int index) {
      return summaries_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStatRequestNumber) return false;
        if (!hasPlayerFound) return false;
        foreach (global::Gazillion.MatchPlayerStatisticsSummary element in SummariesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMatchStatsResponseFieldNames;
      if (hasStatRequestNumber) {
        output.WriteUInt32(1, field_names[1], StatRequestNumber);
      }
      if (hasPlayerFound) {
        output.WriteBool(2, field_names[0], PlayerFound);
      }
      if (summaries_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], summaries_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStatRequestNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, StatRequestNumber);
      }
      if (hasPlayerFound) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, PlayerFound);
      }
      foreach (global::Gazillion.MatchPlayerStatisticsSummary element in SummariesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMatchStatsResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchStatsResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchStatsResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchStatsResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchStatsResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchStatsResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchStatsResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMatchStatsResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMatchStatsResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchStatsResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMatchStatsResponse MakeReadOnly() {
      summaries_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMatchStatsResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMatchStatsResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMatchStatsResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMatchStatsResponse result;
      
      private NetMessageMatchStatsResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMatchStatsResponse original = result;
          result = new NetMessageMatchStatsResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMatchStatsResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMatchStatsResponse.Descriptor; }
      }
      
      public override NetMessageMatchStatsResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMatchStatsResponse.DefaultInstance; }
      }
      
      public override NetMessageMatchStatsResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMatchStatsResponse) {
          return MergeFrom((NetMessageMatchStatsResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMatchStatsResponse other) {
        if (other == global::Gazillion.NetMessageMatchStatsResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStatRequestNumber) {
          StatRequestNumber = other.StatRequestNumber;
        }
        if (other.HasPlayerFound) {
          PlayerFound = other.PlayerFound;
        }
        if (other.summaries_.Count != 0) {
          result.summaries_.Add(other.summaries_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMatchStatsResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMatchStatsResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStatRequestNumber = input.ReadUInt32(ref result.statRequestNumber_);
              break;
            }
            case 16: {
              result.hasPlayerFound = input.ReadBool(ref result.playerFound_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.summaries_, global::Gazillion.MatchPlayerStatisticsSummary.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStatRequestNumber {
        get { return result.hasStatRequestNumber; }
      }
      public uint StatRequestNumber {
        get { return result.StatRequestNumber; }
        set { SetStatRequestNumber(value); }
      }
      public Builder SetStatRequestNumber(uint value) {
        PrepareBuilder();
        result.hasStatRequestNumber = true;
        result.statRequestNumber_ = value;
        return this;
      }
      public Builder ClearStatRequestNumber() {
        PrepareBuilder();
        result.hasStatRequestNumber = false;
        result.statRequestNumber_ = 0;
        return this;
      }
      
      public bool HasPlayerFound {
        get { return result.hasPlayerFound; }
      }
      public bool PlayerFound {
        get { return result.PlayerFound; }
        set { SetPlayerFound(value); }
      }
      public Builder SetPlayerFound(bool value) {
        PrepareBuilder();
        result.hasPlayerFound = true;
        result.playerFound_ = value;
        return this;
      }
      public Builder ClearPlayerFound() {
        PrepareBuilder();
        result.hasPlayerFound = false;
        result.playerFound_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.MatchPlayerStatisticsSummary> SummariesList {
        get { return PrepareBuilder().summaries_; }
      }
      public int SummariesCount {
        get { return result.SummariesCount; }
      }
      public global::Gazillion.MatchPlayerStatisticsSummary GetSummaries(int index) {
        return result.GetSummaries(index);
      }
      public Builder SetSummaries(int index, global::Gazillion.MatchPlayerStatisticsSummary value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.summaries_[index] = value;
        return this;
      }
      public Builder SetSummaries(int index, global::Gazillion.MatchPlayerStatisticsSummary.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.summaries_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSummaries(global::Gazillion.MatchPlayerStatisticsSummary value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.summaries_.Add(value);
        return this;
      }
      public Builder AddSummaries(global::Gazillion.MatchPlayerStatisticsSummary.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.summaries_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSummaries(scg::IEnumerable<global::Gazillion.MatchPlayerStatisticsSummary> values) {
        PrepareBuilder();
        result.summaries_.Add(values);
        return this;
      }
      public Builder ClearSummaries() {
        PrepareBuilder();
        result.summaries_.Clear();
        return this;
      }
    }
    static NetMessageMatchStatsResponse() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMatchTeamRosterNotification : pb::GeneratedMessage<NetMessageMatchTeamRosterNotification, NetMessageMatchTeamRosterNotification.Builder> {
    private NetMessageMatchTeamRosterNotification() { }
    private static readonly NetMessageMatchTeamRosterNotification defaultInstance = new NetMessageMatchTeamRosterNotification().MakeReadOnly();
    private static readonly string[] _netMessageMatchTeamRosterNotificationFieldNames = new string[] { "metaGameEntityId", "playerDbGuids", "teamPrototypeId" };
    private static readonly uint[] _netMessageMatchTeamRosterNotificationFieldTags = new uint[] { 8, 24, 16 };
    public static NetMessageMatchTeamRosterNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMatchTeamRosterNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMatchTeamRosterNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMatchTeamRosterNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMatchTeamRosterNotification, NetMessageMatchTeamRosterNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMatchTeamRosterNotification__FieldAccessorTable; }
    }
    
    public const int MetaGameEntityIdFieldNumber = 1;
    private bool hasMetaGameEntityId;
    private ulong metaGameEntityId_;
    public bool HasMetaGameEntityId {
      get { return hasMetaGameEntityId; }
    }
    public ulong MetaGameEntityId {
      get { return metaGameEntityId_; }
    }
    
    public const int TeamPrototypeIdFieldNumber = 2;
    private bool hasTeamPrototypeId;
    private ulong teamPrototypeId_;
    public bool HasTeamPrototypeId {
      get { return hasTeamPrototypeId; }
    }
    public ulong TeamPrototypeId {
      get { return teamPrototypeId_; }
    }
    
    public const int PlayerDbGuidsFieldNumber = 3;
    private pbc::PopsicleList<ulong> playerDbGuids_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> PlayerDbGuidsList {
      get { return pbc::Lists.AsReadOnly(playerDbGuids_); }
    }
    public int PlayerDbGuidsCount {
      get { return playerDbGuids_.Count; }
    }
    public ulong GetPlayerDbGuids(int index) {
      return playerDbGuids_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMetaGameEntityId) return false;
        if (!hasTeamPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMatchTeamRosterNotificationFieldNames;
      if (hasMetaGameEntityId) {
        output.WriteUInt64(1, field_names[0], MetaGameEntityId);
      }
      if (hasTeamPrototypeId) {
        output.WriteUInt64(2, field_names[2], TeamPrototypeId);
      }
      if (playerDbGuids_.Count > 0) {
        output.WriteUInt64Array(3, field_names[1], playerDbGuids_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMetaGameEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MetaGameEntityId);
      }
      if (hasTeamPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, TeamPrototypeId);
      }
      {
        int dataSize = 0;
        foreach (ulong element in PlayerDbGuidsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * playerDbGuids_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMatchTeamRosterNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchTeamRosterNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchTeamRosterNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchTeamRosterNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchTeamRosterNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchTeamRosterNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchTeamRosterNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMatchTeamRosterNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMatchTeamRosterNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchTeamRosterNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMatchTeamRosterNotification MakeReadOnly() {
      playerDbGuids_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMatchTeamRosterNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMatchTeamRosterNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMatchTeamRosterNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMatchTeamRosterNotification result;
      
      private NetMessageMatchTeamRosterNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMatchTeamRosterNotification original = result;
          result = new NetMessageMatchTeamRosterNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMatchTeamRosterNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMatchTeamRosterNotification.Descriptor; }
      }
      
      public override NetMessageMatchTeamRosterNotification DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMatchTeamRosterNotification.DefaultInstance; }
      }
      
      public override NetMessageMatchTeamRosterNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMatchTeamRosterNotification) {
          return MergeFrom((NetMessageMatchTeamRosterNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMatchTeamRosterNotification other) {
        if (other == global::Gazillion.NetMessageMatchTeamRosterNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMetaGameEntityId) {
          MetaGameEntityId = other.MetaGameEntityId;
        }
        if (other.HasTeamPrototypeId) {
          TeamPrototypeId = other.TeamPrototypeId;
        }
        if (other.playerDbGuids_.Count != 0) {
          result.playerDbGuids_.Add(other.playerDbGuids_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMatchTeamRosterNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMatchTeamRosterNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMetaGameEntityId = input.ReadUInt64(ref result.metaGameEntityId_);
              break;
            }
            case 16: {
              result.hasTeamPrototypeId = input.ReadUInt64(ref result.teamPrototypeId_);
              break;
            }
            case 26:
            case 24: {
              input.ReadUInt64Array(tag, field_name, result.playerDbGuids_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMetaGameEntityId {
        get { return result.hasMetaGameEntityId; }
      }
      public ulong MetaGameEntityId {
        get { return result.MetaGameEntityId; }
        set { SetMetaGameEntityId(value); }
      }
      public Builder SetMetaGameEntityId(ulong value) {
        PrepareBuilder();
        result.hasMetaGameEntityId = true;
        result.metaGameEntityId_ = value;
        return this;
      }
      public Builder ClearMetaGameEntityId() {
        PrepareBuilder();
        result.hasMetaGameEntityId = false;
        result.metaGameEntityId_ = 0UL;
        return this;
      }
      
      public bool HasTeamPrototypeId {
        get { return result.hasTeamPrototypeId; }
      }
      public ulong TeamPrototypeId {
        get { return result.TeamPrototypeId; }
        set { SetTeamPrototypeId(value); }
      }
      public Builder SetTeamPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasTeamPrototypeId = true;
        result.teamPrototypeId_ = value;
        return this;
      }
      public Builder ClearTeamPrototypeId() {
        PrepareBuilder();
        result.hasTeamPrototypeId = false;
        result.teamPrototypeId_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> PlayerDbGuidsList {
        get { return PrepareBuilder().playerDbGuids_; }
      }
      public int PlayerDbGuidsCount {
        get { return result.PlayerDbGuidsCount; }
      }
      public ulong GetPlayerDbGuids(int index) {
        return result.GetPlayerDbGuids(index);
      }
      public Builder SetPlayerDbGuids(int index, ulong value) {
        PrepareBuilder();
        result.playerDbGuids_[index] = value;
        return this;
      }
      public Builder AddPlayerDbGuids(ulong value) {
        PrepareBuilder();
        result.playerDbGuids_.Add(value);
        return this;
      }
      public Builder AddRangePlayerDbGuids(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.playerDbGuids_.Add(values);
        return this;
      }
      public Builder ClearPlayerDbGuids() {
        PrepareBuilder();
        result.playerDbGuids_.Clear();
        return this;
      }
    }
    static NetMessageMatchTeamRosterNotification() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMatchTeamSizeNotification : pb::GeneratedMessage<NetMessageMatchTeamSizeNotification, NetMessageMatchTeamSizeNotification.Builder> {
    private NetMessageMatchTeamSizeNotification() { }
    private static readonly NetMessageMatchTeamSizeNotification defaultInstance = new NetMessageMatchTeamSizeNotification().MakeReadOnly();
    private static readonly string[] _netMessageMatchTeamSizeNotificationFieldNames = new string[] { "metaGameEntityId", "teamSize" };
    private static readonly uint[] _netMessageMatchTeamSizeNotificationFieldTags = new uint[] { 8, 16 };
    public static NetMessageMatchTeamSizeNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMatchTeamSizeNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMatchTeamSizeNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMatchTeamSizeNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMatchTeamSizeNotification, NetMessageMatchTeamSizeNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMatchTeamSizeNotification__FieldAccessorTable; }
    }
    
    public const int MetaGameEntityIdFieldNumber = 1;
    private bool hasMetaGameEntityId;
    private ulong metaGameEntityId_;
    public bool HasMetaGameEntityId {
      get { return hasMetaGameEntityId; }
    }
    public ulong MetaGameEntityId {
      get { return metaGameEntityId_; }
    }
    
    public const int TeamSizeFieldNumber = 2;
    private bool hasTeamSize;
    private uint teamSize_;
    public bool HasTeamSize {
      get { return hasTeamSize; }
    }
    public uint TeamSize {
      get { return teamSize_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMetaGameEntityId) return false;
        if (!hasTeamSize) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMatchTeamSizeNotificationFieldNames;
      if (hasMetaGameEntityId) {
        output.WriteUInt64(1, field_names[0], MetaGameEntityId);
      }
      if (hasTeamSize) {
        output.WriteUInt32(2, field_names[1], TeamSize);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMetaGameEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MetaGameEntityId);
      }
      if (hasTeamSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, TeamSize);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMatchTeamSizeNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchTeamSizeNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchTeamSizeNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchTeamSizeNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchTeamSizeNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchTeamSizeNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchTeamSizeNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMatchTeamSizeNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMatchTeamSizeNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchTeamSizeNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMatchTeamSizeNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMatchTeamSizeNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMatchTeamSizeNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMatchTeamSizeNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMatchTeamSizeNotification result;
      
      private NetMessageMatchTeamSizeNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMatchTeamSizeNotification original = result;
          result = new NetMessageMatchTeamSizeNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMatchTeamSizeNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMatchTeamSizeNotification.Descriptor; }
      }
      
      public override NetMessageMatchTeamSizeNotification DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMatchTeamSizeNotification.DefaultInstance; }
      }
      
      public override NetMessageMatchTeamSizeNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMatchTeamSizeNotification) {
          return MergeFrom((NetMessageMatchTeamSizeNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMatchTeamSizeNotification other) {
        if (other == global::Gazillion.NetMessageMatchTeamSizeNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMetaGameEntityId) {
          MetaGameEntityId = other.MetaGameEntityId;
        }
        if (other.HasTeamSize) {
          TeamSize = other.TeamSize;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMatchTeamSizeNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMatchTeamSizeNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMetaGameEntityId = input.ReadUInt64(ref result.metaGameEntityId_);
              break;
            }
            case 16: {
              result.hasTeamSize = input.ReadUInt32(ref result.teamSize_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMetaGameEntityId {
        get { return result.hasMetaGameEntityId; }
      }
      public ulong MetaGameEntityId {
        get { return result.MetaGameEntityId; }
        set { SetMetaGameEntityId(value); }
      }
      public Builder SetMetaGameEntityId(ulong value) {
        PrepareBuilder();
        result.hasMetaGameEntityId = true;
        result.metaGameEntityId_ = value;
        return this;
      }
      public Builder ClearMetaGameEntityId() {
        PrepareBuilder();
        result.hasMetaGameEntityId = false;
        result.metaGameEntityId_ = 0UL;
        return this;
      }
      
      public bool HasTeamSize {
        get { return result.hasTeamSize; }
      }
      public uint TeamSize {
        get { return result.TeamSize; }
        set { SetTeamSize(value); }
      }
      public Builder SetTeamSize(uint value) {
        PrepareBuilder();
        result.hasTeamSize = true;
        result.teamSize_ = value;
        return this;
      }
      public Builder ClearTeamSize() {
        PrepareBuilder();
        result.hasTeamSize = false;
        result.teamSize_ = 0;
        return this;
      }
    }
    static NetMessageMatchTeamSizeNotification() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageChatFromGameSystem : pb::GeneratedMessage<NetMessageChatFromGameSystem, NetMessageChatFromGameSystem.Builder> {
    private NetMessageChatFromGameSystem() { }
    private static readonly NetMessageChatFromGameSystem defaultInstance = new NetMessageChatFromGameSystem().MakeReadOnly();
    private static readonly string[] _netMessageChatFromGameSystemFieldNames = new string[] { "messageStringId", "sourceStringId", "type" };
    private static readonly uint[] _netMessageChatFromGameSystemFieldTags = new uint[] { 24, 16, 8 };
    public static NetMessageChatFromGameSystem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageChatFromGameSystem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageChatFromGameSystem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageChatFromGameSystem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageChatFromGameSystem, NetMessageChatFromGameSystem.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageChatFromGameSystem__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::Gazillion.ChatRoomTypes type_ = global::Gazillion.ChatRoomTypes.CHAT_ROOM_TYPE_LOCAL;
    public bool HasType {
      get { return hasType; }
    }
    public global::Gazillion.ChatRoomTypes Type {
      get { return type_; }
    }
    
    public const int SourceStringIdFieldNumber = 2;
    private bool hasSourceStringId;
    private ulong sourceStringId_;
    public bool HasSourceStringId {
      get { return hasSourceStringId; }
    }
    public ulong SourceStringId {
      get { return sourceStringId_; }
    }
    
    public const int MessageStringIdFieldNumber = 3;
    private bool hasMessageStringId;
    private ulong messageStringId_;
    public bool HasMessageStringId {
      get { return hasMessageStringId; }
    }
    public ulong MessageStringId {
      get { return messageStringId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasSourceStringId) return false;
        if (!hasMessageStringId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageChatFromGameSystemFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[2], (int) Type, Type);
      }
      if (hasSourceStringId) {
        output.WriteUInt64(2, field_names[1], SourceStringId);
      }
      if (hasMessageStringId) {
        output.WriteUInt64(3, field_names[0], MessageStringId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
      }
      if (hasSourceStringId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, SourceStringId);
      }
      if (hasMessageStringId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, MessageStringId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageChatFromGameSystem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChatFromGameSystem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChatFromGameSystem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChatFromGameSystem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChatFromGameSystem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChatFromGameSystem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChatFromGameSystem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageChatFromGameSystem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageChatFromGameSystem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChatFromGameSystem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageChatFromGameSystem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageChatFromGameSystem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageChatFromGameSystem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageChatFromGameSystem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageChatFromGameSystem result;
      
      private NetMessageChatFromGameSystem PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageChatFromGameSystem original = result;
          result = new NetMessageChatFromGameSystem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageChatFromGameSystem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageChatFromGameSystem.Descriptor; }
      }
      
      public override NetMessageChatFromGameSystem DefaultInstanceForType {
        get { return global::Gazillion.NetMessageChatFromGameSystem.DefaultInstance; }
      }
      
      public override NetMessageChatFromGameSystem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageChatFromGameSystem) {
          return MergeFrom((NetMessageChatFromGameSystem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageChatFromGameSystem other) {
        if (other == global::Gazillion.NetMessageChatFromGameSystem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasSourceStringId) {
          SourceStringId = other.SourceStringId;
        }
        if (other.HasMessageStringId) {
          MessageStringId = other.MessageStringId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageChatFromGameSystemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageChatFromGameSystemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              result.hasSourceStringId = input.ReadUInt64(ref result.sourceStringId_);
              break;
            }
            case 24: {
              result.hasMessageStringId = input.ReadUInt64(ref result.messageStringId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Gazillion.ChatRoomTypes Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Gazillion.ChatRoomTypes value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Gazillion.ChatRoomTypes.CHAT_ROOM_TYPE_LOCAL;
        return this;
      }
      
      public bool HasSourceStringId {
        get { return result.hasSourceStringId; }
      }
      public ulong SourceStringId {
        get { return result.SourceStringId; }
        set { SetSourceStringId(value); }
      }
      public Builder SetSourceStringId(ulong value) {
        PrepareBuilder();
        result.hasSourceStringId = true;
        result.sourceStringId_ = value;
        return this;
      }
      public Builder ClearSourceStringId() {
        PrepareBuilder();
        result.hasSourceStringId = false;
        result.sourceStringId_ = 0UL;
        return this;
      }
      
      public bool HasMessageStringId {
        get { return result.hasMessageStringId; }
      }
      public ulong MessageStringId {
        get { return result.MessageStringId; }
        set { SetMessageStringId(value); }
      }
      public Builder SetMessageStringId(ulong value) {
        PrepareBuilder();
        result.hasMessageStringId = true;
        result.messageStringId_ = value;
        return this;
      }
      public Builder ClearMessageStringId() {
        PrepareBuilder();
        result.hasMessageStringId = false;
        result.messageStringId_ = 0UL;
        return this;
      }
    }
    static NetMessageChatFromGameSystem() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageChatError : pb::GeneratedMessage<NetMessageChatError, NetMessageChatError.Builder> {
    private NetMessageChatError() { }
    private static readonly NetMessageChatError defaultInstance = new NetMessageChatError().MakeReadOnly();
    private static readonly string[] _netMessageChatErrorFieldNames = new string[] { "errorMessage" };
    private static readonly uint[] _netMessageChatErrorFieldTags = new uint[] { 8 };
    public static NetMessageChatError DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageChatError DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageChatError ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageChatError__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageChatError, NetMessageChatError.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageChatError__FieldAccessorTable; }
    }
    
    public const int ErrorMessageFieldNumber = 1;
    private bool hasErrorMessage;
    private global::Gazillion.ChatErrorMessages errorMessage_ = global::Gazillion.ChatErrorMessages.CHAT_ERROR_NO_SUCH_USER;
    public bool HasErrorMessage {
      get { return hasErrorMessage; }
    }
    public global::Gazillion.ChatErrorMessages ErrorMessage {
      get { return errorMessage_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasErrorMessage) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageChatErrorFieldNames;
      if (hasErrorMessage) {
        output.WriteEnum(1, field_names[0], (int) ErrorMessage, ErrorMessage);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasErrorMessage) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) ErrorMessage);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageChatError ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChatError ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChatError ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChatError ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChatError ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChatError ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChatError ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageChatError ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageChatError ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChatError ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageChatError MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageChatError prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageChatError, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageChatError cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageChatError result;
      
      private NetMessageChatError PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageChatError original = result;
          result = new NetMessageChatError();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageChatError MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageChatError.Descriptor; }
      }
      
      public override NetMessageChatError DefaultInstanceForType {
        get { return global::Gazillion.NetMessageChatError.DefaultInstance; }
      }
      
      public override NetMessageChatError BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageChatError) {
          return MergeFrom((NetMessageChatError) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageChatError other) {
        if (other == global::Gazillion.NetMessageChatError.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasErrorMessage) {
          ErrorMessage = other.ErrorMessage;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageChatErrorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageChatErrorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.errorMessage_, out unknown)) {
                result.hasErrorMessage = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasErrorMessage {
       get { return result.hasErrorMessage; }
      }
      public global::Gazillion.ChatErrorMessages ErrorMessage {
        get { return result.ErrorMessage; }
        set { SetErrorMessage(value); }
      }
      public Builder SetErrorMessage(global::Gazillion.ChatErrorMessages value) {
        PrepareBuilder();
        result.hasErrorMessage = true;
        result.errorMessage_ = value;
        return this;
      }
      public Builder ClearErrorMessage() {
        PrepareBuilder();
        result.hasErrorMessage = false;
        result.errorMessage_ = global::Gazillion.ChatErrorMessages.CHAT_ERROR_NO_SUCH_USER;
        return this;
      }
    }
    static NetMessageChatError() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCatalogItems : pb::GeneratedMessage<NetMessageCatalogItems, NetMessageCatalogItems.Builder> {
    private NetMessageCatalogItems() { }
    private static readonly NetMessageCatalogItems defaultInstance = new NetMessageCatalogItems().MakeReadOnly();
    private static readonly string[] _netMessageCatalogItemsFieldNames = new string[] { "entries", "timestamp", "urls" };
    private static readonly uint[] _netMessageCatalogItemsFieldTags = new uint[] { 18, 8, 26 };
    public static NetMessageCatalogItems DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCatalogItems DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCatalogItems ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCatalogItems__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCatalogItems, NetMessageCatalogItems.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCatalogItems__FieldAccessorTable; }
    }
    
    public const int TimestampFieldNumber = 1;
    private bool hasTimestamp;
    private long timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public long Timestamp {
      get { return timestamp_; }
    }
    
    public const int EntriesFieldNumber = 2;
    private pbc::PopsicleList<global::Gazillion.MarvelHeroesCatalogEntry> entries_ = new pbc::PopsicleList<global::Gazillion.MarvelHeroesCatalogEntry>();
    public scg::IList<global::Gazillion.MarvelHeroesCatalogEntry> EntriesList {
      get { return entries_; }
    }
    public int EntriesCount {
      get { return entries_.Count; }
    }
    public global::Gazillion.MarvelHeroesCatalogEntry GetEntries(int index) {
      return entries_[index];
    }
    
    public const int UrlsFieldNumber = 3;
    private pbc::PopsicleList<global::Gazillion.MHLocalizedCatalogUrls> urls_ = new pbc::PopsicleList<global::Gazillion.MHLocalizedCatalogUrls>();
    public scg::IList<global::Gazillion.MHLocalizedCatalogUrls> UrlsList {
      get { return urls_; }
    }
    public int UrlsCount {
      get { return urls_.Count; }
    }
    public global::Gazillion.MHLocalizedCatalogUrls GetUrls(int index) {
      return urls_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Gazillion.MarvelHeroesCatalogEntry element in EntriesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Gazillion.MHLocalizedCatalogUrls element in UrlsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCatalogItemsFieldNames;
      if (hasTimestamp) {
        output.WriteInt64(1, field_names[1], Timestamp);
      }
      if (entries_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], entries_);
      }
      if (urls_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], urls_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTimestamp) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, Timestamp);
      }
      foreach (global::Gazillion.MarvelHeroesCatalogEntry element in EntriesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      foreach (global::Gazillion.MHLocalizedCatalogUrls element in UrlsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCatalogItems ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCatalogItems ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCatalogItems ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCatalogItems ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCatalogItems ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCatalogItems ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCatalogItems ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCatalogItems ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCatalogItems ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCatalogItems ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCatalogItems MakeReadOnly() {
      entries_.MakeReadOnly();
      urls_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCatalogItems prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCatalogItems, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCatalogItems cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCatalogItems result;
      
      private NetMessageCatalogItems PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCatalogItems original = result;
          result = new NetMessageCatalogItems();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCatalogItems MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCatalogItems.Descriptor; }
      }
      
      public override NetMessageCatalogItems DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCatalogItems.DefaultInstance; }
      }
      
      public override NetMessageCatalogItems BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCatalogItems) {
          return MergeFrom((NetMessageCatalogItems) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCatalogItems other) {
        if (other == global::Gazillion.NetMessageCatalogItems.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.entries_.Count != 0) {
          result.entries_.Add(other.entries_);
        }
        if (other.urls_.Count != 0) {
          result.urls_.Add(other.urls_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCatalogItemsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCatalogItemsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.entries_, global::Gazillion.MarvelHeroesCatalogEntry.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.urls_, global::Gazillion.MHLocalizedCatalogUrls.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public long Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(long value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.MarvelHeroesCatalogEntry> EntriesList {
        get { return PrepareBuilder().entries_; }
      }
      public int EntriesCount {
        get { return result.EntriesCount; }
      }
      public global::Gazillion.MarvelHeroesCatalogEntry GetEntries(int index) {
        return result.GetEntries(index);
      }
      public Builder SetEntries(int index, global::Gazillion.MarvelHeroesCatalogEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entries_[index] = value;
        return this;
      }
      public Builder SetEntries(int index, global::Gazillion.MarvelHeroesCatalogEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entries_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEntries(global::Gazillion.MarvelHeroesCatalogEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entries_.Add(value);
        return this;
      }
      public Builder AddEntries(global::Gazillion.MarvelHeroesCatalogEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entries_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEntries(scg::IEnumerable<global::Gazillion.MarvelHeroesCatalogEntry> values) {
        PrepareBuilder();
        result.entries_.Add(values);
        return this;
      }
      public Builder ClearEntries() {
        PrepareBuilder();
        result.entries_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.MHLocalizedCatalogUrls> UrlsList {
        get { return PrepareBuilder().urls_; }
      }
      public int UrlsCount {
        get { return result.UrlsCount; }
      }
      public global::Gazillion.MHLocalizedCatalogUrls GetUrls(int index) {
        return result.GetUrls(index);
      }
      public Builder SetUrls(int index, global::Gazillion.MHLocalizedCatalogUrls value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.urls_[index] = value;
        return this;
      }
      public Builder SetUrls(int index, global::Gazillion.MHLocalizedCatalogUrls.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.urls_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUrls(global::Gazillion.MHLocalizedCatalogUrls value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.urls_.Add(value);
        return this;
      }
      public Builder AddUrls(global::Gazillion.MHLocalizedCatalogUrls.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.urls_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUrls(scg::IEnumerable<global::Gazillion.MHLocalizedCatalogUrls> values) {
        PrepareBuilder();
        result.urls_.Add(values);
        return this;
      }
      public Builder ClearUrls() {
        PrepareBuilder();
        result.urls_.Clear();
        return this;
      }
    }
    static NetMessageCatalogItems() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGetCurrencyBalanceResponse : pb::GeneratedMessage<NetMessageGetCurrencyBalanceResponse, NetMessageGetCurrencyBalanceResponse.Builder> {
    private NetMessageGetCurrencyBalanceResponse() { }
    private static readonly NetMessageGetCurrencyBalanceResponse defaultInstance = new NetMessageGetCurrencyBalanceResponse().MakeReadOnly();
    private static readonly string[] _netMessageGetCurrencyBalanceResponseFieldNames = new string[] { "currencyBalance" };
    private static readonly uint[] _netMessageGetCurrencyBalanceResponseFieldTags = new uint[] { 8 };
    public static NetMessageGetCurrencyBalanceResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGetCurrencyBalanceResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGetCurrencyBalanceResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGetCurrencyBalanceResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGetCurrencyBalanceResponse, NetMessageGetCurrencyBalanceResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGetCurrencyBalanceResponse__FieldAccessorTable; }
    }
    
    public const int CurrencyBalanceFieldNumber = 1;
    private bool hasCurrencyBalance;
    private long currencyBalance_;
    public bool HasCurrencyBalance {
      get { return hasCurrencyBalance; }
    }
    public long CurrencyBalance {
      get { return currencyBalance_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCurrencyBalance) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGetCurrencyBalanceResponseFieldNames;
      if (hasCurrencyBalance) {
        output.WriteInt64(1, field_names[0], CurrencyBalance);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCurrencyBalance) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, CurrencyBalance);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGetCurrencyBalanceResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalanceResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalanceResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalanceResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalanceResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalanceResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalanceResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGetCurrencyBalanceResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGetCurrencyBalanceResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalanceResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGetCurrencyBalanceResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGetCurrencyBalanceResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGetCurrencyBalanceResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGetCurrencyBalanceResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGetCurrencyBalanceResponse result;
      
      private NetMessageGetCurrencyBalanceResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGetCurrencyBalanceResponse original = result;
          result = new NetMessageGetCurrencyBalanceResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGetCurrencyBalanceResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGetCurrencyBalanceResponse.Descriptor; }
      }
      
      public override NetMessageGetCurrencyBalanceResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGetCurrencyBalanceResponse.DefaultInstance; }
      }
      
      public override NetMessageGetCurrencyBalanceResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGetCurrencyBalanceResponse) {
          return MergeFrom((NetMessageGetCurrencyBalanceResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGetCurrencyBalanceResponse other) {
        if (other == global::Gazillion.NetMessageGetCurrencyBalanceResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCurrencyBalance) {
          CurrencyBalance = other.CurrencyBalance;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGetCurrencyBalanceResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGetCurrencyBalanceResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCurrencyBalance = input.ReadInt64(ref result.currencyBalance_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCurrencyBalance {
        get { return result.hasCurrencyBalance; }
      }
      public long CurrencyBalance {
        get { return result.CurrencyBalance; }
        set { SetCurrencyBalance(value); }
      }
      public Builder SetCurrencyBalance(long value) {
        PrepareBuilder();
        result.hasCurrencyBalance = true;
        result.currencyBalance_ = value;
        return this;
      }
      public Builder ClearCurrencyBalance() {
        PrepareBuilder();
        result.hasCurrencyBalance = false;
        result.currencyBalance_ = 0L;
        return this;
      }
    }
    static NetMessageGetCurrencyBalanceResponse() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBuyItemFromCatalogResponse : pb::GeneratedMessage<NetMessageBuyItemFromCatalogResponse, NetMessageBuyItemFromCatalogResponse.Builder> {
    private NetMessageBuyItemFromCatalogResponse() { }
    private static readonly NetMessageBuyItemFromCatalogResponse defaultInstance = new NetMessageBuyItemFromCatalogResponse().MakeReadOnly();
    private static readonly string[] _netMessageBuyItemFromCatalogResponseFieldNames = new string[] { "currentCurrencyBalance", "didSucceed", "errorcode", "errormessage", "isWebPurchase", "protototypeIds", "skuId" };
    private static readonly uint[] _netMessageBuyItemFromCatalogResponseFieldTags = new uint[] { 16, 8, 32, 26, 48, 56, 40 };
    public static NetMessageBuyItemFromCatalogResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBuyItemFromCatalogResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBuyItemFromCatalogResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageBuyItemFromCatalogResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBuyItemFromCatalogResponse, NetMessageBuyItemFromCatalogResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageBuyItemFromCatalogResponse__FieldAccessorTable; }
    }
    
    public const int DidSucceedFieldNumber = 1;
    private bool hasDidSucceed;
    private bool didSucceed_;
    public bool HasDidSucceed {
      get { return hasDidSucceed; }
    }
    public bool DidSucceed {
      get { return didSucceed_; }
    }
    
    public const int CurrentCurrencyBalanceFieldNumber = 2;
    private bool hasCurrentCurrencyBalance;
    private long currentCurrencyBalance_;
    public bool HasCurrentCurrencyBalance {
      get { return hasCurrentCurrencyBalance; }
    }
    public long CurrentCurrencyBalance {
      get { return currentCurrencyBalance_; }
    }
    
    public const int ErrormessageFieldNumber = 3;
    private bool hasErrormessage;
    private string errormessage_ = "";
    public bool HasErrormessage {
      get { return hasErrormessage; }
    }
    public string Errormessage {
      get { return errormessage_; }
    }
    
    public const int ErrorcodeFieldNumber = 4;
    private bool hasErrorcode;
    private global::Gazillion.BuyItemResultErrorCodes errorcode_ = global::Gazillion.BuyItemResultErrorCodes.BUY_RESULT_ERROR_SUCCESS;
    public bool HasErrorcode {
      get { return hasErrorcode; }
    }
    public global::Gazillion.BuyItemResultErrorCodes Errorcode {
      get { return errorcode_; }
    }
    
    public const int SkuIdFieldNumber = 5;
    private bool hasSkuId;
    private long skuId_;
    public bool HasSkuId {
      get { return hasSkuId; }
    }
    public long SkuId {
      get { return skuId_; }
    }
    
    public const int IsWebPurchaseFieldNumber = 6;
    private bool hasIsWebPurchase;
    private bool isWebPurchase_;
    public bool HasIsWebPurchase {
      get { return hasIsWebPurchase; }
    }
    public bool IsWebPurchase {
      get { return isWebPurchase_; }
    }
    
    public const int ProtototypeIdsFieldNumber = 7;
    private pbc::PopsicleList<ulong> protototypeIds_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> ProtototypeIdsList {
      get { return pbc::Lists.AsReadOnly(protototypeIds_); }
    }
    public int ProtototypeIdsCount {
      get { return protototypeIds_.Count; }
    }
    public ulong GetProtototypeIds(int index) {
      return protototypeIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDidSucceed) return false;
        if (!hasCurrentCurrencyBalance) return false;
        if (!hasErrorcode) return false;
        if (!hasSkuId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBuyItemFromCatalogResponseFieldNames;
      if (hasDidSucceed) {
        output.WriteBool(1, field_names[1], DidSucceed);
      }
      if (hasCurrentCurrencyBalance) {
        output.WriteInt64(2, field_names[0], CurrentCurrencyBalance);
      }
      if (hasErrormessage) {
        output.WriteString(3, field_names[3], Errormessage);
      }
      if (hasErrorcode) {
        output.WriteEnum(4, field_names[2], (int) Errorcode, Errorcode);
      }
      if (hasSkuId) {
        output.WriteInt64(5, field_names[6], SkuId);
      }
      if (hasIsWebPurchase) {
        output.WriteBool(6, field_names[4], IsWebPurchase);
      }
      if (protototypeIds_.Count > 0) {
        output.WriteUInt64Array(7, field_names[5], protototypeIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDidSucceed) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, DidSucceed);
      }
      if (hasCurrentCurrencyBalance) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, CurrentCurrencyBalance);
      }
      if (hasErrormessage) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Errormessage);
      }
      if (hasErrorcode) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Errorcode);
      }
      if (hasSkuId) {
        size += pb::CodedOutputStream.ComputeInt64Size(5, SkuId);
      }
      if (hasIsWebPurchase) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, IsWebPurchase);
      }
      {
        int dataSize = 0;
        foreach (ulong element in ProtototypeIdsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * protototypeIds_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBuyItemFromCatalogResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalogResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalogResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalogResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalogResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalogResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalogResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalogResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalogResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalogResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBuyItemFromCatalogResponse MakeReadOnly() {
      protototypeIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBuyItemFromCatalogResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBuyItemFromCatalogResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBuyItemFromCatalogResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBuyItemFromCatalogResponse result;
      
      private NetMessageBuyItemFromCatalogResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBuyItemFromCatalogResponse original = result;
          result = new NetMessageBuyItemFromCatalogResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBuyItemFromCatalogResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBuyItemFromCatalogResponse.Descriptor; }
      }
      
      public override NetMessageBuyItemFromCatalogResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBuyItemFromCatalogResponse.DefaultInstance; }
      }
      
      public override NetMessageBuyItemFromCatalogResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBuyItemFromCatalogResponse) {
          return MergeFrom((NetMessageBuyItemFromCatalogResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBuyItemFromCatalogResponse other) {
        if (other == global::Gazillion.NetMessageBuyItemFromCatalogResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDidSucceed) {
          DidSucceed = other.DidSucceed;
        }
        if (other.HasCurrentCurrencyBalance) {
          CurrentCurrencyBalance = other.CurrentCurrencyBalance;
        }
        if (other.HasErrormessage) {
          Errormessage = other.Errormessage;
        }
        if (other.HasErrorcode) {
          Errorcode = other.Errorcode;
        }
        if (other.HasSkuId) {
          SkuId = other.SkuId;
        }
        if (other.HasIsWebPurchase) {
          IsWebPurchase = other.IsWebPurchase;
        }
        if (other.protototypeIds_.Count != 0) {
          result.protototypeIds_.Add(other.protototypeIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBuyItemFromCatalogResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBuyItemFromCatalogResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDidSucceed = input.ReadBool(ref result.didSucceed_);
              break;
            }
            case 16: {
              result.hasCurrentCurrencyBalance = input.ReadInt64(ref result.currentCurrencyBalance_);
              break;
            }
            case 26: {
              result.hasErrormessage = input.ReadString(ref result.errormessage_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.errorcode_, out unknown)) {
                result.hasErrorcode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
            case 40: {
              result.hasSkuId = input.ReadInt64(ref result.skuId_);
              break;
            }
            case 48: {
              result.hasIsWebPurchase = input.ReadBool(ref result.isWebPurchase_);
              break;
            }
            case 58:
            case 56: {
              input.ReadUInt64Array(tag, field_name, result.protototypeIds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDidSucceed {
        get { return result.hasDidSucceed; }
      }
      public bool DidSucceed {
        get { return result.DidSucceed; }
        set { SetDidSucceed(value); }
      }
      public Builder SetDidSucceed(bool value) {
        PrepareBuilder();
        result.hasDidSucceed = true;
        result.didSucceed_ = value;
        return this;
      }
      public Builder ClearDidSucceed() {
        PrepareBuilder();
        result.hasDidSucceed = false;
        result.didSucceed_ = false;
        return this;
      }
      
      public bool HasCurrentCurrencyBalance {
        get { return result.hasCurrentCurrencyBalance; }
      }
      public long CurrentCurrencyBalance {
        get { return result.CurrentCurrencyBalance; }
        set { SetCurrentCurrencyBalance(value); }
      }
      public Builder SetCurrentCurrencyBalance(long value) {
        PrepareBuilder();
        result.hasCurrentCurrencyBalance = true;
        result.currentCurrencyBalance_ = value;
        return this;
      }
      public Builder ClearCurrentCurrencyBalance() {
        PrepareBuilder();
        result.hasCurrentCurrencyBalance = false;
        result.currentCurrencyBalance_ = 0L;
        return this;
      }
      
      public bool HasErrormessage {
        get { return result.hasErrormessage; }
      }
      public string Errormessage {
        get { return result.Errormessage; }
        set { SetErrormessage(value); }
      }
      public Builder SetErrormessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrormessage = true;
        result.errormessage_ = value;
        return this;
      }
      public Builder ClearErrormessage() {
        PrepareBuilder();
        result.hasErrormessage = false;
        result.errormessage_ = "";
        return this;
      }
      
      public bool HasErrorcode {
       get { return result.hasErrorcode; }
      }
      public global::Gazillion.BuyItemResultErrorCodes Errorcode {
        get { return result.Errorcode; }
        set { SetErrorcode(value); }
      }
      public Builder SetErrorcode(global::Gazillion.BuyItemResultErrorCodes value) {
        PrepareBuilder();
        result.hasErrorcode = true;
        result.errorcode_ = value;
        return this;
      }
      public Builder ClearErrorcode() {
        PrepareBuilder();
        result.hasErrorcode = false;
        result.errorcode_ = global::Gazillion.BuyItemResultErrorCodes.BUY_RESULT_ERROR_SUCCESS;
        return this;
      }
      
      public bool HasSkuId {
        get { return result.hasSkuId; }
      }
      public long SkuId {
        get { return result.SkuId; }
        set { SetSkuId(value); }
      }
      public Builder SetSkuId(long value) {
        PrepareBuilder();
        result.hasSkuId = true;
        result.skuId_ = value;
        return this;
      }
      public Builder ClearSkuId() {
        PrepareBuilder();
        result.hasSkuId = false;
        result.skuId_ = 0L;
        return this;
      }
      
      public bool HasIsWebPurchase {
        get { return result.hasIsWebPurchase; }
      }
      public bool IsWebPurchase {
        get { return result.IsWebPurchase; }
        set { SetIsWebPurchase(value); }
      }
      public Builder SetIsWebPurchase(bool value) {
        PrepareBuilder();
        result.hasIsWebPurchase = true;
        result.isWebPurchase_ = value;
        return this;
      }
      public Builder ClearIsWebPurchase() {
        PrepareBuilder();
        result.hasIsWebPurchase = false;
        result.isWebPurchase_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> ProtototypeIdsList {
        get { return PrepareBuilder().protototypeIds_; }
      }
      public int ProtototypeIdsCount {
        get { return result.ProtototypeIdsCount; }
      }
      public ulong GetProtototypeIds(int index) {
        return result.GetProtototypeIds(index);
      }
      public Builder SetProtototypeIds(int index, ulong value) {
        PrepareBuilder();
        result.protototypeIds_[index] = value;
        return this;
      }
      public Builder AddProtototypeIds(ulong value) {
        PrepareBuilder();
        result.protototypeIds_.Add(value);
        return this;
      }
      public Builder AddRangeProtototypeIds(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.protototypeIds_.Add(values);
        return this;
      }
      public Builder ClearProtototypeIds() {
        PrepareBuilder();
        result.protototypeIds_.Clear();
        return this;
      }
    }
    static NetMessageBuyItemFromCatalogResponse() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityPreviewerNewTarget : pb::GeneratedMessage<NetMessageEntityPreviewerNewTarget, NetMessageEntityPreviewerNewTarget.Builder> {
    private NetMessageEntityPreviewerNewTarget() { }
    private static readonly NetMessageEntityPreviewerNewTarget defaultInstance = new NetMessageEntityPreviewerNewTarget().MakeReadOnly();
    private static readonly string[] _netMessageEntityPreviewerNewTargetFieldNames = new string[] { "entityId" };
    private static readonly uint[] _netMessageEntityPreviewerNewTargetFieldTags = new uint[] { 8 };
    public static NetMessageEntityPreviewerNewTarget DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityPreviewerNewTarget DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityPreviewerNewTarget ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityPreviewerNewTarget__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityPreviewerNewTarget, NetMessageEntityPreviewerNewTarget.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityPreviewerNewTarget__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityPreviewerNewTargetFieldNames;
      if (hasEntityId) {
        output.WriteUInt64(1, field_names[0], EntityId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityPreviewerNewTarget ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTarget ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTarget ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTarget ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTarget ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTarget ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTarget ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTarget ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTarget ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTarget ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityPreviewerNewTarget MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityPreviewerNewTarget prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityPreviewerNewTarget, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityPreviewerNewTarget cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityPreviewerNewTarget result;
      
      private NetMessageEntityPreviewerNewTarget PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityPreviewerNewTarget original = result;
          result = new NetMessageEntityPreviewerNewTarget();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityPreviewerNewTarget MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityPreviewerNewTarget.Descriptor; }
      }
      
      public override NetMessageEntityPreviewerNewTarget DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityPreviewerNewTarget.DefaultInstance; }
      }
      
      public override NetMessageEntityPreviewerNewTarget BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityPreviewerNewTarget) {
          return MergeFrom((NetMessageEntityPreviewerNewTarget) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityPreviewerNewTarget other) {
        if (other == global::Gazillion.NetMessageEntityPreviewerNewTarget.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityPreviewerNewTargetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityPreviewerNewTargetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
    }
    static NetMessageEntityPreviewerNewTarget() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageServerNotification : pb::GeneratedMessage<NetMessageServerNotification, NetMessageServerNotification.Builder> {
    private NetMessageServerNotification() { }
    private static readonly NetMessageServerNotification defaultInstance = new NetMessageServerNotification().MakeReadOnly();
    private static readonly string[] _netMessageServerNotificationFieldNames = new string[] { "serverMessage" };
    private static readonly uint[] _netMessageServerNotificationFieldTags = new uint[] { 10 };
    public static NetMessageServerNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageServerNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageServerNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageServerNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageServerNotification, NetMessageServerNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageServerNotification__FieldAccessorTable; }
    }
    
    public const int ServerMessageFieldNumber = 1;
    private bool hasServerMessage;
    private string serverMessage_ = "";
    public bool HasServerMessage {
      get { return hasServerMessage; }
    }
    public string ServerMessage {
      get { return serverMessage_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasServerMessage) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageServerNotificationFieldNames;
      if (hasServerMessage) {
        output.WriteString(1, field_names[0], ServerMessage);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasServerMessage) {
        size += pb::CodedOutputStream.ComputeStringSize(1, ServerMessage);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageServerNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageServerNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageServerNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageServerNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageServerNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageServerNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageServerNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageServerNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageServerNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageServerNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageServerNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageServerNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageServerNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageServerNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageServerNotification result;
      
      private NetMessageServerNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageServerNotification original = result;
          result = new NetMessageServerNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageServerNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageServerNotification.Descriptor; }
      }
      
      public override NetMessageServerNotification DefaultInstanceForType {
        get { return global::Gazillion.NetMessageServerNotification.DefaultInstance; }
      }
      
      public override NetMessageServerNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageServerNotification) {
          return MergeFrom((NetMessageServerNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageServerNotification other) {
        if (other == global::Gazillion.NetMessageServerNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServerMessage) {
          ServerMessage = other.ServerMessage;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageServerNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageServerNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasServerMessage = input.ReadString(ref result.serverMessage_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasServerMessage {
        get { return result.hasServerMessage; }
      }
      public string ServerMessage {
        get { return result.ServerMessage; }
        set { SetServerMessage(value); }
      }
      public Builder SetServerMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServerMessage = true;
        result.serverMessage_ = value;
        return this;
      }
      public Builder ClearServerMessage() {
        PrepareBuilder();
        result.hasServerMessage = false;
        result.serverMessage_ = "";
        return this;
      }
    }
    static NetMessageServerNotification() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRemoteMissionNotification : pb::GeneratedMessage<NetMessageRemoteMissionNotification, NetMessageRemoteMissionNotification.Builder> {
    private NetMessageRemoteMissionNotification() { }
    private static readonly NetMessageRemoteMissionNotification defaultInstance = new NetMessageRemoteMissionNotification().MakeReadOnly();
    private static readonly string[] _netMessageRemoteMissionNotificationFieldNames = new string[] { "dialogTextStringId", "entityPrototypeId", "iconPathOverrideId", "missionPrototypeId" };
    private static readonly uint[] _netMessageRemoteMissionNotificationFieldTags = new uint[] { 16, 8, 32, 24 };
    public static NetMessageRemoteMissionNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRemoteMissionNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRemoteMissionNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRemoteMissionNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRemoteMissionNotification, NetMessageRemoteMissionNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRemoteMissionNotification__FieldAccessorTable; }
    }
    
    public const int EntityPrototypeIdFieldNumber = 1;
    private bool hasEntityPrototypeId;
    private ulong entityPrototypeId_;
    public bool HasEntityPrototypeId {
      get { return hasEntityPrototypeId; }
    }
    public ulong EntityPrototypeId {
      get { return entityPrototypeId_; }
    }
    
    public const int DialogTextStringIdFieldNumber = 2;
    private bool hasDialogTextStringId;
    private ulong dialogTextStringId_;
    public bool HasDialogTextStringId {
      get { return hasDialogTextStringId; }
    }
    public ulong DialogTextStringId {
      get { return dialogTextStringId_; }
    }
    
    public const int MissionPrototypeIdFieldNumber = 3;
    private bool hasMissionPrototypeId;
    private ulong missionPrototypeId_;
    public bool HasMissionPrototypeId {
      get { return hasMissionPrototypeId; }
    }
    public ulong MissionPrototypeId {
      get { return missionPrototypeId_; }
    }
    
    public const int IconPathOverrideIdFieldNumber = 4;
    private bool hasIconPathOverrideId;
    private ulong iconPathOverrideId_;
    public bool HasIconPathOverrideId {
      get { return hasIconPathOverrideId; }
    }
    public ulong IconPathOverrideId {
      get { return iconPathOverrideId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityPrototypeId) return false;
        if (!hasDialogTextStringId) return false;
        if (!hasMissionPrototypeId) return false;
        if (!hasIconPathOverrideId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRemoteMissionNotificationFieldNames;
      if (hasEntityPrototypeId) {
        output.WriteUInt64(1, field_names[1], EntityPrototypeId);
      }
      if (hasDialogTextStringId) {
        output.WriteUInt64(2, field_names[0], DialogTextStringId);
      }
      if (hasMissionPrototypeId) {
        output.WriteUInt64(3, field_names[3], MissionPrototypeId);
      }
      if (hasIconPathOverrideId) {
        output.WriteUInt64(4, field_names[2], IconPathOverrideId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityPrototypeId);
      }
      if (hasDialogTextStringId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, DialogTextStringId);
      }
      if (hasMissionPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, MissionPrototypeId);
      }
      if (hasIconPathOverrideId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, IconPathOverrideId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRemoteMissionNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRemoteMissionNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRemoteMissionNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRemoteMissionNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRemoteMissionNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRemoteMissionNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRemoteMissionNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRemoteMissionNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRemoteMissionNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRemoteMissionNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRemoteMissionNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRemoteMissionNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRemoteMissionNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRemoteMissionNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRemoteMissionNotification result;
      
      private NetMessageRemoteMissionNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRemoteMissionNotification original = result;
          result = new NetMessageRemoteMissionNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRemoteMissionNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRemoteMissionNotification.Descriptor; }
      }
      
      public override NetMessageRemoteMissionNotification DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRemoteMissionNotification.DefaultInstance; }
      }
      
      public override NetMessageRemoteMissionNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRemoteMissionNotification) {
          return MergeFrom((NetMessageRemoteMissionNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRemoteMissionNotification other) {
        if (other == global::Gazillion.NetMessageRemoteMissionNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityPrototypeId) {
          EntityPrototypeId = other.EntityPrototypeId;
        }
        if (other.HasDialogTextStringId) {
          DialogTextStringId = other.DialogTextStringId;
        }
        if (other.HasMissionPrototypeId) {
          MissionPrototypeId = other.MissionPrototypeId;
        }
        if (other.HasIconPathOverrideId) {
          IconPathOverrideId = other.IconPathOverrideId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRemoteMissionNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRemoteMissionNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityPrototypeId = input.ReadUInt64(ref result.entityPrototypeId_);
              break;
            }
            case 16: {
              result.hasDialogTextStringId = input.ReadUInt64(ref result.dialogTextStringId_);
              break;
            }
            case 24: {
              result.hasMissionPrototypeId = input.ReadUInt64(ref result.missionPrototypeId_);
              break;
            }
            case 32: {
              result.hasIconPathOverrideId = input.ReadUInt64(ref result.iconPathOverrideId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityPrototypeId {
        get { return result.hasEntityPrototypeId; }
      }
      public ulong EntityPrototypeId {
        get { return result.EntityPrototypeId; }
        set { SetEntityPrototypeId(value); }
      }
      public Builder SetEntityPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasEntityPrototypeId = true;
        result.entityPrototypeId_ = value;
        return this;
      }
      public Builder ClearEntityPrototypeId() {
        PrepareBuilder();
        result.hasEntityPrototypeId = false;
        result.entityPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasDialogTextStringId {
        get { return result.hasDialogTextStringId; }
      }
      public ulong DialogTextStringId {
        get { return result.DialogTextStringId; }
        set { SetDialogTextStringId(value); }
      }
      public Builder SetDialogTextStringId(ulong value) {
        PrepareBuilder();
        result.hasDialogTextStringId = true;
        result.dialogTextStringId_ = value;
        return this;
      }
      public Builder ClearDialogTextStringId() {
        PrepareBuilder();
        result.hasDialogTextStringId = false;
        result.dialogTextStringId_ = 0UL;
        return this;
      }
      
      public bool HasMissionPrototypeId {
        get { return result.hasMissionPrototypeId; }
      }
      public ulong MissionPrototypeId {
        get { return result.MissionPrototypeId; }
        set { SetMissionPrototypeId(value); }
      }
      public Builder SetMissionPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasMissionPrototypeId = true;
        result.missionPrototypeId_ = value;
        return this;
      }
      public Builder ClearMissionPrototypeId() {
        PrepareBuilder();
        result.hasMissionPrototypeId = false;
        result.missionPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasIconPathOverrideId {
        get { return result.hasIconPathOverrideId; }
      }
      public ulong IconPathOverrideId {
        get { return result.IconPathOverrideId; }
        set { SetIconPathOverrideId(value); }
      }
      public Builder SetIconPathOverrideId(ulong value) {
        PrepareBuilder();
        result.hasIconPathOverrideId = true;
        result.iconPathOverrideId_ = value;
        return this;
      }
      public Builder ClearIconPathOverrideId() {
        PrepareBuilder();
        result.hasIconPathOverrideId = false;
        result.iconPathOverrideId_ = 0UL;
        return this;
      }
    }
    static NetMessageRemoteMissionNotification() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUINotificationMessage : pb::GeneratedMessage<NetMessageUINotificationMessage, NetMessageUINotificationMessage.Builder> {
    private NetMessageUINotificationMessage() { }
    private static readonly NetMessageUINotificationMessage defaultInstance = new NetMessageUINotificationMessage().MakeReadOnly();
    private static readonly string[] _netMessageUINotificationMessageFieldNames = new string[] { "uiNotificationRef" };
    private static readonly uint[] _netMessageUINotificationMessageFieldTags = new uint[] { 8 };
    public static NetMessageUINotificationMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUINotificationMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUINotificationMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUINotificationMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUINotificationMessage, NetMessageUINotificationMessage.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUINotificationMessage__FieldAccessorTable; }
    }
    
    public const int UiNotificationRefFieldNumber = 1;
    private bool hasUiNotificationRef;
    private ulong uiNotificationRef_;
    public bool HasUiNotificationRef {
      get { return hasUiNotificationRef; }
    }
    public ulong UiNotificationRef {
      get { return uiNotificationRef_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUiNotificationRef) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUINotificationMessageFieldNames;
      if (hasUiNotificationRef) {
        output.WriteUInt64(1, field_names[0], UiNotificationRef);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUiNotificationRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, UiNotificationRef);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUINotificationMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUINotificationMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUINotificationMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUINotificationMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUINotificationMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUINotificationMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUINotificationMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUINotificationMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUINotificationMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUINotificationMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUINotificationMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUINotificationMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUINotificationMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUINotificationMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUINotificationMessage result;
      
      private NetMessageUINotificationMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUINotificationMessage original = result;
          result = new NetMessageUINotificationMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUINotificationMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUINotificationMessage.Descriptor; }
      }
      
      public override NetMessageUINotificationMessage DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUINotificationMessage.DefaultInstance; }
      }
      
      public override NetMessageUINotificationMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUINotificationMessage) {
          return MergeFrom((NetMessageUINotificationMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUINotificationMessage other) {
        if (other == global::Gazillion.NetMessageUINotificationMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUiNotificationRef) {
          UiNotificationRef = other.UiNotificationRef;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUINotificationMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUINotificationMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUiNotificationRef = input.ReadUInt64(ref result.uiNotificationRef_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUiNotificationRef {
        get { return result.hasUiNotificationRef; }
      }
      public ulong UiNotificationRef {
        get { return result.UiNotificationRef; }
        set { SetUiNotificationRef(value); }
      }
      public Builder SetUiNotificationRef(ulong value) {
        PrepareBuilder();
        result.hasUiNotificationRef = true;
        result.uiNotificationRef_ = value;
        return this;
      }
      public Builder ClearUiNotificationRef() {
        PrepareBuilder();
        result.hasUiNotificationRef = false;
        result.uiNotificationRef_ = 0UL;
        return this;
      }
    }
    static NetMessageUINotificationMessage() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStartPvPTimer : pb::GeneratedMessage<NetMessageStartPvPTimer, NetMessageStartPvPTimer.Builder> {
    private NetMessageStartPvPTimer() { }
    private static readonly NetMessageStartPvPTimer defaultInstance = new NetMessageStartPvPTimer().MakeReadOnly();
    private static readonly string[] _netMessageStartPvPTimerFieldNames = new string[] { "criticalTimeWarning", "endTime", "lowTimeWarning", "metaGameId", "startTime" };
    private static readonly uint[] _netMessageStartPvPTimerFieldTags = new uint[] { 32, 16, 24, 40, 8 };
    public static NetMessageStartPvPTimer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStartPvPTimer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStartPvPTimer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageStartPvPTimer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStartPvPTimer, NetMessageStartPvPTimer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageStartPvPTimer__FieldAccessorTable; }
    }
    
    public const int StartTimeFieldNumber = 1;
    private bool hasStartTime;
    private uint startTime_;
    public bool HasStartTime {
      get { return hasStartTime; }
    }
    public uint StartTime {
      get { return startTime_; }
    }
    
    public const int EndTimeFieldNumber = 2;
    private bool hasEndTime;
    private uint endTime_;
    public bool HasEndTime {
      get { return hasEndTime; }
    }
    public uint EndTime {
      get { return endTime_; }
    }
    
    public const int LowTimeWarningFieldNumber = 3;
    private bool hasLowTimeWarning;
    private uint lowTimeWarning_;
    public bool HasLowTimeWarning {
      get { return hasLowTimeWarning; }
    }
    public uint LowTimeWarning {
      get { return lowTimeWarning_; }
    }
    
    public const int CriticalTimeWarningFieldNumber = 4;
    private bool hasCriticalTimeWarning;
    private uint criticalTimeWarning_;
    public bool HasCriticalTimeWarning {
      get { return hasCriticalTimeWarning; }
    }
    public uint CriticalTimeWarning {
      get { return criticalTimeWarning_; }
    }
    
    public const int MetaGameIdFieldNumber = 5;
    private bool hasMetaGameId;
    private ulong metaGameId_;
    public bool HasMetaGameId {
      get { return hasMetaGameId; }
    }
    public ulong MetaGameId {
      get { return metaGameId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStartTime) return false;
        if (!hasEndTime) return false;
        if (!hasLowTimeWarning) return false;
        if (!hasCriticalTimeWarning) return false;
        if (!hasMetaGameId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStartPvPTimerFieldNames;
      if (hasStartTime) {
        output.WriteUInt32(1, field_names[4], StartTime);
      }
      if (hasEndTime) {
        output.WriteUInt32(2, field_names[1], EndTime);
      }
      if (hasLowTimeWarning) {
        output.WriteUInt32(3, field_names[2], LowTimeWarning);
      }
      if (hasCriticalTimeWarning) {
        output.WriteUInt32(4, field_names[0], CriticalTimeWarning);
      }
      if (hasMetaGameId) {
        output.WriteUInt64(5, field_names[3], MetaGameId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStartTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, StartTime);
      }
      if (hasEndTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, EndTime);
      }
      if (hasLowTimeWarning) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, LowTimeWarning);
      }
      if (hasCriticalTimeWarning) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, CriticalTimeWarning);
      }
      if (hasMetaGameId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, MetaGameId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStartPvPTimer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartPvPTimer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartPvPTimer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartPvPTimer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartPvPTimer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartPvPTimer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartPvPTimer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStartPvPTimer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStartPvPTimer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartPvPTimer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStartPvPTimer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStartPvPTimer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStartPvPTimer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStartPvPTimer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStartPvPTimer result;
      
      private NetMessageStartPvPTimer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStartPvPTimer original = result;
          result = new NetMessageStartPvPTimer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStartPvPTimer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStartPvPTimer.Descriptor; }
      }
      
      public override NetMessageStartPvPTimer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStartPvPTimer.DefaultInstance; }
      }
      
      public override NetMessageStartPvPTimer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStartPvPTimer) {
          return MergeFrom((NetMessageStartPvPTimer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStartPvPTimer other) {
        if (other == global::Gazillion.NetMessageStartPvPTimer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStartTime) {
          StartTime = other.StartTime;
        }
        if (other.HasEndTime) {
          EndTime = other.EndTime;
        }
        if (other.HasLowTimeWarning) {
          LowTimeWarning = other.LowTimeWarning;
        }
        if (other.HasCriticalTimeWarning) {
          CriticalTimeWarning = other.CriticalTimeWarning;
        }
        if (other.HasMetaGameId) {
          MetaGameId = other.MetaGameId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStartPvPTimerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStartPvPTimerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStartTime = input.ReadUInt32(ref result.startTime_);
              break;
            }
            case 16: {
              result.hasEndTime = input.ReadUInt32(ref result.endTime_);
              break;
            }
            case 24: {
              result.hasLowTimeWarning = input.ReadUInt32(ref result.lowTimeWarning_);
              break;
            }
            case 32: {
              result.hasCriticalTimeWarning = input.ReadUInt32(ref result.criticalTimeWarning_);
              break;
            }
            case 40: {
              result.hasMetaGameId = input.ReadUInt64(ref result.metaGameId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStartTime {
        get { return result.hasStartTime; }
      }
      public uint StartTime {
        get { return result.StartTime; }
        set { SetStartTime(value); }
      }
      public Builder SetStartTime(uint value) {
        PrepareBuilder();
        result.hasStartTime = true;
        result.startTime_ = value;
        return this;
      }
      public Builder ClearStartTime() {
        PrepareBuilder();
        result.hasStartTime = false;
        result.startTime_ = 0;
        return this;
      }
      
      public bool HasEndTime {
        get { return result.hasEndTime; }
      }
      public uint EndTime {
        get { return result.EndTime; }
        set { SetEndTime(value); }
      }
      public Builder SetEndTime(uint value) {
        PrepareBuilder();
        result.hasEndTime = true;
        result.endTime_ = value;
        return this;
      }
      public Builder ClearEndTime() {
        PrepareBuilder();
        result.hasEndTime = false;
        result.endTime_ = 0;
        return this;
      }
      
      public bool HasLowTimeWarning {
        get { return result.hasLowTimeWarning; }
      }
      public uint LowTimeWarning {
        get { return result.LowTimeWarning; }
        set { SetLowTimeWarning(value); }
      }
      public Builder SetLowTimeWarning(uint value) {
        PrepareBuilder();
        result.hasLowTimeWarning = true;
        result.lowTimeWarning_ = value;
        return this;
      }
      public Builder ClearLowTimeWarning() {
        PrepareBuilder();
        result.hasLowTimeWarning = false;
        result.lowTimeWarning_ = 0;
        return this;
      }
      
      public bool HasCriticalTimeWarning {
        get { return result.hasCriticalTimeWarning; }
      }
      public uint CriticalTimeWarning {
        get { return result.CriticalTimeWarning; }
        set { SetCriticalTimeWarning(value); }
      }
      public Builder SetCriticalTimeWarning(uint value) {
        PrepareBuilder();
        result.hasCriticalTimeWarning = true;
        result.criticalTimeWarning_ = value;
        return this;
      }
      public Builder ClearCriticalTimeWarning() {
        PrepareBuilder();
        result.hasCriticalTimeWarning = false;
        result.criticalTimeWarning_ = 0;
        return this;
      }
      
      public bool HasMetaGameId {
        get { return result.hasMetaGameId; }
      }
      public ulong MetaGameId {
        get { return result.MetaGameId; }
        set { SetMetaGameId(value); }
      }
      public Builder SetMetaGameId(ulong value) {
        PrepareBuilder();
        result.hasMetaGameId = true;
        result.metaGameId_ = value;
        return this;
      }
      public Builder ClearMetaGameId() {
        PrepareBuilder();
        result.hasMetaGameId = false;
        result.metaGameId_ = 0UL;
        return this;
      }
    }
    static NetMessageStartPvPTimer() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetDifficultyThresholds : pb::GeneratedMessage<NetMessageSetDifficultyThresholds, NetMessageSetDifficultyThresholds.Builder> {
    private NetMessageSetDifficultyThresholds() { }
    private static readonly NetMessageSetDifficultyThresholds defaultInstance = new NetMessageSetDifficultyThresholds().MakeReadOnly();
    private static readonly string[] _netMessageSetDifficultyThresholdsFieldNames = new string[] { "failureThreshold", "warningThreshold" };
    private static readonly uint[] _netMessageSetDifficultyThresholdsFieldTags = new uint[] { 16, 8 };
    public static NetMessageSetDifficultyThresholds DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetDifficultyThresholds DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetDifficultyThresholds ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetDifficultyThresholds__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetDifficultyThresholds, NetMessageSetDifficultyThresholds.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetDifficultyThresholds__FieldAccessorTable; }
    }
    
    public const int WarningThresholdFieldNumber = 1;
    private bool hasWarningThreshold;
    private uint warningThreshold_;
    public bool HasWarningThreshold {
      get { return hasWarningThreshold; }
    }
    public uint WarningThreshold {
      get { return warningThreshold_; }
    }
    
    public const int FailureThresholdFieldNumber = 2;
    private bool hasFailureThreshold;
    private uint failureThreshold_;
    public bool HasFailureThreshold {
      get { return hasFailureThreshold; }
    }
    public uint FailureThreshold {
      get { return failureThreshold_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWarningThreshold) return false;
        if (!hasFailureThreshold) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetDifficultyThresholdsFieldNames;
      if (hasWarningThreshold) {
        output.WriteUInt32(1, field_names[1], WarningThreshold);
      }
      if (hasFailureThreshold) {
        output.WriteUInt32(2, field_names[0], FailureThreshold);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasWarningThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, WarningThreshold);
      }
      if (hasFailureThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, FailureThreshold);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetDifficultyThresholds ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetDifficultyThresholds ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetDifficultyThresholds ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetDifficultyThresholds ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetDifficultyThresholds ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetDifficultyThresholds ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetDifficultyThresholds ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetDifficultyThresholds ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetDifficultyThresholds ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetDifficultyThresholds ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetDifficultyThresholds MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetDifficultyThresholds prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetDifficultyThresholds, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetDifficultyThresholds cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetDifficultyThresholds result;
      
      private NetMessageSetDifficultyThresholds PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetDifficultyThresholds original = result;
          result = new NetMessageSetDifficultyThresholds();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetDifficultyThresholds MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetDifficultyThresholds.Descriptor; }
      }
      
      public override NetMessageSetDifficultyThresholds DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetDifficultyThresholds.DefaultInstance; }
      }
      
      public override NetMessageSetDifficultyThresholds BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetDifficultyThresholds) {
          return MergeFrom((NetMessageSetDifficultyThresholds) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetDifficultyThresholds other) {
        if (other == global::Gazillion.NetMessageSetDifficultyThresholds.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWarningThreshold) {
          WarningThreshold = other.WarningThreshold;
        }
        if (other.HasFailureThreshold) {
          FailureThreshold = other.FailureThreshold;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetDifficultyThresholdsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetDifficultyThresholdsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasWarningThreshold = input.ReadUInt32(ref result.warningThreshold_);
              break;
            }
            case 16: {
              result.hasFailureThreshold = input.ReadUInt32(ref result.failureThreshold_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWarningThreshold {
        get { return result.hasWarningThreshold; }
      }
      public uint WarningThreshold {
        get { return result.WarningThreshold; }
        set { SetWarningThreshold(value); }
      }
      public Builder SetWarningThreshold(uint value) {
        PrepareBuilder();
        result.hasWarningThreshold = true;
        result.warningThreshold_ = value;
        return this;
      }
      public Builder ClearWarningThreshold() {
        PrepareBuilder();
        result.hasWarningThreshold = false;
        result.warningThreshold_ = 0;
        return this;
      }
      
      public bool HasFailureThreshold {
        get { return result.hasFailureThreshold; }
      }
      public uint FailureThreshold {
        get { return result.FailureThreshold; }
        set { SetFailureThreshold(value); }
      }
      public Builder SetFailureThreshold(uint value) {
        PrepareBuilder();
        result.hasFailureThreshold = true;
        result.failureThreshold_ = value;
        return this;
      }
      public Builder ClearFailureThreshold() {
        PrepareBuilder();
        result.hasFailureThreshold = false;
        result.failureThreshold_ = 0;
        return this;
      }
    }
    static NetMessageSetDifficultyThresholds() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetTimerText : pb::GeneratedMessage<NetMessageSetTimerText, NetMessageSetTimerText.Builder> {
    private NetMessageSetTimerText() { }
    private static readonly NetMessageSetTimerText defaultInstance = new NetMessageSetTimerText().MakeReadOnly();
    private static readonly string[] _netMessageSetTimerTextFieldNames = new string[] { "arg1", "timerTextId" };
    private static readonly uint[] _netMessageSetTimerTextFieldTags = new uint[] { 24, 8 };
    public static NetMessageSetTimerText DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetTimerText DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetTimerText ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetTimerText__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetTimerText, NetMessageSetTimerText.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetTimerText__FieldAccessorTable; }
    }
    
    public const int TimerTextIdFieldNumber = 1;
    private bool hasTimerTextId;
    private ulong timerTextId_;
    public bool HasTimerTextId {
      get { return hasTimerTextId; }
    }
    public ulong TimerTextId {
      get { return timerTextId_; }
    }
    
    public const int Arg1FieldNumber = 3;
    private bool hasArg1;
    private long arg1_;
    public bool HasArg1 {
      get { return hasArg1; }
    }
    public long Arg1 {
      get { return arg1_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTimerTextId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetTimerTextFieldNames;
      if (hasTimerTextId) {
        output.WriteUInt64(1, field_names[1], TimerTextId);
      }
      if (hasArg1) {
        output.WriteInt64(3, field_names[0], Arg1);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTimerTextId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TimerTextId);
      }
      if (hasArg1) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, Arg1);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetTimerText ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetTimerText ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetTimerText ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetTimerText ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetTimerText ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetTimerText ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetTimerText ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetTimerText ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetTimerText ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetTimerText ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetTimerText MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetTimerText prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetTimerText, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetTimerText cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetTimerText result;
      
      private NetMessageSetTimerText PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetTimerText original = result;
          result = new NetMessageSetTimerText();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetTimerText MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetTimerText.Descriptor; }
      }
      
      public override NetMessageSetTimerText DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetTimerText.DefaultInstance; }
      }
      
      public override NetMessageSetTimerText BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetTimerText) {
          return MergeFrom((NetMessageSetTimerText) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetTimerText other) {
        if (other == global::Gazillion.NetMessageSetTimerText.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimerTextId) {
          TimerTextId = other.TimerTextId;
        }
        if (other.HasArg1) {
          Arg1 = other.Arg1;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetTimerTextFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetTimerTextFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTimerTextId = input.ReadUInt64(ref result.timerTextId_);
              break;
            }
            case 24: {
              result.hasArg1 = input.ReadInt64(ref result.arg1_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimerTextId {
        get { return result.hasTimerTextId; }
      }
      public ulong TimerTextId {
        get { return result.TimerTextId; }
        set { SetTimerTextId(value); }
      }
      public Builder SetTimerTextId(ulong value) {
        PrepareBuilder();
        result.hasTimerTextId = true;
        result.timerTextId_ = value;
        return this;
      }
      public Builder ClearTimerTextId() {
        PrepareBuilder();
        result.hasTimerTextId = false;
        result.timerTextId_ = 0UL;
        return this;
      }
      
      public bool HasArg1 {
        get { return result.hasArg1; }
      }
      public long Arg1 {
        get { return result.Arg1; }
        set { SetArg1(value); }
      }
      public Builder SetArg1(long value) {
        PrepareBuilder();
        result.hasArg1 = true;
        result.arg1_ = value;
        return this;
      }
      public Builder ClearArg1() {
        PrepareBuilder();
        result.hasArg1 = false;
        result.arg1_ = 0L;
        return this;
      }
    }
    static NetMessageSetTimerText() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetModeText : pb::GeneratedMessage<NetMessageSetModeText, NetMessageSetModeText.Builder> {
    private NetMessageSetModeText() { }
    private static readonly NetMessageSetModeText defaultInstance = new NetMessageSetModeText().MakeReadOnly();
    private static readonly string[] _netMessageSetModeTextFieldNames = new string[] { "metaGameId", "modeRef", "modeTextId" };
    private static readonly uint[] _netMessageSetModeTextFieldTags = new uint[] { 24, 16, 8 };
    public static NetMessageSetModeText DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetModeText DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetModeText ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetModeText__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetModeText, NetMessageSetModeText.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetModeText__FieldAccessorTable; }
    }
    
    public const int ModeTextIdFieldNumber = 1;
    private bool hasModeTextId;
    private ulong modeTextId_;
    public bool HasModeTextId {
      get { return hasModeTextId; }
    }
    public ulong ModeTextId {
      get { return modeTextId_; }
    }
    
    public const int ModeRefFieldNumber = 2;
    private bool hasModeRef;
    private ulong modeRef_;
    public bool HasModeRef {
      get { return hasModeRef; }
    }
    public ulong ModeRef {
      get { return modeRef_; }
    }
    
    public const int MetaGameIdFieldNumber = 3;
    private bool hasMetaGameId;
    private ulong metaGameId_;
    public bool HasMetaGameId {
      get { return hasMetaGameId; }
    }
    public ulong MetaGameId {
      get { return metaGameId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasModeTextId) return false;
        if (!hasModeRef) return false;
        if (!hasMetaGameId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetModeTextFieldNames;
      if (hasModeTextId) {
        output.WriteUInt64(1, field_names[2], ModeTextId);
      }
      if (hasModeRef) {
        output.WriteUInt64(2, field_names[1], ModeRef);
      }
      if (hasMetaGameId) {
        output.WriteUInt64(3, field_names[0], MetaGameId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasModeTextId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ModeTextId);
      }
      if (hasModeRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ModeRef);
      }
      if (hasMetaGameId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, MetaGameId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetModeText ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetModeText ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetModeText ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetModeText ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetModeText ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetModeText ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetModeText ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetModeText ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetModeText ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetModeText ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetModeText MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetModeText prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetModeText, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetModeText cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetModeText result;
      
      private NetMessageSetModeText PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetModeText original = result;
          result = new NetMessageSetModeText();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetModeText MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetModeText.Descriptor; }
      }
      
      public override NetMessageSetModeText DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetModeText.DefaultInstance; }
      }
      
      public override NetMessageSetModeText BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetModeText) {
          return MergeFrom((NetMessageSetModeText) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetModeText other) {
        if (other == global::Gazillion.NetMessageSetModeText.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasModeTextId) {
          ModeTextId = other.ModeTextId;
        }
        if (other.HasModeRef) {
          ModeRef = other.ModeRef;
        }
        if (other.HasMetaGameId) {
          MetaGameId = other.MetaGameId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetModeTextFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetModeTextFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasModeTextId = input.ReadUInt64(ref result.modeTextId_);
              break;
            }
            case 16: {
              result.hasModeRef = input.ReadUInt64(ref result.modeRef_);
              break;
            }
            case 24: {
              result.hasMetaGameId = input.ReadUInt64(ref result.metaGameId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasModeTextId {
        get { return result.hasModeTextId; }
      }
      public ulong ModeTextId {
        get { return result.ModeTextId; }
        set { SetModeTextId(value); }
      }
      public Builder SetModeTextId(ulong value) {
        PrepareBuilder();
        result.hasModeTextId = true;
        result.modeTextId_ = value;
        return this;
      }
      public Builder ClearModeTextId() {
        PrepareBuilder();
        result.hasModeTextId = false;
        result.modeTextId_ = 0UL;
        return this;
      }
      
      public bool HasModeRef {
        get { return result.hasModeRef; }
      }
      public ulong ModeRef {
        get { return result.ModeRef; }
        set { SetModeRef(value); }
      }
      public Builder SetModeRef(ulong value) {
        PrepareBuilder();
        result.hasModeRef = true;
        result.modeRef_ = value;
        return this;
      }
      public Builder ClearModeRef() {
        PrepareBuilder();
        result.hasModeRef = false;
        result.modeRef_ = 0UL;
        return this;
      }
      
      public bool HasMetaGameId {
        get { return result.hasMetaGameId; }
      }
      public ulong MetaGameId {
        get { return result.MetaGameId; }
        set { SetMetaGameId(value); }
      }
      public Builder SetMetaGameId(ulong value) {
        PrepareBuilder();
        result.hasMetaGameId = true;
        result.metaGameId_ = value;
        return this;
      }
      public Builder ClearMetaGameId() {
        PrepareBuilder();
        result.hasMetaGameId = false;
        result.metaGameId_ = 0UL;
        return this;
      }
    }
    static NetMessageSetModeText() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetExtraText : pb::GeneratedMessage<NetMessageSetExtraText, NetMessageSetExtraText.Builder> {
    private NetMessageSetExtraText() { }
    private static readonly NetMessageSetExtraText defaultInstance = new NetMessageSetExtraText().MakeReadOnly();
    private static readonly string[] _netMessageSetExtraTextFieldNames = new string[] { "extraTextId" };
    private static readonly uint[] _netMessageSetExtraTextFieldTags = new uint[] { 8 };
    public static NetMessageSetExtraText DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetExtraText DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetExtraText ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetExtraText__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetExtraText, NetMessageSetExtraText.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetExtraText__FieldAccessorTable; }
    }
    
    public const int ExtraTextIdFieldNumber = 1;
    private bool hasExtraTextId;
    private ulong extraTextId_;
    public bool HasExtraTextId {
      get { return hasExtraTextId; }
    }
    public ulong ExtraTextId {
      get { return extraTextId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasExtraTextId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetExtraTextFieldNames;
      if (hasExtraTextId) {
        output.WriteUInt64(1, field_names[0], ExtraTextId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasExtraTextId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ExtraTextId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetExtraText ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetExtraText ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetExtraText ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetExtraText ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetExtraText ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetExtraText ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetExtraText ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetExtraText ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetExtraText ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetExtraText ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetExtraText MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetExtraText prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetExtraText, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetExtraText cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetExtraText result;
      
      private NetMessageSetExtraText PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetExtraText original = result;
          result = new NetMessageSetExtraText();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetExtraText MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetExtraText.Descriptor; }
      }
      
      public override NetMessageSetExtraText DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetExtraText.DefaultInstance; }
      }
      
      public override NetMessageSetExtraText BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetExtraText) {
          return MergeFrom((NetMessageSetExtraText) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetExtraText other) {
        if (other == global::Gazillion.NetMessageSetExtraText.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasExtraTextId) {
          ExtraTextId = other.ExtraTextId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetExtraTextFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetExtraTextFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasExtraTextId = input.ReadUInt64(ref result.extraTextId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasExtraTextId {
        get { return result.hasExtraTextId; }
      }
      public ulong ExtraTextId {
        get { return result.ExtraTextId; }
        set { SetExtraTextId(value); }
      }
      public Builder SetExtraTextId(ulong value) {
        PrepareBuilder();
        result.hasExtraTextId = true;
        result.extraTextId_ = value;
        return this;
      }
      public Builder ClearExtraTextId() {
        PrepareBuilder();
        result.hasExtraTextId = false;
        result.extraTextId_ = 0UL;
        return this;
      }
    }
    static NetMessageSetExtraText() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBannerMessage : pb::GeneratedMessage<NetMessageBannerMessage, NetMessageBannerMessage.Builder> {
    private NetMessageBannerMessage() { }
    private static readonly NetMessageBannerMessage defaultInstance = new NetMessageBannerMessage().MakeReadOnly();
    private static readonly string[] _netMessageBannerMessageFieldNames = new string[] { "bannerText", "doNotQueue", "fontColor", "fontSize", "messageStyle", "timeToLiveMS" };
    private static readonly uint[] _netMessageBannerMessageFieldTags = new uint[] { 8, 48, 16, 24, 40, 32 };
    public static NetMessageBannerMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBannerMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBannerMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageBannerMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBannerMessage, NetMessageBannerMessage.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageBannerMessage__FieldAccessorTable; }
    }
    
    public const int BannerTextFieldNumber = 1;
    private bool hasBannerText;
    private ulong bannerText_;
    public bool HasBannerText {
      get { return hasBannerText; }
    }
    public ulong BannerText {
      get { return bannerText_; }
    }
    
    public const int FontColorFieldNumber = 2;
    private bool hasFontColor;
    private ulong fontColor_;
    public bool HasFontColor {
      get { return hasFontColor; }
    }
    public ulong FontColor {
      get { return fontColor_; }
    }
    
    public const int FontSizeFieldNumber = 3;
    private bool hasFontSize;
    private uint fontSize_;
    public bool HasFontSize {
      get { return hasFontSize; }
    }
    public uint FontSize {
      get { return fontSize_; }
    }
    
    public const int TimeToLiveMSFieldNumber = 4;
    private bool hasTimeToLiveMS;
    private uint timeToLiveMS_;
    public bool HasTimeToLiveMS {
      get { return hasTimeToLiveMS; }
    }
    public uint TimeToLiveMS {
      get { return timeToLiveMS_; }
    }
    
    public const int MessageStyleFieldNumber = 5;
    private bool hasMessageStyle;
    private uint messageStyle_;
    public bool HasMessageStyle {
      get { return hasMessageStyle; }
    }
    public uint MessageStyle {
      get { return messageStyle_; }
    }
    
    public const int DoNotQueueFieldNumber = 6;
    private bool hasDoNotQueue;
    private bool doNotQueue_;
    public bool HasDoNotQueue {
      get { return hasDoNotQueue; }
    }
    public bool DoNotQueue {
      get { return doNotQueue_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBannerText) return false;
        if (!hasFontColor) return false;
        if (!hasFontSize) return false;
        if (!hasTimeToLiveMS) return false;
        if (!hasMessageStyle) return false;
        if (!hasDoNotQueue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBannerMessageFieldNames;
      if (hasBannerText) {
        output.WriteUInt64(1, field_names[0], BannerText);
      }
      if (hasFontColor) {
        output.WriteUInt64(2, field_names[2], FontColor);
      }
      if (hasFontSize) {
        output.WriteUInt32(3, field_names[3], FontSize);
      }
      if (hasTimeToLiveMS) {
        output.WriteUInt32(4, field_names[5], TimeToLiveMS);
      }
      if (hasMessageStyle) {
        output.WriteUInt32(5, field_names[4], MessageStyle);
      }
      if (hasDoNotQueue) {
        output.WriteBool(6, field_names[1], DoNotQueue);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBannerText) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, BannerText);
      }
      if (hasFontColor) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, FontColor);
      }
      if (hasFontSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, FontSize);
      }
      if (hasTimeToLiveMS) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, TimeToLiveMS);
      }
      if (hasMessageStyle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, MessageStyle);
      }
      if (hasDoNotQueue) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, DoNotQueue);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBannerMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBannerMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBannerMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBannerMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBannerMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBannerMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBannerMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBannerMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBannerMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBannerMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBannerMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBannerMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBannerMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBannerMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBannerMessage result;
      
      private NetMessageBannerMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBannerMessage original = result;
          result = new NetMessageBannerMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBannerMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBannerMessage.Descriptor; }
      }
      
      public override NetMessageBannerMessage DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBannerMessage.DefaultInstance; }
      }
      
      public override NetMessageBannerMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBannerMessage) {
          return MergeFrom((NetMessageBannerMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBannerMessage other) {
        if (other == global::Gazillion.NetMessageBannerMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBannerText) {
          BannerText = other.BannerText;
        }
        if (other.HasFontColor) {
          FontColor = other.FontColor;
        }
        if (other.HasFontSize) {
          FontSize = other.FontSize;
        }
        if (other.HasTimeToLiveMS) {
          TimeToLiveMS = other.TimeToLiveMS;
        }
        if (other.HasMessageStyle) {
          MessageStyle = other.MessageStyle;
        }
        if (other.HasDoNotQueue) {
          DoNotQueue = other.DoNotQueue;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBannerMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBannerMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasBannerText = input.ReadUInt64(ref result.bannerText_);
              break;
            }
            case 16: {
              result.hasFontColor = input.ReadUInt64(ref result.fontColor_);
              break;
            }
            case 24: {
              result.hasFontSize = input.ReadUInt32(ref result.fontSize_);
              break;
            }
            case 32: {
              result.hasTimeToLiveMS = input.ReadUInt32(ref result.timeToLiveMS_);
              break;
            }
            case 40: {
              result.hasMessageStyle = input.ReadUInt32(ref result.messageStyle_);
              break;
            }
            case 48: {
              result.hasDoNotQueue = input.ReadBool(ref result.doNotQueue_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBannerText {
        get { return result.hasBannerText; }
      }
      public ulong BannerText {
        get { return result.BannerText; }
        set { SetBannerText(value); }
      }
      public Builder SetBannerText(ulong value) {
        PrepareBuilder();
        result.hasBannerText = true;
        result.bannerText_ = value;
        return this;
      }
      public Builder ClearBannerText() {
        PrepareBuilder();
        result.hasBannerText = false;
        result.bannerText_ = 0UL;
        return this;
      }
      
      public bool HasFontColor {
        get { return result.hasFontColor; }
      }
      public ulong FontColor {
        get { return result.FontColor; }
        set { SetFontColor(value); }
      }
      public Builder SetFontColor(ulong value) {
        PrepareBuilder();
        result.hasFontColor = true;
        result.fontColor_ = value;
        return this;
      }
      public Builder ClearFontColor() {
        PrepareBuilder();
        result.hasFontColor = false;
        result.fontColor_ = 0UL;
        return this;
      }
      
      public bool HasFontSize {
        get { return result.hasFontSize; }
      }
      public uint FontSize {
        get { return result.FontSize; }
        set { SetFontSize(value); }
      }
      public Builder SetFontSize(uint value) {
        PrepareBuilder();
        result.hasFontSize = true;
        result.fontSize_ = value;
        return this;
      }
      public Builder ClearFontSize() {
        PrepareBuilder();
        result.hasFontSize = false;
        result.fontSize_ = 0;
        return this;
      }
      
      public bool HasTimeToLiveMS {
        get { return result.hasTimeToLiveMS; }
      }
      public uint TimeToLiveMS {
        get { return result.TimeToLiveMS; }
        set { SetTimeToLiveMS(value); }
      }
      public Builder SetTimeToLiveMS(uint value) {
        PrepareBuilder();
        result.hasTimeToLiveMS = true;
        result.timeToLiveMS_ = value;
        return this;
      }
      public Builder ClearTimeToLiveMS() {
        PrepareBuilder();
        result.hasTimeToLiveMS = false;
        result.timeToLiveMS_ = 0;
        return this;
      }
      
      public bool HasMessageStyle {
        get { return result.hasMessageStyle; }
      }
      public uint MessageStyle {
        get { return result.MessageStyle; }
        set { SetMessageStyle(value); }
      }
      public Builder SetMessageStyle(uint value) {
        PrepareBuilder();
        result.hasMessageStyle = true;
        result.messageStyle_ = value;
        return this;
      }
      public Builder ClearMessageStyle() {
        PrepareBuilder();
        result.hasMessageStyle = false;
        result.messageStyle_ = 0;
        return this;
      }
      
      public bool HasDoNotQueue {
        get { return result.hasDoNotQueue; }
      }
      public bool DoNotQueue {
        get { return result.DoNotQueue; }
        set { SetDoNotQueue(value); }
      }
      public Builder SetDoNotQueue(bool value) {
        PrepareBuilder();
        result.hasDoNotQueue = true;
        result.doNotQueue_ = value;
        return this;
      }
      public Builder ClearDoNotQueue() {
        PrepareBuilder();
        result.hasDoNotQueue = false;
        result.doNotQueue_ = false;
        return this;
      }
    }
    static NetMessageBannerMessage() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAIAggroNotification : pb::GeneratedMessage<NetMessageAIAggroNotification, NetMessageAIAggroNotification.Builder> {
    private NetMessageAIAggroNotification() { }
    private static readonly NetMessageAIAggroNotification defaultInstance = new NetMessageAIAggroNotification().MakeReadOnly();
    private static readonly string[] _netMessageAIAggroNotificationFieldNames = new string[] { "aiRef", "bannerMessageRef", "playerId" };
    private static readonly uint[] _netMessageAIAggroNotificationFieldTags = new uint[] { 16, 8, 24 };
    public static NetMessageAIAggroNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAIAggroNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAIAggroNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAIAggroNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAIAggroNotification, NetMessageAIAggroNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAIAggroNotification__FieldAccessorTable; }
    }
    
    public const int BannerMessageRefFieldNumber = 1;
    private bool hasBannerMessageRef;
    private ulong bannerMessageRef_;
    public bool HasBannerMessageRef {
      get { return hasBannerMessageRef; }
    }
    public ulong BannerMessageRef {
      get { return bannerMessageRef_; }
    }
    
    public const int AiRefFieldNumber = 2;
    private bool hasAiRef;
    private ulong aiRef_;
    public bool HasAiRef {
      get { return hasAiRef; }
    }
    public ulong AiRef {
      get { return aiRef_; }
    }
    
    public const int PlayerIdFieldNumber = 3;
    private bool hasPlayerId;
    private ulong playerId_;
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    public ulong PlayerId {
      get { return playerId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBannerMessageRef) return false;
        if (!hasAiRef) return false;
        if (!hasPlayerId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAIAggroNotificationFieldNames;
      if (hasBannerMessageRef) {
        output.WriteUInt64(1, field_names[1], BannerMessageRef);
      }
      if (hasAiRef) {
        output.WriteUInt64(2, field_names[0], AiRef);
      }
      if (hasPlayerId) {
        output.WriteUInt64(3, field_names[2], PlayerId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBannerMessageRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, BannerMessageRef);
      }
      if (hasAiRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, AiRef);
      }
      if (hasPlayerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, PlayerId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAIAggroNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAIAggroNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIAggroNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAIAggroNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIAggroNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAIAggroNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIAggroNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAIAggroNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAIAggroNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAIAggroNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAIAggroNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAIAggroNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAIAggroNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAIAggroNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAIAggroNotification result;
      
      private NetMessageAIAggroNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAIAggroNotification original = result;
          result = new NetMessageAIAggroNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAIAggroNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAIAggroNotification.Descriptor; }
      }
      
      public override NetMessageAIAggroNotification DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAIAggroNotification.DefaultInstance; }
      }
      
      public override NetMessageAIAggroNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAIAggroNotification) {
          return MergeFrom((NetMessageAIAggroNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAIAggroNotification other) {
        if (other == global::Gazillion.NetMessageAIAggroNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBannerMessageRef) {
          BannerMessageRef = other.BannerMessageRef;
        }
        if (other.HasAiRef) {
          AiRef = other.AiRef;
        }
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAIAggroNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAIAggroNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasBannerMessageRef = input.ReadUInt64(ref result.bannerMessageRef_);
              break;
            }
            case 16: {
              result.hasAiRef = input.ReadUInt64(ref result.aiRef_);
              break;
            }
            case 24: {
              result.hasPlayerId = input.ReadUInt64(ref result.playerId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBannerMessageRef {
        get { return result.hasBannerMessageRef; }
      }
      public ulong BannerMessageRef {
        get { return result.BannerMessageRef; }
        set { SetBannerMessageRef(value); }
      }
      public Builder SetBannerMessageRef(ulong value) {
        PrepareBuilder();
        result.hasBannerMessageRef = true;
        result.bannerMessageRef_ = value;
        return this;
      }
      public Builder ClearBannerMessageRef() {
        PrepareBuilder();
        result.hasBannerMessageRef = false;
        result.bannerMessageRef_ = 0UL;
        return this;
      }
      
      public bool HasAiRef {
        get { return result.hasAiRef; }
      }
      public ulong AiRef {
        get { return result.AiRef; }
        set { SetAiRef(value); }
      }
      public Builder SetAiRef(ulong value) {
        PrepareBuilder();
        result.hasAiRef = true;
        result.aiRef_ = value;
        return this;
      }
      public Builder ClearAiRef() {
        PrepareBuilder();
        result.hasAiRef = false;
        result.aiRef_ = 0UL;
        return this;
      }
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      public ulong PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      public Builder SetPlayerId(ulong value) {
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = 0UL;
        return this;
      }
    }
    static NetMessageAIAggroNotification() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStoryNotification : pb::GeneratedMessage<NetMessageStoryNotification, NetMessageStoryNotification.Builder> {
    private NetMessageStoryNotification() { }
    private static readonly NetMessageStoryNotification defaultInstance = new NetMessageStoryNotification().MakeReadOnly();
    private static readonly string[] _netMessageStoryNotificationFieldNames = new string[] { "displayTextStringId", "speakingEntityPrototypeId", "timeToLiveMS" };
    private static readonly uint[] _netMessageStoryNotificationFieldTags = new uint[] { 8, 16, 24 };
    public static NetMessageStoryNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStoryNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStoryNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageStoryNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStoryNotification, NetMessageStoryNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageStoryNotification__FieldAccessorTable; }
    }
    
    public const int DisplayTextStringIdFieldNumber = 1;
    private bool hasDisplayTextStringId;
    private ulong displayTextStringId_;
    public bool HasDisplayTextStringId {
      get { return hasDisplayTextStringId; }
    }
    public ulong DisplayTextStringId {
      get { return displayTextStringId_; }
    }
    
    public const int SpeakingEntityPrototypeIdFieldNumber = 2;
    private bool hasSpeakingEntityPrototypeId;
    private ulong speakingEntityPrototypeId_;
    public bool HasSpeakingEntityPrototypeId {
      get { return hasSpeakingEntityPrototypeId; }
    }
    public ulong SpeakingEntityPrototypeId {
      get { return speakingEntityPrototypeId_; }
    }
    
    public const int TimeToLiveMSFieldNumber = 3;
    private bool hasTimeToLiveMS;
    private uint timeToLiveMS_;
    public bool HasTimeToLiveMS {
      get { return hasTimeToLiveMS; }
    }
    public uint TimeToLiveMS {
      get { return timeToLiveMS_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDisplayTextStringId) return false;
        if (!hasSpeakingEntityPrototypeId) return false;
        if (!hasTimeToLiveMS) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStoryNotificationFieldNames;
      if (hasDisplayTextStringId) {
        output.WriteUInt64(1, field_names[0], DisplayTextStringId);
      }
      if (hasSpeakingEntityPrototypeId) {
        output.WriteUInt64(2, field_names[1], SpeakingEntityPrototypeId);
      }
      if (hasTimeToLiveMS) {
        output.WriteUInt32(3, field_names[2], TimeToLiveMS);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDisplayTextStringId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, DisplayTextStringId);
      }
      if (hasSpeakingEntityPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, SpeakingEntityPrototypeId);
      }
      if (hasTimeToLiveMS) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, TimeToLiveMS);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStoryNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStoryNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStoryNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStoryNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStoryNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStoryNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStoryNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStoryNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStoryNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStoryNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStoryNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStoryNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStoryNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStoryNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStoryNotification result;
      
      private NetMessageStoryNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStoryNotification original = result;
          result = new NetMessageStoryNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStoryNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStoryNotification.Descriptor; }
      }
      
      public override NetMessageStoryNotification DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStoryNotification.DefaultInstance; }
      }
      
      public override NetMessageStoryNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStoryNotification) {
          return MergeFrom((NetMessageStoryNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStoryNotification other) {
        if (other == global::Gazillion.NetMessageStoryNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDisplayTextStringId) {
          DisplayTextStringId = other.DisplayTextStringId;
        }
        if (other.HasSpeakingEntityPrototypeId) {
          SpeakingEntityPrototypeId = other.SpeakingEntityPrototypeId;
        }
        if (other.HasTimeToLiveMS) {
          TimeToLiveMS = other.TimeToLiveMS;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStoryNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStoryNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDisplayTextStringId = input.ReadUInt64(ref result.displayTextStringId_);
              break;
            }
            case 16: {
              result.hasSpeakingEntityPrototypeId = input.ReadUInt64(ref result.speakingEntityPrototypeId_);
              break;
            }
            case 24: {
              result.hasTimeToLiveMS = input.ReadUInt32(ref result.timeToLiveMS_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDisplayTextStringId {
        get { return result.hasDisplayTextStringId; }
      }
      public ulong DisplayTextStringId {
        get { return result.DisplayTextStringId; }
        set { SetDisplayTextStringId(value); }
      }
      public Builder SetDisplayTextStringId(ulong value) {
        PrepareBuilder();
        result.hasDisplayTextStringId = true;
        result.displayTextStringId_ = value;
        return this;
      }
      public Builder ClearDisplayTextStringId() {
        PrepareBuilder();
        result.hasDisplayTextStringId = false;
        result.displayTextStringId_ = 0UL;
        return this;
      }
      
      public bool HasSpeakingEntityPrototypeId {
        get { return result.hasSpeakingEntityPrototypeId; }
      }
      public ulong SpeakingEntityPrototypeId {
        get { return result.SpeakingEntityPrototypeId; }
        set { SetSpeakingEntityPrototypeId(value); }
      }
      public Builder SetSpeakingEntityPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasSpeakingEntityPrototypeId = true;
        result.speakingEntityPrototypeId_ = value;
        return this;
      }
      public Builder ClearSpeakingEntityPrototypeId() {
        PrepareBuilder();
        result.hasSpeakingEntityPrototypeId = false;
        result.speakingEntityPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasTimeToLiveMS {
        get { return result.hasTimeToLiveMS; }
      }
      public uint TimeToLiveMS {
        get { return result.TimeToLiveMS; }
        set { SetTimeToLiveMS(value); }
      }
      public Builder SetTimeToLiveMS(uint value) {
        PrepareBuilder();
        result.hasTimeToLiveMS = true;
        result.timeToLiveMS_ = value;
        return this;
      }
      public Builder ClearTimeToLiveMS() {
        PrepareBuilder();
        result.hasTimeToLiveMS = false;
        result.timeToLiveMS_ = 0;
        return this;
      }
    }
    static NetMessageStoryNotification() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSyncTimeReply : pb::GeneratedMessage<NetMessageSyncTimeReply, NetMessageSyncTimeReply.Builder> {
    private NetMessageSyncTimeReply() { }
    private static readonly NetMessageSyncTimeReply defaultInstance = new NetMessageSyncTimeReply().MakeReadOnly();
    private static readonly string[] _netMessageSyncTimeReplyFieldNames = new string[] { "dateTimeClientSent", "dateTimeServerReceived", "dateTimeServerSent", "datetimeDialationStarted", "dialation", "gameTimeClientSent", "gameTimeServerReceived", "gameTimeServerSent", "gametimeDialationStarted" };
    private static readonly uint[] _netMessageSyncTimeReplyFieldTags = new uint[] { 32, 40, 48, 72, 61, 8, 16, 24, 64 };
    public static NetMessageSyncTimeReply DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSyncTimeReply DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSyncTimeReply ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSyncTimeReply__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSyncTimeReply, NetMessageSyncTimeReply.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSyncTimeReply__FieldAccessorTable; }
    }
    
    public const int GameTimeClientSentFieldNumber = 1;
    private bool hasGameTimeClientSent;
    private long gameTimeClientSent_;
    public bool HasGameTimeClientSent {
      get { return hasGameTimeClientSent; }
    }
    public long GameTimeClientSent {
      get { return gameTimeClientSent_; }
    }
    
    public const int GameTimeServerReceivedFieldNumber = 2;
    private bool hasGameTimeServerReceived;
    private long gameTimeServerReceived_;
    public bool HasGameTimeServerReceived {
      get { return hasGameTimeServerReceived; }
    }
    public long GameTimeServerReceived {
      get { return gameTimeServerReceived_; }
    }
    
    public const int GameTimeServerSentFieldNumber = 3;
    private bool hasGameTimeServerSent;
    private long gameTimeServerSent_;
    public bool HasGameTimeServerSent {
      get { return hasGameTimeServerSent; }
    }
    public long GameTimeServerSent {
      get { return gameTimeServerSent_; }
    }
    
    public const int DateTimeClientSentFieldNumber = 4;
    private bool hasDateTimeClientSent;
    private long dateTimeClientSent_;
    public bool HasDateTimeClientSent {
      get { return hasDateTimeClientSent; }
    }
    public long DateTimeClientSent {
      get { return dateTimeClientSent_; }
    }
    
    public const int DateTimeServerReceivedFieldNumber = 5;
    private bool hasDateTimeServerReceived;
    private long dateTimeServerReceived_;
    public bool HasDateTimeServerReceived {
      get { return hasDateTimeServerReceived; }
    }
    public long DateTimeServerReceived {
      get { return dateTimeServerReceived_; }
    }
    
    public const int DateTimeServerSentFieldNumber = 6;
    private bool hasDateTimeServerSent;
    private long dateTimeServerSent_;
    public bool HasDateTimeServerSent {
      get { return hasDateTimeServerSent; }
    }
    public long DateTimeServerSent {
      get { return dateTimeServerSent_; }
    }
    
    public const int DialationFieldNumber = 7;
    private bool hasDialation;
    private float dialation_;
    public bool HasDialation {
      get { return hasDialation; }
    }
    public float Dialation {
      get { return dialation_; }
    }
    
    public const int GametimeDialationStartedFieldNumber = 8;
    private bool hasGametimeDialationStarted;
    private long gametimeDialationStarted_;
    public bool HasGametimeDialationStarted {
      get { return hasGametimeDialationStarted; }
    }
    public long GametimeDialationStarted {
      get { return gametimeDialationStarted_; }
    }
    
    public const int DatetimeDialationStartedFieldNumber = 9;
    private bool hasDatetimeDialationStarted;
    private long datetimeDialationStarted_;
    public bool HasDatetimeDialationStarted {
      get { return hasDatetimeDialationStarted; }
    }
    public long DatetimeDialationStarted {
      get { return datetimeDialationStarted_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameTimeClientSent) return false;
        if (!hasGameTimeServerReceived) return false;
        if (!hasGameTimeServerSent) return false;
        if (!hasDateTimeClientSent) return false;
        if (!hasDateTimeServerReceived) return false;
        if (!hasDateTimeServerSent) return false;
        if (!hasDialation) return false;
        if (!hasGametimeDialationStarted) return false;
        if (!hasDatetimeDialationStarted) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSyncTimeReplyFieldNames;
      if (hasGameTimeClientSent) {
        output.WriteInt64(1, field_names[5], GameTimeClientSent);
      }
      if (hasGameTimeServerReceived) {
        output.WriteInt64(2, field_names[6], GameTimeServerReceived);
      }
      if (hasGameTimeServerSent) {
        output.WriteInt64(3, field_names[7], GameTimeServerSent);
      }
      if (hasDateTimeClientSent) {
        output.WriteInt64(4, field_names[0], DateTimeClientSent);
      }
      if (hasDateTimeServerReceived) {
        output.WriteInt64(5, field_names[1], DateTimeServerReceived);
      }
      if (hasDateTimeServerSent) {
        output.WriteInt64(6, field_names[2], DateTimeServerSent);
      }
      if (hasDialation) {
        output.WriteFloat(7, field_names[4], Dialation);
      }
      if (hasGametimeDialationStarted) {
        output.WriteInt64(8, field_names[8], GametimeDialationStarted);
      }
      if (hasDatetimeDialationStarted) {
        output.WriteInt64(9, field_names[3], DatetimeDialationStarted);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGameTimeClientSent) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, GameTimeClientSent);
      }
      if (hasGameTimeServerReceived) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, GameTimeServerReceived);
      }
      if (hasGameTimeServerSent) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, GameTimeServerSent);
      }
      if (hasDateTimeClientSent) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, DateTimeClientSent);
      }
      if (hasDateTimeServerReceived) {
        size += pb::CodedOutputStream.ComputeInt64Size(5, DateTimeServerReceived);
      }
      if (hasDateTimeServerSent) {
        size += pb::CodedOutputStream.ComputeInt64Size(6, DateTimeServerSent);
      }
      if (hasDialation) {
        size += pb::CodedOutputStream.ComputeFloatSize(7, Dialation);
      }
      if (hasGametimeDialationStarted) {
        size += pb::CodedOutputStream.ComputeInt64Size(8, GametimeDialationStarted);
      }
      if (hasDatetimeDialationStarted) {
        size += pb::CodedOutputStream.ComputeInt64Size(9, DatetimeDialationStarted);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSyncTimeReply ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSyncTimeReply ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSyncTimeReply ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSyncTimeReply ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSyncTimeReply ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSyncTimeReply ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSyncTimeReply ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSyncTimeReply ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSyncTimeReply ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSyncTimeReply ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSyncTimeReply MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSyncTimeReply prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSyncTimeReply, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSyncTimeReply cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSyncTimeReply result;
      
      private NetMessageSyncTimeReply PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSyncTimeReply original = result;
          result = new NetMessageSyncTimeReply();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSyncTimeReply MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSyncTimeReply.Descriptor; }
      }
      
      public override NetMessageSyncTimeReply DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSyncTimeReply.DefaultInstance; }
      }
      
      public override NetMessageSyncTimeReply BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSyncTimeReply) {
          return MergeFrom((NetMessageSyncTimeReply) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSyncTimeReply other) {
        if (other == global::Gazillion.NetMessageSyncTimeReply.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameTimeClientSent) {
          GameTimeClientSent = other.GameTimeClientSent;
        }
        if (other.HasGameTimeServerReceived) {
          GameTimeServerReceived = other.GameTimeServerReceived;
        }
        if (other.HasGameTimeServerSent) {
          GameTimeServerSent = other.GameTimeServerSent;
        }
        if (other.HasDateTimeClientSent) {
          DateTimeClientSent = other.DateTimeClientSent;
        }
        if (other.HasDateTimeServerReceived) {
          DateTimeServerReceived = other.DateTimeServerReceived;
        }
        if (other.HasDateTimeServerSent) {
          DateTimeServerSent = other.DateTimeServerSent;
        }
        if (other.HasDialation) {
          Dialation = other.Dialation;
        }
        if (other.HasGametimeDialationStarted) {
          GametimeDialationStarted = other.GametimeDialationStarted;
        }
        if (other.HasDatetimeDialationStarted) {
          DatetimeDialationStarted = other.DatetimeDialationStarted;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSyncTimeReplyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSyncTimeReplyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGameTimeClientSent = input.ReadInt64(ref result.gameTimeClientSent_);
              break;
            }
            case 16: {
              result.hasGameTimeServerReceived = input.ReadInt64(ref result.gameTimeServerReceived_);
              break;
            }
            case 24: {
              result.hasGameTimeServerSent = input.ReadInt64(ref result.gameTimeServerSent_);
              break;
            }
            case 32: {
              result.hasDateTimeClientSent = input.ReadInt64(ref result.dateTimeClientSent_);
              break;
            }
            case 40: {
              result.hasDateTimeServerReceived = input.ReadInt64(ref result.dateTimeServerReceived_);
              break;
            }
            case 48: {
              result.hasDateTimeServerSent = input.ReadInt64(ref result.dateTimeServerSent_);
              break;
            }
            case 61: {
              result.hasDialation = input.ReadFloat(ref result.dialation_);
              break;
            }
            case 64: {
              result.hasGametimeDialationStarted = input.ReadInt64(ref result.gametimeDialationStarted_);
              break;
            }
            case 72: {
              result.hasDatetimeDialationStarted = input.ReadInt64(ref result.datetimeDialationStarted_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameTimeClientSent {
        get { return result.hasGameTimeClientSent; }
      }
      public long GameTimeClientSent {
        get { return result.GameTimeClientSent; }
        set { SetGameTimeClientSent(value); }
      }
      public Builder SetGameTimeClientSent(long value) {
        PrepareBuilder();
        result.hasGameTimeClientSent = true;
        result.gameTimeClientSent_ = value;
        return this;
      }
      public Builder ClearGameTimeClientSent() {
        PrepareBuilder();
        result.hasGameTimeClientSent = false;
        result.gameTimeClientSent_ = 0L;
        return this;
      }
      
      public bool HasGameTimeServerReceived {
        get { return result.hasGameTimeServerReceived; }
      }
      public long GameTimeServerReceived {
        get { return result.GameTimeServerReceived; }
        set { SetGameTimeServerReceived(value); }
      }
      public Builder SetGameTimeServerReceived(long value) {
        PrepareBuilder();
        result.hasGameTimeServerReceived = true;
        result.gameTimeServerReceived_ = value;
        return this;
      }
      public Builder ClearGameTimeServerReceived() {
        PrepareBuilder();
        result.hasGameTimeServerReceived = false;
        result.gameTimeServerReceived_ = 0L;
        return this;
      }
      
      public bool HasGameTimeServerSent {
        get { return result.hasGameTimeServerSent; }
      }
      public long GameTimeServerSent {
        get { return result.GameTimeServerSent; }
        set { SetGameTimeServerSent(value); }
      }
      public Builder SetGameTimeServerSent(long value) {
        PrepareBuilder();
        result.hasGameTimeServerSent = true;
        result.gameTimeServerSent_ = value;
        return this;
      }
      public Builder ClearGameTimeServerSent() {
        PrepareBuilder();
        result.hasGameTimeServerSent = false;
        result.gameTimeServerSent_ = 0L;
        return this;
      }
      
      public bool HasDateTimeClientSent {
        get { return result.hasDateTimeClientSent; }
      }
      public long DateTimeClientSent {
        get { return result.DateTimeClientSent; }
        set { SetDateTimeClientSent(value); }
      }
      public Builder SetDateTimeClientSent(long value) {
        PrepareBuilder();
        result.hasDateTimeClientSent = true;
        result.dateTimeClientSent_ = value;
        return this;
      }
      public Builder ClearDateTimeClientSent() {
        PrepareBuilder();
        result.hasDateTimeClientSent = false;
        result.dateTimeClientSent_ = 0L;
        return this;
      }
      
      public bool HasDateTimeServerReceived {
        get { return result.hasDateTimeServerReceived; }
      }
      public long DateTimeServerReceived {
        get { return result.DateTimeServerReceived; }
        set { SetDateTimeServerReceived(value); }
      }
      public Builder SetDateTimeServerReceived(long value) {
        PrepareBuilder();
        result.hasDateTimeServerReceived = true;
        result.dateTimeServerReceived_ = value;
        return this;
      }
      public Builder ClearDateTimeServerReceived() {
        PrepareBuilder();
        result.hasDateTimeServerReceived = false;
        result.dateTimeServerReceived_ = 0L;
        return this;
      }
      
      public bool HasDateTimeServerSent {
        get { return result.hasDateTimeServerSent; }
      }
      public long DateTimeServerSent {
        get { return result.DateTimeServerSent; }
        set { SetDateTimeServerSent(value); }
      }
      public Builder SetDateTimeServerSent(long value) {
        PrepareBuilder();
        result.hasDateTimeServerSent = true;
        result.dateTimeServerSent_ = value;
        return this;
      }
      public Builder ClearDateTimeServerSent() {
        PrepareBuilder();
        result.hasDateTimeServerSent = false;
        result.dateTimeServerSent_ = 0L;
        return this;
      }
      
      public bool HasDialation {
        get { return result.hasDialation; }
      }
      public float Dialation {
        get { return result.Dialation; }
        set { SetDialation(value); }
      }
      public Builder SetDialation(float value) {
        PrepareBuilder();
        result.hasDialation = true;
        result.dialation_ = value;
        return this;
      }
      public Builder ClearDialation() {
        PrepareBuilder();
        result.hasDialation = false;
        result.dialation_ = 0F;
        return this;
      }
      
      public bool HasGametimeDialationStarted {
        get { return result.hasGametimeDialationStarted; }
      }
      public long GametimeDialationStarted {
        get { return result.GametimeDialationStarted; }
        set { SetGametimeDialationStarted(value); }
      }
      public Builder SetGametimeDialationStarted(long value) {
        PrepareBuilder();
        result.hasGametimeDialationStarted = true;
        result.gametimeDialationStarted_ = value;
        return this;
      }
      public Builder ClearGametimeDialationStarted() {
        PrepareBuilder();
        result.hasGametimeDialationStarted = false;
        result.gametimeDialationStarted_ = 0L;
        return this;
      }
      
      public bool HasDatetimeDialationStarted {
        get { return result.hasDatetimeDialationStarted; }
      }
      public long DatetimeDialationStarted {
        get { return result.DatetimeDialationStarted; }
        set { SetDatetimeDialationStarted(value); }
      }
      public Builder SetDatetimeDialationStarted(long value) {
        PrepareBuilder();
        result.hasDatetimeDialationStarted = true;
        result.datetimeDialationStarted_ = value;
        return this;
      }
      public Builder ClearDatetimeDialationStarted() {
        PrepareBuilder();
        result.hasDatetimeDialationStarted = false;
        result.datetimeDialationStarted_ = 0L;
        return this;
      }
    }
    static NetMessageSyncTimeReply() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSelectStartingAvatarForNewPlayer : pb::GeneratedMessage<NetMessageSelectStartingAvatarForNewPlayer, NetMessageSelectStartingAvatarForNewPlayer.Builder> {
    private NetMessageSelectStartingAvatarForNewPlayer() { }
    private static readonly NetMessageSelectStartingAvatarForNewPlayer defaultInstance = new NetMessageSelectStartingAvatarForNewPlayer().MakeReadOnly();
    private static readonly string[] _netMessageSelectStartingAvatarForNewPlayerFieldNames = new string[] {  };
    private static readonly uint[] _netMessageSelectStartingAvatarForNewPlayerFieldTags = new uint[] {  };
    public static NetMessageSelectStartingAvatarForNewPlayer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSelectStartingAvatarForNewPlayer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSelectStartingAvatarForNewPlayer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSelectStartingAvatarForNewPlayer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSelectStartingAvatarForNewPlayer, NetMessageSelectStartingAvatarForNewPlayer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSelectStartingAvatarForNewPlayer__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSelectStartingAvatarForNewPlayerFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSelectStartingAvatarForNewPlayer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSelectStartingAvatarForNewPlayer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSelectStartingAvatarForNewPlayer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSelectStartingAvatarForNewPlayer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSelectStartingAvatarForNewPlayer result;
      
      private NetMessageSelectStartingAvatarForNewPlayer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSelectStartingAvatarForNewPlayer original = result;
          result = new NetMessageSelectStartingAvatarForNewPlayer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSelectStartingAvatarForNewPlayer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSelectStartingAvatarForNewPlayer.Descriptor; }
      }
      
      public override NetMessageSelectStartingAvatarForNewPlayer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSelectStartingAvatarForNewPlayer.DefaultInstance; }
      }
      
      public override NetMessageSelectStartingAvatarForNewPlayer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSelectStartingAvatarForNewPlayer) {
          return MergeFrom((NetMessageSelectStartingAvatarForNewPlayer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSelectStartingAvatarForNewPlayer other) {
        if (other == global::Gazillion.NetMessageSelectStartingAvatarForNewPlayer.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSelectStartingAvatarForNewPlayerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSelectStartingAvatarForNewPlayerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageSelectStartingAvatarForNewPlayer() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageShowKioskStartScreen : pb::GeneratedMessage<NetMessageShowKioskStartScreen, NetMessageShowKioskStartScreen.Builder> {
    private NetMessageShowKioskStartScreen() { }
    private static readonly NetMessageShowKioskStartScreen defaultInstance = new NetMessageShowKioskStartScreen().MakeReadOnly();
    private static readonly string[] _netMessageShowKioskStartScreenFieldNames = new string[] {  };
    private static readonly uint[] _netMessageShowKioskStartScreenFieldTags = new uint[] {  };
    public static NetMessageShowKioskStartScreen DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageShowKioskStartScreen DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageShowKioskStartScreen ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShowKioskStartScreen__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageShowKioskStartScreen, NetMessageShowKioskStartScreen.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShowKioskStartScreen__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageShowKioskStartScreenFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageShowKioskStartScreen ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShowKioskStartScreen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowKioskStartScreen ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShowKioskStartScreen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowKioskStartScreen ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShowKioskStartScreen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowKioskStartScreen ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageShowKioskStartScreen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageShowKioskStartScreen ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShowKioskStartScreen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageShowKioskStartScreen MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageShowKioskStartScreen prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageShowKioskStartScreen, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageShowKioskStartScreen cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageShowKioskStartScreen result;
      
      private NetMessageShowKioskStartScreen PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageShowKioskStartScreen original = result;
          result = new NetMessageShowKioskStartScreen();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageShowKioskStartScreen MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageShowKioskStartScreen.Descriptor; }
      }
      
      public override NetMessageShowKioskStartScreen DefaultInstanceForType {
        get { return global::Gazillion.NetMessageShowKioskStartScreen.DefaultInstance; }
      }
      
      public override NetMessageShowKioskStartScreen BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageShowKioskStartScreen) {
          return MergeFrom((NetMessageShowKioskStartScreen) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageShowKioskStartScreen other) {
        if (other == global::Gazillion.NetMessageShowKioskStartScreen.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageShowKioskStartScreenFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageShowKioskStartScreenFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageShowKioskStartScreen() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageInventoryFull : pb::GeneratedMessage<NetMessageInventoryFull, NetMessageInventoryFull.Builder> {
    private NetMessageInventoryFull() { }
    private static readonly NetMessageInventoryFull defaultInstance = new NetMessageInventoryFull().MakeReadOnly();
    private static readonly string[] _netMessageInventoryFullFieldNames = new string[] { "itemID", "playerID" };
    private static readonly uint[] _netMessageInventoryFullFieldTags = new uint[] { 16, 8 };
    public static NetMessageInventoryFull DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageInventoryFull DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageInventoryFull ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInventoryFull__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageInventoryFull, NetMessageInventoryFull.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInventoryFull__FieldAccessorTable; }
    }
    
    public const int PlayerIDFieldNumber = 1;
    private bool hasPlayerID;
    private ulong playerID_;
    public bool HasPlayerID {
      get { return hasPlayerID; }
    }
    public ulong PlayerID {
      get { return playerID_; }
    }
    
    public const int ItemIDFieldNumber = 2;
    private bool hasItemID;
    private ulong itemID_;
    public bool HasItemID {
      get { return hasItemID; }
    }
    public ulong ItemID {
      get { return itemID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerID) return false;
        if (!hasItemID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageInventoryFullFieldNames;
      if (hasPlayerID) {
        output.WriteUInt64(1, field_names[1], PlayerID);
      }
      if (hasItemID) {
        output.WriteUInt64(2, field_names[0], ItemID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerID) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PlayerID);
      }
      if (hasItemID) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ItemID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageInventoryFull ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryFull ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryFull ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryFull ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryFull ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryFull ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryFull ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageInventoryFull ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageInventoryFull ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryFull ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageInventoryFull MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageInventoryFull prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageInventoryFull, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageInventoryFull cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageInventoryFull result;
      
      private NetMessageInventoryFull PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageInventoryFull original = result;
          result = new NetMessageInventoryFull();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageInventoryFull MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageInventoryFull.Descriptor; }
      }
      
      public override NetMessageInventoryFull DefaultInstanceForType {
        get { return global::Gazillion.NetMessageInventoryFull.DefaultInstance; }
      }
      
      public override NetMessageInventoryFull BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageInventoryFull) {
          return MergeFrom((NetMessageInventoryFull) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageInventoryFull other) {
        if (other == global::Gazillion.NetMessageInventoryFull.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerID) {
          PlayerID = other.PlayerID;
        }
        if (other.HasItemID) {
          ItemID = other.ItemID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageInventoryFullFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageInventoryFullFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerID = input.ReadUInt64(ref result.playerID_);
              break;
            }
            case 16: {
              result.hasItemID = input.ReadUInt64(ref result.itemID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerID {
        get { return result.hasPlayerID; }
      }
      public ulong PlayerID {
        get { return result.PlayerID; }
        set { SetPlayerID(value); }
      }
      public Builder SetPlayerID(ulong value) {
        PrepareBuilder();
        result.hasPlayerID = true;
        result.playerID_ = value;
        return this;
      }
      public Builder ClearPlayerID() {
        PrepareBuilder();
        result.hasPlayerID = false;
        result.playerID_ = 0UL;
        return this;
      }
      
      public bool HasItemID {
        get { return result.hasItemID; }
      }
      public ulong ItemID {
        get { return result.ItemID; }
        set { SetItemID(value); }
      }
      public Builder SetItemID(ulong value) {
        PrepareBuilder();
        result.hasItemID = true;
        result.itemID_ = value;
        return this;
      }
      public Builder ClearItemID() {
        PrepareBuilder();
        result.hasItemID = false;
        result.itemID_ = 0UL;
        return this;
      }
    }
    static NetMessageInventoryFull() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUnloadPackagesStart : pb::GeneratedMessage<NetMessageUnloadPackagesStart, NetMessageUnloadPackagesStart.Builder> {
    private NetMessageUnloadPackagesStart() { }
    private static readonly NetMessageUnloadPackagesStart defaultInstance = new NetMessageUnloadPackagesStart().MakeReadOnly();
    private static readonly string[] _netMessageUnloadPackagesStartFieldNames = new string[] {  };
    private static readonly uint[] _netMessageUnloadPackagesStartFieldTags = new uint[] {  };
    public static NetMessageUnloadPackagesStart DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUnloadPackagesStart DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUnloadPackagesStart ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUnloadPackagesStart__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUnloadPackagesStart, NetMessageUnloadPackagesStart.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUnloadPackagesStart__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUnloadPackagesStartFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUnloadPackagesStart ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnloadPackagesStart ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnloadPackagesStart ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnloadPackagesStart ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnloadPackagesStart ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnloadPackagesStart ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnloadPackagesStart ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUnloadPackagesStart ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUnloadPackagesStart ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnloadPackagesStart ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUnloadPackagesStart MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUnloadPackagesStart prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUnloadPackagesStart, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUnloadPackagesStart cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUnloadPackagesStart result;
      
      private NetMessageUnloadPackagesStart PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUnloadPackagesStart original = result;
          result = new NetMessageUnloadPackagesStart();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUnloadPackagesStart MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUnloadPackagesStart.Descriptor; }
      }
      
      public override NetMessageUnloadPackagesStart DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUnloadPackagesStart.DefaultInstance; }
      }
      
      public override NetMessageUnloadPackagesStart BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUnloadPackagesStart) {
          return MergeFrom((NetMessageUnloadPackagesStart) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUnloadPackagesStart other) {
        if (other == global::Gazillion.NetMessageUnloadPackagesStart.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUnloadPackagesStartFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUnloadPackagesStartFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageUnloadPackagesStart() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUnloadPackagesEnd : pb::GeneratedMessage<NetMessageUnloadPackagesEnd, NetMessageUnloadPackagesEnd.Builder> {
    private NetMessageUnloadPackagesEnd() { }
    private static readonly NetMessageUnloadPackagesEnd defaultInstance = new NetMessageUnloadPackagesEnd().MakeReadOnly();
    private static readonly string[] _netMessageUnloadPackagesEndFieldNames = new string[] {  };
    private static readonly uint[] _netMessageUnloadPackagesEndFieldTags = new uint[] {  };
    public static NetMessageUnloadPackagesEnd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUnloadPackagesEnd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUnloadPackagesEnd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUnloadPackagesEnd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUnloadPackagesEnd, NetMessageUnloadPackagesEnd.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUnloadPackagesEnd__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUnloadPackagesEndFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUnloadPackagesEnd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnloadPackagesEnd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnloadPackagesEnd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnloadPackagesEnd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnloadPackagesEnd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnloadPackagesEnd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnloadPackagesEnd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUnloadPackagesEnd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUnloadPackagesEnd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnloadPackagesEnd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUnloadPackagesEnd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUnloadPackagesEnd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUnloadPackagesEnd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUnloadPackagesEnd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUnloadPackagesEnd result;
      
      private NetMessageUnloadPackagesEnd PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUnloadPackagesEnd original = result;
          result = new NetMessageUnloadPackagesEnd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUnloadPackagesEnd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUnloadPackagesEnd.Descriptor; }
      }
      
      public override NetMessageUnloadPackagesEnd DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUnloadPackagesEnd.DefaultInstance; }
      }
      
      public override NetMessageUnloadPackagesEnd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUnloadPackagesEnd) {
          return MergeFrom((NetMessageUnloadPackagesEnd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUnloadPackagesEnd other) {
        if (other == global::Gazillion.NetMessageUnloadPackagesEnd.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUnloadPackagesEndFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUnloadPackagesEndFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageUnloadPackagesEnd() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageForceDisconnect : pb::GeneratedMessage<NetMessageForceDisconnect, NetMessageForceDisconnect.Builder> {
    private NetMessageForceDisconnect() { }
    private static readonly NetMessageForceDisconnect defaultInstance = new NetMessageForceDisconnect().MakeReadOnly();
    private static readonly string[] _netMessageForceDisconnectFieldNames = new string[] { "reason" };
    private static readonly uint[] _netMessageForceDisconnectFieldTags = new uint[] { 8 };
    public static NetMessageForceDisconnect DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageForceDisconnect DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageForceDisconnect ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageForceDisconnect__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageForceDisconnect, NetMessageForceDisconnect.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageForceDisconnect__FieldAccessorTable; }
    }
    
    public const int ReasonFieldNumber = 1;
    private bool hasReason;
    private global::Gazillion.ForceDisconnectReason reason_ = global::Gazillion.ForceDisconnectReason.eFDR_ErrorLoadingCharacter;
    public bool HasReason {
      get { return hasReason; }
    }
    public global::Gazillion.ForceDisconnectReason Reason {
      get { return reason_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReason) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageForceDisconnectFieldNames;
      if (hasReason) {
        output.WriteEnum(1, field_names[0], (int) Reason, Reason);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Reason);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageForceDisconnect ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageForceDisconnect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageForceDisconnect ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageForceDisconnect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageForceDisconnect ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageForceDisconnect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageForceDisconnect ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageForceDisconnect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageForceDisconnect ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageForceDisconnect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageForceDisconnect MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageForceDisconnect prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageForceDisconnect, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageForceDisconnect cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageForceDisconnect result;
      
      private NetMessageForceDisconnect PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageForceDisconnect original = result;
          result = new NetMessageForceDisconnect();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageForceDisconnect MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageForceDisconnect.Descriptor; }
      }
      
      public override NetMessageForceDisconnect DefaultInstanceForType {
        get { return global::Gazillion.NetMessageForceDisconnect.DefaultInstance; }
      }
      
      public override NetMessageForceDisconnect BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageForceDisconnect) {
          return MergeFrom((NetMessageForceDisconnect) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageForceDisconnect other) {
        if (other == global::Gazillion.NetMessageForceDisconnect.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReason) {
          Reason = other.Reason;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageForceDisconnectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageForceDisconnectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.reason_, out unknown)) {
                result.hasReason = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasReason {
       get { return result.hasReason; }
      }
      public global::Gazillion.ForceDisconnectReason Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(global::Gazillion.ForceDisconnectReason value) {
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = global::Gazillion.ForceDisconnectReason.eFDR_ErrorLoadingCharacter;
        return this;
      }
    }
    static NetMessageForceDisconnect() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLevelUp : pb::GeneratedMessage<NetMessageLevelUp, NetMessageLevelUp.Builder> {
    private NetMessageLevelUp() { }
    private static readonly NetMessageLevelUp defaultInstance = new NetMessageLevelUp().MakeReadOnly();
    private static readonly string[] _netMessageLevelUpFieldNames = new string[] { "entityID" };
    private static readonly uint[] _netMessageLevelUpFieldTags = new uint[] { 8 };
    public static NetMessageLevelUp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLevelUp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLevelUp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLevelUp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLevelUp, NetMessageLevelUp.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLevelUp__FieldAccessorTable; }
    }
    
    public const int EntityIDFieldNumber = 1;
    private bool hasEntityID;
    private ulong entityID_;
    public bool HasEntityID {
      get { return hasEntityID; }
    }
    public ulong EntityID {
      get { return entityID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLevelUpFieldNames;
      if (hasEntityID) {
        output.WriteUInt64(1, field_names[0], EntityID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityID) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLevelUp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLevelUp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLevelUp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLevelUp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLevelUp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLevelUp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLevelUp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLevelUp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLevelUp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLevelUp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLevelUp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLevelUp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLevelUp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLevelUp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLevelUp result;
      
      private NetMessageLevelUp PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLevelUp original = result;
          result = new NetMessageLevelUp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLevelUp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLevelUp.Descriptor; }
      }
      
      public override NetMessageLevelUp DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLevelUp.DefaultInstance; }
      }
      
      public override NetMessageLevelUp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLevelUp) {
          return MergeFrom((NetMessageLevelUp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLevelUp other) {
        if (other == global::Gazillion.NetMessageLevelUp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityID) {
          EntityID = other.EntityID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLevelUpFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLevelUpFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityID = input.ReadUInt64(ref result.entityID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityID {
        get { return result.hasEntityID; }
      }
      public ulong EntityID {
        get { return result.EntityID; }
        set { SetEntityID(value); }
      }
      public Builder SetEntityID(ulong value) {
        PrepareBuilder();
        result.hasEntityID = true;
        result.entityID_ = value;
        return this;
      }
      public Builder ClearEntityID() {
        PrepareBuilder();
        result.hasEntityID = false;
        result.entityID_ = 0UL;
        return this;
      }
    }
    static NetMessageLevelUp() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageVendorLevelUp : pb::GeneratedMessage<NetMessageVendorLevelUp, NetMessageVendorLevelUp.Builder> {
    private NetMessageVendorLevelUp() { }
    private static readonly NetMessageVendorLevelUp defaultInstance = new NetMessageVendorLevelUp().MakeReadOnly();
    private static readonly string[] _netMessageVendorLevelUpFieldNames = new string[] { "vendorID", "vendorTypeProtoId" };
    private static readonly uint[] _netMessageVendorLevelUpFieldTags = new uint[] { 16, 8 };
    public static NetMessageVendorLevelUp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageVendorLevelUp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageVendorLevelUp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageVendorLevelUp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageVendorLevelUp, NetMessageVendorLevelUp.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageVendorLevelUp__FieldAccessorTable; }
    }
    
    public const int VendorTypeProtoIdFieldNumber = 1;
    private bool hasVendorTypeProtoId;
    private ulong vendorTypeProtoId_;
    public bool HasVendorTypeProtoId {
      get { return hasVendorTypeProtoId; }
    }
    public ulong VendorTypeProtoId {
      get { return vendorTypeProtoId_; }
    }
    
    public const int VendorIDFieldNumber = 2;
    private bool hasVendorID;
    private ulong vendorID_;
    public bool HasVendorID {
      get { return hasVendorID; }
    }
    public ulong VendorID {
      get { return vendorID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVendorTypeProtoId) return false;
        if (!hasVendorID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageVendorLevelUpFieldNames;
      if (hasVendorTypeProtoId) {
        output.WriteUInt64(1, field_names[1], VendorTypeProtoId);
      }
      if (hasVendorID) {
        output.WriteUInt64(2, field_names[0], VendorID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasVendorTypeProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, VendorTypeProtoId);
      }
      if (hasVendorID) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, VendorID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageVendorLevelUp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorLevelUp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorLevelUp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorLevelUp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorLevelUp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorLevelUp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorLevelUp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageVendorLevelUp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageVendorLevelUp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorLevelUp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageVendorLevelUp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageVendorLevelUp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageVendorLevelUp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageVendorLevelUp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageVendorLevelUp result;
      
      private NetMessageVendorLevelUp PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageVendorLevelUp original = result;
          result = new NetMessageVendorLevelUp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageVendorLevelUp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageVendorLevelUp.Descriptor; }
      }
      
      public override NetMessageVendorLevelUp DefaultInstanceForType {
        get { return global::Gazillion.NetMessageVendorLevelUp.DefaultInstance; }
      }
      
      public override NetMessageVendorLevelUp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageVendorLevelUp) {
          return MergeFrom((NetMessageVendorLevelUp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageVendorLevelUp other) {
        if (other == global::Gazillion.NetMessageVendorLevelUp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVendorTypeProtoId) {
          VendorTypeProtoId = other.VendorTypeProtoId;
        }
        if (other.HasVendorID) {
          VendorID = other.VendorID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageVendorLevelUpFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageVendorLevelUpFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVendorTypeProtoId = input.ReadUInt64(ref result.vendorTypeProtoId_);
              break;
            }
            case 16: {
              result.hasVendorID = input.ReadUInt64(ref result.vendorID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVendorTypeProtoId {
        get { return result.hasVendorTypeProtoId; }
      }
      public ulong VendorTypeProtoId {
        get { return result.VendorTypeProtoId; }
        set { SetVendorTypeProtoId(value); }
      }
      public Builder SetVendorTypeProtoId(ulong value) {
        PrepareBuilder();
        result.hasVendorTypeProtoId = true;
        result.vendorTypeProtoId_ = value;
        return this;
      }
      public Builder ClearVendorTypeProtoId() {
        PrepareBuilder();
        result.hasVendorTypeProtoId = false;
        result.vendorTypeProtoId_ = 0UL;
        return this;
      }
      
      public bool HasVendorID {
        get { return result.hasVendorID; }
      }
      public ulong VendorID {
        get { return result.VendorID; }
        set { SetVendorID(value); }
      }
      public Builder SetVendorID(ulong value) {
        PrepareBuilder();
        result.hasVendorID = true;
        result.vendorID_ = value;
        return this;
      }
      public Builder ClearVendorID() {
        PrepareBuilder();
        result.hasVendorID = false;
        result.vendorID_ = 0UL;
        return this;
      }
    }
    static NetMessageVendorLevelUp() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageVendorRefresh : pb::GeneratedMessage<NetMessageVendorRefresh, NetMessageVendorRefresh.Builder> {
    private NetMessageVendorRefresh() { }
    private static readonly NetMessageVendorRefresh defaultInstance = new NetMessageVendorRefresh().MakeReadOnly();
    private static readonly string[] _netMessageVendorRefreshFieldNames = new string[] { "vendorTypeProtoId" };
    private static readonly uint[] _netMessageVendorRefreshFieldTags = new uint[] { 8 };
    public static NetMessageVendorRefresh DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageVendorRefresh DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageVendorRefresh ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageVendorRefresh__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageVendorRefresh, NetMessageVendorRefresh.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageVendorRefresh__FieldAccessorTable; }
    }
    
    public const int VendorTypeProtoIdFieldNumber = 1;
    private bool hasVendorTypeProtoId;
    private ulong vendorTypeProtoId_;
    public bool HasVendorTypeProtoId {
      get { return hasVendorTypeProtoId; }
    }
    public ulong VendorTypeProtoId {
      get { return vendorTypeProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVendorTypeProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageVendorRefreshFieldNames;
      if (hasVendorTypeProtoId) {
        output.WriteUInt64(1, field_names[0], VendorTypeProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasVendorTypeProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, VendorTypeProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageVendorRefresh ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRefresh ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRefresh ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRefresh ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRefresh ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRefresh ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRefresh ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageVendorRefresh ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageVendorRefresh ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRefresh ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageVendorRefresh MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageVendorRefresh prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageVendorRefresh, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageVendorRefresh cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageVendorRefresh result;
      
      private NetMessageVendorRefresh PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageVendorRefresh original = result;
          result = new NetMessageVendorRefresh();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageVendorRefresh MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageVendorRefresh.Descriptor; }
      }
      
      public override NetMessageVendorRefresh DefaultInstanceForType {
        get { return global::Gazillion.NetMessageVendorRefresh.DefaultInstance; }
      }
      
      public override NetMessageVendorRefresh BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageVendorRefresh) {
          return MergeFrom((NetMessageVendorRefresh) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageVendorRefresh other) {
        if (other == global::Gazillion.NetMessageVendorRefresh.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVendorTypeProtoId) {
          VendorTypeProtoId = other.VendorTypeProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageVendorRefreshFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageVendorRefreshFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVendorTypeProtoId = input.ReadUInt64(ref result.vendorTypeProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVendorTypeProtoId {
        get { return result.hasVendorTypeProtoId; }
      }
      public ulong VendorTypeProtoId {
        get { return result.VendorTypeProtoId; }
        set { SetVendorTypeProtoId(value); }
      }
      public Builder SetVendorTypeProtoId(ulong value) {
        PrepareBuilder();
        result.hasVendorTypeProtoId = true;
        result.vendorTypeProtoId_ = value;
        return this;
      }
      public Builder ClearVendorTypeProtoId() {
        PrepareBuilder();
        result.hasVendorTypeProtoId = false;
        result.vendorTypeProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageVendorRefresh() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCraftingFinished : pb::GeneratedMessage<NetMessageCraftingFinished, NetMessageCraftingFinished.Builder> {
    private NetMessageCraftingFinished() { }
    private static readonly NetMessageCraftingFinished defaultInstance = new NetMessageCraftingFinished().MakeReadOnly();
    private static readonly string[] _netMessageCraftingFinishedFieldNames = new string[] { "recipeProtoId" };
    private static readonly uint[] _netMessageCraftingFinishedFieldTags = new uint[] { 8 };
    public static NetMessageCraftingFinished DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCraftingFinished DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCraftingFinished ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCraftingFinished__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCraftingFinished, NetMessageCraftingFinished.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCraftingFinished__FieldAccessorTable; }
    }
    
    public const int RecipeProtoIdFieldNumber = 1;
    private bool hasRecipeProtoId;
    private ulong recipeProtoId_;
    public bool HasRecipeProtoId {
      get { return hasRecipeProtoId; }
    }
    public ulong RecipeProtoId {
      get { return recipeProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRecipeProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCraftingFinishedFieldNames;
      if (hasRecipeProtoId) {
        output.WriteUInt64(1, field_names[0], RecipeProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRecipeProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, RecipeProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCraftingFinished ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCraftingFinished ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCraftingFinished ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCraftingFinished ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCraftingFinished ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCraftingFinished ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCraftingFinished ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCraftingFinished ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCraftingFinished ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCraftingFinished ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCraftingFinished MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCraftingFinished prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCraftingFinished, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCraftingFinished cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCraftingFinished result;
      
      private NetMessageCraftingFinished PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCraftingFinished original = result;
          result = new NetMessageCraftingFinished();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCraftingFinished MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCraftingFinished.Descriptor; }
      }
      
      public override NetMessageCraftingFinished DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCraftingFinished.DefaultInstance; }
      }
      
      public override NetMessageCraftingFinished BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCraftingFinished) {
          return MergeFrom((NetMessageCraftingFinished) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCraftingFinished other) {
        if (other == global::Gazillion.NetMessageCraftingFinished.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRecipeProtoId) {
          RecipeProtoId = other.RecipeProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCraftingFinishedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCraftingFinishedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRecipeProtoId = input.ReadUInt64(ref result.recipeProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRecipeProtoId {
        get { return result.hasRecipeProtoId; }
      }
      public ulong RecipeProtoId {
        get { return result.RecipeProtoId; }
        set { SetRecipeProtoId(value); }
      }
      public Builder SetRecipeProtoId(ulong value) {
        PrepareBuilder();
        result.hasRecipeProtoId = true;
        result.recipeProtoId_ = value;
        return this;
      }
      public Builder ClearRecipeProtoId() {
        PrepareBuilder();
        result.hasRecipeProtoId = false;
        result.recipeProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageCraftingFinished() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCraftingFailed : pb::GeneratedMessage<NetMessageCraftingFailed, NetMessageCraftingFailed.Builder> {
    private NetMessageCraftingFailed() { }
    private static readonly NetMessageCraftingFailed defaultInstance = new NetMessageCraftingFailed().MakeReadOnly();
    private static readonly string[] _netMessageCraftingFailedFieldNames = new string[] { "recipeProtoId" };
    private static readonly uint[] _netMessageCraftingFailedFieldTags = new uint[] { 8 };
    public static NetMessageCraftingFailed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCraftingFailed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCraftingFailed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCraftingFailed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCraftingFailed, NetMessageCraftingFailed.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCraftingFailed__FieldAccessorTable; }
    }
    
    public const int RecipeProtoIdFieldNumber = 1;
    private bool hasRecipeProtoId;
    private ulong recipeProtoId_;
    public bool HasRecipeProtoId {
      get { return hasRecipeProtoId; }
    }
    public ulong RecipeProtoId {
      get { return recipeProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRecipeProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCraftingFailedFieldNames;
      if (hasRecipeProtoId) {
        output.WriteUInt64(1, field_names[0], RecipeProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRecipeProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, RecipeProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCraftingFailed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCraftingFailed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCraftingFailed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCraftingFailed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCraftingFailed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCraftingFailed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCraftingFailed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCraftingFailed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCraftingFailed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCraftingFailed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCraftingFailed MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCraftingFailed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCraftingFailed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCraftingFailed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCraftingFailed result;
      
      private NetMessageCraftingFailed PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCraftingFailed original = result;
          result = new NetMessageCraftingFailed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCraftingFailed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCraftingFailed.Descriptor; }
      }
      
      public override NetMessageCraftingFailed DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCraftingFailed.DefaultInstance; }
      }
      
      public override NetMessageCraftingFailed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCraftingFailed) {
          return MergeFrom((NetMessageCraftingFailed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCraftingFailed other) {
        if (other == global::Gazillion.NetMessageCraftingFailed.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRecipeProtoId) {
          RecipeProtoId = other.RecipeProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCraftingFailedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCraftingFailedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRecipeProtoId = input.ReadUInt64(ref result.recipeProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRecipeProtoId {
        get { return result.hasRecipeProtoId; }
      }
      public ulong RecipeProtoId {
        get { return result.RecipeProtoId; }
        set { SetRecipeProtoId(value); }
      }
      public Builder SetRecipeProtoId(ulong value) {
        PrepareBuilder();
        result.hasRecipeProtoId = true;
        result.recipeProtoId_ = value;
        return this;
      }
      public Builder ClearRecipeProtoId() {
        PrepareBuilder();
        result.hasRecipeProtoId = false;
        result.recipeProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageCraftingFailed() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageWaypointUnlocked : pb::GeneratedMessage<NetMessageWaypointUnlocked, NetMessageWaypointUnlocked.Builder> {
    private NetMessageWaypointUnlocked() { }
    private static readonly NetMessageWaypointUnlocked defaultInstance = new NetMessageWaypointUnlocked().MakeReadOnly();
    private static readonly string[] _netMessageWaypointUnlockedFieldNames = new string[] { "waypointPrototypeID" };
    private static readonly uint[] _netMessageWaypointUnlockedFieldTags = new uint[] { 8 };
    public static NetMessageWaypointUnlocked DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageWaypointUnlocked DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageWaypointUnlocked ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageWaypointUnlocked__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageWaypointUnlocked, NetMessageWaypointUnlocked.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageWaypointUnlocked__FieldAccessorTable; }
    }
    
    public const int WaypointPrototypeIDFieldNumber = 1;
    private bool hasWaypointPrototypeID;
    private ulong waypointPrototypeID_;
    public bool HasWaypointPrototypeID {
      get { return hasWaypointPrototypeID; }
    }
    public ulong WaypointPrototypeID {
      get { return waypointPrototypeID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWaypointPrototypeID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageWaypointUnlockedFieldNames;
      if (hasWaypointPrototypeID) {
        output.WriteUInt64(1, field_names[0], WaypointPrototypeID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasWaypointPrototypeID) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, WaypointPrototypeID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageWaypointUnlocked ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageWaypointUnlocked ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageWaypointUnlocked ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageWaypointUnlocked ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageWaypointUnlocked ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageWaypointUnlocked ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageWaypointUnlocked ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageWaypointUnlocked ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageWaypointUnlocked ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageWaypointUnlocked ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageWaypointUnlocked MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageWaypointUnlocked prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageWaypointUnlocked, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageWaypointUnlocked cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageWaypointUnlocked result;
      
      private NetMessageWaypointUnlocked PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageWaypointUnlocked original = result;
          result = new NetMessageWaypointUnlocked();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageWaypointUnlocked MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageWaypointUnlocked.Descriptor; }
      }
      
      public override NetMessageWaypointUnlocked DefaultInstanceForType {
        get { return global::Gazillion.NetMessageWaypointUnlocked.DefaultInstance; }
      }
      
      public override NetMessageWaypointUnlocked BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageWaypointUnlocked) {
          return MergeFrom((NetMessageWaypointUnlocked) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageWaypointUnlocked other) {
        if (other == global::Gazillion.NetMessageWaypointUnlocked.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWaypointPrototypeID) {
          WaypointPrototypeID = other.WaypointPrototypeID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageWaypointUnlockedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageWaypointUnlockedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasWaypointPrototypeID = input.ReadUInt64(ref result.waypointPrototypeID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWaypointPrototypeID {
        get { return result.hasWaypointPrototypeID; }
      }
      public ulong WaypointPrototypeID {
        get { return result.WaypointPrototypeID; }
        set { SetWaypointPrototypeID(value); }
      }
      public Builder SetWaypointPrototypeID(ulong value) {
        PrepareBuilder();
        result.hasWaypointPrototypeID = true;
        result.waypointPrototypeID_ = value;
        return this;
      }
      public Builder ClearWaypointPrototypeID() {
        PrepareBuilder();
        result.hasWaypointPrototypeID = false;
        result.waypointPrototypeID_ = 0UL;
        return this;
      }
    }
    static NetMessageWaypointUnlocked() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageReplicationArchive : pb::GeneratedMessage<NetMessageReplicationArchive, NetMessageReplicationArchive.Builder> {
    private NetMessageReplicationArchive() { }
    private static readonly NetMessageReplicationArchive defaultInstance = new NetMessageReplicationArchive().MakeReadOnly();
    private static readonly string[] _netMessageReplicationArchiveFieldNames = new string[] { "archiveData", "archiveDataType", "debugstring", "replicationId" };
    private static readonly uint[] _netMessageReplicationArchiveFieldTags = new uint[] { 26, 16, 34, 8 };
    public static NetMessageReplicationArchive DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageReplicationArchive DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageReplicationArchive ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReplicationArchive__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageReplicationArchive, NetMessageReplicationArchive.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReplicationArchive__FieldAccessorTable; }
    }
    
    public const int ReplicationIdFieldNumber = 1;
    private bool hasReplicationId;
    private ulong replicationId_;
    public bool HasReplicationId {
      get { return hasReplicationId; }
    }
    public ulong ReplicationId {
      get { return replicationId_; }
    }
    
    public const int ArchiveDataTypeFieldNumber = 2;
    private bool hasArchiveDataType;
    private uint archiveDataType_;
    public bool HasArchiveDataType {
      get { return hasArchiveDataType; }
    }
    public uint ArchiveDataType {
      get { return archiveDataType_; }
    }
    
    public const int ArchiveDataFieldNumber = 3;
    private bool hasArchiveData;
    private pb::ByteString archiveData_ = pb::ByteString.Empty;
    public bool HasArchiveData {
      get { return hasArchiveData; }
    }
    public pb::ByteString ArchiveData {
      get { return archiveData_; }
    }
    
    public const int DebugstringFieldNumber = 4;
    private bool hasDebugstring;
    private string debugstring_ = "";
    public bool HasDebugstring {
      get { return hasDebugstring; }
    }
    public string Debugstring {
      get { return debugstring_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReplicationId) return false;
        if (!hasArchiveData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageReplicationArchiveFieldNames;
      if (hasReplicationId) {
        output.WriteUInt64(1, field_names[3], ReplicationId);
      }
      if (hasArchiveDataType) {
        output.WriteUInt32(2, field_names[1], ArchiveDataType);
      }
      if (hasArchiveData) {
        output.WriteBytes(3, field_names[0], ArchiveData);
      }
      if (hasDebugstring) {
        output.WriteString(4, field_names[2], Debugstring);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasReplicationId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ReplicationId);
      }
      if (hasArchiveDataType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ArchiveDataType);
      }
      if (hasArchiveData) {
        size += pb::CodedOutputStream.ComputeBytesSize(3, ArchiveData);
      }
      if (hasDebugstring) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Debugstring);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageReplicationArchive ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReplicationArchive ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReplicationArchive ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReplicationArchive ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReplicationArchive ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReplicationArchive ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReplicationArchive ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageReplicationArchive ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageReplicationArchive ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReplicationArchive ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageReplicationArchive MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageReplicationArchive prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageReplicationArchive, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageReplicationArchive cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageReplicationArchive result;
      
      private NetMessageReplicationArchive PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageReplicationArchive original = result;
          result = new NetMessageReplicationArchive();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageReplicationArchive MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageReplicationArchive.Descriptor; }
      }
      
      public override NetMessageReplicationArchive DefaultInstanceForType {
        get { return global::Gazillion.NetMessageReplicationArchive.DefaultInstance; }
      }
      
      public override NetMessageReplicationArchive BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageReplicationArchive) {
          return MergeFrom((NetMessageReplicationArchive) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageReplicationArchive other) {
        if (other == global::Gazillion.NetMessageReplicationArchive.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReplicationId) {
          ReplicationId = other.ReplicationId;
        }
        if (other.HasArchiveDataType) {
          ArchiveDataType = other.ArchiveDataType;
        }
        if (other.HasArchiveData) {
          ArchiveData = other.ArchiveData;
        }
        if (other.HasDebugstring) {
          Debugstring = other.Debugstring;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageReplicationArchiveFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageReplicationArchiveFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasReplicationId = input.ReadUInt64(ref result.replicationId_);
              break;
            }
            case 16: {
              result.hasArchiveDataType = input.ReadUInt32(ref result.archiveDataType_);
              break;
            }
            case 26: {
              result.hasArchiveData = input.ReadBytes(ref result.archiveData_);
              break;
            }
            case 34: {
              result.hasDebugstring = input.ReadString(ref result.debugstring_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasReplicationId {
        get { return result.hasReplicationId; }
      }
      public ulong ReplicationId {
        get { return result.ReplicationId; }
        set { SetReplicationId(value); }
      }
      public Builder SetReplicationId(ulong value) {
        PrepareBuilder();
        result.hasReplicationId = true;
        result.replicationId_ = value;
        return this;
      }
      public Builder ClearReplicationId() {
        PrepareBuilder();
        result.hasReplicationId = false;
        result.replicationId_ = 0UL;
        return this;
      }
      
      public bool HasArchiveDataType {
        get { return result.hasArchiveDataType; }
      }
      public uint ArchiveDataType {
        get { return result.ArchiveDataType; }
        set { SetArchiveDataType(value); }
      }
      public Builder SetArchiveDataType(uint value) {
        PrepareBuilder();
        result.hasArchiveDataType = true;
        result.archiveDataType_ = value;
        return this;
      }
      public Builder ClearArchiveDataType() {
        PrepareBuilder();
        result.hasArchiveDataType = false;
        result.archiveDataType_ = 0;
        return this;
      }
      
      public bool HasArchiveData {
        get { return result.hasArchiveData; }
      }
      public pb::ByteString ArchiveData {
        get { return result.ArchiveData; }
        set { SetArchiveData(value); }
      }
      public Builder SetArchiveData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasArchiveData = true;
        result.archiveData_ = value;
        return this;
      }
      public Builder ClearArchiveData() {
        PrepareBuilder();
        result.hasArchiveData = false;
        result.archiveData_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasDebugstring {
        get { return result.hasDebugstring; }
      }
      public string Debugstring {
        get { return result.Debugstring; }
        set { SetDebugstring(value); }
      }
      public Builder SetDebugstring(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDebugstring = true;
        result.debugstring_ = value;
        return this;
      }
      public Builder ClearDebugstring() {
        PrepareBuilder();
        result.hasDebugstring = false;
        result.debugstring_ = "";
        return this;
      }
    }
    static NetMessageReplicationArchive() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePvPScoreScoreUpdateEntry : pb::GeneratedMessage<NetMessagePvPScoreScoreUpdateEntry, NetMessagePvPScoreScoreUpdateEntry.Builder> {
    private NetMessagePvPScoreScoreUpdateEntry() { }
    private static readonly NetMessagePvPScoreScoreUpdateEntry defaultInstance = new NetMessagePvPScoreScoreUpdateEntry().MakeReadOnly();
    private static readonly string[] _netMessagePvPScoreScoreUpdateEntryFieldNames = new string[] { "category", "value" };
    private static readonly uint[] _netMessagePvPScoreScoreUpdateEntryFieldTags = new uint[] { 8, 16 };
    public static NetMessagePvPScoreScoreUpdateEntry DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePvPScoreScoreUpdateEntry DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePvPScoreScoreUpdateEntry ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvPScoreScoreUpdateEntry__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePvPScoreScoreUpdateEntry, NetMessagePvPScoreScoreUpdateEntry.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvPScoreScoreUpdateEntry__FieldAccessorTable; }
    }
    
    public const int CategoryFieldNumber = 1;
    private bool hasCategory;
    private uint category_;
    public bool HasCategory {
      get { return hasCategory; }
    }
    public uint Category {
      get { return category_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private int value_;
    public bool HasValue {
      get { return hasValue; }
    }
    public int Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCategory) return false;
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePvPScoreScoreUpdateEntryFieldNames;
      if (hasCategory) {
        output.WriteUInt32(1, field_names[0], Category);
      }
      if (hasValue) {
        output.WriteInt32(2, field_names[1], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCategory) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Category);
      }
      if (hasValue) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Value);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePvPScoreScoreUpdateEntry MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePvPScoreScoreUpdateEntry prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePvPScoreScoreUpdateEntry, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePvPScoreScoreUpdateEntry cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePvPScoreScoreUpdateEntry result;
      
      private NetMessagePvPScoreScoreUpdateEntry PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePvPScoreScoreUpdateEntry original = result;
          result = new NetMessagePvPScoreScoreUpdateEntry();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePvPScoreScoreUpdateEntry MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePvPScoreScoreUpdateEntry.Descriptor; }
      }
      
      public override NetMessagePvPScoreScoreUpdateEntry DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePvPScoreScoreUpdateEntry.DefaultInstance; }
      }
      
      public override NetMessagePvPScoreScoreUpdateEntry BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePvPScoreScoreUpdateEntry) {
          return MergeFrom((NetMessagePvPScoreScoreUpdateEntry) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePvPScoreScoreUpdateEntry other) {
        if (other == global::Gazillion.NetMessagePvPScoreScoreUpdateEntry.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCategory) {
          Category = other.Category;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePvPScoreScoreUpdateEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePvPScoreScoreUpdateEntryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCategory = input.ReadUInt32(ref result.category_);
              break;
            }
            case 16: {
              result.hasValue = input.ReadInt32(ref result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCategory {
        get { return result.hasCategory; }
      }
      public uint Category {
        get { return result.Category; }
        set { SetCategory(value); }
      }
      public Builder SetCategory(uint value) {
        PrepareBuilder();
        result.hasCategory = true;
        result.category_ = value;
        return this;
      }
      public Builder ClearCategory() {
        PrepareBuilder();
        result.hasCategory = false;
        result.category_ = 0;
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public int Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(int value) {
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = 0;
        return this;
      }
    }
    static NetMessagePvPScoreScoreUpdateEntry() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePvPScorePlayerNewId : pb::GeneratedMessage<NetMessagePvPScorePlayerNewId, NetMessagePvPScorePlayerNewId.Builder> {
    private NetMessagePvPScorePlayerNewId() { }
    private static readonly NetMessagePvPScorePlayerNewId defaultInstance = new NetMessagePvPScorePlayerNewId().MakeReadOnly();
    private static readonly string[] _netMessagePvPScorePlayerNewIdFieldNames = new string[] { "playerDbGuid", "playerName", "pvpEntityId", "teamProtoId" };
    private static readonly uint[] _netMessagePvPScorePlayerNewIdFieldTags = new uint[] { 16, 26, 8, 32 };
    public static NetMessagePvPScorePlayerNewId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePvPScorePlayerNewId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePvPScorePlayerNewId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvPScorePlayerNewId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePvPScorePlayerNewId, NetMessagePvPScorePlayerNewId.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvPScorePlayerNewId__FieldAccessorTable; }
    }
    
    public const int PvpEntityIdFieldNumber = 1;
    private bool hasPvpEntityId;
    private ulong pvpEntityId_;
    public bool HasPvpEntityId {
      get { return hasPvpEntityId; }
    }
    public ulong PvpEntityId {
      get { return pvpEntityId_; }
    }
    
    public const int PlayerDbGuidFieldNumber = 2;
    private bool hasPlayerDbGuid;
    private ulong playerDbGuid_;
    public bool HasPlayerDbGuid {
      get { return hasPlayerDbGuid; }
    }
    public ulong PlayerDbGuid {
      get { return playerDbGuid_; }
    }
    
    public const int PlayerNameFieldNumber = 3;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
    }
    
    public const int TeamProtoIdFieldNumber = 4;
    private bool hasTeamProtoId;
    private ulong teamProtoId_;
    public bool HasTeamProtoId {
      get { return hasTeamProtoId; }
    }
    public ulong TeamProtoId {
      get { return teamProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPvpEntityId) return false;
        if (!hasPlayerDbGuid) return false;
        if (!hasPlayerName) return false;
        if (!hasTeamProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePvPScorePlayerNewIdFieldNames;
      if (hasPvpEntityId) {
        output.WriteUInt64(1, field_names[2], PvpEntityId);
      }
      if (hasPlayerDbGuid) {
        output.WriteUInt64(2, field_names[0], PlayerDbGuid);
      }
      if (hasPlayerName) {
        output.WriteString(3, field_names[1], PlayerName);
      }
      if (hasTeamProtoId) {
        output.WriteUInt64(4, field_names[3], TeamProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPvpEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PvpEntityId);
      }
      if (hasPlayerDbGuid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PlayerDbGuid);
      }
      if (hasPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, PlayerName);
      }
      if (hasTeamProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, TeamProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePvPScorePlayerNewId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerNewId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerNewId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerNewId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerNewId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerNewId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerNewId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePvPScorePlayerNewId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePvPScorePlayerNewId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerNewId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePvPScorePlayerNewId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePvPScorePlayerNewId prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePvPScorePlayerNewId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePvPScorePlayerNewId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePvPScorePlayerNewId result;
      
      private NetMessagePvPScorePlayerNewId PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePvPScorePlayerNewId original = result;
          result = new NetMessagePvPScorePlayerNewId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePvPScorePlayerNewId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePvPScorePlayerNewId.Descriptor; }
      }
      
      public override NetMessagePvPScorePlayerNewId DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePvPScorePlayerNewId.DefaultInstance; }
      }
      
      public override NetMessagePvPScorePlayerNewId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePvPScorePlayerNewId) {
          return MergeFrom((NetMessagePvPScorePlayerNewId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePvPScorePlayerNewId other) {
        if (other == global::Gazillion.NetMessagePvPScorePlayerNewId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPvpEntityId) {
          PvpEntityId = other.PvpEntityId;
        }
        if (other.HasPlayerDbGuid) {
          PlayerDbGuid = other.PlayerDbGuid;
        }
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        if (other.HasTeamProtoId) {
          TeamProtoId = other.TeamProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePvPScorePlayerNewIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePvPScorePlayerNewIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPvpEntityId = input.ReadUInt64(ref result.pvpEntityId_);
              break;
            }
            case 16: {
              result.hasPlayerDbGuid = input.ReadUInt64(ref result.playerDbGuid_);
              break;
            }
            case 26: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
            case 32: {
              result.hasTeamProtoId = input.ReadUInt64(ref result.teamProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPvpEntityId {
        get { return result.hasPvpEntityId; }
      }
      public ulong PvpEntityId {
        get { return result.PvpEntityId; }
        set { SetPvpEntityId(value); }
      }
      public Builder SetPvpEntityId(ulong value) {
        PrepareBuilder();
        result.hasPvpEntityId = true;
        result.pvpEntityId_ = value;
        return this;
      }
      public Builder ClearPvpEntityId() {
        PrepareBuilder();
        result.hasPvpEntityId = false;
        result.pvpEntityId_ = 0UL;
        return this;
      }
      
      public bool HasPlayerDbGuid {
        get { return result.hasPlayerDbGuid; }
      }
      public ulong PlayerDbGuid {
        get { return result.PlayerDbGuid; }
        set { SetPlayerDbGuid(value); }
      }
      public Builder SetPlayerDbGuid(ulong value) {
        PrepareBuilder();
        result.hasPlayerDbGuid = true;
        result.playerDbGuid_ = value;
        return this;
      }
      public Builder ClearPlayerDbGuid() {
        PrepareBuilder();
        result.hasPlayerDbGuid = false;
        result.playerDbGuid_ = 0UL;
        return this;
      }
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
      
      public bool HasTeamProtoId {
        get { return result.hasTeamProtoId; }
      }
      public ulong TeamProtoId {
        get { return result.TeamProtoId; }
        set { SetTeamProtoId(value); }
      }
      public Builder SetTeamProtoId(ulong value) {
        PrepareBuilder();
        result.hasTeamProtoId = true;
        result.teamProtoId_ = value;
        return this;
      }
      public Builder ClearTeamProtoId() {
        PrepareBuilder();
        result.hasTeamProtoId = false;
        result.teamProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessagePvPScorePlayerNewId() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePvPScorePlayerTeamChange : pb::GeneratedMessage<NetMessagePvPScorePlayerTeamChange, NetMessagePvPScorePlayerTeamChange.Builder> {
    private NetMessagePvPScorePlayerTeamChange() { }
    private static readonly NetMessagePvPScorePlayerTeamChange defaultInstance = new NetMessagePvPScorePlayerTeamChange().MakeReadOnly();
    private static readonly string[] _netMessagePvPScorePlayerTeamChangeFieldNames = new string[] { "playerDbGuid", "pvpEntityId", "teamProtoId" };
    private static readonly uint[] _netMessagePvPScorePlayerTeamChangeFieldTags = new uint[] { 16, 8, 24 };
    public static NetMessagePvPScorePlayerTeamChange DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePvPScorePlayerTeamChange DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePvPScorePlayerTeamChange ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvPScorePlayerTeamChange__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePvPScorePlayerTeamChange, NetMessagePvPScorePlayerTeamChange.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvPScorePlayerTeamChange__FieldAccessorTable; }
    }
    
    public const int PvpEntityIdFieldNumber = 1;
    private bool hasPvpEntityId;
    private ulong pvpEntityId_;
    public bool HasPvpEntityId {
      get { return hasPvpEntityId; }
    }
    public ulong PvpEntityId {
      get { return pvpEntityId_; }
    }
    
    public const int PlayerDbGuidFieldNumber = 2;
    private bool hasPlayerDbGuid;
    private ulong playerDbGuid_;
    public bool HasPlayerDbGuid {
      get { return hasPlayerDbGuid; }
    }
    public ulong PlayerDbGuid {
      get { return playerDbGuid_; }
    }
    
    public const int TeamProtoIdFieldNumber = 3;
    private bool hasTeamProtoId;
    private ulong teamProtoId_;
    public bool HasTeamProtoId {
      get { return hasTeamProtoId; }
    }
    public ulong TeamProtoId {
      get { return teamProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPvpEntityId) return false;
        if (!hasPlayerDbGuid) return false;
        if (!hasTeamProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePvPScorePlayerTeamChangeFieldNames;
      if (hasPvpEntityId) {
        output.WriteUInt64(1, field_names[1], PvpEntityId);
      }
      if (hasPlayerDbGuid) {
        output.WriteUInt64(2, field_names[0], PlayerDbGuid);
      }
      if (hasTeamProtoId) {
        output.WriteUInt64(3, field_names[2], TeamProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPvpEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PvpEntityId);
      }
      if (hasPlayerDbGuid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PlayerDbGuid);
      }
      if (hasTeamProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, TeamProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePvPScorePlayerTeamChange ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerTeamChange ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerTeamChange ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerTeamChange ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerTeamChange ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerTeamChange ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerTeamChange ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePvPScorePlayerTeamChange ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePvPScorePlayerTeamChange ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerTeamChange ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePvPScorePlayerTeamChange MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePvPScorePlayerTeamChange prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePvPScorePlayerTeamChange, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePvPScorePlayerTeamChange cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePvPScorePlayerTeamChange result;
      
      private NetMessagePvPScorePlayerTeamChange PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePvPScorePlayerTeamChange original = result;
          result = new NetMessagePvPScorePlayerTeamChange();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePvPScorePlayerTeamChange MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePvPScorePlayerTeamChange.Descriptor; }
      }
      
      public override NetMessagePvPScorePlayerTeamChange DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePvPScorePlayerTeamChange.DefaultInstance; }
      }
      
      public override NetMessagePvPScorePlayerTeamChange BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePvPScorePlayerTeamChange) {
          return MergeFrom((NetMessagePvPScorePlayerTeamChange) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePvPScorePlayerTeamChange other) {
        if (other == global::Gazillion.NetMessagePvPScorePlayerTeamChange.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPvpEntityId) {
          PvpEntityId = other.PvpEntityId;
        }
        if (other.HasPlayerDbGuid) {
          PlayerDbGuid = other.PlayerDbGuid;
        }
        if (other.HasTeamProtoId) {
          TeamProtoId = other.TeamProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePvPScorePlayerTeamChangeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePvPScorePlayerTeamChangeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPvpEntityId = input.ReadUInt64(ref result.pvpEntityId_);
              break;
            }
            case 16: {
              result.hasPlayerDbGuid = input.ReadUInt64(ref result.playerDbGuid_);
              break;
            }
            case 24: {
              result.hasTeamProtoId = input.ReadUInt64(ref result.teamProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPvpEntityId {
        get { return result.hasPvpEntityId; }
      }
      public ulong PvpEntityId {
        get { return result.PvpEntityId; }
        set { SetPvpEntityId(value); }
      }
      public Builder SetPvpEntityId(ulong value) {
        PrepareBuilder();
        result.hasPvpEntityId = true;
        result.pvpEntityId_ = value;
        return this;
      }
      public Builder ClearPvpEntityId() {
        PrepareBuilder();
        result.hasPvpEntityId = false;
        result.pvpEntityId_ = 0UL;
        return this;
      }
      
      public bool HasPlayerDbGuid {
        get { return result.hasPlayerDbGuid; }
      }
      public ulong PlayerDbGuid {
        get { return result.PlayerDbGuid; }
        set { SetPlayerDbGuid(value); }
      }
      public Builder SetPlayerDbGuid(ulong value) {
        PrepareBuilder();
        result.hasPlayerDbGuid = true;
        result.playerDbGuid_ = value;
        return this;
      }
      public Builder ClearPlayerDbGuid() {
        PrepareBuilder();
        result.hasPlayerDbGuid = false;
        result.playerDbGuid_ = 0UL;
        return this;
      }
      
      public bool HasTeamProtoId {
        get { return result.hasTeamProtoId; }
      }
      public ulong TeamProtoId {
        get { return result.TeamProtoId; }
        set { SetTeamProtoId(value); }
      }
      public Builder SetTeamProtoId(ulong value) {
        PrepareBuilder();
        result.hasTeamProtoId = true;
        result.teamProtoId_ = value;
        return this;
      }
      public Builder ClearTeamProtoId() {
        PrepareBuilder();
        result.hasTeamProtoId = false;
        result.teamProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessagePvPScorePlayerTeamChange() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePvPScorePlayerUpdate : pb::GeneratedMessage<NetMessagePvPScorePlayerUpdate, NetMessagePvPScorePlayerUpdate.Builder> {
    private NetMessagePvPScorePlayerUpdate() { }
    private static readonly NetMessagePvPScorePlayerUpdate defaultInstance = new NetMessagePvPScorePlayerUpdate().MakeReadOnly();
    private static readonly string[] _netMessagePvPScorePlayerUpdateFieldNames = new string[] { "playerDbGuid", "pvpEntityId", "updates" };
    private static readonly uint[] _netMessagePvPScorePlayerUpdateFieldTags = new uint[] { 16, 8, 26 };
    public static NetMessagePvPScorePlayerUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePvPScorePlayerUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePvPScorePlayerUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvPScorePlayerUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePvPScorePlayerUpdate, NetMessagePvPScorePlayerUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvPScorePlayerUpdate__FieldAccessorTable; }
    }
    
    public const int PvpEntityIdFieldNumber = 1;
    private bool hasPvpEntityId;
    private ulong pvpEntityId_;
    public bool HasPvpEntityId {
      get { return hasPvpEntityId; }
    }
    public ulong PvpEntityId {
      get { return pvpEntityId_; }
    }
    
    public const int PlayerDbGuidFieldNumber = 2;
    private bool hasPlayerDbGuid;
    private ulong playerDbGuid_;
    public bool HasPlayerDbGuid {
      get { return hasPlayerDbGuid; }
    }
    public ulong PlayerDbGuid {
      get { return playerDbGuid_; }
    }
    
    public const int UpdatesFieldNumber = 3;
    private pbc::PopsicleList<global::Gazillion.NetMessagePvPScoreScoreUpdateEntry> updates_ = new pbc::PopsicleList<global::Gazillion.NetMessagePvPScoreScoreUpdateEntry>();
    public scg::IList<global::Gazillion.NetMessagePvPScoreScoreUpdateEntry> UpdatesList {
      get { return updates_; }
    }
    public int UpdatesCount {
      get { return updates_.Count; }
    }
    public global::Gazillion.NetMessagePvPScoreScoreUpdateEntry GetUpdates(int index) {
      return updates_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPvpEntityId) return false;
        if (!hasPlayerDbGuid) return false;
        foreach (global::Gazillion.NetMessagePvPScoreScoreUpdateEntry element in UpdatesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePvPScorePlayerUpdateFieldNames;
      if (hasPvpEntityId) {
        output.WriteUInt64(1, field_names[1], PvpEntityId);
      }
      if (hasPlayerDbGuid) {
        output.WriteUInt64(2, field_names[0], PlayerDbGuid);
      }
      if (updates_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], updates_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPvpEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PvpEntityId);
      }
      if (hasPlayerDbGuid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PlayerDbGuid);
      }
      foreach (global::Gazillion.NetMessagePvPScoreScoreUpdateEntry element in UpdatesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePvPScorePlayerUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePvPScorePlayerUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePvPScorePlayerUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePvPScorePlayerUpdate MakeReadOnly() {
      updates_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePvPScorePlayerUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePvPScorePlayerUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePvPScorePlayerUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePvPScorePlayerUpdate result;
      
      private NetMessagePvPScorePlayerUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePvPScorePlayerUpdate original = result;
          result = new NetMessagePvPScorePlayerUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePvPScorePlayerUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePvPScorePlayerUpdate.Descriptor; }
      }
      
      public override NetMessagePvPScorePlayerUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePvPScorePlayerUpdate.DefaultInstance; }
      }
      
      public override NetMessagePvPScorePlayerUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePvPScorePlayerUpdate) {
          return MergeFrom((NetMessagePvPScorePlayerUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePvPScorePlayerUpdate other) {
        if (other == global::Gazillion.NetMessagePvPScorePlayerUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPvpEntityId) {
          PvpEntityId = other.PvpEntityId;
        }
        if (other.HasPlayerDbGuid) {
          PlayerDbGuid = other.PlayerDbGuid;
        }
        if (other.updates_.Count != 0) {
          result.updates_.Add(other.updates_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePvPScorePlayerUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePvPScorePlayerUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPvpEntityId = input.ReadUInt64(ref result.pvpEntityId_);
              break;
            }
            case 16: {
              result.hasPlayerDbGuid = input.ReadUInt64(ref result.playerDbGuid_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.updates_, global::Gazillion.NetMessagePvPScoreScoreUpdateEntry.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPvpEntityId {
        get { return result.hasPvpEntityId; }
      }
      public ulong PvpEntityId {
        get { return result.PvpEntityId; }
        set { SetPvpEntityId(value); }
      }
      public Builder SetPvpEntityId(ulong value) {
        PrepareBuilder();
        result.hasPvpEntityId = true;
        result.pvpEntityId_ = value;
        return this;
      }
      public Builder ClearPvpEntityId() {
        PrepareBuilder();
        result.hasPvpEntityId = false;
        result.pvpEntityId_ = 0UL;
        return this;
      }
      
      public bool HasPlayerDbGuid {
        get { return result.hasPlayerDbGuid; }
      }
      public ulong PlayerDbGuid {
        get { return result.PlayerDbGuid; }
        set { SetPlayerDbGuid(value); }
      }
      public Builder SetPlayerDbGuid(ulong value) {
        PrepareBuilder();
        result.hasPlayerDbGuid = true;
        result.playerDbGuid_ = value;
        return this;
      }
      public Builder ClearPlayerDbGuid() {
        PrepareBuilder();
        result.hasPlayerDbGuid = false;
        result.playerDbGuid_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.NetMessagePvPScoreScoreUpdateEntry> UpdatesList {
        get { return PrepareBuilder().updates_; }
      }
      public int UpdatesCount {
        get { return result.UpdatesCount; }
      }
      public global::Gazillion.NetMessagePvPScoreScoreUpdateEntry GetUpdates(int index) {
        return result.GetUpdates(index);
      }
      public Builder SetUpdates(int index, global::Gazillion.NetMessagePvPScoreScoreUpdateEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.updates_[index] = value;
        return this;
      }
      public Builder SetUpdates(int index, global::Gazillion.NetMessagePvPScoreScoreUpdateEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.updates_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUpdates(global::Gazillion.NetMessagePvPScoreScoreUpdateEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.updates_.Add(value);
        return this;
      }
      public Builder AddUpdates(global::Gazillion.NetMessagePvPScoreScoreUpdateEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.updates_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUpdates(scg::IEnumerable<global::Gazillion.NetMessagePvPScoreScoreUpdateEntry> values) {
        PrepareBuilder();
        result.updates_.Add(values);
        return this;
      }
      public Builder ClearUpdates() {
        PrepareBuilder();
        result.updates_.Clear();
        return this;
      }
    }
    static NetMessagePvPScorePlayerUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTransitionUpdate : pb::GeneratedMessage<NetMessageTransitionUpdate, NetMessageTransitionUpdate.Builder> {
    private NetMessageTransitionUpdate() { }
    private static readonly NetMessageTransitionUpdate defaultInstance = new NetMessageTransitionUpdate().MakeReadOnly();
    private static readonly string[] _netMessageTransitionUpdateFieldNames = new string[] { "idEntity" };
    private static readonly uint[] _netMessageTransitionUpdateFieldTags = new uint[] { 8 };
    public static NetMessageTransitionUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTransitionUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTransitionUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageTransitionUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTransitionUpdate, NetMessageTransitionUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageTransitionUpdate__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTransitionUpdateFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[0], IdEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTransitionUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTransitionUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTransitionUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTransitionUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTransitionUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTransitionUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTransitionUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTransitionUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTransitionUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTransitionUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTransitionUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTransitionUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTransitionUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTransitionUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTransitionUpdate result;
      
      private NetMessageTransitionUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTransitionUpdate original = result;
          result = new NetMessageTransitionUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTransitionUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTransitionUpdate.Descriptor; }
      }
      
      public override NetMessageTransitionUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTransitionUpdate.DefaultInstance; }
      }
      
      public override NetMessageTransitionUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTransitionUpdate) {
          return MergeFrom((NetMessageTransitionUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTransitionUpdate other) {
        if (other == global::Gazillion.NetMessageTransitionUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTransitionUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTransitionUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageTransitionUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAvatarNameChange : pb::GeneratedMessage<NetMessageAvatarNameChange, NetMessageAvatarNameChange.Builder> {
    private NetMessageAvatarNameChange() { }
    private static readonly NetMessageAvatarNameChange defaultInstance = new NetMessageAvatarNameChange().MakeReadOnly();
    private static readonly string[] _netMessageAvatarNameChangeFieldNames = new string[] { "idEntity" };
    private static readonly uint[] _netMessageAvatarNameChangeFieldTags = new uint[] { 8 };
    public static NetMessageAvatarNameChange DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAvatarNameChange DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAvatarNameChange ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAvatarNameChange__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAvatarNameChange, NetMessageAvatarNameChange.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAvatarNameChange__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAvatarNameChangeFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[0], IdEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAvatarNameChange ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAvatarNameChange ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAvatarNameChange ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAvatarNameChange ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAvatarNameChange ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAvatarNameChange ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAvatarNameChange ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAvatarNameChange ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAvatarNameChange ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAvatarNameChange ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAvatarNameChange MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAvatarNameChange prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAvatarNameChange, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAvatarNameChange cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAvatarNameChange result;
      
      private NetMessageAvatarNameChange PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAvatarNameChange original = result;
          result = new NetMessageAvatarNameChange();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAvatarNameChange MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAvatarNameChange.Descriptor; }
      }
      
      public override NetMessageAvatarNameChange DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAvatarNameChange.DefaultInstance; }
      }
      
      public override NetMessageAvatarNameChange BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAvatarNameChange) {
          return MergeFrom((NetMessageAvatarNameChange) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAvatarNameChange other) {
        if (other == global::Gazillion.NetMessageAvatarNameChange.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAvatarNameChangeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAvatarNameChangeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageAvatarNameChange() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMissionInteractRepeat : pb::GeneratedMessage<NetMessageMissionInteractRepeat, NetMessageMissionInteractRepeat.Builder> {
    private NetMessageMissionInteractRepeat() { }
    private static readonly NetMessageMissionInteractRepeat defaultInstance = new NetMessageMissionInteractRepeat().MakeReadOnly();
    private static readonly string[] _netMessageMissionInteractRepeatFieldNames = new string[] { "missionPrototypeId", "targetEntityId" };
    private static readonly uint[] _netMessageMissionInteractRepeatFieldTags = new uint[] { 16, 8 };
    public static NetMessageMissionInteractRepeat DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMissionInteractRepeat DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMissionInteractRepeat ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionInteractRepeat__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMissionInteractRepeat, NetMessageMissionInteractRepeat.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionInteractRepeat__FieldAccessorTable; }
    }
    
    public const int TargetEntityIdFieldNumber = 1;
    private bool hasTargetEntityId;
    private ulong targetEntityId_;
    public bool HasTargetEntityId {
      get { return hasTargetEntityId; }
    }
    public ulong TargetEntityId {
      get { return targetEntityId_; }
    }
    
    public const int MissionPrototypeIdFieldNumber = 2;
    private bool hasMissionPrototypeId;
    private ulong missionPrototypeId_;
    public bool HasMissionPrototypeId {
      get { return hasMissionPrototypeId; }
    }
    public ulong MissionPrototypeId {
      get { return missionPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetEntityId) return false;
        if (!hasMissionPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMissionInteractRepeatFieldNames;
      if (hasTargetEntityId) {
        output.WriteUInt64(1, field_names[1], TargetEntityId);
      }
      if (hasMissionPrototypeId) {
        output.WriteUInt64(2, field_names[0], MissionPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetEntityId);
      }
      if (hasMissionPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, MissionPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMissionInteractRepeat ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionInteractRepeat ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionInteractRepeat ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionInteractRepeat ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionInteractRepeat ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionInteractRepeat ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionInteractRepeat ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMissionInteractRepeat ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMissionInteractRepeat ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionInteractRepeat ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMissionInteractRepeat MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMissionInteractRepeat prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMissionInteractRepeat, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMissionInteractRepeat cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMissionInteractRepeat result;
      
      private NetMessageMissionInteractRepeat PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMissionInteractRepeat original = result;
          result = new NetMessageMissionInteractRepeat();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMissionInteractRepeat MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMissionInteractRepeat.Descriptor; }
      }
      
      public override NetMessageMissionInteractRepeat DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMissionInteractRepeat.DefaultInstance; }
      }
      
      public override NetMessageMissionInteractRepeat BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMissionInteractRepeat) {
          return MergeFrom((NetMessageMissionInteractRepeat) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMissionInteractRepeat other) {
        if (other == global::Gazillion.NetMessageMissionInteractRepeat.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetEntityId) {
          TargetEntityId = other.TargetEntityId;
        }
        if (other.HasMissionPrototypeId) {
          MissionPrototypeId = other.MissionPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMissionInteractRepeatFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMissionInteractRepeatFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetEntityId = input.ReadUInt64(ref result.targetEntityId_);
              break;
            }
            case 16: {
              result.hasMissionPrototypeId = input.ReadUInt64(ref result.missionPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetEntityId {
        get { return result.hasTargetEntityId; }
      }
      public ulong TargetEntityId {
        get { return result.TargetEntityId; }
        set { SetTargetEntityId(value); }
      }
      public Builder SetTargetEntityId(ulong value) {
        PrepareBuilder();
        result.hasTargetEntityId = true;
        result.targetEntityId_ = value;
        return this;
      }
      public Builder ClearTargetEntityId() {
        PrepareBuilder();
        result.hasTargetEntityId = false;
        result.targetEntityId_ = 0UL;
        return this;
      }
      
      public bool HasMissionPrototypeId {
        get { return result.hasMissionPrototypeId; }
      }
      public ulong MissionPrototypeId {
        get { return result.MissionPrototypeId; }
        set { SetMissionPrototypeId(value); }
      }
      public Builder SetMissionPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasMissionPrototypeId = true;
        result.missionPrototypeId_ = value;
        return this;
      }
      public Builder ClearMissionPrototypeId() {
        PrepareBuilder();
        result.hasMissionPrototypeId = false;
        result.missionPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageMissionInteractRepeat() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMissionInteractRelease : pb::GeneratedMessage<NetMessageMissionInteractRelease, NetMessageMissionInteractRelease.Builder> {
    private NetMessageMissionInteractRelease() { }
    private static readonly NetMessageMissionInteractRelease defaultInstance = new NetMessageMissionInteractRelease().MakeReadOnly();
    private static readonly string[] _netMessageMissionInteractReleaseFieldNames = new string[] {  };
    private static readonly uint[] _netMessageMissionInteractReleaseFieldTags = new uint[] {  };
    public static NetMessageMissionInteractRelease DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMissionInteractRelease DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMissionInteractRelease ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionInteractRelease__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMissionInteractRelease, NetMessageMissionInteractRelease.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionInteractRelease__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMissionInteractReleaseFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMissionInteractRelease ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionInteractRelease ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionInteractRelease ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionInteractRelease ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionInteractRelease ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionInteractRelease ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionInteractRelease ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMissionInteractRelease ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMissionInteractRelease ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionInteractRelease ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMissionInteractRelease MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMissionInteractRelease prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMissionInteractRelease, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMissionInteractRelease cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMissionInteractRelease result;
      
      private NetMessageMissionInteractRelease PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMissionInteractRelease original = result;
          result = new NetMessageMissionInteractRelease();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMissionInteractRelease MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMissionInteractRelease.Descriptor; }
      }
      
      public override NetMessageMissionInteractRelease DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMissionInteractRelease.DefaultInstance; }
      }
      
      public override NetMessageMissionInteractRelease BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMissionInteractRelease) {
          return MergeFrom((NetMessageMissionInteractRelease) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMissionInteractRelease other) {
        if (other == global::Gazillion.NetMessageMissionInteractRelease.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMissionInteractReleaseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMissionInteractReleaseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageMissionInteractRelease() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageOnAddCondition : pb::GeneratedMessage<NetMessageOnAddCondition, NetMessageOnAddCondition.Builder> {
    private NetMessageOnAddCondition() { }
    private static readonly NetMessageOnAddCondition defaultInstance = new NetMessageOnAddCondition().MakeReadOnly();
    private static readonly string[] _netMessageOnAddConditionFieldNames = new string[] { "conditionServerString", "entityServerString", "idEntity", "key" };
    private static readonly uint[] _netMessageOnAddConditionFieldTags = new uint[] { 34, 26, 8, 16 };
    public static NetMessageOnAddCondition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageOnAddCondition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageOnAddCondition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnAddCondition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageOnAddCondition, NetMessageOnAddCondition.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnAddCondition__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int KeyFieldNumber = 2;
    private bool hasKey;
    private ulong key_;
    public bool HasKey {
      get { return hasKey; }
    }
    public ulong Key {
      get { return key_; }
    }
    
    public const int EntityServerStringFieldNumber = 3;
    private bool hasEntityServerString;
    private string entityServerString_ = "";
    public bool HasEntityServerString {
      get { return hasEntityServerString; }
    }
    public string EntityServerString {
      get { return entityServerString_; }
    }
    
    public const int ConditionServerStringFieldNumber = 4;
    private bool hasConditionServerString;
    private string conditionServerString_ = "";
    public bool HasConditionServerString {
      get { return hasConditionServerString; }
    }
    public string ConditionServerString {
      get { return conditionServerString_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        if (!hasKey) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageOnAddConditionFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[2], IdEntity);
      }
      if (hasKey) {
        output.WriteUInt64(2, field_names[3], Key);
      }
      if (hasEntityServerString) {
        output.WriteString(3, field_names[1], EntityServerString);
      }
      if (hasConditionServerString) {
        output.WriteString(4, field_names[0], ConditionServerString);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasKey) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, Key);
      }
      if (hasEntityServerString) {
        size += pb::CodedOutputStream.ComputeStringSize(3, EntityServerString);
      }
      if (hasConditionServerString) {
        size += pb::CodedOutputStream.ComputeStringSize(4, ConditionServerString);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageOnAddCondition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnAddCondition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnAddCondition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnAddCondition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnAddCondition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnAddCondition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnAddCondition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageOnAddCondition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageOnAddCondition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnAddCondition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageOnAddCondition MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageOnAddCondition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageOnAddCondition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageOnAddCondition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageOnAddCondition result;
      
      private NetMessageOnAddCondition PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageOnAddCondition original = result;
          result = new NetMessageOnAddCondition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageOnAddCondition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageOnAddCondition.Descriptor; }
      }
      
      public override NetMessageOnAddCondition DefaultInstanceForType {
        get { return global::Gazillion.NetMessageOnAddCondition.DefaultInstance; }
      }
      
      public override NetMessageOnAddCondition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageOnAddCondition) {
          return MergeFrom((NetMessageOnAddCondition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageOnAddCondition other) {
        if (other == global::Gazillion.NetMessageOnAddCondition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasEntityServerString) {
          EntityServerString = other.EntityServerString;
        }
        if (other.HasConditionServerString) {
          ConditionServerString = other.ConditionServerString;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageOnAddConditionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageOnAddConditionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 16: {
              result.hasKey = input.ReadUInt64(ref result.key_);
              break;
            }
            case 26: {
              result.hasEntityServerString = input.ReadString(ref result.entityServerString_);
              break;
            }
            case 34: {
              result.hasConditionServerString = input.ReadString(ref result.conditionServerString_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public ulong Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(ulong value) {
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = 0UL;
        return this;
      }
      
      public bool HasEntityServerString {
        get { return result.hasEntityServerString; }
      }
      public string EntityServerString {
        get { return result.EntityServerString; }
        set { SetEntityServerString(value); }
      }
      public Builder SetEntityServerString(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEntityServerString = true;
        result.entityServerString_ = value;
        return this;
      }
      public Builder ClearEntityServerString() {
        PrepareBuilder();
        result.hasEntityServerString = false;
        result.entityServerString_ = "";
        return this;
      }
      
      public bool HasConditionServerString {
        get { return result.hasConditionServerString; }
      }
      public string ConditionServerString {
        get { return result.ConditionServerString; }
        set { SetConditionServerString(value); }
      }
      public Builder SetConditionServerString(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConditionServerString = true;
        result.conditionServerString_ = value;
        return this;
      }
      public Builder ClearConditionServerString() {
        PrepareBuilder();
        result.hasConditionServerString = false;
        result.conditionServerString_ = "";
        return this;
      }
    }
    static NetMessageOnAddCondition() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageOnRemoveCondition : pb::GeneratedMessage<NetMessageOnRemoveCondition, NetMessageOnRemoveCondition.Builder> {
    private NetMessageOnRemoveCondition() { }
    private static readonly NetMessageOnRemoveCondition defaultInstance = new NetMessageOnRemoveCondition().MakeReadOnly();
    private static readonly string[] _netMessageOnRemoveConditionFieldNames = new string[] { "idEntity", "key" };
    private static readonly uint[] _netMessageOnRemoveConditionFieldTags = new uint[] { 8, 16 };
    public static NetMessageOnRemoveCondition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageOnRemoveCondition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageOnRemoveCondition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnRemoveCondition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageOnRemoveCondition, NetMessageOnRemoveCondition.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnRemoveCondition__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int KeyFieldNumber = 2;
    private bool hasKey;
    private ulong key_;
    public bool HasKey {
      get { return hasKey; }
    }
    public ulong Key {
      get { return key_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        if (!hasKey) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageOnRemoveConditionFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[0], IdEntity);
      }
      if (hasKey) {
        output.WriteUInt64(2, field_names[1], Key);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasKey) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, Key);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageOnRemoveCondition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnRemoveCondition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnRemoveCondition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnRemoveCondition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnRemoveCondition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnRemoveCondition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnRemoveCondition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageOnRemoveCondition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageOnRemoveCondition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnRemoveCondition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageOnRemoveCondition MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageOnRemoveCondition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageOnRemoveCondition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageOnRemoveCondition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageOnRemoveCondition result;
      
      private NetMessageOnRemoveCondition PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageOnRemoveCondition original = result;
          result = new NetMessageOnRemoveCondition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageOnRemoveCondition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageOnRemoveCondition.Descriptor; }
      }
      
      public override NetMessageOnRemoveCondition DefaultInstanceForType {
        get { return global::Gazillion.NetMessageOnRemoveCondition.DefaultInstance; }
      }
      
      public override NetMessageOnRemoveCondition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageOnRemoveCondition) {
          return MergeFrom((NetMessageOnRemoveCondition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageOnRemoveCondition other) {
        if (other == global::Gazillion.NetMessageOnRemoveCondition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasKey) {
          Key = other.Key;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageOnRemoveConditionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageOnRemoveConditionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 16: {
              result.hasKey = input.ReadUInt64(ref result.key_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public ulong Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(ulong value) {
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = 0UL;
        return this;
      }
    }
    static NetMessageOnRemoveCondition() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageHotkeyAssign : pb::GeneratedMessage<NetMessageHotkeyAssign, NetMessageHotkeyAssign.Builder> {
    private NetMessageHotkeyAssign() { }
    private static readonly NetMessageHotkeyAssign defaultInstance = new NetMessageHotkeyAssign().MakeReadOnly();
    private static readonly string[] _netMessageHotkeyAssignFieldNames = new string[] { "abilityProtoId", "avatarId", "destinationSlot", "slot" };
    private static readonly uint[] _netMessageHotkeyAssignFieldTags = new uint[] { 16, 8, 32, 24 };
    public static NetMessageHotkeyAssign DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageHotkeyAssign DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageHotkeyAssign ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageHotkeyAssign__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageHotkeyAssign, NetMessageHotkeyAssign.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageHotkeyAssign__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int AbilityProtoIdFieldNumber = 2;
    private bool hasAbilityProtoId;
    private ulong abilityProtoId_;
    public bool HasAbilityProtoId {
      get { return hasAbilityProtoId; }
    }
    public ulong AbilityProtoId {
      get { return abilityProtoId_; }
    }
    
    public const int SlotFieldNumber = 3;
    private bool hasSlot;
    private int slot_;
    public bool HasSlot {
      get { return hasSlot; }
    }
    public int Slot {
      get { return slot_; }
    }
    
    public const int DestinationSlotFieldNumber = 4;
    private bool hasDestinationSlot;
    private int destinationSlot_;
    public bool HasDestinationSlot {
      get { return hasDestinationSlot; }
    }
    public int DestinationSlot {
      get { return destinationSlot_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasAbilityProtoId) return false;
        if (!hasSlot) return false;
        if (!hasDestinationSlot) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageHotkeyAssignFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[1], AvatarId);
      }
      if (hasAbilityProtoId) {
        output.WriteUInt64(2, field_names[0], AbilityProtoId);
      }
      if (hasSlot) {
        output.WriteInt32(3, field_names[3], Slot);
      }
      if (hasDestinationSlot) {
        output.WriteInt32(4, field_names[2], DestinationSlot);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasAbilityProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, AbilityProtoId);
      }
      if (hasSlot) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Slot);
      }
      if (hasDestinationSlot) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, DestinationSlot);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageHotkeyAssign ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageHotkeyAssign ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageHotkeyAssign ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageHotkeyAssign ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageHotkeyAssign ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageHotkeyAssign ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageHotkeyAssign ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageHotkeyAssign ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageHotkeyAssign ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageHotkeyAssign ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageHotkeyAssign MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageHotkeyAssign prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageHotkeyAssign, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageHotkeyAssign cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageHotkeyAssign result;
      
      private NetMessageHotkeyAssign PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageHotkeyAssign original = result;
          result = new NetMessageHotkeyAssign();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageHotkeyAssign MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageHotkeyAssign.Descriptor; }
      }
      
      public override NetMessageHotkeyAssign DefaultInstanceForType {
        get { return global::Gazillion.NetMessageHotkeyAssign.DefaultInstance; }
      }
      
      public override NetMessageHotkeyAssign BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageHotkeyAssign) {
          return MergeFrom((NetMessageHotkeyAssign) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageHotkeyAssign other) {
        if (other == global::Gazillion.NetMessageHotkeyAssign.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasAbilityProtoId) {
          AbilityProtoId = other.AbilityProtoId;
        }
        if (other.HasSlot) {
          Slot = other.Slot;
        }
        if (other.HasDestinationSlot) {
          DestinationSlot = other.DestinationSlot;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageHotkeyAssignFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageHotkeyAssignFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasAbilityProtoId = input.ReadUInt64(ref result.abilityProtoId_);
              break;
            }
            case 24: {
              result.hasSlot = input.ReadInt32(ref result.slot_);
              break;
            }
            case 32: {
              result.hasDestinationSlot = input.ReadInt32(ref result.destinationSlot_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasAbilityProtoId {
        get { return result.hasAbilityProtoId; }
      }
      public ulong AbilityProtoId {
        get { return result.AbilityProtoId; }
        set { SetAbilityProtoId(value); }
      }
      public Builder SetAbilityProtoId(ulong value) {
        PrepareBuilder();
        result.hasAbilityProtoId = true;
        result.abilityProtoId_ = value;
        return this;
      }
      public Builder ClearAbilityProtoId() {
        PrepareBuilder();
        result.hasAbilityProtoId = false;
        result.abilityProtoId_ = 0UL;
        return this;
      }
      
      public bool HasSlot {
        get { return result.hasSlot; }
      }
      public int Slot {
        get { return result.Slot; }
        set { SetSlot(value); }
      }
      public Builder SetSlot(int value) {
        PrepareBuilder();
        result.hasSlot = true;
        result.slot_ = value;
        return this;
      }
      public Builder ClearSlot() {
        PrepareBuilder();
        result.hasSlot = false;
        result.slot_ = 0;
        return this;
      }
      
      public bool HasDestinationSlot {
        get { return result.hasDestinationSlot; }
      }
      public int DestinationSlot {
        get { return result.DestinationSlot; }
        set { SetDestinationSlot(value); }
      }
      public Builder SetDestinationSlot(int value) {
        PrepareBuilder();
        result.hasDestinationSlot = true;
        result.destinationSlot_ = value;
        return this;
      }
      public Builder ClearDestinationSlot() {
        PrepareBuilder();
        result.hasDestinationSlot = false;
        result.destinationSlot_ = 0;
        return this;
      }
    }
    static NetMessageHotkeyAssign() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageHotkeyUnassign : pb::GeneratedMessage<NetMessageHotkeyUnassign, NetMessageHotkeyUnassign.Builder> {
    private NetMessageHotkeyUnassign() { }
    private static readonly NetMessageHotkeyUnassign defaultInstance = new NetMessageHotkeyUnassign().MakeReadOnly();
    private static readonly string[] _netMessageHotkeyUnassignFieldNames = new string[] { "avatarId", "slot" };
    private static readonly uint[] _netMessageHotkeyUnassignFieldTags = new uint[] { 8, 16 };
    public static NetMessageHotkeyUnassign DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageHotkeyUnassign DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageHotkeyUnassign ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageHotkeyUnassign__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageHotkeyUnassign, NetMessageHotkeyUnassign.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageHotkeyUnassign__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int SlotFieldNumber = 2;
    private bool hasSlot;
    private int slot_;
    public bool HasSlot {
      get { return hasSlot; }
    }
    public int Slot {
      get { return slot_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasSlot) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageHotkeyUnassignFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasSlot) {
        output.WriteInt32(2, field_names[1], Slot);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasSlot) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Slot);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageHotkeyUnassign ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageHotkeyUnassign ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageHotkeyUnassign ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageHotkeyUnassign ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageHotkeyUnassign ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageHotkeyUnassign ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageHotkeyUnassign ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageHotkeyUnassign ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageHotkeyUnassign ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageHotkeyUnassign ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageHotkeyUnassign MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageHotkeyUnassign prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageHotkeyUnassign, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageHotkeyUnassign cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageHotkeyUnassign result;
      
      private NetMessageHotkeyUnassign PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageHotkeyUnassign original = result;
          result = new NetMessageHotkeyUnassign();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageHotkeyUnassign MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageHotkeyUnassign.Descriptor; }
      }
      
      public override NetMessageHotkeyUnassign DefaultInstanceForType {
        get { return global::Gazillion.NetMessageHotkeyUnassign.DefaultInstance; }
      }
      
      public override NetMessageHotkeyUnassign BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageHotkeyUnassign) {
          return MergeFrom((NetMessageHotkeyUnassign) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageHotkeyUnassign other) {
        if (other == global::Gazillion.NetMessageHotkeyUnassign.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasSlot) {
          Slot = other.Slot;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageHotkeyUnassignFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageHotkeyUnassignFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasSlot = input.ReadInt32(ref result.slot_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasSlot {
        get { return result.hasSlot; }
      }
      public int Slot {
        get { return result.Slot; }
        set { SetSlot(value); }
      }
      public Builder SetSlot(int value) {
        PrepareBuilder();
        result.hasSlot = true;
        result.slot_ = value;
        return this;
      }
      public Builder ClearSlot() {
        PrepareBuilder();
        result.hasSlot = false;
        result.slot_ = 0;
        return this;
      }
    }
    static NetMessageHotkeyUnassign() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAbilityAssign : pb::GeneratedMessage<NetMessageAbilityAssign, NetMessageAbilityAssign.Builder> {
    private NetMessageAbilityAssign() { }
    private static readonly NetMessageAbilityAssign defaultInstance = new NetMessageAbilityAssign().MakeReadOnly();
    private static readonly string[] _netMessageAbilityAssignFieldNames = new string[] { "abilityProtoId", "avatarId", "slot" };
    private static readonly uint[] _netMessageAbilityAssignFieldTags = new uint[] { 16, 8, 24 };
    public static NetMessageAbilityAssign DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAbilityAssign DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAbilityAssign ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAbilityAssign__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAbilityAssign, NetMessageAbilityAssign.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAbilityAssign__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int AbilityProtoIdFieldNumber = 2;
    private bool hasAbilityProtoId;
    private ulong abilityProtoId_;
    public bool HasAbilityProtoId {
      get { return hasAbilityProtoId; }
    }
    public ulong AbilityProtoId {
      get { return abilityProtoId_; }
    }
    
    public const int SlotFieldNumber = 3;
    private bool hasSlot;
    private int slot_;
    public bool HasSlot {
      get { return hasSlot; }
    }
    public int Slot {
      get { return slot_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasAbilityProtoId) return false;
        if (!hasSlot) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAbilityAssignFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[1], AvatarId);
      }
      if (hasAbilityProtoId) {
        output.WriteUInt64(2, field_names[0], AbilityProtoId);
      }
      if (hasSlot) {
        output.WriteInt32(3, field_names[2], Slot);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasAbilityProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, AbilityProtoId);
      }
      if (hasSlot) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Slot);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAbilityAssign ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAbilityAssign ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilityAssign ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAbilityAssign ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilityAssign ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAbilityAssign ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilityAssign ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAbilityAssign ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAbilityAssign ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAbilityAssign ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAbilityAssign MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAbilityAssign prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAbilityAssign, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAbilityAssign cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAbilityAssign result;
      
      private NetMessageAbilityAssign PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAbilityAssign original = result;
          result = new NetMessageAbilityAssign();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAbilityAssign MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAbilityAssign.Descriptor; }
      }
      
      public override NetMessageAbilityAssign DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAbilityAssign.DefaultInstance; }
      }
      
      public override NetMessageAbilityAssign BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAbilityAssign) {
          return MergeFrom((NetMessageAbilityAssign) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAbilityAssign other) {
        if (other == global::Gazillion.NetMessageAbilityAssign.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasAbilityProtoId) {
          AbilityProtoId = other.AbilityProtoId;
        }
        if (other.HasSlot) {
          Slot = other.Slot;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAbilityAssignFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAbilityAssignFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasAbilityProtoId = input.ReadUInt64(ref result.abilityProtoId_);
              break;
            }
            case 24: {
              result.hasSlot = input.ReadInt32(ref result.slot_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasAbilityProtoId {
        get { return result.hasAbilityProtoId; }
      }
      public ulong AbilityProtoId {
        get { return result.AbilityProtoId; }
        set { SetAbilityProtoId(value); }
      }
      public Builder SetAbilityProtoId(ulong value) {
        PrepareBuilder();
        result.hasAbilityProtoId = true;
        result.abilityProtoId_ = value;
        return this;
      }
      public Builder ClearAbilityProtoId() {
        PrepareBuilder();
        result.hasAbilityProtoId = false;
        result.abilityProtoId_ = 0UL;
        return this;
      }
      
      public bool HasSlot {
        get { return result.hasSlot; }
      }
      public int Slot {
        get { return result.Slot; }
        set { SetSlot(value); }
      }
      public Builder SetSlot(int value) {
        PrepareBuilder();
        result.hasSlot = true;
        result.slot_ = value;
        return this;
      }
      public Builder ClearSlot() {
        PrepareBuilder();
        result.hasSlot = false;
        result.slot_ = 0;
        return this;
      }
    }
    static NetMessageAbilityAssign() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAbilityUnassign : pb::GeneratedMessage<NetMessageAbilityUnassign, NetMessageAbilityUnassign.Builder> {
    private NetMessageAbilityUnassign() { }
    private static readonly NetMessageAbilityUnassign defaultInstance = new NetMessageAbilityUnassign().MakeReadOnly();
    private static readonly string[] _netMessageAbilityUnassignFieldNames = new string[] { "avatarId", "slot" };
    private static readonly uint[] _netMessageAbilityUnassignFieldTags = new uint[] { 8, 16 };
    public static NetMessageAbilityUnassign DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAbilityUnassign DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAbilityUnassign ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAbilityUnassign__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAbilityUnassign, NetMessageAbilityUnassign.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAbilityUnassign__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int SlotFieldNumber = 2;
    private bool hasSlot;
    private int slot_;
    public bool HasSlot {
      get { return hasSlot; }
    }
    public int Slot {
      get { return slot_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasSlot) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAbilityUnassignFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasSlot) {
        output.WriteInt32(2, field_names[1], Slot);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasSlot) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Slot);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAbilityUnassign ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAbilityUnassign ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilityUnassign ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAbilityUnassign ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilityUnassign ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAbilityUnassign ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilityUnassign ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAbilityUnassign ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAbilityUnassign ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAbilityUnassign ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAbilityUnassign MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAbilityUnassign prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAbilityUnassign, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAbilityUnassign cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAbilityUnassign result;
      
      private NetMessageAbilityUnassign PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAbilityUnassign original = result;
          result = new NetMessageAbilityUnassign();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAbilityUnassign MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAbilityUnassign.Descriptor; }
      }
      
      public override NetMessageAbilityUnassign DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAbilityUnassign.DefaultInstance; }
      }
      
      public override NetMessageAbilityUnassign BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAbilityUnassign) {
          return MergeFrom((NetMessageAbilityUnassign) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAbilityUnassign other) {
        if (other == global::Gazillion.NetMessageAbilityUnassign.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasSlot) {
          Slot = other.Slot;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAbilityUnassignFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAbilityUnassignFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasSlot = input.ReadInt32(ref result.slot_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasSlot {
        get { return result.hasSlot; }
      }
      public int Slot {
        get { return result.Slot; }
        set { SetSlot(value); }
      }
      public Builder SetSlot(int value) {
        PrepareBuilder();
        result.hasSlot = true;
        result.slot_ = value;
        return this;
      }
      public Builder ClearSlot() {
        PrepareBuilder();
        result.hasSlot = false;
        result.slot_ = 0;
        return this;
      }
    }
    static NetMessageAbilityUnassign() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAbilitySwap : pb::GeneratedMessage<NetMessageAbilitySwap, NetMessageAbilitySwap.Builder> {
    private NetMessageAbilitySwap() { }
    private static readonly NetMessageAbilitySwap defaultInstance = new NetMessageAbilitySwap().MakeReadOnly();
    private static readonly string[] _netMessageAbilitySwapFieldNames = new string[] { "avatarId", "slotA", "slotB" };
    private static readonly uint[] _netMessageAbilitySwapFieldTags = new uint[] { 8, 16, 24 };
    public static NetMessageAbilitySwap DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAbilitySwap DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAbilitySwap ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAbilitySwap__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAbilitySwap, NetMessageAbilitySwap.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAbilitySwap__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int SlotAFieldNumber = 2;
    private bool hasSlotA;
    private int slotA_;
    public bool HasSlotA {
      get { return hasSlotA; }
    }
    public int SlotA {
      get { return slotA_; }
    }
    
    public const int SlotBFieldNumber = 3;
    private bool hasSlotB;
    private int slotB_;
    public bool HasSlotB {
      get { return hasSlotB; }
    }
    public int SlotB {
      get { return slotB_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasSlotA) return false;
        if (!hasSlotB) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAbilitySwapFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasSlotA) {
        output.WriteInt32(2, field_names[1], SlotA);
      }
      if (hasSlotB) {
        output.WriteInt32(3, field_names[2], SlotB);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasSlotA) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, SlotA);
      }
      if (hasSlotB) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, SlotB);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAbilitySwap ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAbilitySwap ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilitySwap ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAbilitySwap ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilitySwap ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAbilitySwap ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilitySwap ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAbilitySwap ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAbilitySwap ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAbilitySwap ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAbilitySwap MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAbilitySwap prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAbilitySwap, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAbilitySwap cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAbilitySwap result;
      
      private NetMessageAbilitySwap PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAbilitySwap original = result;
          result = new NetMessageAbilitySwap();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAbilitySwap MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAbilitySwap.Descriptor; }
      }
      
      public override NetMessageAbilitySwap DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAbilitySwap.DefaultInstance; }
      }
      
      public override NetMessageAbilitySwap BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAbilitySwap) {
          return MergeFrom((NetMessageAbilitySwap) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAbilitySwap other) {
        if (other == global::Gazillion.NetMessageAbilitySwap.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasSlotA) {
          SlotA = other.SlotA;
        }
        if (other.HasSlotB) {
          SlotB = other.SlotB;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAbilitySwapFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAbilitySwapFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasSlotA = input.ReadInt32(ref result.slotA_);
              break;
            }
            case 24: {
              result.hasSlotB = input.ReadInt32(ref result.slotB_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasSlotA {
        get { return result.hasSlotA; }
      }
      public int SlotA {
        get { return result.SlotA; }
        set { SetSlotA(value); }
      }
      public Builder SetSlotA(int value) {
        PrepareBuilder();
        result.hasSlotA = true;
        result.slotA_ = value;
        return this;
      }
      public Builder ClearSlotA() {
        PrepareBuilder();
        result.hasSlotA = false;
        result.slotA_ = 0;
        return this;
      }
      
      public bool HasSlotB {
        get { return result.hasSlotB; }
      }
      public int SlotB {
        get { return result.SlotB; }
        set { SetSlotB(value); }
      }
      public Builder SetSlotB(int value) {
        PrepareBuilder();
        result.hasSlotB = true;
        result.slotB_ = value;
        return this;
      }
      public Builder ClearSlotB() {
        PrepareBuilder();
        result.hasSlotB = false;
        result.slotB_ = 0;
        return this;
      }
    }
    static NetMessageAbilitySwap() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePowerCollectionAssignPower : pb::GeneratedMessage<NetMessagePowerCollectionAssignPower, NetMessagePowerCollectionAssignPower.Builder> {
    private NetMessagePowerCollectionAssignPower() { }
    private static readonly NetMessagePowerCollectionAssignPower defaultInstance = new NetMessagePowerCollectionAssignPower().MakeReadOnly();
    private static readonly string[] _netMessagePowerCollectionAssignPowerFieldNames = new string[] { "characterLevel", "entityId", "itemLevel", "powerCollectionIsduplicating", "powerProtoId", "powerRank", "targetentityid" };
    private static readonly uint[] _netMessagePowerCollectionAssignPowerFieldTags = new uint[] { 48, 8, 56, 64, 16, 40, 32 };
    public static NetMessagePowerCollectionAssignPower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePowerCollectionAssignPower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePowerCollectionAssignPower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowerCollectionAssignPower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePowerCollectionAssignPower, NetMessagePowerCollectionAssignPower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowerCollectionAssignPower__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public const int PowerProtoIdFieldNumber = 2;
    private bool hasPowerProtoId;
    private ulong powerProtoId_;
    public bool HasPowerProtoId {
      get { return hasPowerProtoId; }
    }
    public ulong PowerProtoId {
      get { return powerProtoId_; }
    }
    
    public const int TargetentityidFieldNumber = 4;
    private bool hasTargetentityid;
    private ulong targetentityid_;
    public bool HasTargetentityid {
      get { return hasTargetentityid; }
    }
    public ulong Targetentityid {
      get { return targetentityid_; }
    }
    
    public const int PowerRankFieldNumber = 5;
    private bool hasPowerRank;
    private int powerRank_;
    public bool HasPowerRank {
      get { return hasPowerRank; }
    }
    public int PowerRank {
      get { return powerRank_; }
    }
    
    public const int CharacterLevelFieldNumber = 6;
    private bool hasCharacterLevel;
    private int characterLevel_;
    public bool HasCharacterLevel {
      get { return hasCharacterLevel; }
    }
    public int CharacterLevel {
      get { return characterLevel_; }
    }
    
    public const int ItemLevelFieldNumber = 7;
    private bool hasItemLevel;
    private int itemLevel_;
    public bool HasItemLevel {
      get { return hasItemLevel; }
    }
    public int ItemLevel {
      get { return itemLevel_; }
    }
    
    public const int PowerCollectionIsduplicatingFieldNumber = 8;
    private bool hasPowerCollectionIsduplicating;
    private bool powerCollectionIsduplicating_;
    public bool HasPowerCollectionIsduplicating {
      get { return hasPowerCollectionIsduplicating; }
    }
    public bool PowerCollectionIsduplicating {
      get { return powerCollectionIsduplicating_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasPowerProtoId) return false;
        if (!hasTargetentityid) return false;
        if (!hasPowerRank) return false;
        if (!hasCharacterLevel) return false;
        if (!hasItemLevel) return false;
        if (!hasPowerCollectionIsduplicating) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePowerCollectionAssignPowerFieldNames;
      if (hasEntityId) {
        output.WriteUInt64(1, field_names[1], EntityId);
      }
      if (hasPowerProtoId) {
        output.WriteUInt64(2, field_names[4], PowerProtoId);
      }
      if (hasTargetentityid) {
        output.WriteUInt64(4, field_names[6], Targetentityid);
      }
      if (hasPowerRank) {
        output.WriteInt32(5, field_names[5], PowerRank);
      }
      if (hasCharacterLevel) {
        output.WriteInt32(6, field_names[0], CharacterLevel);
      }
      if (hasItemLevel) {
        output.WriteInt32(7, field_names[2], ItemLevel);
      }
      if (hasPowerCollectionIsduplicating) {
        output.WriteBool(8, field_names[3], PowerCollectionIsduplicating);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityId);
      }
      if (hasPowerProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerProtoId);
      }
      if (hasTargetentityid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, Targetentityid);
      }
      if (hasPowerRank) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, PowerRank);
      }
      if (hasCharacterLevel) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, CharacterLevel);
      }
      if (hasItemLevel) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, ItemLevel);
      }
      if (hasPowerCollectionIsduplicating) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, PowerCollectionIsduplicating);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePowerCollectionAssignPower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerCollectionAssignPower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerCollectionAssignPower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerCollectionAssignPower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerCollectionAssignPower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerCollectionAssignPower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerCollectionAssignPower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePowerCollectionAssignPower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePowerCollectionAssignPower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerCollectionAssignPower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePowerCollectionAssignPower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePowerCollectionAssignPower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePowerCollectionAssignPower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePowerCollectionAssignPower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePowerCollectionAssignPower result;
      
      private NetMessagePowerCollectionAssignPower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePowerCollectionAssignPower original = result;
          result = new NetMessagePowerCollectionAssignPower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePowerCollectionAssignPower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePowerCollectionAssignPower.Descriptor; }
      }
      
      public override NetMessagePowerCollectionAssignPower DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePowerCollectionAssignPower.DefaultInstance; }
      }
      
      public override NetMessagePowerCollectionAssignPower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePowerCollectionAssignPower) {
          return MergeFrom((NetMessagePowerCollectionAssignPower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePowerCollectionAssignPower other) {
        if (other == global::Gazillion.NetMessagePowerCollectionAssignPower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasPowerProtoId) {
          PowerProtoId = other.PowerProtoId;
        }
        if (other.HasTargetentityid) {
          Targetentityid = other.Targetentityid;
        }
        if (other.HasPowerRank) {
          PowerRank = other.PowerRank;
        }
        if (other.HasCharacterLevel) {
          CharacterLevel = other.CharacterLevel;
        }
        if (other.HasItemLevel) {
          ItemLevel = other.ItemLevel;
        }
        if (other.HasPowerCollectionIsduplicating) {
          PowerCollectionIsduplicating = other.PowerCollectionIsduplicating;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePowerCollectionAssignPowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePowerCollectionAssignPowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
            case 16: {
              result.hasPowerProtoId = input.ReadUInt64(ref result.powerProtoId_);
              break;
            }
            case 32: {
              result.hasTargetentityid = input.ReadUInt64(ref result.targetentityid_);
              break;
            }
            case 40: {
              result.hasPowerRank = input.ReadInt32(ref result.powerRank_);
              break;
            }
            case 48: {
              result.hasCharacterLevel = input.ReadInt32(ref result.characterLevel_);
              break;
            }
            case 56: {
              result.hasItemLevel = input.ReadInt32(ref result.itemLevel_);
              break;
            }
            case 64: {
              result.hasPowerCollectionIsduplicating = input.ReadBool(ref result.powerCollectionIsduplicating_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
      
      public bool HasPowerProtoId {
        get { return result.hasPowerProtoId; }
      }
      public ulong PowerProtoId {
        get { return result.PowerProtoId; }
        set { SetPowerProtoId(value); }
      }
      public Builder SetPowerProtoId(ulong value) {
        PrepareBuilder();
        result.hasPowerProtoId = true;
        result.powerProtoId_ = value;
        return this;
      }
      public Builder ClearPowerProtoId() {
        PrepareBuilder();
        result.hasPowerProtoId = false;
        result.powerProtoId_ = 0UL;
        return this;
      }
      
      public bool HasTargetentityid {
        get { return result.hasTargetentityid; }
      }
      public ulong Targetentityid {
        get { return result.Targetentityid; }
        set { SetTargetentityid(value); }
      }
      public Builder SetTargetentityid(ulong value) {
        PrepareBuilder();
        result.hasTargetentityid = true;
        result.targetentityid_ = value;
        return this;
      }
      public Builder ClearTargetentityid() {
        PrepareBuilder();
        result.hasTargetentityid = false;
        result.targetentityid_ = 0UL;
        return this;
      }
      
      public bool HasPowerRank {
        get { return result.hasPowerRank; }
      }
      public int PowerRank {
        get { return result.PowerRank; }
        set { SetPowerRank(value); }
      }
      public Builder SetPowerRank(int value) {
        PrepareBuilder();
        result.hasPowerRank = true;
        result.powerRank_ = value;
        return this;
      }
      public Builder ClearPowerRank() {
        PrepareBuilder();
        result.hasPowerRank = false;
        result.powerRank_ = 0;
        return this;
      }
      
      public bool HasCharacterLevel {
        get { return result.hasCharacterLevel; }
      }
      public int CharacterLevel {
        get { return result.CharacterLevel; }
        set { SetCharacterLevel(value); }
      }
      public Builder SetCharacterLevel(int value) {
        PrepareBuilder();
        result.hasCharacterLevel = true;
        result.characterLevel_ = value;
        return this;
      }
      public Builder ClearCharacterLevel() {
        PrepareBuilder();
        result.hasCharacterLevel = false;
        result.characterLevel_ = 0;
        return this;
      }
      
      public bool HasItemLevel {
        get { return result.hasItemLevel; }
      }
      public int ItemLevel {
        get { return result.ItemLevel; }
        set { SetItemLevel(value); }
      }
      public Builder SetItemLevel(int value) {
        PrepareBuilder();
        result.hasItemLevel = true;
        result.itemLevel_ = value;
        return this;
      }
      public Builder ClearItemLevel() {
        PrepareBuilder();
        result.hasItemLevel = false;
        result.itemLevel_ = 0;
        return this;
      }
      
      public bool HasPowerCollectionIsduplicating {
        get { return result.hasPowerCollectionIsduplicating; }
      }
      public bool PowerCollectionIsduplicating {
        get { return result.PowerCollectionIsduplicating; }
        set { SetPowerCollectionIsduplicating(value); }
      }
      public Builder SetPowerCollectionIsduplicating(bool value) {
        PrepareBuilder();
        result.hasPowerCollectionIsduplicating = true;
        result.powerCollectionIsduplicating_ = value;
        return this;
      }
      public Builder ClearPowerCollectionIsduplicating() {
        PrepareBuilder();
        result.hasPowerCollectionIsduplicating = false;
        result.powerCollectionIsduplicating_ = false;
        return this;
      }
    }
    static NetMessagePowerCollectionAssignPower() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAssignPowerCollection : pb::GeneratedMessage<NetMessageAssignPowerCollection, NetMessageAssignPowerCollection.Builder> {
    private NetMessageAssignPowerCollection() { }
    private static readonly NetMessageAssignPowerCollection defaultInstance = new NetMessageAssignPowerCollection().MakeReadOnly();
    private static readonly string[] _netMessageAssignPowerCollectionFieldNames = new string[] { "power" };
    private static readonly uint[] _netMessageAssignPowerCollectionFieldTags = new uint[] { 10 };
    public static NetMessageAssignPowerCollection DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAssignPowerCollection DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAssignPowerCollection ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAssignPowerCollection__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAssignPowerCollection, NetMessageAssignPowerCollection.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAssignPowerCollection__FieldAccessorTable; }
    }
    
    public const int PowerFieldNumber = 1;
    private pbc::PopsicleList<global::Gazillion.NetMessagePowerCollectionAssignPower> power_ = new pbc::PopsicleList<global::Gazillion.NetMessagePowerCollectionAssignPower>();
    public scg::IList<global::Gazillion.NetMessagePowerCollectionAssignPower> PowerList {
      get { return power_; }
    }
    public int PowerCount {
      get { return power_.Count; }
    }
    public global::Gazillion.NetMessagePowerCollectionAssignPower GetPower(int index) {
      return power_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Gazillion.NetMessagePowerCollectionAssignPower element in PowerList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAssignPowerCollectionFieldNames;
      if (power_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], power_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Gazillion.NetMessagePowerCollectionAssignPower element in PowerList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAssignPowerCollection ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAssignPowerCollection ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAssignPowerCollection ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAssignPowerCollection ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAssignPowerCollection ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAssignPowerCollection ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAssignPowerCollection ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAssignPowerCollection ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAssignPowerCollection ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAssignPowerCollection ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAssignPowerCollection MakeReadOnly() {
      power_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAssignPowerCollection prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAssignPowerCollection, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAssignPowerCollection cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAssignPowerCollection result;
      
      private NetMessageAssignPowerCollection PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAssignPowerCollection original = result;
          result = new NetMessageAssignPowerCollection();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAssignPowerCollection MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAssignPowerCollection.Descriptor; }
      }
      
      public override NetMessageAssignPowerCollection DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAssignPowerCollection.DefaultInstance; }
      }
      
      public override NetMessageAssignPowerCollection BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAssignPowerCollection) {
          return MergeFrom((NetMessageAssignPowerCollection) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAssignPowerCollection other) {
        if (other == global::Gazillion.NetMessageAssignPowerCollection.DefaultInstance) return this;
        PrepareBuilder();
        if (other.power_.Count != 0) {
          result.power_.Add(other.power_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAssignPowerCollectionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAssignPowerCollectionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.power_, global::Gazillion.NetMessagePowerCollectionAssignPower.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Gazillion.NetMessagePowerCollectionAssignPower> PowerList {
        get { return PrepareBuilder().power_; }
      }
      public int PowerCount {
        get { return result.PowerCount; }
      }
      public global::Gazillion.NetMessagePowerCollectionAssignPower GetPower(int index) {
        return result.GetPower(index);
      }
      public Builder SetPower(int index, global::Gazillion.NetMessagePowerCollectionAssignPower value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.power_[index] = value;
        return this;
      }
      public Builder SetPower(int index, global::Gazillion.NetMessagePowerCollectionAssignPower.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.power_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPower(global::Gazillion.NetMessagePowerCollectionAssignPower value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.power_.Add(value);
        return this;
      }
      public Builder AddPower(global::Gazillion.NetMessagePowerCollectionAssignPower.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.power_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePower(scg::IEnumerable<global::Gazillion.NetMessagePowerCollectionAssignPower> values) {
        PrepareBuilder();
        result.power_.Add(values);
        return this;
      }
      public Builder ClearPower() {
        PrepareBuilder();
        result.power_.Clear();
        return this;
      }
    }
    static NetMessageAssignPowerCollection() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePowerCollectionUnassignPower : pb::GeneratedMessage<NetMessagePowerCollectionUnassignPower, NetMessagePowerCollectionUnassignPower.Builder> {
    private NetMessagePowerCollectionUnassignPower() { }
    private static readonly NetMessagePowerCollectionUnassignPower defaultInstance = new NetMessagePowerCollectionUnassignPower().MakeReadOnly();
    private static readonly string[] _netMessagePowerCollectionUnassignPowerFieldNames = new string[] { "entityId", "powerProtoId", "targetentityid" };
    private static readonly uint[] _netMessagePowerCollectionUnassignPowerFieldTags = new uint[] { 8, 16, 24 };
    public static NetMessagePowerCollectionUnassignPower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePowerCollectionUnassignPower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePowerCollectionUnassignPower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowerCollectionUnassignPower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePowerCollectionUnassignPower, NetMessagePowerCollectionUnassignPower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowerCollectionUnassignPower__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public const int PowerProtoIdFieldNumber = 2;
    private bool hasPowerProtoId;
    private ulong powerProtoId_;
    public bool HasPowerProtoId {
      get { return hasPowerProtoId; }
    }
    public ulong PowerProtoId {
      get { return powerProtoId_; }
    }
    
    public const int TargetentityidFieldNumber = 3;
    private bool hasTargetentityid;
    private ulong targetentityid_;
    public bool HasTargetentityid {
      get { return hasTargetentityid; }
    }
    public ulong Targetentityid {
      get { return targetentityid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasPowerProtoId) return false;
        if (!hasTargetentityid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePowerCollectionUnassignPowerFieldNames;
      if (hasEntityId) {
        output.WriteUInt64(1, field_names[0], EntityId);
      }
      if (hasPowerProtoId) {
        output.WriteUInt64(2, field_names[1], PowerProtoId);
      }
      if (hasTargetentityid) {
        output.WriteUInt64(3, field_names[2], Targetentityid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityId);
      }
      if (hasPowerProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerProtoId);
      }
      if (hasTargetentityid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, Targetentityid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePowerCollectionUnassignPower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerCollectionUnassignPower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerCollectionUnassignPower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerCollectionUnassignPower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerCollectionUnassignPower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerCollectionUnassignPower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerCollectionUnassignPower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePowerCollectionUnassignPower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePowerCollectionUnassignPower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerCollectionUnassignPower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePowerCollectionUnassignPower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePowerCollectionUnassignPower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePowerCollectionUnassignPower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePowerCollectionUnassignPower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePowerCollectionUnassignPower result;
      
      private NetMessagePowerCollectionUnassignPower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePowerCollectionUnassignPower original = result;
          result = new NetMessagePowerCollectionUnassignPower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePowerCollectionUnassignPower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePowerCollectionUnassignPower.Descriptor; }
      }
      
      public override NetMessagePowerCollectionUnassignPower DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePowerCollectionUnassignPower.DefaultInstance; }
      }
      
      public override NetMessagePowerCollectionUnassignPower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePowerCollectionUnassignPower) {
          return MergeFrom((NetMessagePowerCollectionUnassignPower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePowerCollectionUnassignPower other) {
        if (other == global::Gazillion.NetMessagePowerCollectionUnassignPower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasPowerProtoId) {
          PowerProtoId = other.PowerProtoId;
        }
        if (other.HasTargetentityid) {
          Targetentityid = other.Targetentityid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePowerCollectionUnassignPowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePowerCollectionUnassignPowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
            case 16: {
              result.hasPowerProtoId = input.ReadUInt64(ref result.powerProtoId_);
              break;
            }
            case 24: {
              result.hasTargetentityid = input.ReadUInt64(ref result.targetentityid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
      
      public bool HasPowerProtoId {
        get { return result.hasPowerProtoId; }
      }
      public ulong PowerProtoId {
        get { return result.PowerProtoId; }
        set { SetPowerProtoId(value); }
      }
      public Builder SetPowerProtoId(ulong value) {
        PrepareBuilder();
        result.hasPowerProtoId = true;
        result.powerProtoId_ = value;
        return this;
      }
      public Builder ClearPowerProtoId() {
        PrepareBuilder();
        result.hasPowerProtoId = false;
        result.powerProtoId_ = 0UL;
        return this;
      }
      
      public bool HasTargetentityid {
        get { return result.hasTargetentityid; }
      }
      public ulong Targetentityid {
        get { return result.Targetentityid; }
        set { SetTargetentityid(value); }
      }
      public Builder SetTargetentityid(ulong value) {
        PrepareBuilder();
        result.hasTargetentityid = true;
        result.targetentityid_ = value;
        return this;
      }
      public Builder ClearTargetentityid() {
        PrepareBuilder();
        result.hasTargetentityid = false;
        result.targetentityid_ = 0UL;
        return this;
      }
    }
    static NetMessagePowerCollectionUnassignPower() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageOnWaypointUpdated : pb::GeneratedMessage<NetMessageOnWaypointUpdated, NetMessageOnWaypointUpdated.Builder> {
    private NetMessageOnWaypointUpdated() { }
    private static readonly NetMessageOnWaypointUpdated defaultInstance = new NetMessageOnWaypointUpdated().MakeReadOnly();
    private static readonly string[] _netMessageOnWaypointUpdatedFieldNames = new string[] { "idPlayer" };
    private static readonly uint[] _netMessageOnWaypointUpdatedFieldTags = new uint[] { 8 };
    public static NetMessageOnWaypointUpdated DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageOnWaypointUpdated DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageOnWaypointUpdated ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnWaypointUpdated__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageOnWaypointUpdated, NetMessageOnWaypointUpdated.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnWaypointUpdated__FieldAccessorTable; }
    }
    
    public const int IdPlayerFieldNumber = 1;
    private bool hasIdPlayer;
    private ulong idPlayer_;
    public bool HasIdPlayer {
      get { return hasIdPlayer; }
    }
    public ulong IdPlayer {
      get { return idPlayer_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdPlayer) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageOnWaypointUpdatedFieldNames;
      if (hasIdPlayer) {
        output.WriteUInt64(1, field_names[0], IdPlayer);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdPlayer) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdPlayer);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageOnWaypointUpdated ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnWaypointUpdated ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnWaypointUpdated ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnWaypointUpdated ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnWaypointUpdated ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnWaypointUpdated ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnWaypointUpdated ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageOnWaypointUpdated ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageOnWaypointUpdated ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnWaypointUpdated ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageOnWaypointUpdated MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageOnWaypointUpdated prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageOnWaypointUpdated, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageOnWaypointUpdated cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageOnWaypointUpdated result;
      
      private NetMessageOnWaypointUpdated PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageOnWaypointUpdated original = result;
          result = new NetMessageOnWaypointUpdated();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageOnWaypointUpdated MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageOnWaypointUpdated.Descriptor; }
      }
      
      public override NetMessageOnWaypointUpdated DefaultInstanceForType {
        get { return global::Gazillion.NetMessageOnWaypointUpdated.DefaultInstance; }
      }
      
      public override NetMessageOnWaypointUpdated BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageOnWaypointUpdated) {
          return MergeFrom((NetMessageOnWaypointUpdated) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageOnWaypointUpdated other) {
        if (other == global::Gazillion.NetMessageOnWaypointUpdated.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdPlayer) {
          IdPlayer = other.IdPlayer;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageOnWaypointUpdatedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageOnWaypointUpdatedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdPlayer = input.ReadUInt64(ref result.idPlayer_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdPlayer {
        get { return result.hasIdPlayer; }
      }
      public ulong IdPlayer {
        get { return result.IdPlayer; }
        set { SetIdPlayer(value); }
      }
      public Builder SetIdPlayer(ulong value) {
        PrepareBuilder();
        result.hasIdPlayer = true;
        result.idPlayer_ = value;
        return this;
      }
      public Builder ClearIdPlayer() {
        PrepareBuilder();
        result.hasIdPlayer = false;
        result.idPlayer_ = 0UL;
        return this;
      }
    }
    static NetMessageOnWaypointUpdated() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageInternalReportPlayerLoadError : pb::GeneratedMessage<NetMessageInternalReportPlayerLoadError, NetMessageInternalReportPlayerLoadError.Builder> {
    private NetMessageInternalReportPlayerLoadError() { }
    private static readonly NetMessageInternalReportPlayerLoadError defaultInstance = new NetMessageInternalReportPlayerLoadError().MakeReadOnly();
    private static readonly string[] _netMessageInternalReportPlayerLoadErrorFieldNames = new string[] { "serverReport" };
    private static readonly uint[] _netMessageInternalReportPlayerLoadErrorFieldTags = new uint[] { 10 };
    public static NetMessageInternalReportPlayerLoadError DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageInternalReportPlayerLoadError DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageInternalReportPlayerLoadError ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInternalReportPlayerLoadError__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageInternalReportPlayerLoadError, NetMessageInternalReportPlayerLoadError.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInternalReportPlayerLoadError__FieldAccessorTable; }
    }
    
    public const int ServerReportFieldNumber = 1;
    private bool hasServerReport;
    private string serverReport_ = "";
    public bool HasServerReport {
      get { return hasServerReport; }
    }
    public string ServerReport {
      get { return serverReport_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasServerReport) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageInternalReportPlayerLoadErrorFieldNames;
      if (hasServerReport) {
        output.WriteString(1, field_names[0], ServerReport);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasServerReport) {
        size += pb::CodedOutputStream.ComputeStringSize(1, ServerReport);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageInternalReportPlayerLoadError ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInternalReportPlayerLoadError ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInternalReportPlayerLoadError ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInternalReportPlayerLoadError ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInternalReportPlayerLoadError ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInternalReportPlayerLoadError ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInternalReportPlayerLoadError ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageInternalReportPlayerLoadError ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageInternalReportPlayerLoadError ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInternalReportPlayerLoadError ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageInternalReportPlayerLoadError MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageInternalReportPlayerLoadError prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageInternalReportPlayerLoadError, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageInternalReportPlayerLoadError cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageInternalReportPlayerLoadError result;
      
      private NetMessageInternalReportPlayerLoadError PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageInternalReportPlayerLoadError original = result;
          result = new NetMessageInternalReportPlayerLoadError();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageInternalReportPlayerLoadError MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageInternalReportPlayerLoadError.Descriptor; }
      }
      
      public override NetMessageInternalReportPlayerLoadError DefaultInstanceForType {
        get { return global::Gazillion.NetMessageInternalReportPlayerLoadError.DefaultInstance; }
      }
      
      public override NetMessageInternalReportPlayerLoadError BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageInternalReportPlayerLoadError) {
          return MergeFrom((NetMessageInternalReportPlayerLoadError) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageInternalReportPlayerLoadError other) {
        if (other == global::Gazillion.NetMessageInternalReportPlayerLoadError.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServerReport) {
          ServerReport = other.ServerReport;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageInternalReportPlayerLoadErrorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageInternalReportPlayerLoadErrorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasServerReport = input.ReadString(ref result.serverReport_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasServerReport {
        get { return result.hasServerReport; }
      }
      public string ServerReport {
        get { return result.ServerReport; }
        set { SetServerReport(value); }
      }
      public Builder SetServerReport(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServerReport = true;
        result.serverReport_ = value;
        return this;
      }
      public Builder ClearServerReport() {
        PrepareBuilder();
        result.hasServerReport = false;
        result.serverReport_ = "";
        return this;
      }
    }
    static NetMessageInternalReportPlayerLoadError() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MessageReportEntry : pb::GeneratedMessage<MessageReportEntry, MessageReportEntry.Builder> {
    private MessageReportEntry() { }
    private static readonly MessageReportEntry defaultInstance = new MessageReportEntry().MakeReadOnly();
    private static readonly string[] _messageReportEntryFieldNames = new string[] { "messageName", "totalBytes", "totalCount" };
    private static readonly uint[] _messageReportEntryFieldTags = new uint[] { 10, 24, 16 };
    public static MessageReportEntry DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MessageReportEntry DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MessageReportEntry ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_MessageReportEntry__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MessageReportEntry, MessageReportEntry.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_MessageReportEntry__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int TotalCountFieldNumber = 2;
    private bool hasTotalCount;
    private ulong totalCount_;
    public bool HasTotalCount {
      get { return hasTotalCount; }
    }
    public ulong TotalCount {
      get { return totalCount_; }
    }
    
    public const int TotalBytesFieldNumber = 3;
    private bool hasTotalBytes;
    private ulong totalBytes_;
    public bool HasTotalBytes {
      get { return hasTotalBytes; }
    }
    public ulong TotalBytes {
      get { return totalBytes_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageName) return false;
        if (!hasTotalCount) return false;
        if (!hasTotalBytes) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _messageReportEntryFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[0], MessageName);
      }
      if (hasTotalCount) {
        output.WriteUInt64(2, field_names[2], TotalCount);
      }
      if (hasTotalBytes) {
        output.WriteUInt64(3, field_names[1], TotalBytes);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMessageName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
      }
      if (hasTotalCount) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, TotalCount);
      }
      if (hasTotalBytes) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, TotalBytes);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MessageReportEntry ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageReportEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageReportEntry ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageReportEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageReportEntry ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageReportEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MessageReportEntry ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MessageReportEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MessageReportEntry ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageReportEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MessageReportEntry MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MessageReportEntry prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MessageReportEntry, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MessageReportEntry cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MessageReportEntry result;
      
      private MessageReportEntry PrepareBuilder() {
        if (resultIsReadOnly) {
          MessageReportEntry original = result;
          result = new MessageReportEntry();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MessageReportEntry MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.MessageReportEntry.Descriptor; }
      }
      
      public override MessageReportEntry DefaultInstanceForType {
        get { return global::Gazillion.MessageReportEntry.DefaultInstance; }
      }
      
      public override MessageReportEntry BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MessageReportEntry) {
          return MergeFrom((MessageReportEntry) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MessageReportEntry other) {
        if (other == global::Gazillion.MessageReportEntry.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasTotalCount) {
          TotalCount = other.TotalCount;
        }
        if (other.HasTotalBytes) {
          TotalBytes = other.TotalBytes;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_messageReportEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _messageReportEntryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 16: {
              result.hasTotalCount = input.ReadUInt64(ref result.totalCount_);
              break;
            }
            case 24: {
              result.hasTotalBytes = input.ReadUInt64(ref result.totalBytes_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasTotalCount {
        get { return result.hasTotalCount; }
      }
      public ulong TotalCount {
        get { return result.TotalCount; }
        set { SetTotalCount(value); }
      }
      public Builder SetTotalCount(ulong value) {
        PrepareBuilder();
        result.hasTotalCount = true;
        result.totalCount_ = value;
        return this;
      }
      public Builder ClearTotalCount() {
        PrepareBuilder();
        result.hasTotalCount = false;
        result.totalCount_ = 0UL;
        return this;
      }
      
      public bool HasTotalBytes {
        get { return result.hasTotalBytes; }
      }
      public ulong TotalBytes {
        get { return result.TotalBytes; }
        set { SetTotalBytes(value); }
      }
      public Builder SetTotalBytes(ulong value) {
        PrepareBuilder();
        result.hasTotalBytes = true;
        result.totalBytes_ = value;
        return this;
      }
      public Builder ClearTotalBytes() {
        PrepareBuilder();
        result.hasTotalBytes = false;
        result.totalBytes_ = 0UL;
        return this;
      }
    }
    static MessageReportEntry() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMessageReport : pb::GeneratedMessage<NetMessageMessageReport, NetMessageMessageReport.Builder> {
    private NetMessageMessageReport() { }
    private static readonly NetMessageMessageReport defaultInstance = new NetMessageMessageReport().MakeReadOnly();
    private static readonly string[] _netMessageMessageReportFieldNames = new string[] { "reportDirection", "reportSource", "reports" };
    private static readonly uint[] _netMessageMessageReportFieldTags = new uint[] { 24, 16, 10 };
    public static NetMessageMessageReport DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMessageReport DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMessageReport ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMessageReport__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMessageReport, NetMessageMessageReport.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMessageReport__FieldAccessorTable; }
    }
    
    public const int ReportsFieldNumber = 1;
    private pbc::PopsicleList<global::Gazillion.MessageReportEntry> reports_ = new pbc::PopsicleList<global::Gazillion.MessageReportEntry>();
    public scg::IList<global::Gazillion.MessageReportEntry> ReportsList {
      get { return reports_; }
    }
    public int ReportsCount {
      get { return reports_.Count; }
    }
    public global::Gazillion.MessageReportEntry GetReports(int index) {
      return reports_[index];
    }
    
    public const int ReportSourceFieldNumber = 2;
    private bool hasReportSource;
    private uint reportSource_;
    public bool HasReportSource {
      get { return hasReportSource; }
    }
    public uint ReportSource {
      get { return reportSource_; }
    }
    
    public const int ReportDirectionFieldNumber = 3;
    private bool hasReportDirection;
    private uint reportDirection_;
    public bool HasReportDirection {
      get { return hasReportDirection; }
    }
    public uint ReportDirection {
      get { return reportDirection_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReportSource) return false;
        if (!hasReportDirection) return false;
        foreach (global::Gazillion.MessageReportEntry element in ReportsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMessageReportFieldNames;
      if (reports_.Count > 0) {
        output.WriteMessageArray(1, field_names[2], reports_);
      }
      if (hasReportSource) {
        output.WriteUInt32(2, field_names[1], ReportSource);
      }
      if (hasReportDirection) {
        output.WriteUInt32(3, field_names[0], ReportDirection);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Gazillion.MessageReportEntry element in ReportsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      if (hasReportSource) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ReportSource);
      }
      if (hasReportDirection) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, ReportDirection);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMessageReport ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMessageReport ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMessageReport ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMessageReport ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMessageReport ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMessageReport ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMessageReport ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMessageReport ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMessageReport ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMessageReport ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMessageReport MakeReadOnly() {
      reports_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMessageReport prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMessageReport, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMessageReport cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMessageReport result;
      
      private NetMessageMessageReport PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMessageReport original = result;
          result = new NetMessageMessageReport();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMessageReport MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMessageReport.Descriptor; }
      }
      
      public override NetMessageMessageReport DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMessageReport.DefaultInstance; }
      }
      
      public override NetMessageMessageReport BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMessageReport) {
          return MergeFrom((NetMessageMessageReport) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMessageReport other) {
        if (other == global::Gazillion.NetMessageMessageReport.DefaultInstance) return this;
        PrepareBuilder();
        if (other.reports_.Count != 0) {
          result.reports_.Add(other.reports_);
        }
        if (other.HasReportSource) {
          ReportSource = other.ReportSource;
        }
        if (other.HasReportDirection) {
          ReportDirection = other.ReportDirection;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMessageReportFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMessageReportFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.reports_, global::Gazillion.MessageReportEntry.DefaultInstance, extensionRegistry);
              break;
            }
            case 16: {
              result.hasReportSource = input.ReadUInt32(ref result.reportSource_);
              break;
            }
            case 24: {
              result.hasReportDirection = input.ReadUInt32(ref result.reportDirection_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Gazillion.MessageReportEntry> ReportsList {
        get { return PrepareBuilder().reports_; }
      }
      public int ReportsCount {
        get { return result.ReportsCount; }
      }
      public global::Gazillion.MessageReportEntry GetReports(int index) {
        return result.GetReports(index);
      }
      public Builder SetReports(int index, global::Gazillion.MessageReportEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.reports_[index] = value;
        return this;
      }
      public Builder SetReports(int index, global::Gazillion.MessageReportEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.reports_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddReports(global::Gazillion.MessageReportEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.reports_.Add(value);
        return this;
      }
      public Builder AddReports(global::Gazillion.MessageReportEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.reports_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeReports(scg::IEnumerable<global::Gazillion.MessageReportEntry> values) {
        PrepareBuilder();
        result.reports_.Add(values);
        return this;
      }
      public Builder ClearReports() {
        PrepareBuilder();
        result.reports_.Clear();
        return this;
      }
      
      public bool HasReportSource {
        get { return result.hasReportSource; }
      }
      public uint ReportSource {
        get { return result.ReportSource; }
        set { SetReportSource(value); }
      }
      public Builder SetReportSource(uint value) {
        PrepareBuilder();
        result.hasReportSource = true;
        result.reportSource_ = value;
        return this;
      }
      public Builder ClearReportSource() {
        PrepareBuilder();
        result.hasReportSource = false;
        result.reportSource_ = 0;
        return this;
      }
      
      public bool HasReportDirection {
        get { return result.hasReportDirection; }
      }
      public uint ReportDirection {
        get { return result.ReportDirection; }
        set { SetReportDirection(value); }
      }
      public Builder SetReportDirection(uint value) {
        PrepareBuilder();
        result.hasReportDirection = true;
        result.reportDirection_ = value;
        return this;
      }
      public Builder ClearReportDirection() {
        PrepareBuilder();
        result.hasReportDirection = false;
        result.reportDirection_ = 0;
        return this;
      }
    }
    static NetMessageMessageReport() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUpdateMiniMap : pb::GeneratedMessage<NetMessageUpdateMiniMap, NetMessageUpdateMiniMap.Builder> {
    private NetMessageUpdateMiniMap() { }
    private static readonly NetMessageUpdateMiniMap defaultInstance = new NetMessageUpdateMiniMap().MakeReadOnly();
    private static readonly string[] _netMessageUpdateMiniMapFieldNames = new string[] { "archiveData" };
    private static readonly uint[] _netMessageUpdateMiniMapFieldTags = new uint[] { 10 };
    public static NetMessageUpdateMiniMap DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUpdateMiniMap DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUpdateMiniMap ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUpdateMiniMap__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUpdateMiniMap, NetMessageUpdateMiniMap.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUpdateMiniMap__FieldAccessorTable; }
    }
    
    public const int ArchiveDataFieldNumber = 1;
    private bool hasArchiveData;
    private pb::ByteString archiveData_ = pb::ByteString.Empty;
    public bool HasArchiveData {
      get { return hasArchiveData; }
    }
    public pb::ByteString ArchiveData {
      get { return archiveData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasArchiveData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUpdateMiniMapFieldNames;
      if (hasArchiveData) {
        output.WriteBytes(1, field_names[0], ArchiveData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasArchiveData) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, ArchiveData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUpdateMiniMap ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUpdateMiniMap ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdateMiniMap ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUpdateMiniMap ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdateMiniMap ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUpdateMiniMap ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdateMiniMap ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUpdateMiniMap ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUpdateMiniMap ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUpdateMiniMap ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUpdateMiniMap MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUpdateMiniMap prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUpdateMiniMap, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUpdateMiniMap cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUpdateMiniMap result;
      
      private NetMessageUpdateMiniMap PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUpdateMiniMap original = result;
          result = new NetMessageUpdateMiniMap();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUpdateMiniMap MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUpdateMiniMap.Descriptor; }
      }
      
      public override NetMessageUpdateMiniMap DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUpdateMiniMap.DefaultInstance; }
      }
      
      public override NetMessageUpdateMiniMap BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUpdateMiniMap) {
          return MergeFrom((NetMessageUpdateMiniMap) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUpdateMiniMap other) {
        if (other == global::Gazillion.NetMessageUpdateMiniMap.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasArchiveData) {
          ArchiveData = other.ArchiveData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUpdateMiniMapFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUpdateMiniMapFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasArchiveData = input.ReadBytes(ref result.archiveData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasArchiveData {
        get { return result.hasArchiveData; }
      }
      public pb::ByteString ArchiveData {
        get { return result.ArchiveData; }
        set { SetArchiveData(value); }
      }
      public Builder SetArchiveData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasArchiveData = true;
        result.archiveData_ = value;
        return this;
      }
      public Builder ClearArchiveData() {
        PrepareBuilder();
        result.hasArchiveData = false;
        result.archiveData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static NetMessageUpdateMiniMap() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMoveToAlternateLandingSpot : pb::GeneratedMessage<NetMessageMoveToAlternateLandingSpot, NetMessageMoveToAlternateLandingSpot.Builder> {
    private NetMessageMoveToAlternateLandingSpot() { }
    private static readonly NetMessageMoveToAlternateLandingSpot defaultInstance = new NetMessageMoveToAlternateLandingSpot().MakeReadOnly();
    private static readonly string[] _netMessageMoveToAlternateLandingSpotFieldNames = new string[] { "idEntity", "landingPosition", "landingPowerprototypeId" };
    private static readonly uint[] _netMessageMoveToAlternateLandingSpotFieldTags = new uint[] { 8, 18, 24 };
    public static NetMessageMoveToAlternateLandingSpot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMoveToAlternateLandingSpot DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMoveToAlternateLandingSpot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMoveToAlternateLandingSpot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMoveToAlternateLandingSpot, NetMessageMoveToAlternateLandingSpot.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMoveToAlternateLandingSpot__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int LandingPositionFieldNumber = 2;
    private bool hasLandingPosition;
    private global::Gazillion.NetStructPoint3 landingPosition_;
    public bool HasLandingPosition {
      get { return hasLandingPosition; }
    }
    public global::Gazillion.NetStructPoint3 LandingPosition {
      get { return landingPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int LandingPowerprototypeIdFieldNumber = 3;
    private bool hasLandingPowerprototypeId;
    private ulong landingPowerprototypeId_;
    public bool HasLandingPowerprototypeId {
      get { return hasLandingPowerprototypeId; }
    }
    public ulong LandingPowerprototypeId {
      get { return landingPowerprototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        if (!hasLandingPosition) return false;
        if (!hasLandingPowerprototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMoveToAlternateLandingSpotFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[0], IdEntity);
      }
      if (hasLandingPosition) {
        output.WriteMessage(2, field_names[1], LandingPosition);
      }
      if (hasLandingPowerprototypeId) {
        output.WriteUInt64(3, field_names[2], LandingPowerprototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasLandingPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, LandingPosition);
      }
      if (hasLandingPowerprototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, LandingPowerprototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMoveToAlternateLandingSpot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMoveToAlternateLandingSpot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMoveToAlternateLandingSpot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMoveToAlternateLandingSpot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMoveToAlternateLandingSpot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMoveToAlternateLandingSpot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMoveToAlternateLandingSpot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMoveToAlternateLandingSpot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMoveToAlternateLandingSpot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMoveToAlternateLandingSpot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMoveToAlternateLandingSpot MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMoveToAlternateLandingSpot prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMoveToAlternateLandingSpot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMoveToAlternateLandingSpot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMoveToAlternateLandingSpot result;
      
      private NetMessageMoveToAlternateLandingSpot PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMoveToAlternateLandingSpot original = result;
          result = new NetMessageMoveToAlternateLandingSpot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMoveToAlternateLandingSpot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMoveToAlternateLandingSpot.Descriptor; }
      }
      
      public override NetMessageMoveToAlternateLandingSpot DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMoveToAlternateLandingSpot.DefaultInstance; }
      }
      
      public override NetMessageMoveToAlternateLandingSpot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMoveToAlternateLandingSpot) {
          return MergeFrom((NetMessageMoveToAlternateLandingSpot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMoveToAlternateLandingSpot other) {
        if (other == global::Gazillion.NetMessageMoveToAlternateLandingSpot.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasLandingPosition) {
          MergeLandingPosition(other.LandingPosition);
        }
        if (other.HasLandingPowerprototypeId) {
          LandingPowerprototypeId = other.LandingPowerprototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMoveToAlternateLandingSpotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMoveToAlternateLandingSpotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 18: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasLandingPosition) {
                subBuilder.MergeFrom(LandingPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LandingPosition = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasLandingPowerprototypeId = input.ReadUInt64(ref result.landingPowerprototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasLandingPosition {
       get { return result.hasLandingPosition; }
      }
      public global::Gazillion.NetStructPoint3 LandingPosition {
        get { return result.LandingPosition; }
        set { SetLandingPosition(value); }
      }
      public Builder SetLandingPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLandingPosition = true;
        result.landingPosition_ = value;
        return this;
      }
      public Builder SetLandingPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLandingPosition = true;
        result.landingPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLandingPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLandingPosition &&
            result.landingPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.landingPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.landingPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.landingPosition_ = value;
        }
        result.hasLandingPosition = true;
        return this;
      }
      public Builder ClearLandingPosition() {
        PrepareBuilder();
        result.hasLandingPosition = false;
        result.landingPosition_ = null;
        return this;
      }
      
      public bool HasLandingPowerprototypeId {
        get { return result.hasLandingPowerprototypeId; }
      }
      public ulong LandingPowerprototypeId {
        get { return result.LandingPowerprototypeId; }
        set { SetLandingPowerprototypeId(value); }
      }
      public Builder SetLandingPowerprototypeId(ulong value) {
        PrepareBuilder();
        result.hasLandingPowerprototypeId = true;
        result.landingPowerprototypeId_ = value;
        return this;
      }
      public Builder ClearLandingPowerprototypeId() {
        PrepareBuilder();
        result.hasLandingPowerprototypeId = false;
        result.landingPowerprototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageMoveToAlternateLandingSpot() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageConsoleMessage : pb::GeneratedMessage<NetMessageConsoleMessage, NetMessageConsoleMessage.Builder> {
    private NetMessageConsoleMessage() { }
    private static readonly NetMessageConsoleMessage defaultInstance = new NetMessageConsoleMessage().MakeReadOnly();
    private static readonly string[] _netMessageConsoleMessageFieldNames = new string[] { "messageText" };
    private static readonly uint[] _netMessageConsoleMessageFieldTags = new uint[] { 10 };
    public static NetMessageConsoleMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageConsoleMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageConsoleMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageConsoleMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageConsoleMessage, NetMessageConsoleMessage.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageConsoleMessage__FieldAccessorTable; }
    }
    
    public const int MessageTextFieldNumber = 1;
    private bool hasMessageText;
    private string messageText_ = "";
    public bool HasMessageText {
      get { return hasMessageText; }
    }
    public string MessageText {
      get { return messageText_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageText) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageConsoleMessageFieldNames;
      if (hasMessageText) {
        output.WriteString(1, field_names[0], MessageText);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMessageText) {
        size += pb::CodedOutputStream.ComputeStringSize(1, MessageText);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageConsoleMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageConsoleMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConsoleMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageConsoleMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConsoleMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageConsoleMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConsoleMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageConsoleMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageConsoleMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageConsoleMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageConsoleMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageConsoleMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageConsoleMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageConsoleMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageConsoleMessage result;
      
      private NetMessageConsoleMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageConsoleMessage original = result;
          result = new NetMessageConsoleMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageConsoleMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageConsoleMessage.Descriptor; }
      }
      
      public override NetMessageConsoleMessage DefaultInstanceForType {
        get { return global::Gazillion.NetMessageConsoleMessage.DefaultInstance; }
      }
      
      public override NetMessageConsoleMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageConsoleMessage) {
          return MergeFrom((NetMessageConsoleMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageConsoleMessage other) {
        if (other == global::Gazillion.NetMessageConsoleMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageText) {
          MessageText = other.MessageText;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageConsoleMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageConsoleMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageText = input.ReadString(ref result.messageText_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageText {
        get { return result.hasMessageText; }
      }
      public string MessageText {
        get { return result.MessageText; }
        set { SetMessageText(value); }
      }
      public Builder SetMessageText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageText = true;
        result.messageText_ = value;
        return this;
      }
      public Builder ClearMessageText() {
        PrepareBuilder();
        result.hasMessageText = false;
        result.messageText_ = "";
        return this;
      }
    }
    static NetMessageConsoleMessage() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAvatarOnKilledInfoOverride : pb::GeneratedMessage<NetMessageAvatarOnKilledInfoOverride, NetMessageAvatarOnKilledInfoOverride.Builder> {
    private NetMessageAvatarOnKilledInfoOverride() { }
    private static readonly NetMessageAvatarOnKilledInfoOverride defaultInstance = new NetMessageAvatarOnKilledInfoOverride().MakeReadOnly();
    private static readonly string[] _netMessageAvatarOnKilledInfoOverrideFieldNames = new string[] { "avatarOnKilledInfoProtoId", "regionId" };
    private static readonly uint[] _netMessageAvatarOnKilledInfoOverrideFieldTags = new uint[] { 16, 8 };
    public static NetMessageAvatarOnKilledInfoOverride DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAvatarOnKilledInfoOverride DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAvatarOnKilledInfoOverride ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAvatarOnKilledInfoOverride__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAvatarOnKilledInfoOverride, NetMessageAvatarOnKilledInfoOverride.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAvatarOnKilledInfoOverride__FieldAccessorTable; }
    }
    
    public const int RegionIdFieldNumber = 1;
    private bool hasRegionId;
    private ulong regionId_;
    public bool HasRegionId {
      get { return hasRegionId; }
    }
    public ulong RegionId {
      get { return regionId_; }
    }
    
    public const int AvatarOnKilledInfoProtoIdFieldNumber = 2;
    private bool hasAvatarOnKilledInfoProtoId;
    private ulong avatarOnKilledInfoProtoId_;
    public bool HasAvatarOnKilledInfoProtoId {
      get { return hasAvatarOnKilledInfoProtoId; }
    }
    public ulong AvatarOnKilledInfoProtoId {
      get { return avatarOnKilledInfoProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRegionId) return false;
        if (!hasAvatarOnKilledInfoProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAvatarOnKilledInfoOverrideFieldNames;
      if (hasRegionId) {
        output.WriteUInt64(1, field_names[1], RegionId);
      }
      if (hasAvatarOnKilledInfoProtoId) {
        output.WriteUInt64(2, field_names[0], AvatarOnKilledInfoProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRegionId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, RegionId);
      }
      if (hasAvatarOnKilledInfoProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, AvatarOnKilledInfoProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAvatarOnKilledInfoOverride MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAvatarOnKilledInfoOverride prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAvatarOnKilledInfoOverride, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAvatarOnKilledInfoOverride cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAvatarOnKilledInfoOverride result;
      
      private NetMessageAvatarOnKilledInfoOverride PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAvatarOnKilledInfoOverride original = result;
          result = new NetMessageAvatarOnKilledInfoOverride();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAvatarOnKilledInfoOverride MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAvatarOnKilledInfoOverride.Descriptor; }
      }
      
      public override NetMessageAvatarOnKilledInfoOverride DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAvatarOnKilledInfoOverride.DefaultInstance; }
      }
      
      public override NetMessageAvatarOnKilledInfoOverride BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAvatarOnKilledInfoOverride) {
          return MergeFrom((NetMessageAvatarOnKilledInfoOverride) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAvatarOnKilledInfoOverride other) {
        if (other == global::Gazillion.NetMessageAvatarOnKilledInfoOverride.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRegionId) {
          RegionId = other.RegionId;
        }
        if (other.HasAvatarOnKilledInfoProtoId) {
          AvatarOnKilledInfoProtoId = other.AvatarOnKilledInfoProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAvatarOnKilledInfoOverrideFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAvatarOnKilledInfoOverrideFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRegionId = input.ReadUInt64(ref result.regionId_);
              break;
            }
            case 16: {
              result.hasAvatarOnKilledInfoProtoId = input.ReadUInt64(ref result.avatarOnKilledInfoProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRegionId {
        get { return result.hasRegionId; }
      }
      public ulong RegionId {
        get { return result.RegionId; }
        set { SetRegionId(value); }
      }
      public Builder SetRegionId(ulong value) {
        PrepareBuilder();
        result.hasRegionId = true;
        result.regionId_ = value;
        return this;
      }
      public Builder ClearRegionId() {
        PrepareBuilder();
        result.hasRegionId = false;
        result.regionId_ = 0UL;
        return this;
      }
      
      public bool HasAvatarOnKilledInfoProtoId {
        get { return result.hasAvatarOnKilledInfoProtoId; }
      }
      public ulong AvatarOnKilledInfoProtoId {
        get { return result.AvatarOnKilledInfoProtoId; }
        set { SetAvatarOnKilledInfoProtoId(value); }
      }
      public Builder SetAvatarOnKilledInfoProtoId(ulong value) {
        PrepareBuilder();
        result.hasAvatarOnKilledInfoProtoId = true;
        result.avatarOnKilledInfoProtoId_ = value;
        return this;
      }
      public Builder ClearAvatarOnKilledInfoProtoId() {
        PrepareBuilder();
        result.hasAvatarOnKilledInfoProtoId = false;
        result.avatarOnKilledInfoProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageAvatarOnKilledInfoOverride() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageOnResurrect : pb::GeneratedMessage<NetMessageOnResurrect, NetMessageOnResurrect.Builder> {
    private NetMessageOnResurrect() { }
    private static readonly NetMessageOnResurrect defaultInstance = new NetMessageOnResurrect().MakeReadOnly();
    private static readonly string[] _netMessageOnResurrectFieldNames = new string[] { "targetId" };
    private static readonly uint[] _netMessageOnResurrectFieldTags = new uint[] { 8 };
    public static NetMessageOnResurrect DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageOnResurrect DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageOnResurrect ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnResurrect__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageOnResurrect, NetMessageOnResurrect.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnResurrect__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageOnResurrectFieldNames;
      if (hasTargetId) {
        output.WriteUInt64(1, field_names[0], TargetId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageOnResurrect ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnResurrect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnResurrect ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnResurrect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnResurrect ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnResurrect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnResurrect ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageOnResurrect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageOnResurrect ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnResurrect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageOnResurrect MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageOnResurrect prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageOnResurrect, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageOnResurrect cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageOnResurrect result;
      
      private NetMessageOnResurrect PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageOnResurrect original = result;
          result = new NetMessageOnResurrect();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageOnResurrect MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageOnResurrect.Descriptor; }
      }
      
      public override NetMessageOnResurrect DefaultInstanceForType {
        get { return global::Gazillion.NetMessageOnResurrect.DefaultInstance; }
      }
      
      public override NetMessageOnResurrect BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageOnResurrect) {
          return MergeFrom((NetMessageOnResurrect) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageOnResurrect other) {
        if (other == global::Gazillion.NetMessageOnResurrect.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageOnResurrectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageOnResurrectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
    }
    static NetMessageOnResurrect() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageOnResurrectRequest : pb::GeneratedMessage<NetMessageOnResurrectRequest, NetMessageOnResurrectRequest.Builder> {
    private NetMessageOnResurrectRequest() { }
    private static readonly NetMessageOnResurrectRequest defaultInstance = new NetMessageOnResurrectRequest().MakeReadOnly();
    private static readonly string[] _netMessageOnResurrectRequestFieldNames = new string[] { "resurrectorId", "targetId" };
    private static readonly uint[] _netMessageOnResurrectRequestFieldTags = new uint[] { 16, 8 };
    public static NetMessageOnResurrectRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageOnResurrectRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageOnResurrectRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnResurrectRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageOnResurrectRequest, NetMessageOnResurrectRequest.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnResurrectRequest__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public const int ResurrectorIdFieldNumber = 2;
    private bool hasResurrectorId;
    private ulong resurrectorId_;
    public bool HasResurrectorId {
      get { return hasResurrectorId; }
    }
    public ulong ResurrectorId {
      get { return resurrectorId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        if (!hasResurrectorId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageOnResurrectRequestFieldNames;
      if (hasTargetId) {
        output.WriteUInt64(1, field_names[1], TargetId);
      }
      if (hasResurrectorId) {
        output.WriteUInt64(2, field_names[0], ResurrectorId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetId);
      }
      if (hasResurrectorId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ResurrectorId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageOnResurrectRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnResurrectRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnResurrectRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnResurrectRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnResurrectRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnResurrectRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnResurrectRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageOnResurrectRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageOnResurrectRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnResurrectRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageOnResurrectRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageOnResurrectRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageOnResurrectRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageOnResurrectRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageOnResurrectRequest result;
      
      private NetMessageOnResurrectRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageOnResurrectRequest original = result;
          result = new NetMessageOnResurrectRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageOnResurrectRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageOnResurrectRequest.Descriptor; }
      }
      
      public override NetMessageOnResurrectRequest DefaultInstanceForType {
        get { return global::Gazillion.NetMessageOnResurrectRequest.DefaultInstance; }
      }
      
      public override NetMessageOnResurrectRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageOnResurrectRequest) {
          return MergeFrom((NetMessageOnResurrectRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageOnResurrectRequest other) {
        if (other == global::Gazillion.NetMessageOnResurrectRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        if (other.HasResurrectorId) {
          ResurrectorId = other.ResurrectorId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageOnResurrectRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageOnResurrectRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
            case 16: {
              result.hasResurrectorId = input.ReadUInt64(ref result.resurrectorId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
      
      public bool HasResurrectorId {
        get { return result.hasResurrectorId; }
      }
      public ulong ResurrectorId {
        get { return result.ResurrectorId; }
        set { SetResurrectorId(value); }
      }
      public Builder SetResurrectorId(ulong value) {
        PrepareBuilder();
        result.hasResurrectorId = true;
        result.resurrectorId_ = value;
        return this;
      }
      public Builder ClearResurrectorId() {
        PrepareBuilder();
        result.hasResurrectorId = false;
        result.resurrectorId_ = 0UL;
        return this;
      }
    }
    static NetMessageOnResurrectRequest() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageOnResurrectDecline : pb::GeneratedMessage<NetMessageOnResurrectDecline, NetMessageOnResurrectDecline.Builder> {
    private NetMessageOnResurrectDecline() { }
    private static readonly NetMessageOnResurrectDecline defaultInstance = new NetMessageOnResurrectDecline().MakeReadOnly();
    private static readonly string[] _netMessageOnResurrectDeclineFieldNames = new string[] { "targetId" };
    private static readonly uint[] _netMessageOnResurrectDeclineFieldTags = new uint[] { 8 };
    public static NetMessageOnResurrectDecline DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageOnResurrectDecline DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageOnResurrectDecline ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnResurrectDecline__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageOnResurrectDecline, NetMessageOnResurrectDecline.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnResurrectDecline__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageOnResurrectDeclineFieldNames;
      if (hasTargetId) {
        output.WriteUInt64(1, field_names[0], TargetId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageOnResurrectDecline ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnResurrectDecline ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnResurrectDecline ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnResurrectDecline ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnResurrectDecline ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnResurrectDecline ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnResurrectDecline ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageOnResurrectDecline ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageOnResurrectDecline ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnResurrectDecline ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageOnResurrectDecline MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageOnResurrectDecline prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageOnResurrectDecline, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageOnResurrectDecline cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageOnResurrectDecline result;
      
      private NetMessageOnResurrectDecline PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageOnResurrectDecline original = result;
          result = new NetMessageOnResurrectDecline();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageOnResurrectDecline MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageOnResurrectDecline.Descriptor; }
      }
      
      public override NetMessageOnResurrectDecline DefaultInstanceForType {
        get { return global::Gazillion.NetMessageOnResurrectDecline.DefaultInstance; }
      }
      
      public override NetMessageOnResurrectDecline BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageOnResurrectDecline) {
          return MergeFrom((NetMessageOnResurrectDecline) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageOnResurrectDecline other) {
        if (other == global::Gazillion.NetMessageOnResurrectDecline.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageOnResurrectDeclineFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageOnResurrectDeclineFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
    }
    static NetMessageOnResurrectDecline() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageReloadPackagesStart : pb::GeneratedMessage<NetMessageReloadPackagesStart, NetMessageReloadPackagesStart.Builder> {
    private NetMessageReloadPackagesStart() { }
    private static readonly NetMessageReloadPackagesStart defaultInstance = new NetMessageReloadPackagesStart().MakeReadOnly();
    private static readonly string[] _netMessageReloadPackagesStartFieldNames = new string[] {  };
    private static readonly uint[] _netMessageReloadPackagesStartFieldTags = new uint[] {  };
    public static NetMessageReloadPackagesStart DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageReloadPackagesStart DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageReloadPackagesStart ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReloadPackagesStart__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageReloadPackagesStart, NetMessageReloadPackagesStart.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReloadPackagesStart__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageReloadPackagesStartFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageReloadPackagesStart ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReloadPackagesStart ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReloadPackagesStart ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReloadPackagesStart ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReloadPackagesStart ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReloadPackagesStart ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReloadPackagesStart ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageReloadPackagesStart ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageReloadPackagesStart ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReloadPackagesStart ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageReloadPackagesStart MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageReloadPackagesStart prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageReloadPackagesStart, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageReloadPackagesStart cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageReloadPackagesStart result;
      
      private NetMessageReloadPackagesStart PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageReloadPackagesStart original = result;
          result = new NetMessageReloadPackagesStart();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageReloadPackagesStart MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageReloadPackagesStart.Descriptor; }
      }
      
      public override NetMessageReloadPackagesStart DefaultInstanceForType {
        get { return global::Gazillion.NetMessageReloadPackagesStart.DefaultInstance; }
      }
      
      public override NetMessageReloadPackagesStart BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageReloadPackagesStart) {
          return MergeFrom((NetMessageReloadPackagesStart) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageReloadPackagesStart other) {
        if (other == global::Gazillion.NetMessageReloadPackagesStart.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageReloadPackagesStartFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageReloadPackagesStartFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageReloadPackagesStart() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePlayStoryBanter : pb::GeneratedMessage<NetMessagePlayStoryBanter, NetMessagePlayStoryBanter.Builder> {
    private NetMessagePlayStoryBanter() { }
    private static readonly NetMessagePlayStoryBanter defaultInstance = new NetMessagePlayStoryBanter().MakeReadOnly();
    private static readonly string[] _netMessagePlayStoryBanterFieldNames = new string[] { "banterAssetId" };
    private static readonly uint[] _netMessagePlayStoryBanterFieldTags = new uint[] { 8 };
    public static NetMessagePlayStoryBanter DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePlayStoryBanter DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePlayStoryBanter ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePlayStoryBanter__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePlayStoryBanter, NetMessagePlayStoryBanter.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePlayStoryBanter__FieldAccessorTable; }
    }
    
    public const int BanterAssetIdFieldNumber = 1;
    private bool hasBanterAssetId;
    private ulong banterAssetId_;
    public bool HasBanterAssetId {
      get { return hasBanterAssetId; }
    }
    public ulong BanterAssetId {
      get { return banterAssetId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBanterAssetId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePlayStoryBanterFieldNames;
      if (hasBanterAssetId) {
        output.WriteUInt64(1, field_names[0], BanterAssetId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBanterAssetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, BanterAssetId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePlayStoryBanter ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayStoryBanter ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayStoryBanter ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayStoryBanter ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayStoryBanter ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayStoryBanter ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayStoryBanter ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePlayStoryBanter ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePlayStoryBanter ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayStoryBanter ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePlayStoryBanter MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePlayStoryBanter prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePlayStoryBanter, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePlayStoryBanter cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePlayStoryBanter result;
      
      private NetMessagePlayStoryBanter PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePlayStoryBanter original = result;
          result = new NetMessagePlayStoryBanter();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePlayStoryBanter MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePlayStoryBanter.Descriptor; }
      }
      
      public override NetMessagePlayStoryBanter DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePlayStoryBanter.DefaultInstance; }
      }
      
      public override NetMessagePlayStoryBanter BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePlayStoryBanter) {
          return MergeFrom((NetMessagePlayStoryBanter) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePlayStoryBanter other) {
        if (other == global::Gazillion.NetMessagePlayStoryBanter.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBanterAssetId) {
          BanterAssetId = other.BanterAssetId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePlayStoryBanterFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePlayStoryBanterFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasBanterAssetId = input.ReadUInt64(ref result.banterAssetId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBanterAssetId {
        get { return result.hasBanterAssetId; }
      }
      public ulong BanterAssetId {
        get { return result.BanterAssetId; }
        set { SetBanterAssetId(value); }
      }
      public Builder SetBanterAssetId(ulong value) {
        PrepareBuilder();
        result.hasBanterAssetId = true;
        result.banterAssetId_ = value;
        return this;
      }
      public Builder ClearBanterAssetId() {
        PrepareBuilder();
        result.hasBanterAssetId = false;
        result.banterAssetId_ = 0UL;
        return this;
      }
    }
    static NetMessagePlayStoryBanter() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePlayKismetSeq : pb::GeneratedMessage<NetMessagePlayKismetSeq, NetMessagePlayKismetSeq.Builder> {
    private NetMessagePlayKismetSeq() { }
    private static readonly NetMessagePlayKismetSeq defaultInstance = new NetMessagePlayKismetSeq().MakeReadOnly();
    private static readonly string[] _netMessagePlayKismetSeqFieldNames = new string[] { "kismetSeqPrototypeId" };
    private static readonly uint[] _netMessagePlayKismetSeqFieldTags = new uint[] { 8 };
    public static NetMessagePlayKismetSeq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePlayKismetSeq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePlayKismetSeq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePlayKismetSeq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePlayKismetSeq, NetMessagePlayKismetSeq.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePlayKismetSeq__FieldAccessorTable; }
    }
    
    public const int KismetSeqPrototypeIdFieldNumber = 1;
    private bool hasKismetSeqPrototypeId;
    private ulong kismetSeqPrototypeId_;
    public bool HasKismetSeqPrototypeId {
      get { return hasKismetSeqPrototypeId; }
    }
    public ulong KismetSeqPrototypeId {
      get { return kismetSeqPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKismetSeqPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePlayKismetSeqFieldNames;
      if (hasKismetSeqPrototypeId) {
        output.WriteUInt64(1, field_names[0], KismetSeqPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasKismetSeqPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, KismetSeqPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePlayKismetSeq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayKismetSeq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayKismetSeq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayKismetSeq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayKismetSeq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayKismetSeq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayKismetSeq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePlayKismetSeq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePlayKismetSeq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayKismetSeq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePlayKismetSeq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePlayKismetSeq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePlayKismetSeq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePlayKismetSeq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePlayKismetSeq result;
      
      private NetMessagePlayKismetSeq PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePlayKismetSeq original = result;
          result = new NetMessagePlayKismetSeq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePlayKismetSeq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePlayKismetSeq.Descriptor; }
      }
      
      public override NetMessagePlayKismetSeq DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePlayKismetSeq.DefaultInstance; }
      }
      
      public override NetMessagePlayKismetSeq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePlayKismetSeq) {
          return MergeFrom((NetMessagePlayKismetSeq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePlayKismetSeq other) {
        if (other == global::Gazillion.NetMessagePlayKismetSeq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKismetSeqPrototypeId) {
          KismetSeqPrototypeId = other.KismetSeqPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePlayKismetSeqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePlayKismetSeqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasKismetSeqPrototypeId = input.ReadUInt64(ref result.kismetSeqPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKismetSeqPrototypeId {
        get { return result.hasKismetSeqPrototypeId; }
      }
      public ulong KismetSeqPrototypeId {
        get { return result.KismetSeqPrototypeId; }
        set { SetKismetSeqPrototypeId(value); }
      }
      public Builder SetKismetSeqPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasKismetSeqPrototypeId = true;
        result.kismetSeqPrototypeId_ = value;
        return this;
      }
      public Builder ClearKismetSeqPrototypeId() {
        PrepareBuilder();
        result.hasKismetSeqPrototypeId = false;
        result.kismetSeqPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessagePlayKismetSeq() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGracefulDisconnectAck : pb::GeneratedMessage<NetMessageGracefulDisconnectAck, NetMessageGracefulDisconnectAck.Builder> {
    private NetMessageGracefulDisconnectAck() { }
    private static readonly NetMessageGracefulDisconnectAck defaultInstance = new NetMessageGracefulDisconnectAck().MakeReadOnly();
    private static readonly string[] _netMessageGracefulDisconnectAckFieldNames = new string[] {  };
    private static readonly uint[] _netMessageGracefulDisconnectAckFieldTags = new uint[] {  };
    public static NetMessageGracefulDisconnectAck DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGracefulDisconnectAck DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGracefulDisconnectAck ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGracefulDisconnectAck__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGracefulDisconnectAck, NetMessageGracefulDisconnectAck.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGracefulDisconnectAck__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGracefulDisconnectAckFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGracefulDisconnectAck ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGracefulDisconnectAck ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGracefulDisconnectAck ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGracefulDisconnectAck ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGracefulDisconnectAck ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGracefulDisconnectAck ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGracefulDisconnectAck ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGracefulDisconnectAck ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGracefulDisconnectAck ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGracefulDisconnectAck ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGracefulDisconnectAck MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGracefulDisconnectAck prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGracefulDisconnectAck, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGracefulDisconnectAck cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGracefulDisconnectAck result;
      
      private NetMessageGracefulDisconnectAck PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGracefulDisconnectAck original = result;
          result = new NetMessageGracefulDisconnectAck();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGracefulDisconnectAck MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGracefulDisconnectAck.Descriptor; }
      }
      
      public override NetMessageGracefulDisconnectAck DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGracefulDisconnectAck.DefaultInstance; }
      }
      
      public override NetMessageGracefulDisconnectAck BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGracefulDisconnectAck) {
          return MergeFrom((NetMessageGracefulDisconnectAck) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGracefulDisconnectAck other) {
        if (other == global::Gazillion.NetMessageGracefulDisconnectAck.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGracefulDisconnectAckFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGracefulDisconnectAckFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageGracefulDisconnectAck() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLiveTuningUpdate : pb::GeneratedMessage<NetMessageLiveTuningUpdate, NetMessageLiveTuningUpdate.Builder> {
    private NetMessageLiveTuningUpdate() { }
    private static readonly NetMessageLiveTuningUpdate defaultInstance = new NetMessageLiveTuningUpdate().MakeReadOnly();
    private static readonly string[] _netMessageLiveTuningUpdateFieldNames = new string[] { "globalTuningSettings", "perPowerTuningSettings" };
    private static readonly uint[] _netMessageLiveTuningUpdateFieldTags = new uint[] { 10, 18 };
    public static NetMessageLiveTuningUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLiveTuningUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLiveTuningUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLiveTuningUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLiveTuningUpdate, NetMessageLiveTuningUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLiveTuningUpdate__FieldAccessorTable; }
    }
    
    public const int GlobalTuningSettingsFieldNumber = 1;
    private pbc::PopsicleList<global::Gazillion.NetStructLiveTuningSettingEnumValue> globalTuningSettings_ = new pbc::PopsicleList<global::Gazillion.NetStructLiveTuningSettingEnumValue>();
    public scg::IList<global::Gazillion.NetStructLiveTuningSettingEnumValue> GlobalTuningSettingsList {
      get { return globalTuningSettings_; }
    }
    public int GlobalTuningSettingsCount {
      get { return globalTuningSettings_.Count; }
    }
    public global::Gazillion.NetStructLiveTuningSettingEnumValue GetGlobalTuningSettings(int index) {
      return globalTuningSettings_[index];
    }
    
    public const int PerPowerTuningSettingsFieldNumber = 2;
    private pbc::PopsicleList<global::Gazillion.NetStructLiveTuningSettingProtoEnumValue> perPowerTuningSettings_ = new pbc::PopsicleList<global::Gazillion.NetStructLiveTuningSettingProtoEnumValue>();
    public scg::IList<global::Gazillion.NetStructLiveTuningSettingProtoEnumValue> PerPowerTuningSettingsList {
      get { return perPowerTuningSettings_; }
    }
    public int PerPowerTuningSettingsCount {
      get { return perPowerTuningSettings_.Count; }
    }
    public global::Gazillion.NetStructLiveTuningSettingProtoEnumValue GetPerPowerTuningSettings(int index) {
      return perPowerTuningSettings_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Gazillion.NetStructLiveTuningSettingEnumValue element in GlobalTuningSettingsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Gazillion.NetStructLiveTuningSettingProtoEnumValue element in PerPowerTuningSettingsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLiveTuningUpdateFieldNames;
      if (globalTuningSettings_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], globalTuningSettings_);
      }
      if (perPowerTuningSettings_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], perPowerTuningSettings_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Gazillion.NetStructLiveTuningSettingEnumValue element in GlobalTuningSettingsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      foreach (global::Gazillion.NetStructLiveTuningSettingProtoEnumValue element in PerPowerTuningSettingsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLiveTuningUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLiveTuningUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLiveTuningUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLiveTuningUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLiveTuningUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLiveTuningUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLiveTuningUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLiveTuningUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLiveTuningUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLiveTuningUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLiveTuningUpdate MakeReadOnly() {
      globalTuningSettings_.MakeReadOnly();
      perPowerTuningSettings_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLiveTuningUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLiveTuningUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLiveTuningUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLiveTuningUpdate result;
      
      private NetMessageLiveTuningUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLiveTuningUpdate original = result;
          result = new NetMessageLiveTuningUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLiveTuningUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLiveTuningUpdate.Descriptor; }
      }
      
      public override NetMessageLiveTuningUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLiveTuningUpdate.DefaultInstance; }
      }
      
      public override NetMessageLiveTuningUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLiveTuningUpdate) {
          return MergeFrom((NetMessageLiveTuningUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLiveTuningUpdate other) {
        if (other == global::Gazillion.NetMessageLiveTuningUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.globalTuningSettings_.Count != 0) {
          result.globalTuningSettings_.Add(other.globalTuningSettings_);
        }
        if (other.perPowerTuningSettings_.Count != 0) {
          result.perPowerTuningSettings_.Add(other.perPowerTuningSettings_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLiveTuningUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLiveTuningUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.globalTuningSettings_, global::Gazillion.NetStructLiveTuningSettingEnumValue.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.perPowerTuningSettings_, global::Gazillion.NetStructLiveTuningSettingProtoEnumValue.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Gazillion.NetStructLiveTuningSettingEnumValue> GlobalTuningSettingsList {
        get { return PrepareBuilder().globalTuningSettings_; }
      }
      public int GlobalTuningSettingsCount {
        get { return result.GlobalTuningSettingsCount; }
      }
      public global::Gazillion.NetStructLiveTuningSettingEnumValue GetGlobalTuningSettings(int index) {
        return result.GetGlobalTuningSettings(index);
      }
      public Builder SetGlobalTuningSettings(int index, global::Gazillion.NetStructLiveTuningSettingEnumValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.globalTuningSettings_[index] = value;
        return this;
      }
      public Builder SetGlobalTuningSettings(int index, global::Gazillion.NetStructLiveTuningSettingEnumValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.globalTuningSettings_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGlobalTuningSettings(global::Gazillion.NetStructLiveTuningSettingEnumValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.globalTuningSettings_.Add(value);
        return this;
      }
      public Builder AddGlobalTuningSettings(global::Gazillion.NetStructLiveTuningSettingEnumValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.globalTuningSettings_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGlobalTuningSettings(scg::IEnumerable<global::Gazillion.NetStructLiveTuningSettingEnumValue> values) {
        PrepareBuilder();
        result.globalTuningSettings_.Add(values);
        return this;
      }
      public Builder ClearGlobalTuningSettings() {
        PrepareBuilder();
        result.globalTuningSettings_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.NetStructLiveTuningSettingProtoEnumValue> PerPowerTuningSettingsList {
        get { return PrepareBuilder().perPowerTuningSettings_; }
      }
      public int PerPowerTuningSettingsCount {
        get { return result.PerPowerTuningSettingsCount; }
      }
      public global::Gazillion.NetStructLiveTuningSettingProtoEnumValue GetPerPowerTuningSettings(int index) {
        return result.GetPerPowerTuningSettings(index);
      }
      public Builder SetPerPowerTuningSettings(int index, global::Gazillion.NetStructLiveTuningSettingProtoEnumValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.perPowerTuningSettings_[index] = value;
        return this;
      }
      public Builder SetPerPowerTuningSettings(int index, global::Gazillion.NetStructLiveTuningSettingProtoEnumValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.perPowerTuningSettings_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPerPowerTuningSettings(global::Gazillion.NetStructLiveTuningSettingProtoEnumValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.perPowerTuningSettings_.Add(value);
        return this;
      }
      public Builder AddPerPowerTuningSettings(global::Gazillion.NetStructLiveTuningSettingProtoEnumValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.perPowerTuningSettings_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePerPowerTuningSettings(scg::IEnumerable<global::Gazillion.NetStructLiveTuningSettingProtoEnumValue> values) {
        PrepareBuilder();
        result.perPowerTuningSettings_.Add(values);
        return this;
      }
      public Builder ClearPerPowerTuningSettings() {
        PrepareBuilder();
        result.perPowerTuningSettings_.Clear();
        return this;
      }
    }
    static NetMessageLiveTuningUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUpdateSituationalTarget : pb::GeneratedMessage<NetMessageUpdateSituationalTarget, NetMessageUpdateSituationalTarget.Builder> {
    private NetMessageUpdateSituationalTarget() { }
    private static readonly NetMessageUpdateSituationalTarget defaultInstance = new NetMessageUpdateSituationalTarget().MakeReadOnly();
    private static readonly string[] _netMessageUpdateSituationalTargetFieldNames = new string[] { "addTarget", "powerOwnerId", "situationalPowerProtoId", "situationalTargetId" };
    private static readonly uint[] _netMessageUpdateSituationalTargetFieldTags = new uint[] { 32, 8, 16, 24 };
    public static NetMessageUpdateSituationalTarget DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUpdateSituationalTarget DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUpdateSituationalTarget ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUpdateSituationalTarget__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUpdateSituationalTarget, NetMessageUpdateSituationalTarget.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUpdateSituationalTarget__FieldAccessorTable; }
    }
    
    public const int PowerOwnerIdFieldNumber = 1;
    private bool hasPowerOwnerId;
    private ulong powerOwnerId_;
    public bool HasPowerOwnerId {
      get { return hasPowerOwnerId; }
    }
    public ulong PowerOwnerId {
      get { return powerOwnerId_; }
    }
    
    public const int SituationalPowerProtoIdFieldNumber = 2;
    private bool hasSituationalPowerProtoId;
    private ulong situationalPowerProtoId_;
    public bool HasSituationalPowerProtoId {
      get { return hasSituationalPowerProtoId; }
    }
    public ulong SituationalPowerProtoId {
      get { return situationalPowerProtoId_; }
    }
    
    public const int SituationalTargetIdFieldNumber = 3;
    private bool hasSituationalTargetId;
    private ulong situationalTargetId_;
    public bool HasSituationalTargetId {
      get { return hasSituationalTargetId; }
    }
    public ulong SituationalTargetId {
      get { return situationalTargetId_; }
    }
    
    public const int AddTargetFieldNumber = 4;
    private bool hasAddTarget;
    private bool addTarget_;
    public bool HasAddTarget {
      get { return hasAddTarget; }
    }
    public bool AddTarget {
      get { return addTarget_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPowerOwnerId) return false;
        if (!hasSituationalPowerProtoId) return false;
        if (!hasSituationalTargetId) return false;
        if (!hasAddTarget) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUpdateSituationalTargetFieldNames;
      if (hasPowerOwnerId) {
        output.WriteUInt64(1, field_names[1], PowerOwnerId);
      }
      if (hasSituationalPowerProtoId) {
        output.WriteUInt64(2, field_names[2], SituationalPowerProtoId);
      }
      if (hasSituationalTargetId) {
        output.WriteUInt64(3, field_names[3], SituationalTargetId);
      }
      if (hasAddTarget) {
        output.WriteBool(4, field_names[0], AddTarget);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPowerOwnerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PowerOwnerId);
      }
      if (hasSituationalPowerProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, SituationalPowerProtoId);
      }
      if (hasSituationalTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, SituationalTargetId);
      }
      if (hasAddTarget) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, AddTarget);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUpdateSituationalTarget ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUpdateSituationalTarget ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdateSituationalTarget ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUpdateSituationalTarget ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdateSituationalTarget ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUpdateSituationalTarget ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdateSituationalTarget ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUpdateSituationalTarget ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUpdateSituationalTarget ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUpdateSituationalTarget ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUpdateSituationalTarget MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUpdateSituationalTarget prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUpdateSituationalTarget, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUpdateSituationalTarget cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUpdateSituationalTarget result;
      
      private NetMessageUpdateSituationalTarget PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUpdateSituationalTarget original = result;
          result = new NetMessageUpdateSituationalTarget();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUpdateSituationalTarget MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUpdateSituationalTarget.Descriptor; }
      }
      
      public override NetMessageUpdateSituationalTarget DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUpdateSituationalTarget.DefaultInstance; }
      }
      
      public override NetMessageUpdateSituationalTarget BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUpdateSituationalTarget) {
          return MergeFrom((NetMessageUpdateSituationalTarget) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUpdateSituationalTarget other) {
        if (other == global::Gazillion.NetMessageUpdateSituationalTarget.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPowerOwnerId) {
          PowerOwnerId = other.PowerOwnerId;
        }
        if (other.HasSituationalPowerProtoId) {
          SituationalPowerProtoId = other.SituationalPowerProtoId;
        }
        if (other.HasSituationalTargetId) {
          SituationalTargetId = other.SituationalTargetId;
        }
        if (other.HasAddTarget) {
          AddTarget = other.AddTarget;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUpdateSituationalTargetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUpdateSituationalTargetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPowerOwnerId = input.ReadUInt64(ref result.powerOwnerId_);
              break;
            }
            case 16: {
              result.hasSituationalPowerProtoId = input.ReadUInt64(ref result.situationalPowerProtoId_);
              break;
            }
            case 24: {
              result.hasSituationalTargetId = input.ReadUInt64(ref result.situationalTargetId_);
              break;
            }
            case 32: {
              result.hasAddTarget = input.ReadBool(ref result.addTarget_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPowerOwnerId {
        get { return result.hasPowerOwnerId; }
      }
      public ulong PowerOwnerId {
        get { return result.PowerOwnerId; }
        set { SetPowerOwnerId(value); }
      }
      public Builder SetPowerOwnerId(ulong value) {
        PrepareBuilder();
        result.hasPowerOwnerId = true;
        result.powerOwnerId_ = value;
        return this;
      }
      public Builder ClearPowerOwnerId() {
        PrepareBuilder();
        result.hasPowerOwnerId = false;
        result.powerOwnerId_ = 0UL;
        return this;
      }
      
      public bool HasSituationalPowerProtoId {
        get { return result.hasSituationalPowerProtoId; }
      }
      public ulong SituationalPowerProtoId {
        get { return result.SituationalPowerProtoId; }
        set { SetSituationalPowerProtoId(value); }
      }
      public Builder SetSituationalPowerProtoId(ulong value) {
        PrepareBuilder();
        result.hasSituationalPowerProtoId = true;
        result.situationalPowerProtoId_ = value;
        return this;
      }
      public Builder ClearSituationalPowerProtoId() {
        PrepareBuilder();
        result.hasSituationalPowerProtoId = false;
        result.situationalPowerProtoId_ = 0UL;
        return this;
      }
      
      public bool HasSituationalTargetId {
        get { return result.hasSituationalTargetId; }
      }
      public ulong SituationalTargetId {
        get { return result.SituationalTargetId; }
        set { SetSituationalTargetId(value); }
      }
      public Builder SetSituationalTargetId(ulong value) {
        PrepareBuilder();
        result.hasSituationalTargetId = true;
        result.situationalTargetId_ = value;
        return this;
      }
      public Builder ClearSituationalTargetId() {
        PrepareBuilder();
        result.hasSituationalTargetId = false;
        result.situationalTargetId_ = 0UL;
        return this;
      }
      
      public bool HasAddTarget {
        get { return result.hasAddTarget; }
      }
      public bool AddTarget {
        get { return result.AddTarget; }
        set { SetAddTarget(value); }
      }
      public Builder SetAddTarget(bool value) {
        PrepareBuilder();
        result.hasAddTarget = true;
        result.addTarget_ = value;
        return this;
      }
      public Builder ClearAddTarget() {
        PrepareBuilder();
        result.hasAddTarget = false;
        result.addTarget_ = false;
        return this;
      }
    }
    static NetMessageUpdateSituationalTarget() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageConfirmStartNewGame : pb::GeneratedMessage<NetMessageConfirmStartNewGame, NetMessageConfirmStartNewGame.Builder> {
    private NetMessageConfirmStartNewGame() { }
    private static readonly NetMessageConfirmStartNewGame defaultInstance = new NetMessageConfirmStartNewGame().MakeReadOnly();
    private static readonly string[] _netMessageConfirmStartNewGameFieldNames = new string[] {  };
    private static readonly uint[] _netMessageConfirmStartNewGameFieldTags = new uint[] {  };
    public static NetMessageConfirmStartNewGame DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageConfirmStartNewGame DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageConfirmStartNewGame ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageConfirmStartNewGame__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageConfirmStartNewGame, NetMessageConfirmStartNewGame.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageConfirmStartNewGame__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageConfirmStartNewGameFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageConfirmStartNewGame ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageConfirmStartNewGame ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConfirmStartNewGame ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageConfirmStartNewGame ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConfirmStartNewGame ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageConfirmStartNewGame ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConfirmStartNewGame ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageConfirmStartNewGame ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageConfirmStartNewGame ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageConfirmStartNewGame ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageConfirmStartNewGame MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageConfirmStartNewGame prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageConfirmStartNewGame, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageConfirmStartNewGame cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageConfirmStartNewGame result;
      
      private NetMessageConfirmStartNewGame PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageConfirmStartNewGame original = result;
          result = new NetMessageConfirmStartNewGame();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageConfirmStartNewGame MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageConfirmStartNewGame.Descriptor; }
      }
      
      public override NetMessageConfirmStartNewGame DefaultInstanceForType {
        get { return global::Gazillion.NetMessageConfirmStartNewGame.DefaultInstance; }
      }
      
      public override NetMessageConfirmStartNewGame BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageConfirmStartNewGame) {
          return MergeFrom((NetMessageConfirmStartNewGame) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageConfirmStartNewGame other) {
        if (other == global::Gazillion.NetMessageConfirmStartNewGame.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageConfirmStartNewGameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageConfirmStartNewGameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageConfirmStartNewGame() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageModifyCommunityMemberFailure : pb::GeneratedMessage<NetMessageModifyCommunityMemberFailure, NetMessageModifyCommunityMemberFailure.Builder> {
    private NetMessageModifyCommunityMemberFailure() { }
    private static readonly NetMessageModifyCommunityMemberFailure defaultInstance = new NetMessageModifyCommunityMemberFailure().MakeReadOnly();
    private static readonly string[] _netMessageModifyCommunityMemberFailureFieldNames = new string[] { "circleId", "failureCode", "memberToModifyName", "operation" };
    private static readonly uint[] _netMessageModifyCommunityMemberFailureFieldTags = new uint[] { 24, 16, 10, 32 };
    public static NetMessageModifyCommunityMemberFailure DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageModifyCommunityMemberFailure DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageModifyCommunityMemberFailure ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageModifyCommunityMemberFailure__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageModifyCommunityMemberFailure, NetMessageModifyCommunityMemberFailure.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageModifyCommunityMemberFailure__FieldAccessorTable; }
    }
    
    public const int MemberToModifyNameFieldNumber = 1;
    private bool hasMemberToModifyName;
    private string memberToModifyName_ = "";
    public bool HasMemberToModifyName {
      get { return hasMemberToModifyName; }
    }
    public string MemberToModifyName {
      get { return memberToModifyName_; }
    }
    
    public const int FailureCodeFieldNumber = 2;
    private bool hasFailureCode;
    private global::Gazillion.CommunityModifyFailureCode failureCode_ = global::Gazillion.CommunityModifyFailureCode.eCMFC_Timeout;
    public bool HasFailureCode {
      get { return hasFailureCode; }
    }
    public global::Gazillion.CommunityModifyFailureCode FailureCode {
      get { return failureCode_; }
    }
    
    public const int CircleIdFieldNumber = 3;
    private bool hasCircleId;
    private ulong circleId_;
    public bool HasCircleId {
      get { return hasCircleId; }
    }
    public ulong CircleId {
      get { return circleId_; }
    }
    
    public const int OperationFieldNumber = 4;
    private bool hasOperation;
    private global::Gazillion.ModifyCircleOperation operation_ = global::Gazillion.ModifyCircleOperation.eMCO_Add;
    public bool HasOperation {
      get { return hasOperation; }
    }
    public global::Gazillion.ModifyCircleOperation Operation {
      get { return operation_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMemberToModifyName) return false;
        if (!hasFailureCode) return false;
        if (!hasCircleId) return false;
        if (!hasOperation) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageModifyCommunityMemberFailureFieldNames;
      if (hasMemberToModifyName) {
        output.WriteString(1, field_names[2], MemberToModifyName);
      }
      if (hasFailureCode) {
        output.WriteEnum(2, field_names[1], (int) FailureCode, FailureCode);
      }
      if (hasCircleId) {
        output.WriteUInt64(3, field_names[0], CircleId);
      }
      if (hasOperation) {
        output.WriteEnum(4, field_names[3], (int) Operation, Operation);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMemberToModifyName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, MemberToModifyName);
      }
      if (hasFailureCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) FailureCode);
      }
      if (hasCircleId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, CircleId);
      }
      if (hasOperation) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Operation);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageModifyCommunityMemberFailure ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageModifyCommunityMemberFailure ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModifyCommunityMemberFailure ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageModifyCommunityMemberFailure ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModifyCommunityMemberFailure ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageModifyCommunityMemberFailure ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModifyCommunityMemberFailure ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageModifyCommunityMemberFailure ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageModifyCommunityMemberFailure ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageModifyCommunityMemberFailure ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageModifyCommunityMemberFailure MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageModifyCommunityMemberFailure prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageModifyCommunityMemberFailure, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageModifyCommunityMemberFailure cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageModifyCommunityMemberFailure result;
      
      private NetMessageModifyCommunityMemberFailure PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageModifyCommunityMemberFailure original = result;
          result = new NetMessageModifyCommunityMemberFailure();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageModifyCommunityMemberFailure MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageModifyCommunityMemberFailure.Descriptor; }
      }
      
      public override NetMessageModifyCommunityMemberFailure DefaultInstanceForType {
        get { return global::Gazillion.NetMessageModifyCommunityMemberFailure.DefaultInstance; }
      }
      
      public override NetMessageModifyCommunityMemberFailure BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageModifyCommunityMemberFailure) {
          return MergeFrom((NetMessageModifyCommunityMemberFailure) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageModifyCommunityMemberFailure other) {
        if (other == global::Gazillion.NetMessageModifyCommunityMemberFailure.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMemberToModifyName) {
          MemberToModifyName = other.MemberToModifyName;
        }
        if (other.HasFailureCode) {
          FailureCode = other.FailureCode;
        }
        if (other.HasCircleId) {
          CircleId = other.CircleId;
        }
        if (other.HasOperation) {
          Operation = other.Operation;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageModifyCommunityMemberFailureFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageModifyCommunityMemberFailureFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMemberToModifyName = input.ReadString(ref result.memberToModifyName_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.failureCode_, out unknown)) {
                result.hasFailureCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 24: {
              result.hasCircleId = input.ReadUInt64(ref result.circleId_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.operation_, out unknown)) {
                result.hasOperation = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMemberToModifyName {
        get { return result.hasMemberToModifyName; }
      }
      public string MemberToModifyName {
        get { return result.MemberToModifyName; }
        set { SetMemberToModifyName(value); }
      }
      public Builder SetMemberToModifyName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMemberToModifyName = true;
        result.memberToModifyName_ = value;
        return this;
      }
      public Builder ClearMemberToModifyName() {
        PrepareBuilder();
        result.hasMemberToModifyName = false;
        result.memberToModifyName_ = "";
        return this;
      }
      
      public bool HasFailureCode {
       get { return result.hasFailureCode; }
      }
      public global::Gazillion.CommunityModifyFailureCode FailureCode {
        get { return result.FailureCode; }
        set { SetFailureCode(value); }
      }
      public Builder SetFailureCode(global::Gazillion.CommunityModifyFailureCode value) {
        PrepareBuilder();
        result.hasFailureCode = true;
        result.failureCode_ = value;
        return this;
      }
      public Builder ClearFailureCode() {
        PrepareBuilder();
        result.hasFailureCode = false;
        result.failureCode_ = global::Gazillion.CommunityModifyFailureCode.eCMFC_Timeout;
        return this;
      }
      
      public bool HasCircleId {
        get { return result.hasCircleId; }
      }
      public ulong CircleId {
        get { return result.CircleId; }
        set { SetCircleId(value); }
      }
      public Builder SetCircleId(ulong value) {
        PrepareBuilder();
        result.hasCircleId = true;
        result.circleId_ = value;
        return this;
      }
      public Builder ClearCircleId() {
        PrepareBuilder();
        result.hasCircleId = false;
        result.circleId_ = 0UL;
        return this;
      }
      
      public bool HasOperation {
       get { return result.hasOperation; }
      }
      public global::Gazillion.ModifyCircleOperation Operation {
        get { return result.Operation; }
        set { SetOperation(value); }
      }
      public Builder SetOperation(global::Gazillion.ModifyCircleOperation value) {
        PrepareBuilder();
        result.hasOperation = true;
        result.operation_ = value;
        return this;
      }
      public Builder ClearOperation() {
        PrepareBuilder();
        result.hasOperation = false;
        result.operation_ = global::Gazillion.ModifyCircleOperation.eMCO_Add;
        return this;
      }
    }
    static NetMessageModifyCommunityMemberFailure() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageModifyCommunityMember : pb::GeneratedMessage<NetMessageModifyCommunityMember, NetMessageModifyCommunityMember.Builder> {
    private NetMessageModifyCommunityMember() { }
    private static readonly NetMessageModifyCommunityMember defaultInstance = new NetMessageModifyCommunityMember().MakeReadOnly();
    private static readonly string[] _netMessageModifyCommunityMemberFieldNames = new string[] { "broadcast", "playerName", "systemCirclesBitSet" };
    private static readonly uint[] _netMessageModifyCommunityMemberFieldTags = new uint[] { 10, 18, 24 };
    public static NetMessageModifyCommunityMember DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageModifyCommunityMember DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageModifyCommunityMember ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageModifyCommunityMember__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageModifyCommunityMember, NetMessageModifyCommunityMember.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageModifyCommunityMember__FieldAccessorTable; }
    }
    
    public const int BroadcastFieldNumber = 1;
    private bool hasBroadcast;
    private global::Gazillion.CommunityMemberBroadcast broadcast_;
    public bool HasBroadcast {
      get { return hasBroadcast; }
    }
    public global::Gazillion.CommunityMemberBroadcast Broadcast {
      get { return broadcast_ ?? global::Gazillion.CommunityMemberBroadcast.DefaultInstance; }
    }
    
    public const int PlayerNameFieldNumber = 2;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
    }
    
    public const int SystemCirclesBitSetFieldNumber = 3;
    private bool hasSystemCirclesBitSet;
    private ulong systemCirclesBitSet_;
    public bool HasSystemCirclesBitSet {
      get { return hasSystemCirclesBitSet; }
    }
    public ulong SystemCirclesBitSet {
      get { return systemCirclesBitSet_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBroadcast) return false;
        if (!Broadcast.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageModifyCommunityMemberFieldNames;
      if (hasBroadcast) {
        output.WriteMessage(1, field_names[0], Broadcast);
      }
      if (hasPlayerName) {
        output.WriteString(2, field_names[1], PlayerName);
      }
      if (hasSystemCirclesBitSet) {
        output.WriteUInt64(3, field_names[2], SystemCirclesBitSet);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBroadcast) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Broadcast);
      }
      if (hasPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, PlayerName);
      }
      if (hasSystemCirclesBitSet) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, SystemCirclesBitSet);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageModifyCommunityMember ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageModifyCommunityMember ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModifyCommunityMember ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageModifyCommunityMember ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModifyCommunityMember ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageModifyCommunityMember ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModifyCommunityMember ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageModifyCommunityMember ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageModifyCommunityMember ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageModifyCommunityMember ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageModifyCommunityMember MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageModifyCommunityMember prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageModifyCommunityMember, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageModifyCommunityMember cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageModifyCommunityMember result;
      
      private NetMessageModifyCommunityMember PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageModifyCommunityMember original = result;
          result = new NetMessageModifyCommunityMember();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageModifyCommunityMember MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageModifyCommunityMember.Descriptor; }
      }
      
      public override NetMessageModifyCommunityMember DefaultInstanceForType {
        get { return global::Gazillion.NetMessageModifyCommunityMember.DefaultInstance; }
      }
      
      public override NetMessageModifyCommunityMember BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageModifyCommunityMember) {
          return MergeFrom((NetMessageModifyCommunityMember) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageModifyCommunityMember other) {
        if (other == global::Gazillion.NetMessageModifyCommunityMember.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBroadcast) {
          MergeBroadcast(other.Broadcast);
        }
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        if (other.HasSystemCirclesBitSet) {
          SystemCirclesBitSet = other.SystemCirclesBitSet;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageModifyCommunityMemberFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageModifyCommunityMemberFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.CommunityMemberBroadcast.Builder subBuilder = global::Gazillion.CommunityMemberBroadcast.CreateBuilder();
              if (result.hasBroadcast) {
                subBuilder.MergeFrom(Broadcast);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Broadcast = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
            case 24: {
              result.hasSystemCirclesBitSet = input.ReadUInt64(ref result.systemCirclesBitSet_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBroadcast {
       get { return result.hasBroadcast; }
      }
      public global::Gazillion.CommunityMemberBroadcast Broadcast {
        get { return result.Broadcast; }
        set { SetBroadcast(value); }
      }
      public Builder SetBroadcast(global::Gazillion.CommunityMemberBroadcast value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBroadcast = true;
        result.broadcast_ = value;
        return this;
      }
      public Builder SetBroadcast(global::Gazillion.CommunityMemberBroadcast.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBroadcast = true;
        result.broadcast_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBroadcast(global::Gazillion.CommunityMemberBroadcast value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBroadcast &&
            result.broadcast_ != global::Gazillion.CommunityMemberBroadcast.DefaultInstance) {
            result.broadcast_ = global::Gazillion.CommunityMemberBroadcast.CreateBuilder(result.broadcast_).MergeFrom(value).BuildPartial();
        } else {
          result.broadcast_ = value;
        }
        result.hasBroadcast = true;
        return this;
      }
      public Builder ClearBroadcast() {
        PrepareBuilder();
        result.hasBroadcast = false;
        result.broadcast_ = null;
        return this;
      }
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
      
      public bool HasSystemCirclesBitSet {
        get { return result.hasSystemCirclesBitSet; }
      }
      public ulong SystemCirclesBitSet {
        get { return result.SystemCirclesBitSet; }
        set { SetSystemCirclesBitSet(value); }
      }
      public Builder SetSystemCirclesBitSet(ulong value) {
        PrepareBuilder();
        result.hasSystemCirclesBitSet = true;
        result.systemCirclesBitSet_ = value;
        return this;
      }
      public Builder ClearSystemCirclesBitSet() {
        PrepareBuilder();
        result.hasSystemCirclesBitSet = false;
        result.systemCirclesBitSet_ = 0UL;
        return this;
      }
    }
    static NetMessageModifyCommunityMember() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageReceiveCommunityNotify : pb::GeneratedMessage<NetMessageReceiveCommunityNotify, NetMessageReceiveCommunityNotify.Builder> {
    private NetMessageReceiveCommunityNotify() { }
    private static readonly NetMessageReceiveCommunityNotify defaultInstance = new NetMessageReceiveCommunityNotify().MakeReadOnly();
    private static readonly string[] _netMessageReceiveCommunityNotifyFieldNames = new string[] { "notify" };
    private static readonly uint[] _netMessageReceiveCommunityNotifyFieldTags = new uint[] { 10 };
    public static NetMessageReceiveCommunityNotify DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageReceiveCommunityNotify DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageReceiveCommunityNotify ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReceiveCommunityNotify__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageReceiveCommunityNotify, NetMessageReceiveCommunityNotify.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReceiveCommunityNotify__FieldAccessorTable; }
    }
    
    public const int NotifyFieldNumber = 1;
    private bool hasNotify;
    private global::Gazillion.CommunityNotify notify_;
    public bool HasNotify {
      get { return hasNotify; }
    }
    public global::Gazillion.CommunityNotify Notify {
      get { return notify_ ?? global::Gazillion.CommunityNotify.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasNotify) return false;
        if (!Notify.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageReceiveCommunityNotifyFieldNames;
      if (hasNotify) {
        output.WriteMessage(1, field_names[0], Notify);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasNotify) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Notify);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageReceiveCommunityNotify ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReceiveCommunityNotify ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReceiveCommunityNotify ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReceiveCommunityNotify ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReceiveCommunityNotify ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReceiveCommunityNotify ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReceiveCommunityNotify ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageReceiveCommunityNotify ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageReceiveCommunityNotify ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReceiveCommunityNotify ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageReceiveCommunityNotify MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageReceiveCommunityNotify prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageReceiveCommunityNotify, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageReceiveCommunityNotify cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageReceiveCommunityNotify result;
      
      private NetMessageReceiveCommunityNotify PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageReceiveCommunityNotify original = result;
          result = new NetMessageReceiveCommunityNotify();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageReceiveCommunityNotify MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageReceiveCommunityNotify.Descriptor; }
      }
      
      public override NetMessageReceiveCommunityNotify DefaultInstanceForType {
        get { return global::Gazillion.NetMessageReceiveCommunityNotify.DefaultInstance; }
      }
      
      public override NetMessageReceiveCommunityNotify BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageReceiveCommunityNotify) {
          return MergeFrom((NetMessageReceiveCommunityNotify) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageReceiveCommunityNotify other) {
        if (other == global::Gazillion.NetMessageReceiveCommunityNotify.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNotify) {
          MergeNotify(other.Notify);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageReceiveCommunityNotifyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageReceiveCommunityNotifyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.CommunityNotify.Builder subBuilder = global::Gazillion.CommunityNotify.CreateBuilder();
              if (result.hasNotify) {
                subBuilder.MergeFrom(Notify);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Notify = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasNotify {
       get { return result.hasNotify; }
      }
      public global::Gazillion.CommunityNotify Notify {
        get { return result.Notify; }
        set { SetNotify(value); }
      }
      public Builder SetNotify(global::Gazillion.CommunityNotify value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNotify = true;
        result.notify_ = value;
        return this;
      }
      public Builder SetNotify(global::Gazillion.CommunityNotify.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNotify = true;
        result.notify_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNotify(global::Gazillion.CommunityNotify value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNotify &&
            result.notify_ != global::Gazillion.CommunityNotify.DefaultInstance) {
            result.notify_ = global::Gazillion.CommunityNotify.CreateBuilder(result.notify_).MergeFrom(value).BuildPartial();
        } else {
          result.notify_ = value;
        }
        result.hasNotify = true;
        return this;
      }
      public Builder ClearNotify() {
        PrepareBuilder();
        result.hasNotify = false;
        result.notify_ = null;
        return this;
      }
    }
    static NetMessageReceiveCommunityNotify() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageItemBindingChanged : pb::GeneratedMessage<NetMessageItemBindingChanged, NetMessageItemBindingChanged.Builder> {
    private NetMessageItemBindingChanged() { }
    private static readonly NetMessageItemBindingChanged defaultInstance = new NetMessageItemBindingChanged().MakeReadOnly();
    private static readonly string[] _netMessageItemBindingChangedFieldNames = new string[] { "accountBound", "avatarProtoId", "itemId" };
    private static readonly uint[] _netMessageItemBindingChangedFieldTags = new uint[] { 16, 24, 8 };
    public static NetMessageItemBindingChanged DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageItemBindingChanged DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageItemBindingChanged ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageItemBindingChanged__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageItemBindingChanged, NetMessageItemBindingChanged.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageItemBindingChanged__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private ulong itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public ulong ItemId {
      get { return itemId_; }
    }
    
    public const int AccountBoundFieldNumber = 2;
    private bool hasAccountBound;
    private bool accountBound_;
    public bool HasAccountBound {
      get { return hasAccountBound; }
    }
    public bool AccountBound {
      get { return accountBound_; }
    }
    
    public const int AvatarProtoIdFieldNumber = 3;
    private bool hasAvatarProtoId;
    private ulong avatarProtoId_;
    public bool HasAvatarProtoId {
      get { return hasAvatarProtoId; }
    }
    public ulong AvatarProtoId {
      get { return avatarProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemId) return false;
        if (!hasAccountBound) return false;
        if (!hasAvatarProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageItemBindingChangedFieldNames;
      if (hasItemId) {
        output.WriteUInt64(1, field_names[2], ItemId);
      }
      if (hasAccountBound) {
        output.WriteBool(2, field_names[0], AccountBound);
      }
      if (hasAvatarProtoId) {
        output.WriteUInt64(3, field_names[1], AvatarProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemId);
      }
      if (hasAccountBound) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, AccountBound);
      }
      if (hasAvatarProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, AvatarProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageItemBindingChanged ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageItemBindingChanged ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageItemBindingChanged ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageItemBindingChanged ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageItemBindingChanged ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageItemBindingChanged ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageItemBindingChanged ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageItemBindingChanged ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageItemBindingChanged ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageItemBindingChanged ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageItemBindingChanged MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageItemBindingChanged prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageItemBindingChanged, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageItemBindingChanged cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageItemBindingChanged result;
      
      private NetMessageItemBindingChanged PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageItemBindingChanged original = result;
          result = new NetMessageItemBindingChanged();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageItemBindingChanged MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageItemBindingChanged.Descriptor; }
      }
      
      public override NetMessageItemBindingChanged DefaultInstanceForType {
        get { return global::Gazillion.NetMessageItemBindingChanged.DefaultInstance; }
      }
      
      public override NetMessageItemBindingChanged BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageItemBindingChanged) {
          return MergeFrom((NetMessageItemBindingChanged) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageItemBindingChanged other) {
        if (other == global::Gazillion.NetMessageItemBindingChanged.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        if (other.HasAccountBound) {
          AccountBound = other.AccountBound;
        }
        if (other.HasAvatarProtoId) {
          AvatarProtoId = other.AvatarProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageItemBindingChangedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageItemBindingChangedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadUInt64(ref result.itemId_);
              break;
            }
            case 16: {
              result.hasAccountBound = input.ReadBool(ref result.accountBound_);
              break;
            }
            case 24: {
              result.hasAvatarProtoId = input.ReadUInt64(ref result.avatarProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public ulong ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(ulong value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0UL;
        return this;
      }
      
      public bool HasAccountBound {
        get { return result.hasAccountBound; }
      }
      public bool AccountBound {
        get { return result.AccountBound; }
        set { SetAccountBound(value); }
      }
      public Builder SetAccountBound(bool value) {
        PrepareBuilder();
        result.hasAccountBound = true;
        result.accountBound_ = value;
        return this;
      }
      public Builder ClearAccountBound() {
        PrepareBuilder();
        result.hasAccountBound = false;
        result.accountBound_ = false;
        return this;
      }
      
      public bool HasAvatarProtoId {
        get { return result.hasAvatarProtoId; }
      }
      public ulong AvatarProtoId {
        get { return result.AvatarProtoId; }
        set { SetAvatarProtoId(value); }
      }
      public Builder SetAvatarProtoId(ulong value) {
        PrepareBuilder();
        result.hasAvatarProtoId = true;
        result.avatarProtoId_ = value;
        return this;
      }
      public Builder ClearAvatarProtoId() {
        PrepareBuilder();
        result.hasAvatarProtoId = false;
        result.avatarProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageItemBindingChanged() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageItemsHeldForRecovery : pb::GeneratedMessage<NetMessageItemsHeldForRecovery, NetMessageItemsHeldForRecovery.Builder> {
    private NetMessageItemsHeldForRecovery() { }
    private static readonly NetMessageItemsHeldForRecovery defaultInstance = new NetMessageItemsHeldForRecovery().MakeReadOnly();
    private static readonly string[] _netMessageItemsHeldForRecoveryFieldNames = new string[] { "itemIds" };
    private static readonly uint[] _netMessageItemsHeldForRecoveryFieldTags = new uint[] { 8 };
    public static NetMessageItemsHeldForRecovery DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageItemsHeldForRecovery DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageItemsHeldForRecovery ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageItemsHeldForRecovery__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageItemsHeldForRecovery, NetMessageItemsHeldForRecovery.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageItemsHeldForRecovery__FieldAccessorTable; }
    }
    
    public const int ItemIdsFieldNumber = 1;
    private pbc::PopsicleList<ulong> itemIds_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> ItemIdsList {
      get { return pbc::Lists.AsReadOnly(itemIds_); }
    }
    public int ItemIdsCount {
      get { return itemIds_.Count; }
    }
    public ulong GetItemIds(int index) {
      return itemIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageItemsHeldForRecoveryFieldNames;
      if (itemIds_.Count > 0) {
        output.WriteUInt64Array(1, field_names[0], itemIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        foreach (ulong element in ItemIdsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * itemIds_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageItemsHeldForRecovery ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageItemsHeldForRecovery ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageItemsHeldForRecovery ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageItemsHeldForRecovery ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageItemsHeldForRecovery ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageItemsHeldForRecovery ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageItemsHeldForRecovery ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageItemsHeldForRecovery ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageItemsHeldForRecovery ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageItemsHeldForRecovery ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageItemsHeldForRecovery MakeReadOnly() {
      itemIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageItemsHeldForRecovery prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageItemsHeldForRecovery, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageItemsHeldForRecovery cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageItemsHeldForRecovery result;
      
      private NetMessageItemsHeldForRecovery PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageItemsHeldForRecovery original = result;
          result = new NetMessageItemsHeldForRecovery();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageItemsHeldForRecovery MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageItemsHeldForRecovery.Descriptor; }
      }
      
      public override NetMessageItemsHeldForRecovery DefaultInstanceForType {
        get { return global::Gazillion.NetMessageItemsHeldForRecovery.DefaultInstance; }
      }
      
      public override NetMessageItemsHeldForRecovery BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageItemsHeldForRecovery) {
          return MergeFrom((NetMessageItemsHeldForRecovery) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageItemsHeldForRecovery other) {
        if (other == global::Gazillion.NetMessageItemsHeldForRecovery.DefaultInstance) return this;
        PrepareBuilder();
        if (other.itemIds_.Count != 0) {
          result.itemIds_.Add(other.itemIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageItemsHeldForRecoveryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageItemsHeldForRecoveryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt64Array(tag, field_name, result.itemIds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<ulong> ItemIdsList {
        get { return PrepareBuilder().itemIds_; }
      }
      public int ItemIdsCount {
        get { return result.ItemIdsCount; }
      }
      public ulong GetItemIds(int index) {
        return result.GetItemIds(index);
      }
      public Builder SetItemIds(int index, ulong value) {
        PrepareBuilder();
        result.itemIds_[index] = value;
        return this;
      }
      public Builder AddItemIds(ulong value) {
        PrepareBuilder();
        result.itemIds_.Add(value);
        return this;
      }
      public Builder AddRangeItemIds(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.itemIds_.Add(values);
        return this;
      }
      public Builder ClearItemIds() {
        PrepareBuilder();
        result.itemIds_.Clear();
        return this;
      }
    }
    static NetMessageItemsHeldForRecovery() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageItemRecovered : pb::GeneratedMessage<NetMessageItemRecovered, NetMessageItemRecovered.Builder> {
    private NetMessageItemRecovered() { }
    private static readonly NetMessageItemRecovered defaultInstance = new NetMessageItemRecovered().MakeReadOnly();
    private static readonly string[] _netMessageItemRecoveredFieldNames = new string[] { "itemId" };
    private static readonly uint[] _netMessageItemRecoveredFieldTags = new uint[] { 8 };
    public static NetMessageItemRecovered DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageItemRecovered DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageItemRecovered ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageItemRecovered__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageItemRecovered, NetMessageItemRecovered.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageItemRecovered__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private ulong itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public ulong ItemId {
      get { return itemId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageItemRecoveredFieldNames;
      if (hasItemId) {
        output.WriteUInt64(1, field_names[0], ItemId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageItemRecovered ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageItemRecovered ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageItemRecovered ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageItemRecovered ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageItemRecovered ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageItemRecovered ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageItemRecovered ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageItemRecovered ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageItemRecovered ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageItemRecovered ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageItemRecovered MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageItemRecovered prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageItemRecovered, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageItemRecovered cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageItemRecovered result;
      
      private NetMessageItemRecovered PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageItemRecovered original = result;
          result = new NetMessageItemRecovered();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageItemRecovered MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageItemRecovered.Descriptor; }
      }
      
      public override NetMessageItemRecovered DefaultInstanceForType {
        get { return global::Gazillion.NetMessageItemRecovered.DefaultInstance; }
      }
      
      public override NetMessageItemRecovered BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageItemRecovered) {
          return MergeFrom((NetMessageItemRecovered) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageItemRecovered other) {
        if (other == global::Gazillion.NetMessageItemRecovered.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageItemRecoveredFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageItemRecoveredFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadUInt64(ref result.itemId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public ulong ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(ulong value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0UL;
        return this;
      }
    }
    static NetMessageItemRecovered() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSwitchToPendingNewAvatarFailed : pb::GeneratedMessage<NetMessageSwitchToPendingNewAvatarFailed, NetMessageSwitchToPendingNewAvatarFailed.Builder> {
    private NetMessageSwitchToPendingNewAvatarFailed() { }
    private static readonly NetMessageSwitchToPendingNewAvatarFailed defaultInstance = new NetMessageSwitchToPendingNewAvatarFailed().MakeReadOnly();
    private static readonly string[] _netMessageSwitchToPendingNewAvatarFailedFieldNames = new string[] { "invalidLocation", "targetId" };
    private static readonly uint[] _netMessageSwitchToPendingNewAvatarFailedFieldTags = new uint[] { 16, 8 };
    public static NetMessageSwitchToPendingNewAvatarFailed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSwitchToPendingNewAvatarFailed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSwitchToPendingNewAvatarFailed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSwitchToPendingNewAvatarFailed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSwitchToPendingNewAvatarFailed, NetMessageSwitchToPendingNewAvatarFailed.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSwitchToPendingNewAvatarFailed__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public const int InvalidLocationFieldNumber = 2;
    private bool hasInvalidLocation;
    private bool invalidLocation_;
    public bool HasInvalidLocation {
      get { return hasInvalidLocation; }
    }
    public bool InvalidLocation {
      get { return invalidLocation_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        if (!hasInvalidLocation) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSwitchToPendingNewAvatarFailedFieldNames;
      if (hasTargetId) {
        output.WriteUInt64(1, field_names[1], TargetId);
      }
      if (hasInvalidLocation) {
        output.WriteBool(2, field_names[0], InvalidLocation);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetId);
      }
      if (hasInvalidLocation) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, InvalidLocation);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSwitchToPendingNewAvatarFailed MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSwitchToPendingNewAvatarFailed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSwitchToPendingNewAvatarFailed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSwitchToPendingNewAvatarFailed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSwitchToPendingNewAvatarFailed result;
      
      private NetMessageSwitchToPendingNewAvatarFailed PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSwitchToPendingNewAvatarFailed original = result;
          result = new NetMessageSwitchToPendingNewAvatarFailed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSwitchToPendingNewAvatarFailed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSwitchToPendingNewAvatarFailed.Descriptor; }
      }
      
      public override NetMessageSwitchToPendingNewAvatarFailed DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSwitchToPendingNewAvatarFailed.DefaultInstance; }
      }
      
      public override NetMessageSwitchToPendingNewAvatarFailed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSwitchToPendingNewAvatarFailed) {
          return MergeFrom((NetMessageSwitchToPendingNewAvatarFailed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSwitchToPendingNewAvatarFailed other) {
        if (other == global::Gazillion.NetMessageSwitchToPendingNewAvatarFailed.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        if (other.HasInvalidLocation) {
          InvalidLocation = other.InvalidLocation;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSwitchToPendingNewAvatarFailedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSwitchToPendingNewAvatarFailedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
            case 16: {
              result.hasInvalidLocation = input.ReadBool(ref result.invalidLocation_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
      
      public bool HasInvalidLocation {
        get { return result.hasInvalidLocation; }
      }
      public bool InvalidLocation {
        get { return result.InvalidLocation; }
        set { SetInvalidLocation(value); }
      }
      public Builder SetInvalidLocation(bool value) {
        PrepareBuilder();
        result.hasInvalidLocation = true;
        result.invalidLocation_ = value;
        return this;
      }
      public Builder ClearInvalidLocation() {
        PrepareBuilder();
        result.hasInvalidLocation = false;
        result.invalidLocation_ = false;
        return this;
      }
    }
    static NetMessageSwitchToPendingNewAvatarFailed() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGuildMessageToClient : pb::GeneratedMessage<NetMessageGuildMessageToClient, NetMessageGuildMessageToClient.Builder> {
    private NetMessageGuildMessageToClient() { }
    private static readonly NetMessageGuildMessageToClient defaultInstance = new NetMessageGuildMessageToClient().MakeReadOnly();
    private static readonly string[] _netMessageGuildMessageToClientFieldNames = new string[] { "messages" };
    private static readonly uint[] _netMessageGuildMessageToClientFieldTags = new uint[] { 10 };
    public static NetMessageGuildMessageToClient DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGuildMessageToClient DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGuildMessageToClient ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGuildMessageToClient__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGuildMessageToClient, NetMessageGuildMessageToClient.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGuildMessageToClient__FieldAccessorTable; }
    }
    
    public const int MessagesFieldNumber = 1;
    private bool hasMessages;
    private global::Gazillion.GuildMessageSetToClient messages_;
    public bool HasMessages {
      get { return hasMessages; }
    }
    public global::Gazillion.GuildMessageSetToClient Messages {
      get { return messages_ ?? global::Gazillion.GuildMessageSetToClient.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessages) return false;
        if (!Messages.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGuildMessageToClientFieldNames;
      if (hasMessages) {
        output.WriteMessage(1, field_names[0], Messages);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMessages) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Messages);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGuildMessageToClient ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGuildMessageToClient ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGuildMessageToClient ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGuildMessageToClient ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGuildMessageToClient ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGuildMessageToClient ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGuildMessageToClient ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGuildMessageToClient ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGuildMessageToClient ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGuildMessageToClient ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGuildMessageToClient MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGuildMessageToClient prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGuildMessageToClient, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGuildMessageToClient cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGuildMessageToClient result;
      
      private NetMessageGuildMessageToClient PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGuildMessageToClient original = result;
          result = new NetMessageGuildMessageToClient();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGuildMessageToClient MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGuildMessageToClient.Descriptor; }
      }
      
      public override NetMessageGuildMessageToClient DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGuildMessageToClient.DefaultInstance; }
      }
      
      public override NetMessageGuildMessageToClient BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGuildMessageToClient) {
          return MergeFrom((NetMessageGuildMessageToClient) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGuildMessageToClient other) {
        if (other == global::Gazillion.NetMessageGuildMessageToClient.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessages) {
          MergeMessages(other.Messages);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGuildMessageToClientFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGuildMessageToClientFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.GuildMessageSetToClient.Builder subBuilder = global::Gazillion.GuildMessageSetToClient.CreateBuilder();
              if (result.hasMessages) {
                subBuilder.MergeFrom(Messages);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Messages = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessages {
       get { return result.hasMessages; }
      }
      public global::Gazillion.GuildMessageSetToClient Messages {
        get { return result.Messages; }
        set { SetMessages(value); }
      }
      public Builder SetMessages(global::Gazillion.GuildMessageSetToClient value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessages = true;
        result.messages_ = value;
        return this;
      }
      public Builder SetMessages(global::Gazillion.GuildMessageSetToClient.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMessages = true;
        result.messages_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMessages(global::Gazillion.GuildMessageSetToClient value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMessages &&
            result.messages_ != global::Gazillion.GuildMessageSetToClient.DefaultInstance) {
            result.messages_ = global::Gazillion.GuildMessageSetToClient.CreateBuilder(result.messages_).MergeFrom(value).BuildPartial();
        } else {
          result.messages_ = value;
        }
        result.hasMessages = true;
        return this;
      }
      public Builder ClearMessages() {
        PrepareBuilder();
        result.hasMessages = false;
        result.messages_ = null;
        return this;
      }
    }
    static NetMessageGuildMessageToClient() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityGuildInfo : pb::GeneratedMessage<NetMessageEntityGuildInfo, NetMessageEntityGuildInfo.Builder> {
    private NetMessageEntityGuildInfo() { }
    private static readonly NetMessageEntityGuildInfo defaultInstance = new NetMessageEntityGuildInfo().MakeReadOnly();
    private static readonly string[] _netMessageEntityGuildInfoFieldNames = new string[] { "debugEntityServerString", "entityId", "guildId", "guildMembership", "guildName" };
    private static readonly uint[] _netMessageEntityGuildInfoFieldTags = new uint[] { 42, 8, 16, 32, 26 };
    public static NetMessageEntityGuildInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityGuildInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityGuildInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityGuildInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityGuildInfo, NetMessageEntityGuildInfo.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityGuildInfo__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public const int GuildIdFieldNumber = 2;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int GuildNameFieldNumber = 3;
    private bool hasGuildName;
    private string guildName_ = "";
    public bool HasGuildName {
      get { return hasGuildName; }
    }
    public string GuildName {
      get { return guildName_; }
    }
    
    public const int GuildMembershipFieldNumber = 4;
    private bool hasGuildMembership;
    private global::Gazillion.GuildMembership guildMembership_ = global::Gazillion.GuildMembership.eGMNone;
    public bool HasGuildMembership {
      get { return hasGuildMembership; }
    }
    public global::Gazillion.GuildMembership GuildMembership {
      get { return guildMembership_; }
    }
    
    public const int DebugEntityServerStringFieldNumber = 5;
    private bool hasDebugEntityServerString;
    private string debugEntityServerString_ = "";
    public bool HasDebugEntityServerString {
      get { return hasDebugEntityServerString; }
    }
    public string DebugEntityServerString {
      get { return debugEntityServerString_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasGuildId) return false;
        if (!hasGuildName) return false;
        if (!hasGuildMembership) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityGuildInfoFieldNames;
      if (hasEntityId) {
        output.WriteUInt64(1, field_names[1], EntityId);
      }
      if (hasGuildId) {
        output.WriteUInt64(2, field_names[2], GuildId);
      }
      if (hasGuildName) {
        output.WriteString(3, field_names[4], GuildName);
      }
      if (hasGuildMembership) {
        output.WriteEnum(4, field_names[3], (int) GuildMembership, GuildMembership);
      }
      if (hasDebugEntityServerString) {
        output.WriteString(5, field_names[0], DebugEntityServerString);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityId);
      }
      if (hasGuildId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, GuildId);
      }
      if (hasGuildName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, GuildName);
      }
      if (hasGuildMembership) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) GuildMembership);
      }
      if (hasDebugEntityServerString) {
        size += pb::CodedOutputStream.ComputeStringSize(5, DebugEntityServerString);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityGuildInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityGuildInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityGuildInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityGuildInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityGuildInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityGuildInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityGuildInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityGuildInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityGuildInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityGuildInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityGuildInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityGuildInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityGuildInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityGuildInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityGuildInfo result;
      
      private NetMessageEntityGuildInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityGuildInfo original = result;
          result = new NetMessageEntityGuildInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityGuildInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityGuildInfo.Descriptor; }
      }
      
      public override NetMessageEntityGuildInfo DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityGuildInfo.DefaultInstance; }
      }
      
      public override NetMessageEntityGuildInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityGuildInfo) {
          return MergeFrom((NetMessageEntityGuildInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityGuildInfo other) {
        if (other == global::Gazillion.NetMessageEntityGuildInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasGuildName) {
          GuildName = other.GuildName;
        }
        if (other.HasGuildMembership) {
          GuildMembership = other.GuildMembership;
        }
        if (other.HasDebugEntityServerString) {
          DebugEntityServerString = other.DebugEntityServerString;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityGuildInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityGuildInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
            case 16: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 26: {
              result.hasGuildName = input.ReadString(ref result.guildName_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.guildMembership_, out unknown)) {
                result.hasGuildMembership = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
            case 42: {
              result.hasDebugEntityServerString = input.ReadString(ref result.debugEntityServerString_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasGuildName {
        get { return result.hasGuildName; }
      }
      public string GuildName {
        get { return result.GuildName; }
        set { SetGuildName(value); }
      }
      public Builder SetGuildName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildName = true;
        result.guildName_ = value;
        return this;
      }
      public Builder ClearGuildName() {
        PrepareBuilder();
        result.hasGuildName = false;
        result.guildName_ = "";
        return this;
      }
      
      public bool HasGuildMembership {
       get { return result.hasGuildMembership; }
      }
      public global::Gazillion.GuildMembership GuildMembership {
        get { return result.GuildMembership; }
        set { SetGuildMembership(value); }
      }
      public Builder SetGuildMembership(global::Gazillion.GuildMembership value) {
        PrepareBuilder();
        result.hasGuildMembership = true;
        result.guildMembership_ = value;
        return this;
      }
      public Builder ClearGuildMembership() {
        PrepareBuilder();
        result.hasGuildMembership = false;
        result.guildMembership_ = global::Gazillion.GuildMembership.eGMNone;
        return this;
      }
      
      public bool HasDebugEntityServerString {
        get { return result.hasDebugEntityServerString; }
      }
      public string DebugEntityServerString {
        get { return result.DebugEntityServerString; }
        set { SetDebugEntityServerString(value); }
      }
      public Builder SetDebugEntityServerString(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDebugEntityServerString = true;
        result.debugEntityServerString_ = value;
        return this;
      }
      public Builder ClearDebugEntityServerString() {
        PrepareBuilder();
        result.hasDebugEntityServerString = false;
        result.debugEntityServerString_ = "";
        return this;
      }
    }
    static NetMessageEntityGuildInfo() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLeaveGuild : pb::GeneratedMessage<NetMessageLeaveGuild, NetMessageLeaveGuild.Builder> {
    private NetMessageLeaveGuild() { }
    private static readonly NetMessageLeaveGuild defaultInstance = new NetMessageLeaveGuild().MakeReadOnly();
    private static readonly string[] _netMessageLeaveGuildFieldNames = new string[] { "guildId", "initiatingPlayerName", "reason" };
    private static readonly uint[] _netMessageLeaveGuildFieldTags = new uint[] { 8, 26, 16 };
    public static NetMessageLeaveGuild DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLeaveGuild DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLeaveGuild ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLeaveGuild__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLeaveGuild, NetMessageLeaveGuild.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLeaveGuild__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int ReasonFieldNumber = 2;
    private bool hasReason;
    private global::Gazillion.GuildLeaveReason reason_ = global::Gazillion.GuildLeaveReason.eGLR_Left;
    public bool HasReason {
      get { return hasReason; }
    }
    public global::Gazillion.GuildLeaveReason Reason {
      get { return reason_; }
    }
    
    public const int InitiatingPlayerNameFieldNumber = 3;
    private bool hasInitiatingPlayerName;
    private string initiatingPlayerName_ = "";
    public bool HasInitiatingPlayerName {
      get { return hasInitiatingPlayerName; }
    }
    public string InitiatingPlayerName {
      get { return initiatingPlayerName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasReason) return false;
        if (!hasInitiatingPlayerName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLeaveGuildFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasReason) {
        output.WriteEnum(2, field_names[2], (int) Reason, Reason);
      }
      if (hasInitiatingPlayerName) {
        output.WriteString(3, field_names[1], InitiatingPlayerName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGuildId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Reason);
      }
      if (hasInitiatingPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, InitiatingPlayerName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLeaveGuild ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaveGuild ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaveGuild ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaveGuild ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaveGuild ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaveGuild ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaveGuild ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLeaveGuild ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLeaveGuild ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaveGuild ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLeaveGuild MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLeaveGuild prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLeaveGuild, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLeaveGuild cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLeaveGuild result;
      
      private NetMessageLeaveGuild PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLeaveGuild original = result;
          result = new NetMessageLeaveGuild();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLeaveGuild MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLeaveGuild.Descriptor; }
      }
      
      public override NetMessageLeaveGuild DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLeaveGuild.DefaultInstance; }
      }
      
      public override NetMessageLeaveGuild BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLeaveGuild) {
          return MergeFrom((NetMessageLeaveGuild) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLeaveGuild other) {
        if (other == global::Gazillion.NetMessageLeaveGuild.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        if (other.HasInitiatingPlayerName) {
          InitiatingPlayerName = other.InitiatingPlayerName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLeaveGuildFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLeaveGuildFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.reason_, out unknown)) {
                result.hasReason = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              result.hasInitiatingPlayerName = input.ReadString(ref result.initiatingPlayerName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasReason {
       get { return result.hasReason; }
      }
      public global::Gazillion.GuildLeaveReason Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(global::Gazillion.GuildLeaveReason value) {
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = global::Gazillion.GuildLeaveReason.eGLR_Left;
        return this;
      }
      
      public bool HasInitiatingPlayerName {
        get { return result.hasInitiatingPlayerName; }
      }
      public string InitiatingPlayerName {
        get { return result.InitiatingPlayerName; }
        set { SetInitiatingPlayerName(value); }
      }
      public Builder SetInitiatingPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInitiatingPlayerName = true;
        result.initiatingPlayerName_ = value;
        return this;
      }
      public Builder ClearInitiatingPlayerName() {
        PrepareBuilder();
        result.hasInitiatingPlayerName = false;
        result.initiatingPlayerName_ = "";
        return this;
      }
    }
    static NetMessageLeaveGuild() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGuildSystemMessage : pb::GeneratedMessage<NetMessageGuildSystemMessage, NetMessageGuildSystemMessage.Builder> {
    private NetMessageGuildSystemMessage() { }
    private static readonly NetMessageGuildSystemMessage defaultInstance = new NetMessageGuildSystemMessage().MakeReadOnly();
    private static readonly string[] _netMessageGuildSystemMessageFieldNames = new string[] { "code" };
    private static readonly uint[] _netMessageGuildSystemMessageFieldTags = new uint[] { 8 };
    public static NetMessageGuildSystemMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGuildSystemMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGuildSystemMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGuildSystemMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGuildSystemMessage, NetMessageGuildSystemMessage.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGuildSystemMessage__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private global::Gazillion.GuildMessageCode code_ = global::Gazillion.GuildMessageCode.eGMC_None;
    public bool HasCode {
      get { return hasCode; }
    }
    public global::Gazillion.GuildMessageCode Code {
      get { return code_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGuildSystemMessageFieldNames;
      if (hasCode) {
        output.WriteEnum(1, field_names[0], (int) Code, Code);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGuildSystemMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGuildSystemMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGuildSystemMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGuildSystemMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGuildSystemMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGuildSystemMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGuildSystemMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGuildSystemMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGuildSystemMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGuildSystemMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGuildSystemMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGuildSystemMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGuildSystemMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGuildSystemMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGuildSystemMessage result;
      
      private NetMessageGuildSystemMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGuildSystemMessage original = result;
          result = new NetMessageGuildSystemMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGuildSystemMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGuildSystemMessage.Descriptor; }
      }
      
      public override NetMessageGuildSystemMessage DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGuildSystemMessage.DefaultInstance; }
      }
      
      public override NetMessageGuildSystemMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGuildSystemMessage) {
          return MergeFrom((NetMessageGuildSystemMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGuildSystemMessage other) {
        if (other == global::Gazillion.NetMessageGuildSystemMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGuildSystemMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGuildSystemMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.code_, out unknown)) {
                result.hasCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
       get { return result.hasCode; }
      }
      public global::Gazillion.GuildMessageCode Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(global::Gazillion.GuildMessageCode value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = global::Gazillion.GuildMessageCode.eGMC_None;
        return this;
      }
    }
    static NetMessageGuildSystemMessage() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRegionDifficultyChange : pb::GeneratedMessage<NetMessageRegionDifficultyChange, NetMessageRegionDifficultyChange.Builder> {
    private NetMessageRegionDifficultyChange() { }
    private static readonly NetMessageRegionDifficultyChange defaultInstance = new NetMessageRegionDifficultyChange().MakeReadOnly();
    private static readonly string[] _netMessageRegionDifficultyChangeFieldNames = new string[] { "difficultyIndex" };
    private static readonly uint[] _netMessageRegionDifficultyChangeFieldTags = new uint[] { 8 };
    public static NetMessageRegionDifficultyChange DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRegionDifficultyChange DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRegionDifficultyChange ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionDifficultyChange__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRegionDifficultyChange, NetMessageRegionDifficultyChange.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionDifficultyChange__FieldAccessorTable; }
    }
    
    public const int DifficultyIndexFieldNumber = 1;
    private bool hasDifficultyIndex;
    private ulong difficultyIndex_;
    public bool HasDifficultyIndex {
      get { return hasDifficultyIndex; }
    }
    public ulong DifficultyIndex {
      get { return difficultyIndex_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDifficultyIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRegionDifficultyChangeFieldNames;
      if (hasDifficultyIndex) {
        output.WriteUInt64(1, field_names[0], DifficultyIndex);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDifficultyIndex) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, DifficultyIndex);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRegionDifficultyChange ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionDifficultyChange ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionDifficultyChange ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionDifficultyChange ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionDifficultyChange ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionDifficultyChange ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionDifficultyChange ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRegionDifficultyChange ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRegionDifficultyChange ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionDifficultyChange ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRegionDifficultyChange MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRegionDifficultyChange prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRegionDifficultyChange, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRegionDifficultyChange cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRegionDifficultyChange result;
      
      private NetMessageRegionDifficultyChange PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRegionDifficultyChange original = result;
          result = new NetMessageRegionDifficultyChange();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRegionDifficultyChange MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRegionDifficultyChange.Descriptor; }
      }
      
      public override NetMessageRegionDifficultyChange DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRegionDifficultyChange.DefaultInstance; }
      }
      
      public override NetMessageRegionDifficultyChange BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRegionDifficultyChange) {
          return MergeFrom((NetMessageRegionDifficultyChange) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRegionDifficultyChange other) {
        if (other == global::Gazillion.NetMessageRegionDifficultyChange.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDifficultyIndex) {
          DifficultyIndex = other.DifficultyIndex;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRegionDifficultyChangeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRegionDifficultyChangeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDifficultyIndex = input.ReadUInt64(ref result.difficultyIndex_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDifficultyIndex {
        get { return result.hasDifficultyIndex; }
      }
      public ulong DifficultyIndex {
        get { return result.DifficultyIndex; }
        set { SetDifficultyIndex(value); }
      }
      public Builder SetDifficultyIndex(ulong value) {
        PrepareBuilder();
        result.hasDifficultyIndex = true;
        result.difficultyIndex_ = value;
        return this;
      }
      public Builder ClearDifficultyIndex() {
        PrepareBuilder();
        result.hasDifficultyIndex = false;
        result.difficultyIndex_ = 0UL;
        return this;
      }
    }
    static NetMessageRegionDifficultyChange() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMetaGameWaveUpdate : pb::GeneratedMessage<NetMessageMetaGameWaveUpdate, NetMessageMetaGameWaveUpdate.Builder> {
    private NetMessageMetaGameWaveUpdate() { }
    private static readonly NetMessageMetaGameWaveUpdate defaultInstance = new NetMessageMetaGameWaveUpdate().MakeReadOnly();
    private static readonly string[] _netMessageMetaGameWaveUpdateFieldNames = new string[] { "currentWaveCount", "maxWaveCount", "metaGameId" };
    private static readonly uint[] _netMessageMetaGameWaveUpdateFieldTags = new uint[] { 8, 16, 24 };
    public static NetMessageMetaGameWaveUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMetaGameWaveUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMetaGameWaveUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMetaGameWaveUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMetaGameWaveUpdate, NetMessageMetaGameWaveUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMetaGameWaveUpdate__FieldAccessorTable; }
    }
    
    public const int CurrentWaveCountFieldNumber = 1;
    private bool hasCurrentWaveCount;
    private ulong currentWaveCount_;
    public bool HasCurrentWaveCount {
      get { return hasCurrentWaveCount; }
    }
    public ulong CurrentWaveCount {
      get { return currentWaveCount_; }
    }
    
    public const int MaxWaveCountFieldNumber = 2;
    private bool hasMaxWaveCount;
    private ulong maxWaveCount_;
    public bool HasMaxWaveCount {
      get { return hasMaxWaveCount; }
    }
    public ulong MaxWaveCount {
      get { return maxWaveCount_; }
    }
    
    public const int MetaGameIdFieldNumber = 3;
    private bool hasMetaGameId;
    private ulong metaGameId_;
    public bool HasMetaGameId {
      get { return hasMetaGameId; }
    }
    public ulong MetaGameId {
      get { return metaGameId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCurrentWaveCount) return false;
        if (!hasMaxWaveCount) return false;
        if (!hasMetaGameId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMetaGameWaveUpdateFieldNames;
      if (hasCurrentWaveCount) {
        output.WriteUInt64(1, field_names[0], CurrentWaveCount);
      }
      if (hasMaxWaveCount) {
        output.WriteUInt64(2, field_names[1], MaxWaveCount);
      }
      if (hasMetaGameId) {
        output.WriteUInt64(3, field_names[2], MetaGameId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCurrentWaveCount) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, CurrentWaveCount);
      }
      if (hasMaxWaveCount) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, MaxWaveCount);
      }
      if (hasMetaGameId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, MetaGameId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMetaGameWaveUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMetaGameWaveUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMetaGameWaveUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMetaGameWaveUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMetaGameWaveUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMetaGameWaveUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMetaGameWaveUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMetaGameWaveUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMetaGameWaveUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMetaGameWaveUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMetaGameWaveUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMetaGameWaveUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMetaGameWaveUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMetaGameWaveUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMetaGameWaveUpdate result;
      
      private NetMessageMetaGameWaveUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMetaGameWaveUpdate original = result;
          result = new NetMessageMetaGameWaveUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMetaGameWaveUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMetaGameWaveUpdate.Descriptor; }
      }
      
      public override NetMessageMetaGameWaveUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMetaGameWaveUpdate.DefaultInstance; }
      }
      
      public override NetMessageMetaGameWaveUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMetaGameWaveUpdate) {
          return MergeFrom((NetMessageMetaGameWaveUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMetaGameWaveUpdate other) {
        if (other == global::Gazillion.NetMessageMetaGameWaveUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCurrentWaveCount) {
          CurrentWaveCount = other.CurrentWaveCount;
        }
        if (other.HasMaxWaveCount) {
          MaxWaveCount = other.MaxWaveCount;
        }
        if (other.HasMetaGameId) {
          MetaGameId = other.MetaGameId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMetaGameWaveUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMetaGameWaveUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCurrentWaveCount = input.ReadUInt64(ref result.currentWaveCount_);
              break;
            }
            case 16: {
              result.hasMaxWaveCount = input.ReadUInt64(ref result.maxWaveCount_);
              break;
            }
            case 24: {
              result.hasMetaGameId = input.ReadUInt64(ref result.metaGameId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCurrentWaveCount {
        get { return result.hasCurrentWaveCount; }
      }
      public ulong CurrentWaveCount {
        get { return result.CurrentWaveCount; }
        set { SetCurrentWaveCount(value); }
      }
      public Builder SetCurrentWaveCount(ulong value) {
        PrepareBuilder();
        result.hasCurrentWaveCount = true;
        result.currentWaveCount_ = value;
        return this;
      }
      public Builder ClearCurrentWaveCount() {
        PrepareBuilder();
        result.hasCurrentWaveCount = false;
        result.currentWaveCount_ = 0UL;
        return this;
      }
      
      public bool HasMaxWaveCount {
        get { return result.hasMaxWaveCount; }
      }
      public ulong MaxWaveCount {
        get { return result.MaxWaveCount; }
        set { SetMaxWaveCount(value); }
      }
      public Builder SetMaxWaveCount(ulong value) {
        PrepareBuilder();
        result.hasMaxWaveCount = true;
        result.maxWaveCount_ = value;
        return this;
      }
      public Builder ClearMaxWaveCount() {
        PrepareBuilder();
        result.hasMaxWaveCount = false;
        result.maxWaveCount_ = 0UL;
        return this;
      }
      
      public bool HasMetaGameId {
        get { return result.hasMetaGameId; }
      }
      public ulong MetaGameId {
        get { return result.MetaGameId; }
        set { SetMetaGameId(value); }
      }
      public Builder SetMetaGameId(ulong value) {
        PrepareBuilder();
        result.hasMetaGameId = true;
        result.metaGameId_ = value;
        return this;
      }
      public Builder ClearMetaGameId() {
        PrepareBuilder();
        result.hasMetaGameId = false;
        result.metaGameId_ = 0UL;
        return this;
      }
    }
    static NetMessageMetaGameWaveUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePvEInstanceCrystalUpdate : pb::GeneratedMessage<NetMessagePvEInstanceCrystalUpdate, NetMessagePvEInstanceCrystalUpdate.Builder> {
    private NetMessagePvEInstanceCrystalUpdate() { }
    private static readonly NetMessagePvEInstanceCrystalUpdate defaultInstance = new NetMessagePvEInstanceCrystalUpdate().MakeReadOnly();
    private static readonly string[] _netMessagePvEInstanceCrystalUpdateFieldNames = new string[] { "currentCrystalCount", "maxCrystalCount", "metaGameId" };
    private static readonly uint[] _netMessagePvEInstanceCrystalUpdateFieldTags = new uint[] { 8, 16, 24 };
    public static NetMessagePvEInstanceCrystalUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePvEInstanceCrystalUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePvEInstanceCrystalUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvEInstanceCrystalUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePvEInstanceCrystalUpdate, NetMessagePvEInstanceCrystalUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvEInstanceCrystalUpdate__FieldAccessorTable; }
    }
    
    public const int CurrentCrystalCountFieldNumber = 1;
    private bool hasCurrentCrystalCount;
    private ulong currentCrystalCount_;
    public bool HasCurrentCrystalCount {
      get { return hasCurrentCrystalCount; }
    }
    public ulong CurrentCrystalCount {
      get { return currentCrystalCount_; }
    }
    
    public const int MaxCrystalCountFieldNumber = 2;
    private bool hasMaxCrystalCount;
    private ulong maxCrystalCount_;
    public bool HasMaxCrystalCount {
      get { return hasMaxCrystalCount; }
    }
    public ulong MaxCrystalCount {
      get { return maxCrystalCount_; }
    }
    
    public const int MetaGameIdFieldNumber = 3;
    private bool hasMetaGameId;
    private ulong metaGameId_;
    public bool HasMetaGameId {
      get { return hasMetaGameId; }
    }
    public ulong MetaGameId {
      get { return metaGameId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCurrentCrystalCount) return false;
        if (!hasMaxCrystalCount) return false;
        if (!hasMetaGameId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePvEInstanceCrystalUpdateFieldNames;
      if (hasCurrentCrystalCount) {
        output.WriteUInt64(1, field_names[0], CurrentCrystalCount);
      }
      if (hasMaxCrystalCount) {
        output.WriteUInt64(2, field_names[1], MaxCrystalCount);
      }
      if (hasMetaGameId) {
        output.WriteUInt64(3, field_names[2], MetaGameId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCurrentCrystalCount) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, CurrentCrystalCount);
      }
      if (hasMaxCrystalCount) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, MaxCrystalCount);
      }
      if (hasMetaGameId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, MetaGameId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePvEInstanceCrystalUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePvEInstanceCrystalUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePvEInstanceCrystalUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePvEInstanceCrystalUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePvEInstanceCrystalUpdate result;
      
      private NetMessagePvEInstanceCrystalUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePvEInstanceCrystalUpdate original = result;
          result = new NetMessagePvEInstanceCrystalUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePvEInstanceCrystalUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePvEInstanceCrystalUpdate.Descriptor; }
      }
      
      public override NetMessagePvEInstanceCrystalUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePvEInstanceCrystalUpdate.DefaultInstance; }
      }
      
      public override NetMessagePvEInstanceCrystalUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePvEInstanceCrystalUpdate) {
          return MergeFrom((NetMessagePvEInstanceCrystalUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePvEInstanceCrystalUpdate other) {
        if (other == global::Gazillion.NetMessagePvEInstanceCrystalUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCurrentCrystalCount) {
          CurrentCrystalCount = other.CurrentCrystalCount;
        }
        if (other.HasMaxCrystalCount) {
          MaxCrystalCount = other.MaxCrystalCount;
        }
        if (other.HasMetaGameId) {
          MetaGameId = other.MetaGameId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePvEInstanceCrystalUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePvEInstanceCrystalUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCurrentCrystalCount = input.ReadUInt64(ref result.currentCrystalCount_);
              break;
            }
            case 16: {
              result.hasMaxCrystalCount = input.ReadUInt64(ref result.maxCrystalCount_);
              break;
            }
            case 24: {
              result.hasMetaGameId = input.ReadUInt64(ref result.metaGameId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCurrentCrystalCount {
        get { return result.hasCurrentCrystalCount; }
      }
      public ulong CurrentCrystalCount {
        get { return result.CurrentCrystalCount; }
        set { SetCurrentCrystalCount(value); }
      }
      public Builder SetCurrentCrystalCount(ulong value) {
        PrepareBuilder();
        result.hasCurrentCrystalCount = true;
        result.currentCrystalCount_ = value;
        return this;
      }
      public Builder ClearCurrentCrystalCount() {
        PrepareBuilder();
        result.hasCurrentCrystalCount = false;
        result.currentCrystalCount_ = 0UL;
        return this;
      }
      
      public bool HasMaxCrystalCount {
        get { return result.hasMaxCrystalCount; }
      }
      public ulong MaxCrystalCount {
        get { return result.MaxCrystalCount; }
        set { SetMaxCrystalCount(value); }
      }
      public Builder SetMaxCrystalCount(ulong value) {
        PrepareBuilder();
        result.hasMaxCrystalCount = true;
        result.maxCrystalCount_ = value;
        return this;
      }
      public Builder ClearMaxCrystalCount() {
        PrepareBuilder();
        result.hasMaxCrystalCount = false;
        result.maxCrystalCount_ = 0UL;
        return this;
      }
      
      public bool HasMetaGameId {
        get { return result.hasMetaGameId; }
      }
      public ulong MetaGameId {
        get { return result.MetaGameId; }
        set { SetMetaGameId(value); }
      }
      public Builder SetMetaGameId(ulong value) {
        PrepareBuilder();
        result.hasMetaGameId = true;
        result.metaGameId_ = value;
        return this;
      }
      public Builder ClearMetaGameId() {
        PrepareBuilder();
        result.hasMetaGameId = false;
        result.metaGameId_ = 0UL;
        return this;
      }
    }
    static NetMessagePvEInstanceCrystalUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePvEInstanceDeathUpdate : pb::GeneratedMessage<NetMessagePvEInstanceDeathUpdate, NetMessagePvEInstanceDeathUpdate.Builder> {
    private NetMessagePvEInstanceDeathUpdate() { }
    private static readonly NetMessagePvEInstanceDeathUpdate defaultInstance = new NetMessagePvEInstanceDeathUpdate().MakeReadOnly();
    private static readonly string[] _netMessagePvEInstanceDeathUpdateFieldNames = new string[] { "currentDeathCount", "metaGameId" };
    private static readonly uint[] _netMessagePvEInstanceDeathUpdateFieldTags = new uint[] { 8, 16 };
    public static NetMessagePvEInstanceDeathUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePvEInstanceDeathUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePvEInstanceDeathUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvEInstanceDeathUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePvEInstanceDeathUpdate, NetMessagePvEInstanceDeathUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvEInstanceDeathUpdate__FieldAccessorTable; }
    }
    
    public const int CurrentDeathCountFieldNumber = 1;
    private bool hasCurrentDeathCount;
    private ulong currentDeathCount_;
    public bool HasCurrentDeathCount {
      get { return hasCurrentDeathCount; }
    }
    public ulong CurrentDeathCount {
      get { return currentDeathCount_; }
    }
    
    public const int MetaGameIdFieldNumber = 2;
    private bool hasMetaGameId;
    private ulong metaGameId_;
    public bool HasMetaGameId {
      get { return hasMetaGameId; }
    }
    public ulong MetaGameId {
      get { return metaGameId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCurrentDeathCount) return false;
        if (!hasMetaGameId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePvEInstanceDeathUpdateFieldNames;
      if (hasCurrentDeathCount) {
        output.WriteUInt64(1, field_names[0], CurrentDeathCount);
      }
      if (hasMetaGameId) {
        output.WriteUInt64(2, field_names[1], MetaGameId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCurrentDeathCount) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, CurrentDeathCount);
      }
      if (hasMetaGameId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, MetaGameId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePvEInstanceDeathUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvEInstanceDeathUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvEInstanceDeathUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvEInstanceDeathUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvEInstanceDeathUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvEInstanceDeathUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvEInstanceDeathUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePvEInstanceDeathUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePvEInstanceDeathUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvEInstanceDeathUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePvEInstanceDeathUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePvEInstanceDeathUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePvEInstanceDeathUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePvEInstanceDeathUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePvEInstanceDeathUpdate result;
      
      private NetMessagePvEInstanceDeathUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePvEInstanceDeathUpdate original = result;
          result = new NetMessagePvEInstanceDeathUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePvEInstanceDeathUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePvEInstanceDeathUpdate.Descriptor; }
      }
      
      public override NetMessagePvEInstanceDeathUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePvEInstanceDeathUpdate.DefaultInstance; }
      }
      
      public override NetMessagePvEInstanceDeathUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePvEInstanceDeathUpdate) {
          return MergeFrom((NetMessagePvEInstanceDeathUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePvEInstanceDeathUpdate other) {
        if (other == global::Gazillion.NetMessagePvEInstanceDeathUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCurrentDeathCount) {
          CurrentDeathCount = other.CurrentDeathCount;
        }
        if (other.HasMetaGameId) {
          MetaGameId = other.MetaGameId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePvEInstanceDeathUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePvEInstanceDeathUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCurrentDeathCount = input.ReadUInt64(ref result.currentDeathCount_);
              break;
            }
            case 16: {
              result.hasMetaGameId = input.ReadUInt64(ref result.metaGameId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCurrentDeathCount {
        get { return result.hasCurrentDeathCount; }
      }
      public ulong CurrentDeathCount {
        get { return result.CurrentDeathCount; }
        set { SetCurrentDeathCount(value); }
      }
      public Builder SetCurrentDeathCount(ulong value) {
        PrepareBuilder();
        result.hasCurrentDeathCount = true;
        result.currentDeathCount_ = value;
        return this;
      }
      public Builder ClearCurrentDeathCount() {
        PrepareBuilder();
        result.hasCurrentDeathCount = false;
        result.currentDeathCount_ = 0UL;
        return this;
      }
      
      public bool HasMetaGameId {
        get { return result.hasMetaGameId; }
      }
      public ulong MetaGameId {
        get { return result.MetaGameId; }
        set { SetMetaGameId(value); }
      }
      public Builder SetMetaGameId(ulong value) {
        PrepareBuilder();
        result.hasMetaGameId = true;
        result.metaGameId_ = value;
        return this;
      }
      public Builder ClearMetaGameId() {
        PrepareBuilder();
        result.hasMetaGameId = false;
        result.metaGameId_ = 0UL;
        return this;
      }
    }
    static NetMessagePvEInstanceDeathUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageShowTutorialTip : pb::GeneratedMessage<NetMessageShowTutorialTip, NetMessageShowTutorialTip.Builder> {
    private NetMessageShowTutorialTip() { }
    private static readonly NetMessageShowTutorialTip defaultInstance = new NetMessageShowTutorialTip().MakeReadOnly();
    private static readonly string[] _netMessageShowTutorialTipFieldNames = new string[] { "tipDataRefId" };
    private static readonly uint[] _netMessageShowTutorialTipFieldTags = new uint[] { 8 };
    public static NetMessageShowTutorialTip DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageShowTutorialTip DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageShowTutorialTip ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShowTutorialTip__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageShowTutorialTip, NetMessageShowTutorialTip.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShowTutorialTip__FieldAccessorTable; }
    }
    
    public const int TipDataRefIdFieldNumber = 1;
    private bool hasTipDataRefId;
    private ulong tipDataRefId_;
    public bool HasTipDataRefId {
      get { return hasTipDataRefId; }
    }
    public ulong TipDataRefId {
      get { return tipDataRefId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTipDataRefId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageShowTutorialTipFieldNames;
      if (hasTipDataRefId) {
        output.WriteUInt64(1, field_names[0], TipDataRefId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTipDataRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TipDataRefId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageShowTutorialTip ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShowTutorialTip ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowTutorialTip ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShowTutorialTip ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowTutorialTip ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShowTutorialTip ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowTutorialTip ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageShowTutorialTip ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageShowTutorialTip ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShowTutorialTip ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageShowTutorialTip MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageShowTutorialTip prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageShowTutorialTip, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageShowTutorialTip cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageShowTutorialTip result;
      
      private NetMessageShowTutorialTip PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageShowTutorialTip original = result;
          result = new NetMessageShowTutorialTip();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageShowTutorialTip MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageShowTutorialTip.Descriptor; }
      }
      
      public override NetMessageShowTutorialTip DefaultInstanceForType {
        get { return global::Gazillion.NetMessageShowTutorialTip.DefaultInstance; }
      }
      
      public override NetMessageShowTutorialTip BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageShowTutorialTip) {
          return MergeFrom((NetMessageShowTutorialTip) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageShowTutorialTip other) {
        if (other == global::Gazillion.NetMessageShowTutorialTip.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTipDataRefId) {
          TipDataRefId = other.TipDataRefId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageShowTutorialTipFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageShowTutorialTipFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTipDataRefId = input.ReadUInt64(ref result.tipDataRefId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTipDataRefId {
        get { return result.hasTipDataRefId; }
      }
      public ulong TipDataRefId {
        get { return result.TipDataRefId; }
        set { SetTipDataRefId(value); }
      }
      public Builder SetTipDataRefId(ulong value) {
        PrepareBuilder();
        result.hasTipDataRefId = true;
        result.tipDataRefId_ = value;
        return this;
      }
      public Builder ClearTipDataRefId() {
        PrepareBuilder();
        result.hasTipDataRefId = false;
        result.tipDataRefId_ = 0UL;
        return this;
      }
    }
    static NetMessageShowTutorialTip() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
