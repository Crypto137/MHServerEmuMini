// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Gazillion {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PubSubProtocol {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Gazillion_PubSubPublish__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.PubSubPublish, global::Gazillion.PubSubPublish.Builder> internal__static_Gazillion_PubSubPublish__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_PubSubSubscribe__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.PubSubSubscribe, global::Gazillion.PubSubSubscribe.Builder> internal__static_Gazillion_PubSubSubscribe__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_PubSubEventNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.PubSubEventNotification, global::Gazillion.PubSubEventNotification.Builder> internal__static_Gazillion_PubSubEventNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_PubSubOrderlyShutdown__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.PubSubOrderlyShutdown, global::Gazillion.PubSubOrderlyShutdown.Builder> internal__static_Gazillion_PubSubOrderlyShutdown__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static PubSubProtocol() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRQdWJTdWJQcm90b2NvbC5wcm90bxIJR2F6aWxsaW9uItUBCg1QdWJTdWJQ", 
            "dWJsaXNoEk4KCnNlcnZlclR5cGUYASABKA4yHC5HYXppbGxpb24uUHViU3Vi", 
            "U2VydmVyVHlwZXM6EE5VTV9TRVJWRVJfVFlQRVNSCnNlcnZlclR5cGUSKgoQ", 
            "c2VydmljZUlQQWRkcmVzcxgCIAEoCVIQc2VydmljZUlQQWRkcmVzcxIgCgtz", 
            "ZXJ2aWNlUG9ydBgDIAEoCVILc2VydmljZVBvcnQSJgoOc2VydmljZVZlcnNp", 
            "b24YBCABKAlSDnNlcnZpY2VWZXJzaW9uIrEBCg9QdWJTdWJTdWJzY3JpYmUS", 
            "TgoKc2VydmVyVHlwZRgBIAEoDjIcLkdhemlsbGlvbi5QdWJTdWJTZXJ2ZXJU", 
            "eXBlczoQTlVNX1NFUlZFUl9UWVBFU1IKc2VydmVyVHlwZRImCg5zdWJzY3Jp", 
            "cHRpb25JZBgCIAEoBVIOc3Vic2NyaXB0aW9uSWQSJgoOc2VydmljZVZlcnNp", 
            "b24YAyABKAlSDnNlcnZpY2VWZXJzaW9uIrcCChdQdWJTdWJFdmVudE5vdGlm", 
            "aWNhdGlvbhJOCgpzZXJ2ZXJUeXBlGAEgASgOMhwuR2F6aWxsaW9uLlB1YlN1", 
            "YlNlcnZlclR5cGVzOhBOVU1fU0VSVkVSX1RZUEVTUgpzZXJ2ZXJUeXBlEiYK", 
            "DnN1YnNjcmlwdGlvbklkGAIgASgFUg5zdWJzY3JpcHRpb25JZBIqChBzZXJ2", 
            "aWNlSVBBZGRyZXNzGAMgASgJUhBzZXJ2aWNlSVBBZGRyZXNzEiAKC3NlcnZp", 
            "Y2VQb3J0GAQgASgJUgtzZXJ2aWNlUG9ydBImCg5zZXJ2aWNlVmVyc2lvbhgF", 
            "IAEoCVIOc2VydmljZVZlcnNpb24SLgoScmVxdWVzdFJlc2lnbmF0aW9uGAYg", 
            "ASgIUhJyZXF1ZXN0UmVzaWduYXRpb24iYwoVUHViU3ViT3JkZXJseVNodXRk", 
            "b3duEhgKB21lc3NhZ2UYASABKAlSB21lc3NhZ2USMAoRbWludXRlc1RvU2h1", 
            "dGRvd24YAiABKAU6AjE1UhFtaW51dGVzVG9TaHV0ZG93birHAwoRUHViU3Vi", 
            "U2VydmVyVHlwZXMSEwoPRlJPTlRFTkRfU0VSVkVSEAASHQoZR0FNRV9JTlNU", 
            "QU5DRV9TRVJWRVJfVVNFUhABEiIKHkdBTUVfSU5TVEFOQ0VfU0VSVkVSX1BM", 
            "QVlFUk1HUhACEiEKHUdBTUVfSU5TVEFOQ0VfU0VSVkVSX0dST1VQSU5HEAMS", 
            "IAocR0FNRV9JTlNUQU5DRV9TRVJWRVJfTUVUUklDUxAEEiAKHEdBTUVfSU5T", 
            "VEFOQ0VfU0VSVkVSX0JJTExJTkcQChIeChpHQU1FX0lOU1RBTkNFX1NFUlZF", 
            "Ul9NQVRDSBALEh0KGVBMQVlFUk1HUl9TRVJWRVJfRlJPTlRFTkQQBRIkCiBQ", 
            "TEFZRVJNR1JfU0VSVkVSX1NJVEVNR1JfQ09OVFJPTBAGEiIKHlBMQVlFUk1H", 
            "Ul9TRVJWRVJfU09DSUFMX0NPTU1PThAHEhoKFlBMQVlFUk1HUl9TRVJWRVJf", 
            "TUFUQ0gQDBIdChlHUk9VUElOR19NQU5BR0VSX0ZST05URU5EEAgSGQoVRkFL", 
          "RV9DSEFUX0xPQURfVEVTVEVSEAkSFAoQTlVNX1NFUlZFUl9UWVBFUxAN"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Gazillion_PubSubPublish__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Gazillion_PubSubPublish__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.PubSubPublish, global::Gazillion.PubSubPublish.Builder>(internal__static_Gazillion_PubSubPublish__Descriptor,
                new string[] { "ServerType", "ServiceIPAddress", "ServicePort", "ServiceVersion", });
        internal__static_Gazillion_PubSubSubscribe__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Gazillion_PubSubSubscribe__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.PubSubSubscribe, global::Gazillion.PubSubSubscribe.Builder>(internal__static_Gazillion_PubSubSubscribe__Descriptor,
                new string[] { "ServerType", "SubscriptionId", "ServiceVersion", });
        internal__static_Gazillion_PubSubEventNotification__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Gazillion_PubSubEventNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.PubSubEventNotification, global::Gazillion.PubSubEventNotification.Builder>(internal__static_Gazillion_PubSubEventNotification__Descriptor,
                new string[] { "ServerType", "SubscriptionId", "ServiceIPAddress", "ServicePort", "ServiceVersion", "RequestResignation", });
        internal__static_Gazillion_PubSubOrderlyShutdown__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Gazillion_PubSubOrderlyShutdown__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.PubSubOrderlyShutdown, global::Gazillion.PubSubOrderlyShutdown.Builder>(internal__static_Gazillion_PubSubOrderlyShutdown__Descriptor,
                new string[] { "Message", "MinutesToShutdown", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum PubSubServerTypes {
    FRONTEND_SERVER = 0,
    GAME_INSTANCE_SERVER_USER = 1,
    GAME_INSTANCE_SERVER_PLAYERMGR = 2,
    GAME_INSTANCE_SERVER_GROUPING = 3,
    GAME_INSTANCE_SERVER_METRICS = 4,
    GAME_INSTANCE_SERVER_BILLING = 10,
    GAME_INSTANCE_SERVER_MATCH = 11,
    PLAYERMGR_SERVER_FRONTEND = 5,
    PLAYERMGR_SERVER_SITEMGR_CONTROL = 6,
    PLAYERMGR_SERVER_SOCIAL_COMMON = 7,
    PLAYERMGR_SERVER_MATCH = 12,
    GROUPING_MANAGER_FRONTEND = 8,
    FAKE_CHAT_LOAD_TESTER = 9,
    NUM_SERVER_TYPES = 13,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PubSubPublish : pb::GeneratedMessage<PubSubPublish, PubSubPublish.Builder> {
    private PubSubPublish() { }
    private static readonly PubSubPublish defaultInstance = new PubSubPublish().MakeReadOnly();
    private static readonly string[] _pubSubPublishFieldNames = new string[] { "serverType", "serviceIPAddress", "servicePort", "serviceVersion" };
    private static readonly uint[] _pubSubPublishFieldTags = new uint[] { 8, 18, 26, 34 };
    public static PubSubPublish DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PubSubPublish DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PubSubPublish ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.PubSubProtocol.internal__static_Gazillion_PubSubPublish__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PubSubPublish, PubSubPublish.Builder> InternalFieldAccessors {
      get { return global::Gazillion.PubSubProtocol.internal__static_Gazillion_PubSubPublish__FieldAccessorTable; }
    }
    
    public const int ServerTypeFieldNumber = 1;
    private bool hasServerType;
    private global::Gazillion.PubSubServerTypes serverType_ = global::Gazillion.PubSubServerTypes.NUM_SERVER_TYPES;
    public bool HasServerType {
      get { return hasServerType; }
    }
    public global::Gazillion.PubSubServerTypes ServerType {
      get { return serverType_; }
    }
    
    public const int ServiceIPAddressFieldNumber = 2;
    private bool hasServiceIPAddress;
    private string serviceIPAddress_ = "";
    public bool HasServiceIPAddress {
      get { return hasServiceIPAddress; }
    }
    public string ServiceIPAddress {
      get { return serviceIPAddress_; }
    }
    
    public const int ServicePortFieldNumber = 3;
    private bool hasServicePort;
    private string servicePort_ = "";
    public bool HasServicePort {
      get { return hasServicePort; }
    }
    public string ServicePort {
      get { return servicePort_; }
    }
    
    public const int ServiceVersionFieldNumber = 4;
    private bool hasServiceVersion;
    private string serviceVersion_ = "";
    public bool HasServiceVersion {
      get { return hasServiceVersion; }
    }
    public string ServiceVersion {
      get { return serviceVersion_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _pubSubPublishFieldNames;
      if (hasServerType) {
        output.WriteEnum(1, field_names[0], (int) ServerType, ServerType);
      }
      if (hasServiceIPAddress) {
        output.WriteString(2, field_names[1], ServiceIPAddress);
      }
      if (hasServicePort) {
        output.WriteString(3, field_names[2], ServicePort);
      }
      if (hasServiceVersion) {
        output.WriteString(4, field_names[3], ServiceVersion);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasServerType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) ServerType);
      }
      if (hasServiceIPAddress) {
        size += pb::CodedOutputStream.ComputeStringSize(2, ServiceIPAddress);
      }
      if (hasServicePort) {
        size += pb::CodedOutputStream.ComputeStringSize(3, ServicePort);
      }
      if (hasServiceVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(4, ServiceVersion);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PubSubPublish ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PubSubPublish ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PubSubPublish ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PubSubPublish ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PubSubPublish ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PubSubPublish ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PubSubPublish ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PubSubPublish ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PubSubPublish ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PubSubPublish ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PubSubPublish MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PubSubPublish prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PubSubPublish, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PubSubPublish cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PubSubPublish result;
      
      private PubSubPublish PrepareBuilder() {
        if (resultIsReadOnly) {
          PubSubPublish original = result;
          result = new PubSubPublish();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PubSubPublish MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.PubSubPublish.Descriptor; }
      }
      
      public override PubSubPublish DefaultInstanceForType {
        get { return global::Gazillion.PubSubPublish.DefaultInstance; }
      }
      
      public override PubSubPublish BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PubSubPublish) {
          return MergeFrom((PubSubPublish) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PubSubPublish other) {
        if (other == global::Gazillion.PubSubPublish.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServerType) {
          ServerType = other.ServerType;
        }
        if (other.HasServiceIPAddress) {
          ServiceIPAddress = other.ServiceIPAddress;
        }
        if (other.HasServicePort) {
          ServicePort = other.ServicePort;
        }
        if (other.HasServiceVersion) {
          ServiceVersion = other.ServiceVersion;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pubSubPublishFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pubSubPublishFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.serverType_, out unknown)) {
                result.hasServerType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasServiceIPAddress = input.ReadString(ref result.serviceIPAddress_);
              break;
            }
            case 26: {
              result.hasServicePort = input.ReadString(ref result.servicePort_);
              break;
            }
            case 34: {
              result.hasServiceVersion = input.ReadString(ref result.serviceVersion_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasServerType {
       get { return result.hasServerType; }
      }
      public global::Gazillion.PubSubServerTypes ServerType {
        get { return result.ServerType; }
        set { SetServerType(value); }
      }
      public Builder SetServerType(global::Gazillion.PubSubServerTypes value) {
        PrepareBuilder();
        result.hasServerType = true;
        result.serverType_ = value;
        return this;
      }
      public Builder ClearServerType() {
        PrepareBuilder();
        result.hasServerType = false;
        result.serverType_ = global::Gazillion.PubSubServerTypes.NUM_SERVER_TYPES;
        return this;
      }
      
      public bool HasServiceIPAddress {
        get { return result.hasServiceIPAddress; }
      }
      public string ServiceIPAddress {
        get { return result.ServiceIPAddress; }
        set { SetServiceIPAddress(value); }
      }
      public Builder SetServiceIPAddress(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServiceIPAddress = true;
        result.serviceIPAddress_ = value;
        return this;
      }
      public Builder ClearServiceIPAddress() {
        PrepareBuilder();
        result.hasServiceIPAddress = false;
        result.serviceIPAddress_ = "";
        return this;
      }
      
      public bool HasServicePort {
        get { return result.hasServicePort; }
      }
      public string ServicePort {
        get { return result.ServicePort; }
        set { SetServicePort(value); }
      }
      public Builder SetServicePort(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServicePort = true;
        result.servicePort_ = value;
        return this;
      }
      public Builder ClearServicePort() {
        PrepareBuilder();
        result.hasServicePort = false;
        result.servicePort_ = "";
        return this;
      }
      
      public bool HasServiceVersion {
        get { return result.hasServiceVersion; }
      }
      public string ServiceVersion {
        get { return result.ServiceVersion; }
        set { SetServiceVersion(value); }
      }
      public Builder SetServiceVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServiceVersion = true;
        result.serviceVersion_ = value;
        return this;
      }
      public Builder ClearServiceVersion() {
        PrepareBuilder();
        result.hasServiceVersion = false;
        result.serviceVersion_ = "";
        return this;
      }
    }
    static PubSubPublish() {
      object.ReferenceEquals(global::Gazillion.PubSubProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PubSubSubscribe : pb::GeneratedMessage<PubSubSubscribe, PubSubSubscribe.Builder> {
    private PubSubSubscribe() { }
    private static readonly PubSubSubscribe defaultInstance = new PubSubSubscribe().MakeReadOnly();
    private static readonly string[] _pubSubSubscribeFieldNames = new string[] { "serverType", "serviceVersion", "subscriptionId" };
    private static readonly uint[] _pubSubSubscribeFieldTags = new uint[] { 8, 26, 16 };
    public static PubSubSubscribe DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PubSubSubscribe DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PubSubSubscribe ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.PubSubProtocol.internal__static_Gazillion_PubSubSubscribe__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PubSubSubscribe, PubSubSubscribe.Builder> InternalFieldAccessors {
      get { return global::Gazillion.PubSubProtocol.internal__static_Gazillion_PubSubSubscribe__FieldAccessorTable; }
    }
    
    public const int ServerTypeFieldNumber = 1;
    private bool hasServerType;
    private global::Gazillion.PubSubServerTypes serverType_ = global::Gazillion.PubSubServerTypes.NUM_SERVER_TYPES;
    public bool HasServerType {
      get { return hasServerType; }
    }
    public global::Gazillion.PubSubServerTypes ServerType {
      get { return serverType_; }
    }
    
    public const int SubscriptionIdFieldNumber = 2;
    private bool hasSubscriptionId;
    private int subscriptionId_;
    public bool HasSubscriptionId {
      get { return hasSubscriptionId; }
    }
    public int SubscriptionId {
      get { return subscriptionId_; }
    }
    
    public const int ServiceVersionFieldNumber = 3;
    private bool hasServiceVersion;
    private string serviceVersion_ = "";
    public bool HasServiceVersion {
      get { return hasServiceVersion; }
    }
    public string ServiceVersion {
      get { return serviceVersion_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _pubSubSubscribeFieldNames;
      if (hasServerType) {
        output.WriteEnum(1, field_names[0], (int) ServerType, ServerType);
      }
      if (hasSubscriptionId) {
        output.WriteInt32(2, field_names[2], SubscriptionId);
      }
      if (hasServiceVersion) {
        output.WriteString(3, field_names[1], ServiceVersion);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasServerType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) ServerType);
      }
      if (hasSubscriptionId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, SubscriptionId);
      }
      if (hasServiceVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(3, ServiceVersion);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PubSubSubscribe ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PubSubSubscribe ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PubSubSubscribe ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PubSubSubscribe ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PubSubSubscribe ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PubSubSubscribe ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PubSubSubscribe ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PubSubSubscribe ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PubSubSubscribe ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PubSubSubscribe ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PubSubSubscribe MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PubSubSubscribe prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PubSubSubscribe, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PubSubSubscribe cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PubSubSubscribe result;
      
      private PubSubSubscribe PrepareBuilder() {
        if (resultIsReadOnly) {
          PubSubSubscribe original = result;
          result = new PubSubSubscribe();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PubSubSubscribe MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.PubSubSubscribe.Descriptor; }
      }
      
      public override PubSubSubscribe DefaultInstanceForType {
        get { return global::Gazillion.PubSubSubscribe.DefaultInstance; }
      }
      
      public override PubSubSubscribe BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PubSubSubscribe) {
          return MergeFrom((PubSubSubscribe) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PubSubSubscribe other) {
        if (other == global::Gazillion.PubSubSubscribe.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServerType) {
          ServerType = other.ServerType;
        }
        if (other.HasSubscriptionId) {
          SubscriptionId = other.SubscriptionId;
        }
        if (other.HasServiceVersion) {
          ServiceVersion = other.ServiceVersion;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pubSubSubscribeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pubSubSubscribeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.serverType_, out unknown)) {
                result.hasServerType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              result.hasSubscriptionId = input.ReadInt32(ref result.subscriptionId_);
              break;
            }
            case 26: {
              result.hasServiceVersion = input.ReadString(ref result.serviceVersion_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasServerType {
       get { return result.hasServerType; }
      }
      public global::Gazillion.PubSubServerTypes ServerType {
        get { return result.ServerType; }
        set { SetServerType(value); }
      }
      public Builder SetServerType(global::Gazillion.PubSubServerTypes value) {
        PrepareBuilder();
        result.hasServerType = true;
        result.serverType_ = value;
        return this;
      }
      public Builder ClearServerType() {
        PrepareBuilder();
        result.hasServerType = false;
        result.serverType_ = global::Gazillion.PubSubServerTypes.NUM_SERVER_TYPES;
        return this;
      }
      
      public bool HasSubscriptionId {
        get { return result.hasSubscriptionId; }
      }
      public int SubscriptionId {
        get { return result.SubscriptionId; }
        set { SetSubscriptionId(value); }
      }
      public Builder SetSubscriptionId(int value) {
        PrepareBuilder();
        result.hasSubscriptionId = true;
        result.subscriptionId_ = value;
        return this;
      }
      public Builder ClearSubscriptionId() {
        PrepareBuilder();
        result.hasSubscriptionId = false;
        result.subscriptionId_ = 0;
        return this;
      }
      
      public bool HasServiceVersion {
        get { return result.hasServiceVersion; }
      }
      public string ServiceVersion {
        get { return result.ServiceVersion; }
        set { SetServiceVersion(value); }
      }
      public Builder SetServiceVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServiceVersion = true;
        result.serviceVersion_ = value;
        return this;
      }
      public Builder ClearServiceVersion() {
        PrepareBuilder();
        result.hasServiceVersion = false;
        result.serviceVersion_ = "";
        return this;
      }
    }
    static PubSubSubscribe() {
      object.ReferenceEquals(global::Gazillion.PubSubProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PubSubEventNotification : pb::GeneratedMessage<PubSubEventNotification, PubSubEventNotification.Builder> {
    private PubSubEventNotification() { }
    private static readonly PubSubEventNotification defaultInstance = new PubSubEventNotification().MakeReadOnly();
    private static readonly string[] _pubSubEventNotificationFieldNames = new string[] { "requestResignation", "serverType", "serviceIPAddress", "servicePort", "serviceVersion", "subscriptionId" };
    private static readonly uint[] _pubSubEventNotificationFieldTags = new uint[] { 48, 8, 26, 34, 42, 16 };
    public static PubSubEventNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PubSubEventNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PubSubEventNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.PubSubProtocol.internal__static_Gazillion_PubSubEventNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PubSubEventNotification, PubSubEventNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.PubSubProtocol.internal__static_Gazillion_PubSubEventNotification__FieldAccessorTable; }
    }
    
    public const int ServerTypeFieldNumber = 1;
    private bool hasServerType;
    private global::Gazillion.PubSubServerTypes serverType_ = global::Gazillion.PubSubServerTypes.NUM_SERVER_TYPES;
    public bool HasServerType {
      get { return hasServerType; }
    }
    public global::Gazillion.PubSubServerTypes ServerType {
      get { return serverType_; }
    }
    
    public const int SubscriptionIdFieldNumber = 2;
    private bool hasSubscriptionId;
    private int subscriptionId_;
    public bool HasSubscriptionId {
      get { return hasSubscriptionId; }
    }
    public int SubscriptionId {
      get { return subscriptionId_; }
    }
    
    public const int ServiceIPAddressFieldNumber = 3;
    private bool hasServiceIPAddress;
    private string serviceIPAddress_ = "";
    public bool HasServiceIPAddress {
      get { return hasServiceIPAddress; }
    }
    public string ServiceIPAddress {
      get { return serviceIPAddress_; }
    }
    
    public const int ServicePortFieldNumber = 4;
    private bool hasServicePort;
    private string servicePort_ = "";
    public bool HasServicePort {
      get { return hasServicePort; }
    }
    public string ServicePort {
      get { return servicePort_; }
    }
    
    public const int ServiceVersionFieldNumber = 5;
    private bool hasServiceVersion;
    private string serviceVersion_ = "";
    public bool HasServiceVersion {
      get { return hasServiceVersion; }
    }
    public string ServiceVersion {
      get { return serviceVersion_; }
    }
    
    public const int RequestResignationFieldNumber = 6;
    private bool hasRequestResignation;
    private bool requestResignation_;
    public bool HasRequestResignation {
      get { return hasRequestResignation; }
    }
    public bool RequestResignation {
      get { return requestResignation_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _pubSubEventNotificationFieldNames;
      if (hasServerType) {
        output.WriteEnum(1, field_names[1], (int) ServerType, ServerType);
      }
      if (hasSubscriptionId) {
        output.WriteInt32(2, field_names[5], SubscriptionId);
      }
      if (hasServiceIPAddress) {
        output.WriteString(3, field_names[2], ServiceIPAddress);
      }
      if (hasServicePort) {
        output.WriteString(4, field_names[3], ServicePort);
      }
      if (hasServiceVersion) {
        output.WriteString(5, field_names[4], ServiceVersion);
      }
      if (hasRequestResignation) {
        output.WriteBool(6, field_names[0], RequestResignation);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasServerType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) ServerType);
      }
      if (hasSubscriptionId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, SubscriptionId);
      }
      if (hasServiceIPAddress) {
        size += pb::CodedOutputStream.ComputeStringSize(3, ServiceIPAddress);
      }
      if (hasServicePort) {
        size += pb::CodedOutputStream.ComputeStringSize(4, ServicePort);
      }
      if (hasServiceVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(5, ServiceVersion);
      }
      if (hasRequestResignation) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, RequestResignation);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PubSubEventNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PubSubEventNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PubSubEventNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PubSubEventNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PubSubEventNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PubSubEventNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PubSubEventNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PubSubEventNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PubSubEventNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PubSubEventNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PubSubEventNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PubSubEventNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PubSubEventNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PubSubEventNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PubSubEventNotification result;
      
      private PubSubEventNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          PubSubEventNotification original = result;
          result = new PubSubEventNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PubSubEventNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.PubSubEventNotification.Descriptor; }
      }
      
      public override PubSubEventNotification DefaultInstanceForType {
        get { return global::Gazillion.PubSubEventNotification.DefaultInstance; }
      }
      
      public override PubSubEventNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PubSubEventNotification) {
          return MergeFrom((PubSubEventNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PubSubEventNotification other) {
        if (other == global::Gazillion.PubSubEventNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServerType) {
          ServerType = other.ServerType;
        }
        if (other.HasSubscriptionId) {
          SubscriptionId = other.SubscriptionId;
        }
        if (other.HasServiceIPAddress) {
          ServiceIPAddress = other.ServiceIPAddress;
        }
        if (other.HasServicePort) {
          ServicePort = other.ServicePort;
        }
        if (other.HasServiceVersion) {
          ServiceVersion = other.ServiceVersion;
        }
        if (other.HasRequestResignation) {
          RequestResignation = other.RequestResignation;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pubSubEventNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pubSubEventNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.serverType_, out unknown)) {
                result.hasServerType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              result.hasSubscriptionId = input.ReadInt32(ref result.subscriptionId_);
              break;
            }
            case 26: {
              result.hasServiceIPAddress = input.ReadString(ref result.serviceIPAddress_);
              break;
            }
            case 34: {
              result.hasServicePort = input.ReadString(ref result.servicePort_);
              break;
            }
            case 42: {
              result.hasServiceVersion = input.ReadString(ref result.serviceVersion_);
              break;
            }
            case 48: {
              result.hasRequestResignation = input.ReadBool(ref result.requestResignation_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasServerType {
       get { return result.hasServerType; }
      }
      public global::Gazillion.PubSubServerTypes ServerType {
        get { return result.ServerType; }
        set { SetServerType(value); }
      }
      public Builder SetServerType(global::Gazillion.PubSubServerTypes value) {
        PrepareBuilder();
        result.hasServerType = true;
        result.serverType_ = value;
        return this;
      }
      public Builder ClearServerType() {
        PrepareBuilder();
        result.hasServerType = false;
        result.serverType_ = global::Gazillion.PubSubServerTypes.NUM_SERVER_TYPES;
        return this;
      }
      
      public bool HasSubscriptionId {
        get { return result.hasSubscriptionId; }
      }
      public int SubscriptionId {
        get { return result.SubscriptionId; }
        set { SetSubscriptionId(value); }
      }
      public Builder SetSubscriptionId(int value) {
        PrepareBuilder();
        result.hasSubscriptionId = true;
        result.subscriptionId_ = value;
        return this;
      }
      public Builder ClearSubscriptionId() {
        PrepareBuilder();
        result.hasSubscriptionId = false;
        result.subscriptionId_ = 0;
        return this;
      }
      
      public bool HasServiceIPAddress {
        get { return result.hasServiceIPAddress; }
      }
      public string ServiceIPAddress {
        get { return result.ServiceIPAddress; }
        set { SetServiceIPAddress(value); }
      }
      public Builder SetServiceIPAddress(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServiceIPAddress = true;
        result.serviceIPAddress_ = value;
        return this;
      }
      public Builder ClearServiceIPAddress() {
        PrepareBuilder();
        result.hasServiceIPAddress = false;
        result.serviceIPAddress_ = "";
        return this;
      }
      
      public bool HasServicePort {
        get { return result.hasServicePort; }
      }
      public string ServicePort {
        get { return result.ServicePort; }
        set { SetServicePort(value); }
      }
      public Builder SetServicePort(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServicePort = true;
        result.servicePort_ = value;
        return this;
      }
      public Builder ClearServicePort() {
        PrepareBuilder();
        result.hasServicePort = false;
        result.servicePort_ = "";
        return this;
      }
      
      public bool HasServiceVersion {
        get { return result.hasServiceVersion; }
      }
      public string ServiceVersion {
        get { return result.ServiceVersion; }
        set { SetServiceVersion(value); }
      }
      public Builder SetServiceVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServiceVersion = true;
        result.serviceVersion_ = value;
        return this;
      }
      public Builder ClearServiceVersion() {
        PrepareBuilder();
        result.hasServiceVersion = false;
        result.serviceVersion_ = "";
        return this;
      }
      
      public bool HasRequestResignation {
        get { return result.hasRequestResignation; }
      }
      public bool RequestResignation {
        get { return result.RequestResignation; }
        set { SetRequestResignation(value); }
      }
      public Builder SetRequestResignation(bool value) {
        PrepareBuilder();
        result.hasRequestResignation = true;
        result.requestResignation_ = value;
        return this;
      }
      public Builder ClearRequestResignation() {
        PrepareBuilder();
        result.hasRequestResignation = false;
        result.requestResignation_ = false;
        return this;
      }
    }
    static PubSubEventNotification() {
      object.ReferenceEquals(global::Gazillion.PubSubProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PubSubOrderlyShutdown : pb::GeneratedMessage<PubSubOrderlyShutdown, PubSubOrderlyShutdown.Builder> {
    private PubSubOrderlyShutdown() { }
    private static readonly PubSubOrderlyShutdown defaultInstance = new PubSubOrderlyShutdown().MakeReadOnly();
    private static readonly string[] _pubSubOrderlyShutdownFieldNames = new string[] { "message", "minutesToShutdown" };
    private static readonly uint[] _pubSubOrderlyShutdownFieldTags = new uint[] { 10, 16 };
    public static PubSubOrderlyShutdown DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PubSubOrderlyShutdown DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PubSubOrderlyShutdown ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.PubSubProtocol.internal__static_Gazillion_PubSubOrderlyShutdown__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PubSubOrderlyShutdown, PubSubOrderlyShutdown.Builder> InternalFieldAccessors {
      get { return global::Gazillion.PubSubProtocol.internal__static_Gazillion_PubSubOrderlyShutdown__FieldAccessorTable; }
    }
    
    public const int MessageFieldNumber = 1;
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public const int MinutesToShutdownFieldNumber = 2;
    private bool hasMinutesToShutdown;
    private int minutesToShutdown_ = 15;
    public bool HasMinutesToShutdown {
      get { return hasMinutesToShutdown; }
    }
    public int MinutesToShutdown {
      get { return minutesToShutdown_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _pubSubOrderlyShutdownFieldNames;
      if (hasMessage) {
        output.WriteString(1, field_names[0], Message);
      }
      if (hasMinutesToShutdown) {
        output.WriteInt32(2, field_names[1], MinutesToShutdown);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMessage) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Message);
      }
      if (hasMinutesToShutdown) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, MinutesToShutdown);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PubSubOrderlyShutdown ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PubSubOrderlyShutdown ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PubSubOrderlyShutdown ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PubSubOrderlyShutdown ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PubSubOrderlyShutdown ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PubSubOrderlyShutdown ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PubSubOrderlyShutdown ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PubSubOrderlyShutdown ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PubSubOrderlyShutdown ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PubSubOrderlyShutdown ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PubSubOrderlyShutdown MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PubSubOrderlyShutdown prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PubSubOrderlyShutdown, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PubSubOrderlyShutdown cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PubSubOrderlyShutdown result;
      
      private PubSubOrderlyShutdown PrepareBuilder() {
        if (resultIsReadOnly) {
          PubSubOrderlyShutdown original = result;
          result = new PubSubOrderlyShutdown();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PubSubOrderlyShutdown MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.PubSubOrderlyShutdown.Descriptor; }
      }
      
      public override PubSubOrderlyShutdown DefaultInstanceForType {
        get { return global::Gazillion.PubSubOrderlyShutdown.DefaultInstance; }
      }
      
      public override PubSubOrderlyShutdown BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PubSubOrderlyShutdown) {
          return MergeFrom((PubSubOrderlyShutdown) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PubSubOrderlyShutdown other) {
        if (other == global::Gazillion.PubSubOrderlyShutdown.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessage) {
          Message = other.Message;
        }
        if (other.HasMinutesToShutdown) {
          MinutesToShutdown = other.MinutesToShutdown;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pubSubOrderlyShutdownFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pubSubOrderlyShutdownFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessage = input.ReadString(ref result.message_);
              break;
            }
            case 16: {
              result.hasMinutesToShutdown = input.ReadInt32(ref result.minutesToShutdown_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessage {
        get { return result.hasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
      
      public bool HasMinutesToShutdown {
        get { return result.hasMinutesToShutdown; }
      }
      public int MinutesToShutdown {
        get { return result.MinutesToShutdown; }
        set { SetMinutesToShutdown(value); }
      }
      public Builder SetMinutesToShutdown(int value) {
        PrepareBuilder();
        result.hasMinutesToShutdown = true;
        result.minutesToShutdown_ = value;
        return this;
      }
      public Builder ClearMinutesToShutdown() {
        PrepareBuilder();
        result.hasMinutesToShutdown = false;
        result.minutesToShutdown_ = 15;
        return this;
      }
    }
    static PubSubOrderlyShutdown() {
      object.ReferenceEquals(global::Gazillion.PubSubProtocol.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
